// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketdata.proto

package marketdata

import (
session "github.com/ettec/open-trading-platform/go/market-data-gateway-fixsim/internal/fix/session"
	common "github.com/ettec/open-trading-platform/go/market-data-gateway-fixsim/internal/fix/common"
	fix "github.com/ettec/open-trading-platform/go/market-data-gateway-fixsim/internal/fix/fix"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MDEntryTypeEnum int32

const (
	MDEntryTypeEnum_MD_ENTRY_TYPE_UNSPECIFIED                                     MDEntryTypeEnum = 0
	MDEntryTypeEnum_MD_ENTRY_TYPE_BID                                             MDEntryTypeEnum = 1
	MDEntryTypeEnum_MD_ENTRY_TYPE_CLOSING_PRICE                                   MDEntryTypeEnum = 2
	MDEntryTypeEnum_MD_ENTRY_TYPE_INDEX_VALUE                                     MDEntryTypeEnum = 3
	MDEntryTypeEnum_MD_ENTRY_TYPE_OFFER                                           MDEntryTypeEnum = 4
	MDEntryTypeEnum_MD_ENTRY_TYPE_OPENING_PRICE                                   MDEntryTypeEnum = 5
	MDEntryTypeEnum_MD_ENTRY_TYPE_SETTLEMENT_PRICE                                MDEntryTypeEnum = 6
	MDEntryTypeEnum_MD_ENTRY_TYPE_TRADE                                           MDEntryTypeEnum = 7
	MDEntryTypeEnum_MD_ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE                      MDEntryTypeEnum = 8
	MDEntryTypeEnum_MD_ENTRY_TYPE_TRADING_SESSION_LOW_PRICE                       MDEntryTypeEnum = 9
	MDEntryTypeEnum_MD_ENTRY_TYPE_TRADING_SESSION_VWAPPRICE                       MDEntryTypeEnum = 10
	MDEntryTypeEnum_MD_ENTRY_TYPE_IMBALANCE                                       MDEntryTypeEnum = 11
	MDEntryTypeEnum_MD_ENTRY_TYPE_OPEN_INTEREST                                   MDEntryTypeEnum = 12
	MDEntryTypeEnum_MD_ENTRY_TYPE_TRADE_VOLUME                                    MDEntryTypeEnum = 13
	MDEntryTypeEnum_MD_ENTRY_TYPE_COMPOSITE_UNDERLYING_PRICE                      MDEntryTypeEnum = 14
	MDEntryTypeEnum_MD_ENTRY_TYPE_EMPTY_BOOK                                      MDEntryTypeEnum = 15
	MDEntryTypeEnum_MD_ENTRY_TYPE_MARGIN_RATE                                     MDEntryTypeEnum = 16
	MDEntryTypeEnum_MD_ENTRY_TYPE_MID_PRICE                                       MDEntryTypeEnum = 17
	MDEntryTypeEnum_MD_ENTRY_TYPE_PRIOR_SETTLE_PRICE                              MDEntryTypeEnum = 18
	MDEntryTypeEnum_MD_ENTRY_TYPE_SESSION_HIGH_BID                                MDEntryTypeEnum = 19
	MDEntryTypeEnum_MD_ENTRY_TYPE_SESSION_LOW_OFFER                               MDEntryTypeEnum = 20
	MDEntryTypeEnum_MD_ENTRY_TYPE_SETTLE_HIGH_PRICE                               MDEntryTypeEnum = 21
	MDEntryTypeEnum_MD_ENTRY_TYPE_SETTLE_LOW_PRICE                                MDEntryTypeEnum = 22
	MDEntryTypeEnum_MD_ENTRY_TYPE_SIMULATED_BUY_PRICE                             MDEntryTypeEnum = 23
	MDEntryTypeEnum_MD_ENTRY_TYPE_SIMULATED_SELL_PRICE                            MDEntryTypeEnum = 24
	MDEntryTypeEnum_MD_ENTRY_TYPE_EARLY_PRICES                                    MDEntryTypeEnum = 25
	MDEntryTypeEnum_MD_ENTRY_TYPE_AUCTION_CLEARING_PRICE                          MDEntryTypeEnum = 26
	MDEntryTypeEnum_MD_ENTRY_TYPE_SWAP_VALUE_FACTOR                               MDEntryTypeEnum = 27
	MDEntryTypeEnum_MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS  MDEntryTypeEnum = 28
	MDEntryTypeEnum_MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS MDEntryTypeEnum = 29
	MDEntryTypeEnum_MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS       MDEntryTypeEnum = 30
	MDEntryTypeEnum_MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS      MDEntryTypeEnum = 31
	MDEntryTypeEnum_MD_ENTRY_TYPE_RECOVERY_RATE                                   MDEntryTypeEnum = 32
	MDEntryTypeEnum_MD_ENTRY_TYPE_RECOVERY_RATE_FOR_LONG                          MDEntryTypeEnum = 33
	MDEntryTypeEnum_MD_ENTRY_TYPE_RECOVERY_RATE_FOR_SHORT                         MDEntryTypeEnum = 34
	MDEntryTypeEnum_MD_ENTRY_TYPE_CASH_RATE                                       MDEntryTypeEnum = 35
	MDEntryTypeEnum_MD_ENTRY_TYPE_FIXING_PRICE                                    MDEntryTypeEnum = 36
)

var MDEntryTypeEnum_name = map[int32]string{
	0:  "MD_ENTRY_TYPE_UNSPECIFIED",
	1:  "MD_ENTRY_TYPE_BID",
	2:  "MD_ENTRY_TYPE_CLOSING_PRICE",
	3:  "MD_ENTRY_TYPE_INDEX_VALUE",
	4:  "MD_ENTRY_TYPE_OFFER",
	5:  "MD_ENTRY_TYPE_OPENING_PRICE",
	6:  "MD_ENTRY_TYPE_SETTLEMENT_PRICE",
	7:  "MD_ENTRY_TYPE_TRADE",
	8:  "MD_ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE",
	9:  "MD_ENTRY_TYPE_TRADING_SESSION_LOW_PRICE",
	10: "MD_ENTRY_TYPE_TRADING_SESSION_VWAPPRICE",
	11: "MD_ENTRY_TYPE_IMBALANCE",
	12: "MD_ENTRY_TYPE_OPEN_INTEREST",
	13: "MD_ENTRY_TYPE_TRADE_VOLUME",
	14: "MD_ENTRY_TYPE_COMPOSITE_UNDERLYING_PRICE",
	15: "MD_ENTRY_TYPE_EMPTY_BOOK",
	16: "MD_ENTRY_TYPE_MARGIN_RATE",
	17: "MD_ENTRY_TYPE_MID_PRICE",
	18: "MD_ENTRY_TYPE_PRIOR_SETTLE_PRICE",
	19: "MD_ENTRY_TYPE_SESSION_HIGH_BID",
	20: "MD_ENTRY_TYPE_SESSION_LOW_OFFER",
	21: "MD_ENTRY_TYPE_SETTLE_HIGH_PRICE",
	22: "MD_ENTRY_TYPE_SETTLE_LOW_PRICE",
	23: "MD_ENTRY_TYPE_SIMULATED_BUY_PRICE",
	24: "MD_ENTRY_TYPE_SIMULATED_SELL_PRICE",
	25: "MD_ENTRY_TYPE_EARLY_PRICES",
	26: "MD_ENTRY_TYPE_AUCTION_CLEARING_PRICE",
	27: "MD_ENTRY_TYPE_SWAP_VALUE_FACTOR",
	28: "MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS",
	29: "MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS",
	30: "MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS",
	31: "MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS",
	32: "MD_ENTRY_TYPE_RECOVERY_RATE",
	33: "MD_ENTRY_TYPE_RECOVERY_RATE_FOR_LONG",
	34: "MD_ENTRY_TYPE_RECOVERY_RATE_FOR_SHORT",
	35: "MD_ENTRY_TYPE_CASH_RATE",
	36: "MD_ENTRY_TYPE_FIXING_PRICE",
}

var MDEntryTypeEnum_value = map[string]int32{
	"MD_ENTRY_TYPE_UNSPECIFIED":                                     0,
	"MD_ENTRY_TYPE_BID":                                             1,
	"MD_ENTRY_TYPE_CLOSING_PRICE":                                   2,
	"MD_ENTRY_TYPE_INDEX_VALUE":                                     3,
	"MD_ENTRY_TYPE_OFFER":                                           4,
	"MD_ENTRY_TYPE_OPENING_PRICE":                                   5,
	"MD_ENTRY_TYPE_SETTLEMENT_PRICE":                                6,
	"MD_ENTRY_TYPE_TRADE":                                           7,
	"MD_ENTRY_TYPE_TRADING_SESSION_HIGH_PRICE":                      8,
	"MD_ENTRY_TYPE_TRADING_SESSION_LOW_PRICE":                       9,
	"MD_ENTRY_TYPE_TRADING_SESSION_VWAPPRICE":                       10,
	"MD_ENTRY_TYPE_IMBALANCE":                                       11,
	"MD_ENTRY_TYPE_OPEN_INTEREST":                                   12,
	"MD_ENTRY_TYPE_TRADE_VOLUME":                                    13,
	"MD_ENTRY_TYPE_COMPOSITE_UNDERLYING_PRICE":                      14,
	"MD_ENTRY_TYPE_EMPTY_BOOK":                                      15,
	"MD_ENTRY_TYPE_MARGIN_RATE":                                     16,
	"MD_ENTRY_TYPE_MID_PRICE":                                       17,
	"MD_ENTRY_TYPE_PRIOR_SETTLE_PRICE":                              18,
	"MD_ENTRY_TYPE_SESSION_HIGH_BID":                                19,
	"MD_ENTRY_TYPE_SESSION_LOW_OFFER":                               20,
	"MD_ENTRY_TYPE_SETTLE_HIGH_PRICE":                               21,
	"MD_ENTRY_TYPE_SETTLE_LOW_PRICE":                                22,
	"MD_ENTRY_TYPE_SIMULATED_BUY_PRICE":                             23,
	"MD_ENTRY_TYPE_SIMULATED_SELL_PRICE":                            24,
	"MD_ENTRY_TYPE_EARLY_PRICES":                                    25,
	"MD_ENTRY_TYPE_AUCTION_CLEARING_PRICE":                          26,
	"MD_ENTRY_TYPE_SWAP_VALUE_FACTOR":                               27,
	"MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS":  28,
	"MD_ENTRY_TYPE_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS": 29,
	"MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS":       30,
	"MD_ENTRY_TYPE_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS":      31,
	"MD_ENTRY_TYPE_RECOVERY_RATE":                                   32,
	"MD_ENTRY_TYPE_RECOVERY_RATE_FOR_LONG":                          33,
	"MD_ENTRY_TYPE_RECOVERY_RATE_FOR_SHORT":                         34,
	"MD_ENTRY_TYPE_CASH_RATE":                                       35,
	"MD_ENTRY_TYPE_FIXING_PRICE":                                    36,
}

func (x MDEntryTypeEnum) String() string {
	return proto.EnumName(MDEntryTypeEnum_name, int32(x))
}

func (MDEntryTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{0}
}

type PriceTypeEnum int32

const (
	PriceTypeEnum_PRICE_TYPE_UNSPECIFIED                        PriceTypeEnum = 0
	PriceTypeEnum_PRICE_TYPE_FIXED_AMOUNT                       PriceTypeEnum = 1
	PriceTypeEnum_PRICE_TYPE_PERCENTAGE                         PriceTypeEnum = 2
	PriceTypeEnum_PRICE_TYPE_PER_UNIT                           PriceTypeEnum = 3
	PriceTypeEnum_PRICE_TYPE_DISCOUNT                           PriceTypeEnum = 4
	PriceTypeEnum_PRICE_TYPE_PREMIUM                            PriceTypeEnum = 5
	PriceTypeEnum_PRICE_TYPE_SPREAD                             PriceTypeEnum = 6
	PriceTypeEnum_PRICE_TYPE_TEDPRICE                           PriceTypeEnum = 7
	PriceTypeEnum_PRICE_TYPE_TEDYIELD                           PriceTypeEnum = 8
	PriceTypeEnum_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE          PriceTypeEnum = 9
	PriceTypeEnum_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE       PriceTypeEnum = 10
	PriceTypeEnum_PRICE_TYPE_YIELD                              PriceTypeEnum = 11
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS            PriceTypeEnum = 12
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS           PriceTypeEnum = 13
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS             PriceTypeEnum = 14
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS PriceTypeEnum = 15
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS        PriceTypeEnum = 16
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS      PriceTypeEnum = 17
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS    PriceTypeEnum = 18
)

var PriceTypeEnum_name = map[int32]string{
	0:  "PRICE_TYPE_UNSPECIFIED",
	1:  "PRICE_TYPE_FIXED_AMOUNT",
	2:  "PRICE_TYPE_PERCENTAGE",
	3:  "PRICE_TYPE_PER_UNIT",
	4:  "PRICE_TYPE_DISCOUNT",
	5:  "PRICE_TYPE_PREMIUM",
	6:  "PRICE_TYPE_SPREAD",
	7:  "PRICE_TYPE_TEDPRICE",
	8:  "PRICE_TYPE_TEDYIELD",
	9:  "PRICE_TYPE_FIXED_CABINET_TRADE_PRICE",
	10: "PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE",
	11: "PRICE_TYPE_YIELD",
	12: "PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS",
	13: "PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS",
	14: "PRICE_TYPE_PRODUCT_TICKS_IN_HALFS",
	15: "PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS",
	16: "PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS",
	17: "PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS",
	18: "PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS",
}

var PriceTypeEnum_value = map[string]int32{
	"PRICE_TYPE_UNSPECIFIED":                        0,
	"PRICE_TYPE_FIXED_AMOUNT":                       1,
	"PRICE_TYPE_PERCENTAGE":                         2,
	"PRICE_TYPE_PER_UNIT":                           3,
	"PRICE_TYPE_DISCOUNT":                           4,
	"PRICE_TYPE_PREMIUM":                            5,
	"PRICE_TYPE_SPREAD":                             6,
	"PRICE_TYPE_TEDPRICE":                           7,
	"PRICE_TYPE_TEDYIELD":                           8,
	"PRICE_TYPE_FIXED_CABINET_TRADE_PRICE":          9,
	"PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE":       10,
	"PRICE_TYPE_YIELD":                              11,
	"PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS":            12,
	"PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS":           13,
	"PRICE_TYPE_PRODUCT_TICKS_IN_HALFS":             14,
	"PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS": 15,
	"PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS":        16,
	"PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS":      17,
	"PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS":    18,
}

func (x PriceTypeEnum) String() string {
	return proto.EnumName(PriceTypeEnum_name, int32(x))
}

func (PriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{1}
}

type OrdTypeEnum int32

const (
	OrdTypeEnum_ORD_TYPE_UNSPECIFIED                    OrdTypeEnum = 0
	OrdTypeEnum_ORD_TYPE_LIMIT                          OrdTypeEnum = 1
	OrdTypeEnum_ORD_TYPE_LIMIT_ON_CLOSE                 OrdTypeEnum = 2
	OrdTypeEnum_ORD_TYPE_LIMIT_OR_BETTER                OrdTypeEnum = 3
	OrdTypeEnum_ORD_TYPE_LIMIT_WITH_OR_WITHOUT          OrdTypeEnum = 4
	OrdTypeEnum_ORD_TYPE_MARKET                         OrdTypeEnum = 5
	OrdTypeEnum_ORD_TYPE_MARKET_ON_CLOSE                OrdTypeEnum = 6
	OrdTypeEnum_ORD_TYPE_ON_BASIS                       OrdTypeEnum = 7
	OrdTypeEnum_ORD_TYPE_ON_CLOSE                       OrdTypeEnum = 8
	OrdTypeEnum_ORD_TYPE_STOP                           OrdTypeEnum = 9
	OrdTypeEnum_ORD_TYPE_STOP_LIMIT                     OrdTypeEnum = 10
	OrdTypeEnum_ORD_TYPE_WITH_OR_WITHOUT                OrdTypeEnum = 11
	OrdTypeEnum_ORD_TYPE_PEGGED                         OrdTypeEnum = 12
	OrdTypeEnum_ORD_TYPE_FOREX_MARKET                   OrdTypeEnum = 13
	OrdTypeEnum_ORD_TYPE_PREVIOUSLY_INDICATED           OrdTypeEnum = 14
	OrdTypeEnum_ORD_TYPE_PREVIOUSLY_QUOTED              OrdTypeEnum = 15
	OrdTypeEnum_ORD_TYPE_FOREX_LIMIT                    OrdTypeEnum = 16
	OrdTypeEnum_ORD_TYPE_FOREX_PREVIOUSLY_QUOTED        OrdTypeEnum = 17
	OrdTypeEnum_ORD_TYPE_FOREX_SWAP                     OrdTypeEnum = 18
	OrdTypeEnum_ORD_TYPE_FUNARI                         OrdTypeEnum = 19
	OrdTypeEnum_ORD_TYPE_MARKET_IF_TOUCHED              OrdTypeEnum = 20
	OrdTypeEnum_ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT OrdTypeEnum = 21
	OrdTypeEnum_ORD_TYPE_NEXT_FUND_VALUATION_POINT      OrdTypeEnum = 22
	OrdTypeEnum_ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT  OrdTypeEnum = 23
	OrdTypeEnum_ORD_TYPE_COUNTER_ORDER_SELECTION        OrdTypeEnum = 24
)

var OrdTypeEnum_name = map[int32]string{
	0:  "ORD_TYPE_UNSPECIFIED",
	1:  "ORD_TYPE_LIMIT",
	2:  "ORD_TYPE_LIMIT_ON_CLOSE",
	3:  "ORD_TYPE_LIMIT_OR_BETTER",
	4:  "ORD_TYPE_LIMIT_WITH_OR_WITHOUT",
	5:  "ORD_TYPE_MARKET",
	6:  "ORD_TYPE_MARKET_ON_CLOSE",
	7:  "ORD_TYPE_ON_BASIS",
	8:  "ORD_TYPE_ON_CLOSE",
	9:  "ORD_TYPE_STOP",
	10: "ORD_TYPE_STOP_LIMIT",
	11: "ORD_TYPE_WITH_OR_WITHOUT",
	12: "ORD_TYPE_PEGGED",
	13: "ORD_TYPE_FOREX_MARKET",
	14: "ORD_TYPE_PREVIOUSLY_INDICATED",
	15: "ORD_TYPE_PREVIOUSLY_QUOTED",
	16: "ORD_TYPE_FOREX_LIMIT",
	17: "ORD_TYPE_FOREX_PREVIOUSLY_QUOTED",
	18: "ORD_TYPE_FOREX_SWAP",
	19: "ORD_TYPE_FUNARI",
	20: "ORD_TYPE_MARKET_IF_TOUCHED",
	21: "ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT",
	22: "ORD_TYPE_NEXT_FUND_VALUATION_POINT",
	23: "ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT",
	24: "ORD_TYPE_COUNTER_ORDER_SELECTION",
}

var OrdTypeEnum_value = map[string]int32{
	"ORD_TYPE_UNSPECIFIED":                    0,
	"ORD_TYPE_LIMIT":                          1,
	"ORD_TYPE_LIMIT_ON_CLOSE":                 2,
	"ORD_TYPE_LIMIT_OR_BETTER":                3,
	"ORD_TYPE_LIMIT_WITH_OR_WITHOUT":          4,
	"ORD_TYPE_MARKET":                         5,
	"ORD_TYPE_MARKET_ON_CLOSE":                6,
	"ORD_TYPE_ON_BASIS":                       7,
	"ORD_TYPE_ON_CLOSE":                       8,
	"ORD_TYPE_STOP":                           9,
	"ORD_TYPE_STOP_LIMIT":                     10,
	"ORD_TYPE_WITH_OR_WITHOUT":                11,
	"ORD_TYPE_PEGGED":                         12,
	"ORD_TYPE_FOREX_MARKET":                   13,
	"ORD_TYPE_PREVIOUSLY_INDICATED":           14,
	"ORD_TYPE_PREVIOUSLY_QUOTED":              15,
	"ORD_TYPE_FOREX_LIMIT":                    16,
	"ORD_TYPE_FOREX_PREVIOUSLY_QUOTED":        17,
	"ORD_TYPE_FOREX_SWAP":                     18,
	"ORD_TYPE_FUNARI":                         19,
	"ORD_TYPE_MARKET_IF_TOUCHED":              20,
	"ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT": 21,
	"ORD_TYPE_NEXT_FUND_VALUATION_POINT":      22,
	"ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT":  23,
	"ORD_TYPE_COUNTER_ORDER_SELECTION":        24,
}

func (x OrdTypeEnum) String() string {
	return proto.EnumName(OrdTypeEnum_name, int32(x))
}

func (OrdTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{2}
}

type LotTypeEnum int32

const (
	LotTypeEnum_LOT_TYPE_UNSPECIFIED          LotTypeEnum = 0
	LotTypeEnum_LOT_TYPE_BLOCK_LOT            LotTypeEnum = 1
	LotTypeEnum_LOT_TYPE_ODD_LOT              LotTypeEnum = 2
	LotTypeEnum_LOT_TYPE_ROUND_LOT            LotTypeEnum = 3
	LotTypeEnum_LOT_TYPE_ROUND_LOT_BASED_UPON LotTypeEnum = 4
)

var LotTypeEnum_name = map[int32]string{
	0: "LOT_TYPE_UNSPECIFIED",
	1: "LOT_TYPE_BLOCK_LOT",
	2: "LOT_TYPE_ODD_LOT",
	3: "LOT_TYPE_ROUND_LOT",
	4: "LOT_TYPE_ROUND_LOT_BASED_UPON",
}

var LotTypeEnum_value = map[string]int32{
	"LOT_TYPE_UNSPECIFIED":          0,
	"LOT_TYPE_BLOCK_LOT":            1,
	"LOT_TYPE_ODD_LOT":              2,
	"LOT_TYPE_ROUND_LOT":            3,
	"LOT_TYPE_ROUND_LOT_BASED_UPON": 4,
}

func (x LotTypeEnum) String() string {
	return proto.EnumName(LotTypeEnum_name, int32(x))
}

func (LotTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{3}
}

type TickDirectionEnum int32

const (
	TickDirectionEnum_TICK_DIRECTION_UNSPECIFIED     TickDirectionEnum = 0
	TickDirectionEnum_TICK_DIRECTION_MINUS_TICK      TickDirectionEnum = 1
	TickDirectionEnum_TICK_DIRECTION_PLUS_TICK       TickDirectionEnum = 2
	TickDirectionEnum_TICK_DIRECTION_ZERO_MINUS_TICK TickDirectionEnum = 3
	TickDirectionEnum_TICK_DIRECTION_ZERO_PLUS_TICK  TickDirectionEnum = 4
)

var TickDirectionEnum_name = map[int32]string{
	0: "TICK_DIRECTION_UNSPECIFIED",
	1: "TICK_DIRECTION_MINUS_TICK",
	2: "TICK_DIRECTION_PLUS_TICK",
	3: "TICK_DIRECTION_ZERO_MINUS_TICK",
	4: "TICK_DIRECTION_ZERO_PLUS_TICK",
}

var TickDirectionEnum_value = map[string]int32{
	"TICK_DIRECTION_UNSPECIFIED":     0,
	"TICK_DIRECTION_MINUS_TICK":      1,
	"TICK_DIRECTION_PLUS_TICK":       2,
	"TICK_DIRECTION_ZERO_MINUS_TICK": 3,
	"TICK_DIRECTION_ZERO_PLUS_TICK":  4,
}

func (x TickDirectionEnum) String() string {
	return proto.EnumName(TickDirectionEnum_name, int32(x))
}

func (TickDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{4}
}

type TradingSessionIDEnum int32

const (
	TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED TradingSessionIDEnum = 0
	TradingSessionIDEnum_TRADING_SESSION_ID_AFTERNOON   TradingSessionIDEnum = 1
	TradingSessionIDEnum_TRADING_SESSION_ID_AFTER_HOURS TradingSessionIDEnum = 2
	TradingSessionIDEnum_TRADING_SESSION_ID_DAY         TradingSessionIDEnum = 3
	TradingSessionIDEnum_TRADING_SESSION_ID_EVENING     TradingSessionIDEnum = 4
	TradingSessionIDEnum_TRADING_SESSION_ID_HALF_DAY    TradingSessionIDEnum = 5
	TradingSessionIDEnum_TRADING_SESSION_ID_MORNING     TradingSessionIDEnum = 6
)

var TradingSessionIDEnum_name = map[int32]string{
	0: "TRADING_SESSION_ID_UNSPECIFIED",
	1: "TRADING_SESSION_ID_AFTERNOON",
	2: "TRADING_SESSION_ID_AFTER_HOURS",
	3: "TRADING_SESSION_ID_DAY",
	4: "TRADING_SESSION_ID_EVENING",
	5: "TRADING_SESSION_ID_HALF_DAY",
	6: "TRADING_SESSION_ID_MORNING",
}

var TradingSessionIDEnum_value = map[string]int32{
	"TRADING_SESSION_ID_UNSPECIFIED": 0,
	"TRADING_SESSION_ID_AFTERNOON":   1,
	"TRADING_SESSION_ID_AFTER_HOURS": 2,
	"TRADING_SESSION_ID_DAY":         3,
	"TRADING_SESSION_ID_EVENING":     4,
	"TRADING_SESSION_ID_HALF_DAY":    5,
	"TRADING_SESSION_ID_MORNING":     6,
}

func (x TradingSessionIDEnum) String() string {
	return proto.EnumName(TradingSessionIDEnum_name, int32(x))
}

func (TradingSessionIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{5}
}

type TradingSessionSubIDEnum int32

const (
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED                TradingSessionSubIDEnum = 0
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION TradingSessionSubIDEnum = 1
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_CONTINUOUS                 TradingSessionSubIDEnum = 2
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_INTRADAY_AUCTION           TradingSessionSubIDEnum = 3
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION TradingSessionSubIDEnum = 4
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_POST_TRADING               TradingSessionSubIDEnum = 5
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_PRE_TRADING                TradingSessionSubIDEnum = 6
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_QUIESCENT                  TradingSessionSubIDEnum = 7
)

var TradingSessionSubIDEnum_name = map[int32]string{
	0: "TRADING_SESSION_SUB_ID_UNSPECIFIED",
	1: "TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION",
	2: "TRADING_SESSION_SUB_ID_CONTINUOUS",
	3: "TRADING_SESSION_SUB_ID_INTRADAY_AUCTION",
	4: "TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION",
	5: "TRADING_SESSION_SUB_ID_POST_TRADING",
	6: "TRADING_SESSION_SUB_ID_PRE_TRADING",
	7: "TRADING_SESSION_SUB_ID_QUIESCENT",
}

var TradingSessionSubIDEnum_value = map[string]int32{
	"TRADING_SESSION_SUB_ID_UNSPECIFIED":                0,
	"TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION": 1,
	"TRADING_SESSION_SUB_ID_CONTINUOUS":                 2,
	"TRADING_SESSION_SUB_ID_INTRADAY_AUCTION":           3,
	"TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION": 4,
	"TRADING_SESSION_SUB_ID_POST_TRADING":               5,
	"TRADING_SESSION_SUB_ID_PRE_TRADING":                6,
	"TRADING_SESSION_SUB_ID_QUIESCENT":                  7,
}

func (x TradingSessionSubIDEnum) String() string {
	return proto.EnumName(TradingSessionSubIDEnum_name, int32(x))
}

func (TradingSessionSubIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{6}
}

type SecurityTradingStatusEnum int32

const (
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_UNSPECIFIED                    SecurityTradingStatusEnum = 0
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_ITSPRE_OPENING                 SecurityTradingStatusEnum = 1
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_MARKET_IMBALANCE_BUY           SecurityTradingStatusEnum = 2
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_MARKET_IMBALANCE_SELL          SecurityTradingStatusEnum = 3
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_BUY  SecurityTradingStatusEnum = 4
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_SELL SecurityTradingStatusEnum = 5
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NEW_PRICE_INDICATION           SecurityTradingStatusEnum = 6
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING      SecurityTradingStatusEnum = 7
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NOT_TRADED_ON_THIS_MARKET      SecurityTradingStatusEnum = 8
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NO_MARKET_IMBALANCE            SecurityTradingStatusEnum = 9
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NO_MARKET_ON_CLOSE_IMBALANCE   SecurityTradingStatusEnum = 10
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_NO_OPEN                        SecurityTradingStatusEnum = 11
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_OPENING_DELAY                  SecurityTradingStatusEnum = 12
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_PRICE_INDICATION               SecurityTradingStatusEnum = 13
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_READY_TO_TRADE                 SecurityTradingStatusEnum = 14
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_RESUME                         SecurityTradingStatusEnum = 15
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_TRADE_DISSEMINATION_TIME       SecurityTradingStatusEnum = 16
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_TRADING_HALT                   SecurityTradingStatusEnum = 17
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_TRADING_RANGE_INDICATION       SecurityTradingStatusEnum = 18
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_UNKNOWN_OR_INVALID             SecurityTradingStatusEnum = 19
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_FAST_MARKET                    SecurityTradingStatusEnum = 20
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_OPENING_ROTATION               SecurityTradingStatusEnum = 21
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_PRE_OPEN                       SecurityTradingStatusEnum = 22
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_CROSS                          SecurityTradingStatusEnum = 23
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_PRE_CROSS                      SecurityTradingStatusEnum = 24
	SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_POST_CLOSE                     SecurityTradingStatusEnum = 25
)

var SecurityTradingStatusEnum_name = map[int32]string{
	0:  "SECURITY_TRADING_STATUS_UNSPECIFIED",
	1:  "SECURITY_TRADING_STATUS_ITSPRE_OPENING",
	2:  "SECURITY_TRADING_STATUS_MARKET_IMBALANCE_BUY",
	3:  "SECURITY_TRADING_STATUS_MARKET_IMBALANCE_SELL",
	4:  "SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_BUY",
	5:  "SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_SELL",
	6:  "SECURITY_TRADING_STATUS_NEW_PRICE_INDICATION",
	7:  "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING",
	8:  "SECURITY_TRADING_STATUS_NOT_TRADED_ON_THIS_MARKET",
	9:  "SECURITY_TRADING_STATUS_NO_MARKET_IMBALANCE",
	10: "SECURITY_TRADING_STATUS_NO_MARKET_ON_CLOSE_IMBALANCE",
	11: "SECURITY_TRADING_STATUS_NO_OPEN",
	12: "SECURITY_TRADING_STATUS_OPENING_DELAY",
	13: "SECURITY_TRADING_STATUS_PRICE_INDICATION",
	14: "SECURITY_TRADING_STATUS_READY_TO_TRADE",
	15: "SECURITY_TRADING_STATUS_RESUME",
	16: "SECURITY_TRADING_STATUS_TRADE_DISSEMINATION_TIME",
	17: "SECURITY_TRADING_STATUS_TRADING_HALT",
	18: "SECURITY_TRADING_STATUS_TRADING_RANGE_INDICATION",
	19: "SECURITY_TRADING_STATUS_UNKNOWN_OR_INVALID",
	20: "SECURITY_TRADING_STATUS_FAST_MARKET",
	21: "SECURITY_TRADING_STATUS_OPENING_ROTATION",
	22: "SECURITY_TRADING_STATUS_PRE_OPEN",
	23: "SECURITY_TRADING_STATUS_CROSS",
	24: "SECURITY_TRADING_STATUS_PRE_CROSS",
	25: "SECURITY_TRADING_STATUS_POST_CLOSE",
}

var SecurityTradingStatusEnum_value = map[string]int32{
	"SECURITY_TRADING_STATUS_UNSPECIFIED":                    0,
	"SECURITY_TRADING_STATUS_ITSPRE_OPENING":                 1,
	"SECURITY_TRADING_STATUS_MARKET_IMBALANCE_BUY":           2,
	"SECURITY_TRADING_STATUS_MARKET_IMBALANCE_SELL":          3,
	"SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_BUY":  4,
	"SECURITY_TRADING_STATUS_MARKET_ON_CLOSE_IMBALANCE_SELL": 5,
	"SECURITY_TRADING_STATUS_NEW_PRICE_INDICATION":           6,
	"SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING":      7,
	"SECURITY_TRADING_STATUS_NOT_TRADED_ON_THIS_MARKET":      8,
	"SECURITY_TRADING_STATUS_NO_MARKET_IMBALANCE":            9,
	"SECURITY_TRADING_STATUS_NO_MARKET_ON_CLOSE_IMBALANCE":   10,
	"SECURITY_TRADING_STATUS_NO_OPEN":                        11,
	"SECURITY_TRADING_STATUS_OPENING_DELAY":                  12,
	"SECURITY_TRADING_STATUS_PRICE_INDICATION":               13,
	"SECURITY_TRADING_STATUS_READY_TO_TRADE":                 14,
	"SECURITY_TRADING_STATUS_RESUME":                         15,
	"SECURITY_TRADING_STATUS_TRADE_DISSEMINATION_TIME":       16,
	"SECURITY_TRADING_STATUS_TRADING_HALT":                   17,
	"SECURITY_TRADING_STATUS_TRADING_RANGE_INDICATION":       18,
	"SECURITY_TRADING_STATUS_UNKNOWN_OR_INVALID":             19,
	"SECURITY_TRADING_STATUS_FAST_MARKET":                    20,
	"SECURITY_TRADING_STATUS_OPENING_ROTATION":               21,
	"SECURITY_TRADING_STATUS_PRE_OPEN":                       22,
	"SECURITY_TRADING_STATUS_CROSS":                          23,
	"SECURITY_TRADING_STATUS_PRE_CROSS":                      24,
	"SECURITY_TRADING_STATUS_POST_CLOSE":                     25,
}

func (x SecurityTradingStatusEnum) String() string {
	return proto.EnumName(SecurityTradingStatusEnum_name, int32(x))
}

func (SecurityTradingStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{7}
}

type HaltReasonEnum int32

const (
	HaltReasonEnum_HALT_REASON_UNSPECIFIED            HaltReasonEnum = 0
	HaltReasonEnum_HALT_REASON_ADDITIONAL_INFORMATION HaltReasonEnum = 1
	HaltReasonEnum_HALT_REASON_EQUIPMENT_CHANGEOVER   HaltReasonEnum = 2
	HaltReasonEnum_HALT_REASON_NEWS_DISSEMINATION     HaltReasonEnum = 3
	HaltReasonEnum_HALT_REASON_NEWS_PENDING           HaltReasonEnum = 4
	HaltReasonEnum_HALT_REASON_ORDER_IMBALANCE        HaltReasonEnum = 5
	HaltReasonEnum_HALT_REASON_ORDER_INFLUX           HaltReasonEnum = 6
)

var HaltReasonEnum_name = map[int32]string{
	0: "HALT_REASON_UNSPECIFIED",
	1: "HALT_REASON_ADDITIONAL_INFORMATION",
	2: "HALT_REASON_EQUIPMENT_CHANGEOVER",
	3: "HALT_REASON_NEWS_DISSEMINATION",
	4: "HALT_REASON_NEWS_PENDING",
	5: "HALT_REASON_ORDER_IMBALANCE",
	6: "HALT_REASON_ORDER_INFLUX",
}

var HaltReasonEnum_value = map[string]int32{
	"HALT_REASON_UNSPECIFIED":            0,
	"HALT_REASON_ADDITIONAL_INFORMATION": 1,
	"HALT_REASON_EQUIPMENT_CHANGEOVER":   2,
	"HALT_REASON_NEWS_DISSEMINATION":     3,
	"HALT_REASON_NEWS_PENDING":           4,
	"HALT_REASON_ORDER_IMBALANCE":        5,
	"HALT_REASON_ORDER_INFLUX":           6,
}

func (x HaltReasonEnum) String() string {
	return proto.EnumName(HaltReasonEnum_name, int32(x))
}

func (HaltReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{8}
}

type QuoteConditionEnum int32

const (
	QuoteConditionEnum_QUOTE_CONDITION_UNSPECIFIED                         QuoteConditionEnum = 0
	QuoteConditionEnum_QUOTE_CONDITION_CLOSED                              QuoteConditionEnum = 1
	QuoteConditionEnum_QUOTE_CONDITION_CONSOLIDATED_BEST                   QuoteConditionEnum = 2
	QuoteConditionEnum_QUOTE_CONDITION_CROSSED                             QuoteConditionEnum = 3
	QuoteConditionEnum_QUOTE_CONDITION_DEPTH                               QuoteConditionEnum = 4
	QuoteConditionEnum_QUOTE_CONDITION_EXCHANGE_BEST                       QuoteConditionEnum = 5
	QuoteConditionEnum_QUOTE_CONDITION_FAST_TRADING                        QuoteConditionEnum = 6
	QuoteConditionEnum_QUOTE_CONDITION_LOCKED                              QuoteConditionEnum = 7
	QuoteConditionEnum_QUOTE_CONDITION_NON_FIRM                            QuoteConditionEnum = 8
	QuoteConditionEnum_QUOTE_CONDITION_OPEN                                QuoteConditionEnum = 9
	QuoteConditionEnum_QUOTE_CONDITION_FAST_MARKET_ETH                     QuoteConditionEnum = 10
	QuoteConditionEnum_QUOTE_CONDITION_MANUAL                              QuoteConditionEnum = 11
	QuoteConditionEnum_QUOTE_CONDITION_ADDITIONAL_INFO                     QuoteConditionEnum = 12
	QuoteConditionEnum_QUOTE_CONDITION_ADDITIONAL_INFO_DUE_TO_RELATED      QuoteConditionEnum = 13
	QuoteConditionEnum_QUOTE_CONDITION_AUTOMATIC_EXECUTION                 QuoteConditionEnum = 14
	QuoteConditionEnum_QUOTE_CONDITION_AUTOMATIC_EXECUTION_ETH             QuoteConditionEnum = 15
	QuoteConditionEnum_QUOTE_CONDITION_BID_OFFER_SPECIALIST                QuoteConditionEnum = 16
	QuoteConditionEnum_QUOTE_CONDITION_BID_SPECIALIST                      QuoteConditionEnum = 17
	QuoteConditionEnum_QUOTE_CONDITION_CLOSING                             QuoteConditionEnum = 18
	QuoteConditionEnum_QUOTE_CONDITION_DEPTH_ON_BID                        QuoteConditionEnum = 19
	QuoteConditionEnum_QUOTE_CONDITION_DEPTH_ON_OFFER                      QuoteConditionEnum = 20
	QuoteConditionEnum_QUOTE_CONDITION_DUE_TO_NEWS_DISSEMINATION           QuoteConditionEnum = 21
	QuoteConditionEnum_QUOTE_CONDITION_DUE_TO_NEWS_PENDING                 QuoteConditionEnum = 22
	QuoteConditionEnum_QUOTE_CONDITION_DUE_TO_RELATED                      QuoteConditionEnum = 23
	QuoteConditionEnum_QUOTE_CONDITION_END_OF_DAY_SAM                      QuoteConditionEnum = 24
	QuoteConditionEnum_QUOTE_CONDITION_EQUIPMENT_CHANGEOVER                QuoteConditionEnum = 25
	QuoteConditionEnum_QUOTE_CONDITION_FORBIDDEN_SAM                       QuoteConditionEnum = 26
	QuoteConditionEnum_QUOTE_CONDITION_FROZEN_SAM                          QuoteConditionEnum = 27
	QuoteConditionEnum_QUOTE_CONDITION_HALT                                QuoteConditionEnum = 28
	QuoteConditionEnum_QUOTE_CONDITION_HALT_ETH                            QuoteConditionEnum = 29
	QuoteConditionEnum_QUOTE_CONDITION_IMPLIED_PRICE                       QuoteConditionEnum = 30
	QuoteConditionEnum_QUOTE_CONDITION_INACTIVE_ETH                        QuoteConditionEnum = 31
	QuoteConditionEnum_QUOTE_CONDITION_NEWS_DISSEMINATION                  QuoteConditionEnum = 32
	QuoteConditionEnum_QUOTE_CONDITION_NEWS_PENDING                        QuoteConditionEnum = 33
	QuoteConditionEnum_QUOTE_CONDITION_NO_ACTIVE_SAM                       QuoteConditionEnum = 34
	QuoteConditionEnum_QUOTE_CONDITION_NO_OPEN                             QuoteConditionEnum = 35
	QuoteConditionEnum_QUOTE_CONDITION_OFFER_SPECIALIST                    QuoteConditionEnum = 36
	QuoteConditionEnum_QUOTE_CONDITION_OPENING_SAM                         QuoteConditionEnum = 37
	QuoteConditionEnum_QUOTE_CONDITION_OPEN_SAM                            QuoteConditionEnum = 38
	QuoteConditionEnum_QUOTE_CONDITION_ORDER_IMBALANCE                     QuoteConditionEnum = 39
	QuoteConditionEnum_QUOTE_CONDITION_ORDER_INFLUX                        QuoteConditionEnum = 40
	QuoteConditionEnum_QUOTE_CONDITION_OUTRIGHT_PRICE                      QuoteConditionEnum = 41
	QuoteConditionEnum_QUOTE_CONDITION_OUT_OF_SEQUENCE                     QuoteConditionEnum = 42
	QuoteConditionEnum_QUOTE_CONDITION_PRE_OPENING_SAM                     QuoteConditionEnum = 43
	QuoteConditionEnum_QUOTE_CONDITION_REGULAR_ETH                         QuoteConditionEnum = 44
	QuoteConditionEnum_QUOTE_CONDITION_RESERVED_SAM                        QuoteConditionEnum = 45
	QuoteConditionEnum_QUOTE_CONDITION_RESTRICTED                          QuoteConditionEnum = 46
	QuoteConditionEnum_QUOTE_CONDITION_RESUME                              QuoteConditionEnum = 47
	QuoteConditionEnum_QUOTE_CONDITION_ROTATION                            QuoteConditionEnum = 48
	QuoteConditionEnum_QUOTE_CONDITION_ROTATION_ETH                        QuoteConditionEnum = 49
	QuoteConditionEnum_QUOTE_CONDITION_SURVEILLANCE_SAM                    QuoteConditionEnum = 50
	QuoteConditionEnum_QUOTE_CONDITION_SUSPENDED_SAM                       QuoteConditionEnum = 51
	QuoteConditionEnum_QUOTE_CONDITION_TRADING_RANGE                       QuoteConditionEnum = 52
	QuoteConditionEnum_QUOTE_CONDITION_TRADING_RESUME                      QuoteConditionEnum = 53
	QuoteConditionEnum_QUOTE_CONDITION_VIEW_OF_COMMON                      QuoteConditionEnum = 54
	QuoteConditionEnum_QUOTE_CONDITION_VOLUME_ALERT                        QuoteConditionEnum = 55
	QuoteConditionEnum_QUOTE_CONDITION_BETTER_PRICES_IN_CONDITIONAL_ORDERS QuoteConditionEnum = 56
	QuoteConditionEnum_QUOTE_CONDITION_REST_OF_BOOK_VWAP                   QuoteConditionEnum = 57
	QuoteConditionEnum_QUOTE_CONDITION_MEDIAN_PRICE                        QuoteConditionEnum = 58
	QuoteConditionEnum_QUOTE_CONDITION_FLAT_CURVE                          QuoteConditionEnum = 59
	QuoteConditionEnum_QUOTE_CONDITION_FULL_CURVE                          QuoteConditionEnum = 60
)

var QuoteConditionEnum_name = map[int32]string{
	0:  "QUOTE_CONDITION_UNSPECIFIED",
	1:  "QUOTE_CONDITION_CLOSED",
	2:  "QUOTE_CONDITION_CONSOLIDATED_BEST",
	3:  "QUOTE_CONDITION_CROSSED",
	4:  "QUOTE_CONDITION_DEPTH",
	5:  "QUOTE_CONDITION_EXCHANGE_BEST",
	6:  "QUOTE_CONDITION_FAST_TRADING",
	7:  "QUOTE_CONDITION_LOCKED",
	8:  "QUOTE_CONDITION_NON_FIRM",
	9:  "QUOTE_CONDITION_OPEN",
	10: "QUOTE_CONDITION_FAST_MARKET_ETH",
	11: "QUOTE_CONDITION_MANUAL",
	12: "QUOTE_CONDITION_ADDITIONAL_INFO",
	13: "QUOTE_CONDITION_ADDITIONAL_INFO_DUE_TO_RELATED",
	14: "QUOTE_CONDITION_AUTOMATIC_EXECUTION",
	15: "QUOTE_CONDITION_AUTOMATIC_EXECUTION_ETH",
	16: "QUOTE_CONDITION_BID_OFFER_SPECIALIST",
	17: "QUOTE_CONDITION_BID_SPECIALIST",
	18: "QUOTE_CONDITION_CLOSING",
	19: "QUOTE_CONDITION_DEPTH_ON_BID",
	20: "QUOTE_CONDITION_DEPTH_ON_OFFER",
	21: "QUOTE_CONDITION_DUE_TO_NEWS_DISSEMINATION",
	22: "QUOTE_CONDITION_DUE_TO_NEWS_PENDING",
	23: "QUOTE_CONDITION_DUE_TO_RELATED",
	24: "QUOTE_CONDITION_END_OF_DAY_SAM",
	25: "QUOTE_CONDITION_EQUIPMENT_CHANGEOVER",
	26: "QUOTE_CONDITION_FORBIDDEN_SAM",
	27: "QUOTE_CONDITION_FROZEN_SAM",
	28: "QUOTE_CONDITION_HALT",
	29: "QUOTE_CONDITION_HALT_ETH",
	30: "QUOTE_CONDITION_IMPLIED_PRICE",
	31: "QUOTE_CONDITION_INACTIVE_ETH",
	32: "QUOTE_CONDITION_NEWS_DISSEMINATION",
	33: "QUOTE_CONDITION_NEWS_PENDING",
	34: "QUOTE_CONDITION_NO_ACTIVE_SAM",
	35: "QUOTE_CONDITION_NO_OPEN",
	36: "QUOTE_CONDITION_OFFER_SPECIALIST",
	37: "QUOTE_CONDITION_OPENING_SAM",
	38: "QUOTE_CONDITION_OPEN_SAM",
	39: "QUOTE_CONDITION_ORDER_IMBALANCE",
	40: "QUOTE_CONDITION_ORDER_INFLUX",
	41: "QUOTE_CONDITION_OUTRIGHT_PRICE",
	42: "QUOTE_CONDITION_OUT_OF_SEQUENCE",
	43: "QUOTE_CONDITION_PRE_OPENING_SAM",
	44: "QUOTE_CONDITION_REGULAR_ETH",
	45: "QUOTE_CONDITION_RESERVED_SAM",
	46: "QUOTE_CONDITION_RESTRICTED",
	47: "QUOTE_CONDITION_RESUME",
	48: "QUOTE_CONDITION_ROTATION",
	49: "QUOTE_CONDITION_ROTATION_ETH",
	50: "QUOTE_CONDITION_SURVEILLANCE_SAM",
	51: "QUOTE_CONDITION_SUSPENDED_SAM",
	52: "QUOTE_CONDITION_TRADING_RANGE",
	53: "QUOTE_CONDITION_TRADING_RESUME",
	54: "QUOTE_CONDITION_VIEW_OF_COMMON",
	55: "QUOTE_CONDITION_VOLUME_ALERT",
	56: "QUOTE_CONDITION_BETTER_PRICES_IN_CONDITIONAL_ORDERS",
	57: "QUOTE_CONDITION_REST_OF_BOOK_VWAP",
	58: "QUOTE_CONDITION_MEDIAN_PRICE",
	59: "QUOTE_CONDITION_FLAT_CURVE",
	60: "QUOTE_CONDITION_FULL_CURVE",
}

var QuoteConditionEnum_value = map[string]int32{
	"QUOTE_CONDITION_UNSPECIFIED":                         0,
	"QUOTE_CONDITION_CLOSED":                              1,
	"QUOTE_CONDITION_CONSOLIDATED_BEST":                   2,
	"QUOTE_CONDITION_CROSSED":                             3,
	"QUOTE_CONDITION_DEPTH":                               4,
	"QUOTE_CONDITION_EXCHANGE_BEST":                       5,
	"QUOTE_CONDITION_FAST_TRADING":                        6,
	"QUOTE_CONDITION_LOCKED":                              7,
	"QUOTE_CONDITION_NON_FIRM":                            8,
	"QUOTE_CONDITION_OPEN":                                9,
	"QUOTE_CONDITION_FAST_MARKET_ETH":                     10,
	"QUOTE_CONDITION_MANUAL":                              11,
	"QUOTE_CONDITION_ADDITIONAL_INFO":                     12,
	"QUOTE_CONDITION_ADDITIONAL_INFO_DUE_TO_RELATED":      13,
	"QUOTE_CONDITION_AUTOMATIC_EXECUTION":                 14,
	"QUOTE_CONDITION_AUTOMATIC_EXECUTION_ETH":             15,
	"QUOTE_CONDITION_BID_OFFER_SPECIALIST":                16,
	"QUOTE_CONDITION_BID_SPECIALIST":                      17,
	"QUOTE_CONDITION_CLOSING":                             18,
	"QUOTE_CONDITION_DEPTH_ON_BID":                        19,
	"QUOTE_CONDITION_DEPTH_ON_OFFER":                      20,
	"QUOTE_CONDITION_DUE_TO_NEWS_DISSEMINATION":           21,
	"QUOTE_CONDITION_DUE_TO_NEWS_PENDING":                 22,
	"QUOTE_CONDITION_DUE_TO_RELATED":                      23,
	"QUOTE_CONDITION_END_OF_DAY_SAM":                      24,
	"QUOTE_CONDITION_EQUIPMENT_CHANGEOVER":                25,
	"QUOTE_CONDITION_FORBIDDEN_SAM":                       26,
	"QUOTE_CONDITION_FROZEN_SAM":                          27,
	"QUOTE_CONDITION_HALT":                                28,
	"QUOTE_CONDITION_HALT_ETH":                            29,
	"QUOTE_CONDITION_IMPLIED_PRICE":                       30,
	"QUOTE_CONDITION_INACTIVE_ETH":                        31,
	"QUOTE_CONDITION_NEWS_DISSEMINATION":                  32,
	"QUOTE_CONDITION_NEWS_PENDING":                        33,
	"QUOTE_CONDITION_NO_ACTIVE_SAM":                       34,
	"QUOTE_CONDITION_NO_OPEN":                             35,
	"QUOTE_CONDITION_OFFER_SPECIALIST":                    36,
	"QUOTE_CONDITION_OPENING_SAM":                         37,
	"QUOTE_CONDITION_OPEN_SAM":                            38,
	"QUOTE_CONDITION_ORDER_IMBALANCE":                     39,
	"QUOTE_CONDITION_ORDER_INFLUX":                        40,
	"QUOTE_CONDITION_OUTRIGHT_PRICE":                      41,
	"QUOTE_CONDITION_OUT_OF_SEQUENCE":                     42,
	"QUOTE_CONDITION_PRE_OPENING_SAM":                     43,
	"QUOTE_CONDITION_REGULAR_ETH":                         44,
	"QUOTE_CONDITION_RESERVED_SAM":                        45,
	"QUOTE_CONDITION_RESTRICTED":                          46,
	"QUOTE_CONDITION_RESUME":                              47,
	"QUOTE_CONDITION_ROTATION":                            48,
	"QUOTE_CONDITION_ROTATION_ETH":                        49,
	"QUOTE_CONDITION_SURVEILLANCE_SAM":                    50,
	"QUOTE_CONDITION_SUSPENDED_SAM":                       51,
	"QUOTE_CONDITION_TRADING_RANGE":                       52,
	"QUOTE_CONDITION_TRADING_RESUME":                      53,
	"QUOTE_CONDITION_VIEW_OF_COMMON":                      54,
	"QUOTE_CONDITION_VOLUME_ALERT":                        55,
	"QUOTE_CONDITION_BETTER_PRICES_IN_CONDITIONAL_ORDERS": 56,
	"QUOTE_CONDITION_REST_OF_BOOK_VWAP":                   57,
	"QUOTE_CONDITION_MEDIAN_PRICE":                        58,
	"QUOTE_CONDITION_FLAT_CURVE":                          59,
	"QUOTE_CONDITION_FULL_CURVE":                          60,
}

func (x QuoteConditionEnum) String() string {
	return proto.EnumName(QuoteConditionEnum_name, int32(x))
}

func (QuoteConditionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{9}
}

type TradeConditionEnum int32

const (
	TradeConditionEnum_TRADE_CONDITION_UNSPECIFIED                             TradeConditionEnum = 0
	TradeConditionEnum_TRADE_CONDITION_AVERAGE_PRICE_TRADE                     TradeConditionEnum = 1
	TradeConditionEnum_TRADE_CONDITION_CASH                                    TradeConditionEnum = 2
	TradeConditionEnum_TRADE_CONDITION_CASH_TRADE                              TradeConditionEnum = 3
	TradeConditionEnum_TRADE_CONDITION_INTRADAY_TRADE_DETAIL                   TradeConditionEnum = 4
	TradeConditionEnum_TRADE_CONDITION_NEXT_DAY                                TradeConditionEnum = 5
	TradeConditionEnum_TRADE_CONDITION_NEXT_DAY_TRADE                          TradeConditionEnum = 6
	TradeConditionEnum_TRADE_CONDITION_OPENED                                  TradeConditionEnum = 7
	TradeConditionEnum_TRADE_CONDITION_OPENING                                 TradeConditionEnum = 8
	TradeConditionEnum_TRADE_CONDITION_RULE127TRADE                            TradeConditionEnum = 9
	TradeConditionEnum_TRADE_CONDITION_RULE155TRADE                            TradeConditionEnum = 10
	TradeConditionEnum_TRADE_CONDITION_SELLER                                  TradeConditionEnum = 11
	TradeConditionEnum_TRADE_CONDITION_SOLD                                    TradeConditionEnum = 12
	TradeConditionEnum_TRADE_CONDITION_SOLD_LAST                               TradeConditionEnum = 13
	TradeConditionEnum_TRADE_CONDITION_STOPPED_STOCK                           TradeConditionEnum = 14
	TradeConditionEnum_TRADE_CONDITION_IMBALANCE_MORE_BUYERS                   TradeConditionEnum = 15
	TradeConditionEnum_TRADE_CONDITION_IMBALANCE_MORE_SELLERS                  TradeConditionEnum = 16
	TradeConditionEnum_TRADE_CONDITION_OPENING_PRICE                           TradeConditionEnum = 17
	TradeConditionEnum_TRADE_CONDITION_TRADES_RESULTING_FROM_INTERMARKET_SWEEP TradeConditionEnum = 18
	TradeConditionEnum_TRADE_CONDITION_TRADES_RESULTING_FROM_MANUAL            TradeConditionEnum = 19
	TradeConditionEnum_TRADE_CONDITION_ACQUISITION                             TradeConditionEnum = 20
	TradeConditionEnum_TRADE_CONDITION_ADJUSTED                                TradeConditionEnum = 21
	TradeConditionEnum_TRADE_CONDITION_ADJUSTED_ETH                            TradeConditionEnum = 22
	TradeConditionEnum_TRADE_CONDITION_AUTOMATIC_EXECUTION                     TradeConditionEnum = 23
	TradeConditionEnum_TRADE_CONDITION_AUTO_EXECUTION_ETH                      TradeConditionEnum = 24
	TradeConditionEnum_TRADE_CONDITION_BARGAIN_CONDITION                       TradeConditionEnum = 25
	TradeConditionEnum_TRADE_CONDITION_BASKET_INDEX                            TradeConditionEnum = 26
	TradeConditionEnum_TRADE_CONDITION_BUNCHED                                 TradeConditionEnum = 27
	TradeConditionEnum_TRADE_CONDITION_BUNCHED_SALE                            TradeConditionEnum = 28
	TradeConditionEnum_TRADE_CONDITION_BURST_BASKET                            TradeConditionEnum = 29
	TradeConditionEnum_TRADE_CONDITION_CANCEL                                  TradeConditionEnum = 30
	TradeConditionEnum_TRADE_CONDITION_CANCEL_ETH                              TradeConditionEnum = 31
	TradeConditionEnum_TRADE_CONDITION_CANCEL_LAST                             TradeConditionEnum = 32
	TradeConditionEnum_TRADE_CONDITION_CANCEL_LAST_ETH                         TradeConditionEnum = 33
	TradeConditionEnum_TRADE_CONDITION_CANCEL_ONLY                             TradeConditionEnum = 34
	TradeConditionEnum_TRADE_CONDITION_CANCEL_ONLY_ETH                         TradeConditionEnum = 35
	TradeConditionEnum_TRADE_CONDITION_CANCEL_OPEN                             TradeConditionEnum = 36
	TradeConditionEnum_TRADE_CONDITION_CANCEL_OPEN_ETH                         TradeConditionEnum = 37
	TradeConditionEnum_TRADE_CONDITION_CANCEL_STOPPED                          TradeConditionEnum = 38
	TradeConditionEnum_TRADE_CONDITION_CANCEL_STOPPED_ETH                      TradeConditionEnum = 39
	TradeConditionEnum_TRADE_CONDITION_COMBO                                   TradeConditionEnum = 40
	TradeConditionEnum_TRADE_CONDITION_COMBO_ETH                               TradeConditionEnum = 41
	TradeConditionEnum_TRADE_CONDITION_CONVERTED_PRICE_INDICATOR               TradeConditionEnum = 42
	TradeConditionEnum_TRADE_CONDITION_CROSSED                                 TradeConditionEnum = 43
	TradeConditionEnum_TRADE_CONDITION_CROSSED_OLD                             TradeConditionEnum = 44
	TradeConditionEnum_TRADE_CONDITION_DIRECT_PLUS                             TradeConditionEnum = 45
	TradeConditionEnum_TRADE_CONDITION_DISTRIBUTION                            TradeConditionEnum = 46
	TradeConditionEnum_TRADE_CONDITION_EXCHANGE_LAST                           TradeConditionEnum = 47
	TradeConditionEnum_TRADE_CONDITION_EX_PIT                                  TradeConditionEnum = 48
	TradeConditionEnum_TRADE_CONDITION_FAST_MARKET                             TradeConditionEnum = 49
	TradeConditionEnum_TRADE_CONDITION_FINAL_PRICE_OF_SESSION                  TradeConditionEnum = 50
	TradeConditionEnum_TRADE_CONDITION_FORM_T                                  TradeConditionEnum = 51
	TradeConditionEnum_TRADE_CONDITION_IMPLIED_TRADE                           TradeConditionEnum = 52
	TradeConditionEnum_TRADE_CONDITION_LATE_OPEN_ETH                           TradeConditionEnum = 53
	TradeConditionEnum_TRADE_CONDITION_MARKETPLACE_ENTERED_TRADE               TradeConditionEnum = 54
	TradeConditionEnum_TRADE_CONDITION_MULTILEG_TO_MULTILEG_TRADE              TradeConditionEnum = 55
	TradeConditionEnum_TRADE_CONDITION_MULT_ASSET_CLASS_MULTILEG_TRADE         TradeConditionEnum = 56
	TradeConditionEnum_TRADE_CONDITION_OFFICAL_CLOSING_PRICE                   TradeConditionEnum = 57
	TradeConditionEnum_TRADE_CONDITION_OFFICIAL_CLOSING_PRICE                  TradeConditionEnum = 58
	TradeConditionEnum_TRADE_CONDITION_OPENED_SALE_ETH                         TradeConditionEnum = 59
	TradeConditionEnum_TRADE_CONDITION_OUT_OF_SEQUENCE_ETH                     TradeConditionEnum = 60
	TradeConditionEnum_TRADE_CONDITION_PRIOR_REFERENCE_PRICE                   TradeConditionEnum = 61
	TradeConditionEnum_TRADE_CONDITION_REGULAR_ETH                             TradeConditionEnum = 62
	TradeConditionEnum_TRADE_CONDITION_REOPEN                                  TradeConditionEnum = 63
	TradeConditionEnum_TRADE_CONDITION_REOPEN_ETH                              TradeConditionEnum = 64
	TradeConditionEnum_TRADE_CONDITION_SOLD_LAST_SALE                          TradeConditionEnum = 65
	TradeConditionEnum_TRADE_CONDITION_SOLD_LAST_SALE_ETH                      TradeConditionEnum = 66
	TradeConditionEnum_TRADE_CONDITION_SPLIT_TRADE                             TradeConditionEnum = 67
	TradeConditionEnum_TRADE_CONDITION_SPREAD                                  TradeConditionEnum = 68
	TradeConditionEnum_TRADE_CONDITION_SPREAD_ETH                              TradeConditionEnum = 69
	TradeConditionEnum_TRADE_CONDITION_STOPPED                                 TradeConditionEnum = 70
	TradeConditionEnum_TRADE_CONDITION_STOPPED_ETH                             TradeConditionEnum = 71
	TradeConditionEnum_TRADE_CONDITION_STOPPED_OUT_OF_SEQUENCE                 TradeConditionEnum = 72
	TradeConditionEnum_TRADE_CONDITION_STOPPED_SOLD_LAST                       TradeConditionEnum = 73
	TradeConditionEnum_TRADE_CONDITION_STRADDLE                                TradeConditionEnum = 74
	TradeConditionEnum_TRADE_CONDITION_STRADDLE_ETH                            TradeConditionEnum = 75
	TradeConditionEnum_TRADE_CONDITION_VOLUME_ONLY                             TradeConditionEnum = 76
	TradeConditionEnum_TRADE_CONDITION_OUTSIDE_SPREAD                          TradeConditionEnum = 77
)

var TradeConditionEnum_name = map[int32]string{
	0:  "TRADE_CONDITION_UNSPECIFIED",
	1:  "TRADE_CONDITION_AVERAGE_PRICE_TRADE",
	2:  "TRADE_CONDITION_CASH",
	3:  "TRADE_CONDITION_CASH_TRADE",
	4:  "TRADE_CONDITION_INTRADAY_TRADE_DETAIL",
	5:  "TRADE_CONDITION_NEXT_DAY",
	6:  "TRADE_CONDITION_NEXT_DAY_TRADE",
	7:  "TRADE_CONDITION_OPENED",
	8:  "TRADE_CONDITION_OPENING",
	9:  "TRADE_CONDITION_RULE127TRADE",
	10: "TRADE_CONDITION_RULE155TRADE",
	11: "TRADE_CONDITION_SELLER",
	12: "TRADE_CONDITION_SOLD",
	13: "TRADE_CONDITION_SOLD_LAST",
	14: "TRADE_CONDITION_STOPPED_STOCK",
	15: "TRADE_CONDITION_IMBALANCE_MORE_BUYERS",
	16: "TRADE_CONDITION_IMBALANCE_MORE_SELLERS",
	17: "TRADE_CONDITION_OPENING_PRICE",
	18: "TRADE_CONDITION_TRADES_RESULTING_FROM_INTERMARKET_SWEEP",
	19: "TRADE_CONDITION_TRADES_RESULTING_FROM_MANUAL",
	20: "TRADE_CONDITION_ACQUISITION",
	21: "TRADE_CONDITION_ADJUSTED",
	22: "TRADE_CONDITION_ADJUSTED_ETH",
	23: "TRADE_CONDITION_AUTOMATIC_EXECUTION",
	24: "TRADE_CONDITION_AUTO_EXECUTION_ETH",
	25: "TRADE_CONDITION_BARGAIN_CONDITION",
	26: "TRADE_CONDITION_BASKET_INDEX",
	27: "TRADE_CONDITION_BUNCHED",
	28: "TRADE_CONDITION_BUNCHED_SALE",
	29: "TRADE_CONDITION_BURST_BASKET",
	30: "TRADE_CONDITION_CANCEL",
	31: "TRADE_CONDITION_CANCEL_ETH",
	32: "TRADE_CONDITION_CANCEL_LAST",
	33: "TRADE_CONDITION_CANCEL_LAST_ETH",
	34: "TRADE_CONDITION_CANCEL_ONLY",
	35: "TRADE_CONDITION_CANCEL_ONLY_ETH",
	36: "TRADE_CONDITION_CANCEL_OPEN",
	37: "TRADE_CONDITION_CANCEL_OPEN_ETH",
	38: "TRADE_CONDITION_CANCEL_STOPPED",
	39: "TRADE_CONDITION_CANCEL_STOPPED_ETH",
	40: "TRADE_CONDITION_COMBO",
	41: "TRADE_CONDITION_COMBO_ETH",
	42: "TRADE_CONDITION_CONVERTED_PRICE_INDICATOR",
	43: "TRADE_CONDITION_CROSSED",
	44: "TRADE_CONDITION_CROSSED_OLD",
	45: "TRADE_CONDITION_DIRECT_PLUS",
	46: "TRADE_CONDITION_DISTRIBUTION",
	47: "TRADE_CONDITION_EXCHANGE_LAST",
	48: "TRADE_CONDITION_EX_PIT",
	49: "TRADE_CONDITION_FAST_MARKET",
	50: "TRADE_CONDITION_FINAL_PRICE_OF_SESSION",
	51: "TRADE_CONDITION_FORM_T",
	52: "TRADE_CONDITION_IMPLIED_TRADE",
	53: "TRADE_CONDITION_LATE_OPEN_ETH",
	54: "TRADE_CONDITION_MARKETPLACE_ENTERED_TRADE",
	55: "TRADE_CONDITION_MULTILEG_TO_MULTILEG_TRADE",
	56: "TRADE_CONDITION_MULT_ASSET_CLASS_MULTILEG_TRADE",
	57: "TRADE_CONDITION_OFFICAL_CLOSING_PRICE",
	58: "TRADE_CONDITION_OFFICIAL_CLOSING_PRICE",
	59: "TRADE_CONDITION_OPENED_SALE_ETH",
	60: "TRADE_CONDITION_OUT_OF_SEQUENCE_ETH",
	61: "TRADE_CONDITION_PRIOR_REFERENCE_PRICE",
	62: "TRADE_CONDITION_REGULAR_ETH",
	63: "TRADE_CONDITION_REOPEN",
	64: "TRADE_CONDITION_REOPEN_ETH",
	65: "TRADE_CONDITION_SOLD_LAST_SALE",
	66: "TRADE_CONDITION_SOLD_LAST_SALE_ETH",
	67: "TRADE_CONDITION_SPLIT_TRADE",
	68: "TRADE_CONDITION_SPREAD",
	69: "TRADE_CONDITION_SPREAD_ETH",
	70: "TRADE_CONDITION_STOPPED",
	71: "TRADE_CONDITION_STOPPED_ETH",
	72: "TRADE_CONDITION_STOPPED_OUT_OF_SEQUENCE",
	73: "TRADE_CONDITION_STOPPED_SOLD_LAST",
	74: "TRADE_CONDITION_STRADDLE",
	75: "TRADE_CONDITION_STRADDLE_ETH",
	76: "TRADE_CONDITION_VOLUME_ONLY",
	77: "TRADE_CONDITION_OUTSIDE_SPREAD",
}

var TradeConditionEnum_value = map[string]int32{
	"TRADE_CONDITION_UNSPECIFIED":                             0,
	"TRADE_CONDITION_AVERAGE_PRICE_TRADE":                     1,
	"TRADE_CONDITION_CASH":                                    2,
	"TRADE_CONDITION_CASH_TRADE":                              3,
	"TRADE_CONDITION_INTRADAY_TRADE_DETAIL":                   4,
	"TRADE_CONDITION_NEXT_DAY":                                5,
	"TRADE_CONDITION_NEXT_DAY_TRADE":                          6,
	"TRADE_CONDITION_OPENED":                                  7,
	"TRADE_CONDITION_OPENING":                                 8,
	"TRADE_CONDITION_RULE127TRADE":                            9,
	"TRADE_CONDITION_RULE155TRADE":                            10,
	"TRADE_CONDITION_SELLER":                                  11,
	"TRADE_CONDITION_SOLD":                                    12,
	"TRADE_CONDITION_SOLD_LAST":                               13,
	"TRADE_CONDITION_STOPPED_STOCK":                           14,
	"TRADE_CONDITION_IMBALANCE_MORE_BUYERS":                   15,
	"TRADE_CONDITION_IMBALANCE_MORE_SELLERS":                  16,
	"TRADE_CONDITION_OPENING_PRICE":                           17,
	"TRADE_CONDITION_TRADES_RESULTING_FROM_INTERMARKET_SWEEP": 18,
	"TRADE_CONDITION_TRADES_RESULTING_FROM_MANUAL":            19,
	"TRADE_CONDITION_ACQUISITION":                             20,
	"TRADE_CONDITION_ADJUSTED":                                21,
	"TRADE_CONDITION_ADJUSTED_ETH":                            22,
	"TRADE_CONDITION_AUTOMATIC_EXECUTION":                     23,
	"TRADE_CONDITION_AUTO_EXECUTION_ETH":                      24,
	"TRADE_CONDITION_BARGAIN_CONDITION":                       25,
	"TRADE_CONDITION_BASKET_INDEX":                            26,
	"TRADE_CONDITION_BUNCHED":                                 27,
	"TRADE_CONDITION_BUNCHED_SALE":                            28,
	"TRADE_CONDITION_BURST_BASKET":                            29,
	"TRADE_CONDITION_CANCEL":                                  30,
	"TRADE_CONDITION_CANCEL_ETH":                              31,
	"TRADE_CONDITION_CANCEL_LAST":                             32,
	"TRADE_CONDITION_CANCEL_LAST_ETH":                         33,
	"TRADE_CONDITION_CANCEL_ONLY":                             34,
	"TRADE_CONDITION_CANCEL_ONLY_ETH":                         35,
	"TRADE_CONDITION_CANCEL_OPEN":                             36,
	"TRADE_CONDITION_CANCEL_OPEN_ETH":                         37,
	"TRADE_CONDITION_CANCEL_STOPPED":                          38,
	"TRADE_CONDITION_CANCEL_STOPPED_ETH":                      39,
	"TRADE_CONDITION_COMBO":                                   40,
	"TRADE_CONDITION_COMBO_ETH":                               41,
	"TRADE_CONDITION_CONVERTED_PRICE_INDICATOR":               42,
	"TRADE_CONDITION_CROSSED":                                 43,
	"TRADE_CONDITION_CROSSED_OLD":                             44,
	"TRADE_CONDITION_DIRECT_PLUS":                             45,
	"TRADE_CONDITION_DISTRIBUTION":                            46,
	"TRADE_CONDITION_EXCHANGE_LAST":                           47,
	"TRADE_CONDITION_EX_PIT":                                  48,
	"TRADE_CONDITION_FAST_MARKET":                             49,
	"TRADE_CONDITION_FINAL_PRICE_OF_SESSION":                  50,
	"TRADE_CONDITION_FORM_T":                                  51,
	"TRADE_CONDITION_IMPLIED_TRADE":                           52,
	"TRADE_CONDITION_LATE_OPEN_ETH":                           53,
	"TRADE_CONDITION_MARKETPLACE_ENTERED_TRADE":               54,
	"TRADE_CONDITION_MULTILEG_TO_MULTILEG_TRADE":              55,
	"TRADE_CONDITION_MULT_ASSET_CLASS_MULTILEG_TRADE":         56,
	"TRADE_CONDITION_OFFICAL_CLOSING_PRICE":                   57,
	"TRADE_CONDITION_OFFICIAL_CLOSING_PRICE":                  58,
	"TRADE_CONDITION_OPENED_SALE_ETH":                         59,
	"TRADE_CONDITION_OUT_OF_SEQUENCE_ETH":                     60,
	"TRADE_CONDITION_PRIOR_REFERENCE_PRICE":                   61,
	"TRADE_CONDITION_REGULAR_ETH":                             62,
	"TRADE_CONDITION_REOPEN":                                  63,
	"TRADE_CONDITION_REOPEN_ETH":                              64,
	"TRADE_CONDITION_SOLD_LAST_SALE":                          65,
	"TRADE_CONDITION_SOLD_LAST_SALE_ETH":                      66,
	"TRADE_CONDITION_SPLIT_TRADE":                             67,
	"TRADE_CONDITION_SPREAD":                                  68,
	"TRADE_CONDITION_SPREAD_ETH":                              69,
	"TRADE_CONDITION_STOPPED":                                 70,
	"TRADE_CONDITION_STOPPED_ETH":                             71,
	"TRADE_CONDITION_STOPPED_OUT_OF_SEQUENCE":                 72,
	"TRADE_CONDITION_STOPPED_SOLD_LAST":                       73,
	"TRADE_CONDITION_STRADDLE":                                74,
	"TRADE_CONDITION_STRADDLE_ETH":                            75,
	"TRADE_CONDITION_VOLUME_ONLY":                             76,
	"TRADE_CONDITION_OUTSIDE_SPREAD":                          77,
}

func (x TradeConditionEnum) String() string {
	return proto.EnumName(TradeConditionEnum_name, int32(x))
}

func (TradeConditionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{10}
}

type OpenCloseSettlFlagEnum int32

const (
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_UNSPECIFIED                      OpenCloseSettlFlagEnum = 0
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_DAILY_OPEN                       OpenCloseSettlFlagEnum = 1
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_DELIVERY_SETTLEMENT_ENTRY        OpenCloseSettlFlagEnum = 2
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_SESSION_OPEN                     OpenCloseSettlFlagEnum = 3
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_ENTRY_FROM_PREVIOUS_BUSINESS_DAY OpenCloseSettlFlagEnum = 4
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_EXPECTED_ENTRY                   OpenCloseSettlFlagEnum = 5
	OpenCloseSettlFlagEnum_OPEN_CLOSE_SETTL_FLAG_THEORETICAL_PRICE_VALUE          OpenCloseSettlFlagEnum = 6
)

var OpenCloseSettlFlagEnum_name = map[int32]string{
	0: "OPEN_CLOSE_SETTL_FLAG_UNSPECIFIED",
	1: "OPEN_CLOSE_SETTL_FLAG_DAILY_OPEN",
	2: "OPEN_CLOSE_SETTL_FLAG_DELIVERY_SETTLEMENT_ENTRY",
	3: "OPEN_CLOSE_SETTL_FLAG_SESSION_OPEN",
	4: "OPEN_CLOSE_SETTL_FLAG_ENTRY_FROM_PREVIOUS_BUSINESS_DAY",
	5: "OPEN_CLOSE_SETTL_FLAG_EXPECTED_ENTRY",
	6: "OPEN_CLOSE_SETTL_FLAG_THEORETICAL_PRICE_VALUE",
}

var OpenCloseSettlFlagEnum_value = map[string]int32{
	"OPEN_CLOSE_SETTL_FLAG_UNSPECIFIED":                      0,
	"OPEN_CLOSE_SETTL_FLAG_DAILY_OPEN":                       1,
	"OPEN_CLOSE_SETTL_FLAG_DELIVERY_SETTLEMENT_ENTRY":        2,
	"OPEN_CLOSE_SETTL_FLAG_SESSION_OPEN":                     3,
	"OPEN_CLOSE_SETTL_FLAG_ENTRY_FROM_PREVIOUS_BUSINESS_DAY": 4,
	"OPEN_CLOSE_SETTL_FLAG_EXPECTED_ENTRY":                   5,
	"OPEN_CLOSE_SETTL_FLAG_THEORETICAL_PRICE_VALUE":          6,
}

func (x OpenCloseSettlFlagEnum) String() string {
	return proto.EnumName(OpenCloseSettlFlagEnum_name, int32(x))
}

func (OpenCloseSettlFlagEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{11}
}

type TimeInForceEnum int32

const (
	TimeInForceEnum_TIME_IN_FORCE_UNSPECIFIED           TimeInForceEnum = 0
	TimeInForceEnum_TIME_IN_FORCE_AT_THE_OPENING        TimeInForceEnum = 1
	TimeInForceEnum_TIME_IN_FORCE_DAY                   TimeInForceEnum = 2
	TimeInForceEnum_TIME_IN_FORCE_FILL_OR_KILL          TimeInForceEnum = 3
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_CANCEL      TimeInForceEnum = 4
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_CROSSING    TimeInForceEnum = 5
	TimeInForceEnum_TIME_IN_FORCE_IMMEDIATE_OR_CANCEL   TimeInForceEnum = 6
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_DATE        TimeInForceEnum = 7
	TimeInForceEnum_TIME_IN_FORCE_AT_THE_CLOSE          TimeInForceEnum = 8
	TimeInForceEnum_TIME_IN_FORCE_AT_CROSSING           TimeInForceEnum = 9
	TimeInForceEnum_TIME_IN_FORCE_GOOD_THROUGH_CROSSING TimeInForceEnum = 10
)

var TimeInForceEnum_name = map[int32]string{
	0:  "TIME_IN_FORCE_UNSPECIFIED",
	1:  "TIME_IN_FORCE_AT_THE_OPENING",
	2:  "TIME_IN_FORCE_DAY",
	3:  "TIME_IN_FORCE_FILL_OR_KILL",
	4:  "TIME_IN_FORCE_GOOD_TILL_CANCEL",
	5:  "TIME_IN_FORCE_GOOD_TILL_CROSSING",
	6:  "TIME_IN_FORCE_IMMEDIATE_OR_CANCEL",
	7:  "TIME_IN_FORCE_GOOD_TILL_DATE",
	8:  "TIME_IN_FORCE_AT_THE_CLOSE",
	9:  "TIME_IN_FORCE_AT_CROSSING",
	10: "TIME_IN_FORCE_GOOD_THROUGH_CROSSING",
}

var TimeInForceEnum_value = map[string]int32{
	"TIME_IN_FORCE_UNSPECIFIED":           0,
	"TIME_IN_FORCE_AT_THE_OPENING":        1,
	"TIME_IN_FORCE_DAY":                   2,
	"TIME_IN_FORCE_FILL_OR_KILL":          3,
	"TIME_IN_FORCE_GOOD_TILL_CANCEL":      4,
	"TIME_IN_FORCE_GOOD_TILL_CROSSING":    5,
	"TIME_IN_FORCE_IMMEDIATE_OR_CANCEL":   6,
	"TIME_IN_FORCE_GOOD_TILL_DATE":        7,
	"TIME_IN_FORCE_AT_THE_CLOSE":          8,
	"TIME_IN_FORCE_AT_CROSSING":           9,
	"TIME_IN_FORCE_GOOD_THROUGH_CROSSING": 10,
}

func (x TimeInForceEnum) String() string {
	return proto.EnumName(TimeInForceEnum_name, int32(x))
}

func (TimeInForceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{12}
}

type ExecInstEnum int32

const (
	ExecInstEnum_EXEC_INST_UNSPECIFIED                                           ExecInstEnum = 0
	ExecInstEnum_EXEC_INST_ALL_OR_NONE                                           ExecInstEnum = 1
	ExecInstEnum_EXEC_INST_CALL_FIRST                                            ExecInstEnum = 2
	ExecInstEnum_EXEC_INST_DO_NOT_INCREASE                                       ExecInstEnum = 3
	ExecInstEnum_EXEC_INST_DO_NOT_REDUCE                                         ExecInstEnum = 4
	ExecInstEnum_EXEC_INST_GO_ALONG                                              ExecInstEnum = 5
	ExecInstEnum_EXEC_INST_HELD                                                  ExecInstEnum = 6
	ExecInstEnum_EXEC_INST_NOT_HELD                                              ExecInstEnum = 7
	ExecInstEnum_EXEC_INST_NO_CROSS                                              ExecInstEnum = 8
	ExecInstEnum_EXEC_INST_OKTO_CROSS                                            ExecInstEnum = 9
	ExecInstEnum_EXEC_INST_OVER_THE_DAY                                          ExecInstEnum = 10
	ExecInstEnum_EXEC_INST_PARTICIPATE_DO_NOT_INITIATE                           ExecInstEnum = 11
	ExecInstEnum_EXEC_INST_PERCENT_OF_VOLUME                                     ExecInstEnum = 12
	ExecInstEnum_EXEC_INST_STAY_ON_BID_SIDE                                      ExecInstEnum = 13
	ExecInstEnum_EXEC_INST_STAY_ON_OFFER_SIDE                                    ExecInstEnum = 14
	ExecInstEnum_EXEC_INST_STRICT_SCALE                                          ExecInstEnum = 15
	ExecInstEnum_EXEC_INST_TRY_TO_SCALE                                          ExecInstEnum = 16
	ExecInstEnum_EXEC_INST_WORK                                                  ExecInstEnum = 17
	ExecInstEnum_EXEC_INST_INSTITUTIONS_ONLY                                     ExecInstEnum = 18
	ExecInstEnum_EXEC_INST_LAST_PEG                                              ExecInstEnum = 19
	ExecInstEnum_EXEC_INST_MARKET_PEG                                            ExecInstEnum = 20
	ExecInstEnum_EXEC_INST_MID_PRICE_PEG                                         ExecInstEnum = 21
	ExecInstEnum_EXEC_INST_NON_NEGOTIABLE                                        ExecInstEnum = 22
	ExecInstEnum_EXEC_INST_OPENING_PEG                                           ExecInstEnum = 23
	ExecInstEnum_EXEC_INST_PRIMARY_PEG                                           ExecInstEnum = 24
	ExecInstEnum_EXEC_INST_SUSPEND                                               ExecInstEnum = 25
	ExecInstEnum_EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION                          ExecInstEnum = 26
	ExecInstEnum_EXEC_INST_NETTING                                               ExecInstEnum = 27
	ExecInstEnum_EXEC_INST_PEG_TO_VWAP                                           ExecInstEnum = 28
	ExecInstEnum_EXEC_INST_CANCEL_ON_SYSTEM_FAILURE                              ExecInstEnum = 29
	ExecInstEnum_EXEC_INST_CANCEL_ON_TRADING_HALT                                ExecInstEnum = 30
	ExecInstEnum_EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE                           ExecInstEnum = 31
	ExecInstEnum_EXEC_INST_REINSTATE_ON_TRADING_HALT                             ExecInstEnum = 32
	ExecInstEnum_EXEC_INST_TRADE_ALONG                                           ExecInstEnum = 33
	ExecInstEnum_EXEC_INST_TRY_TO_STOP                                           ExecInstEnum = 34
	ExecInstEnum_EXEC_INST_CANCEL_IF_NOT_BEST                                    ExecInstEnum = 35
	ExecInstEnum_EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS                          ExecInstEnum = 36
	ExecInstEnum_EXEC_INST_PEG_TO_LIMIT_PRICE                                    ExecInstEnum = 37
	ExecInstEnum_EXEC_INST_STRICT_LIMIT                                          ExecInstEnum = 38
	ExecInstEnum_EXEC_INST_TRAILING_STOP_PEG                                     ExecInstEnum = 39
	ExecInstEnum_EXEC_INST_WORK_TO_TARGET_STRATEGY                               ExecInstEnum = 40
	ExecInstEnum_EXEC_INST_INTERMARKET_SWEEP                                     ExecInstEnum = 41
	ExecInstEnum_EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE            ExecInstEnum = 42
	ExecInstEnum_EXEC_INST_EXTERNAL_ROUTING_ALLOWED                              ExecInstEnum = 43
	ExecInstEnum_EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED                          ExecInstEnum = 44
	ExecInstEnum_EXEC_INST_IMBALANCE_ONLY                                        ExecInstEnum = 45
	ExecInstEnum_EXEC_INST_BEST_EXECUTION                                        ExecInstEnum = 46
	ExecInstEnum_EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER ExecInstEnum = 47
	ExecInstEnum_EXEC_INST_CANCEL_ON_CONNECTION_LOSS                             ExecInstEnum = 48
	ExecInstEnum_EXEC_INST_REINSTATE_ON_CONNECTION_LOSS                          ExecInstEnum = 49
	ExecInstEnum_EXEC_INST_RELEASE_FROM_SUSPENSION                               ExecInstEnum = 50
	ExecInstEnum_EXEC_INST_SUSPEND_ON_CONNECTION_LOSS                            ExecInstEnum = 51
	ExecInstEnum_EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE                             ExecInstEnum = 52
	ExecInstEnum_EXEC_INST_SUSPEND_ON_TRADING_HALT                               ExecInstEnum = 53
	ExecInstEnum_EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL                              ExecInstEnum = 54
	ExecInstEnum_EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL                           ExecInstEnum = 55
	ExecInstEnum_EXEC_INST_EXECUTE_AS_FX_NEUTRAL                                 ExecInstEnum = 56
)

var ExecInstEnum_name = map[int32]string{
	0:  "EXEC_INST_UNSPECIFIED",
	1:  "EXEC_INST_ALL_OR_NONE",
	2:  "EXEC_INST_CALL_FIRST",
	3:  "EXEC_INST_DO_NOT_INCREASE",
	4:  "EXEC_INST_DO_NOT_REDUCE",
	5:  "EXEC_INST_GO_ALONG",
	6:  "EXEC_INST_HELD",
	7:  "EXEC_INST_NOT_HELD",
	8:  "EXEC_INST_NO_CROSS",
	9:  "EXEC_INST_OKTO_CROSS",
	10: "EXEC_INST_OVER_THE_DAY",
	11: "EXEC_INST_PARTICIPATE_DO_NOT_INITIATE",
	12: "EXEC_INST_PERCENT_OF_VOLUME",
	13: "EXEC_INST_STAY_ON_BID_SIDE",
	14: "EXEC_INST_STAY_ON_OFFER_SIDE",
	15: "EXEC_INST_STRICT_SCALE",
	16: "EXEC_INST_TRY_TO_SCALE",
	17: "EXEC_INST_WORK",
	18: "EXEC_INST_INSTITUTIONS_ONLY",
	19: "EXEC_INST_LAST_PEG",
	20: "EXEC_INST_MARKET_PEG",
	21: "EXEC_INST_MID_PRICE_PEG",
	22: "EXEC_INST_NON_NEGOTIABLE",
	23: "EXEC_INST_OPENING_PEG",
	24: "EXEC_INST_PRIMARY_PEG",
	25: "EXEC_INST_SUSPEND",
	26: "EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION",
	27: "EXEC_INST_NETTING",
	28: "EXEC_INST_PEG_TO_VWAP",
	29: "EXEC_INST_CANCEL_ON_SYSTEM_FAILURE",
	30: "EXEC_INST_CANCEL_ON_TRADING_HALT",
	31: "EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE",
	32: "EXEC_INST_REINSTATE_ON_TRADING_HALT",
	33: "EXEC_INST_TRADE_ALONG",
	34: "EXEC_INST_TRY_TO_STOP",
	35: "EXEC_INST_CANCEL_IF_NOT_BEST",
	36: "EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS",
	37: "EXEC_INST_PEG_TO_LIMIT_PRICE",
	38: "EXEC_INST_STRICT_LIMIT",
	39: "EXEC_INST_TRAILING_STOP_PEG",
	40: "EXEC_INST_WORK_TO_TARGET_STRATEGY",
	41: "EXEC_INST_INTERMARKET_SWEEP",
	42: "EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE",
	43: "EXEC_INST_EXTERNAL_ROUTING_ALLOWED",
	44: "EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED",
	45: "EXEC_INST_IMBALANCE_ONLY",
	46: "EXEC_INST_BEST_EXECUTION",
	47: "EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER",
	48: "EXEC_INST_CANCEL_ON_CONNECTION_LOSS",
	49: "EXEC_INST_REINSTATE_ON_CONNECTION_LOSS",
	50: "EXEC_INST_RELEASE_FROM_SUSPENSION",
	51: "EXEC_INST_SUSPEND_ON_CONNECTION_LOSS",
	52: "EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE",
	53: "EXEC_INST_SUSPEND_ON_TRADING_HALT",
	54: "EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL",
	55: "EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL",
	56: "EXEC_INST_EXECUTE_AS_FX_NEUTRAL",
}

var ExecInstEnum_value = map[string]int32{
	"EXEC_INST_UNSPECIFIED":                                           0,
	"EXEC_INST_ALL_OR_NONE":                                           1,
	"EXEC_INST_CALL_FIRST":                                            2,
	"EXEC_INST_DO_NOT_INCREASE":                                       3,
	"EXEC_INST_DO_NOT_REDUCE":                                         4,
	"EXEC_INST_GO_ALONG":                                              5,
	"EXEC_INST_HELD":                                                  6,
	"EXEC_INST_NOT_HELD":                                              7,
	"EXEC_INST_NO_CROSS":                                              8,
	"EXEC_INST_OKTO_CROSS":                                            9,
	"EXEC_INST_OVER_THE_DAY":                                          10,
	"EXEC_INST_PARTICIPATE_DO_NOT_INITIATE":                           11,
	"EXEC_INST_PERCENT_OF_VOLUME":                                     12,
	"EXEC_INST_STAY_ON_BID_SIDE":                                      13,
	"EXEC_INST_STAY_ON_OFFER_SIDE":                                    14,
	"EXEC_INST_STRICT_SCALE":                                          15,
	"EXEC_INST_TRY_TO_SCALE":                                          16,
	"EXEC_INST_WORK":                                                  17,
	"EXEC_INST_INSTITUTIONS_ONLY":                                     18,
	"EXEC_INST_LAST_PEG":                                              19,
	"EXEC_INST_MARKET_PEG":                                            20,
	"EXEC_INST_MID_PRICE_PEG":                                         21,
	"EXEC_INST_NON_NEGOTIABLE":                                        22,
	"EXEC_INST_OPENING_PEG":                                           23,
	"EXEC_INST_PRIMARY_PEG":                                           24,
	"EXEC_INST_SUSPEND":                                               25,
	"EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION":                          26,
	"EXEC_INST_NETTING":                                               27,
	"EXEC_INST_PEG_TO_VWAP":                                           28,
	"EXEC_INST_CANCEL_ON_SYSTEM_FAILURE":                              29,
	"EXEC_INST_CANCEL_ON_TRADING_HALT":                                30,
	"EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE":                           31,
	"EXEC_INST_REINSTATE_ON_TRADING_HALT":                             32,
	"EXEC_INST_TRADE_ALONG":                                           33,
	"EXEC_INST_TRY_TO_STOP":                                           34,
	"EXEC_INST_CANCEL_IF_NOT_BEST":                                    35,
	"EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS":                          36,
	"EXEC_INST_PEG_TO_LIMIT_PRICE":                                    37,
	"EXEC_INST_STRICT_LIMIT":                                          38,
	"EXEC_INST_TRAILING_STOP_PEG":                                     39,
	"EXEC_INST_WORK_TO_TARGET_STRATEGY":                               40,
	"EXEC_INST_INTERMARKET_SWEEP":                                     41,
	"EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE":            42,
	"EXEC_INST_EXTERNAL_ROUTING_ALLOWED":                              43,
	"EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED":                          44,
	"EXEC_INST_IMBALANCE_ONLY":                                        45,
	"EXEC_INST_BEST_EXECUTION":                                        46,
	"EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER": 47,
	"EXEC_INST_CANCEL_ON_CONNECTION_LOSS":                             48,
	"EXEC_INST_REINSTATE_ON_CONNECTION_LOSS":                          49,
	"EXEC_INST_RELEASE_FROM_SUSPENSION":                               50,
	"EXEC_INST_SUSPEND_ON_CONNECTION_LOSS":                            51,
	"EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE":                             52,
	"EXEC_INST_SUSPEND_ON_TRADING_HALT":                               53,
	"EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL":                              54,
	"EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL":                           55,
	"EXEC_INST_EXECUTE_AS_FX_NEUTRAL":                                 56,
}

func (x ExecInstEnum) String() string {
	return proto.EnumName(ExecInstEnum_name, int32(x))
}

func (ExecInstEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{13}
}

type ScopeEnum int32

const (
	ScopeEnum_SCOPE_UNSPECIFIED  ScopeEnum = 0
	ScopeEnum_SCOPE_GLOBAL       ScopeEnum = 1
	ScopeEnum_SCOPE_LOCAL_MARKET ScopeEnum = 2
	ScopeEnum_SCOPE_NATIONAL     ScopeEnum = 3
)

var ScopeEnum_name = map[int32]string{
	0: "SCOPE_UNSPECIFIED",
	1: "SCOPE_GLOBAL",
	2: "SCOPE_LOCAL_MARKET",
	3: "SCOPE_NATIONAL",
}

var ScopeEnum_value = map[string]int32{
	"SCOPE_UNSPECIFIED":  0,
	"SCOPE_GLOBAL":       1,
	"SCOPE_LOCAL_MARKET": 2,
	"SCOPE_NATIONAL":     3,
}

func (x ScopeEnum) String() string {
	return proto.EnumName(ScopeEnum_name, int32(x))
}

func (ScopeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{14}
}

type TrdTypeEnum int32

const (
	TrdTypeEnum_TRD_TYPE_UNSPECIFIED                          TrdTypeEnum = 0
	TrdTypeEnum_TRD_TYPE_AFTER_HOURS_TRADE                    TrdTypeEnum = 1
	TrdTypeEnum_TRD_TYPE_BLOCK_TRADE                          TrdTypeEnum = 2
	TrdTypeEnum_TRD_TYPE_BUNCHED_TRADE                        TrdTypeEnum = 3
	TrdTypeEnum_TRD_TYPE_EFP                                  TrdTypeEnum = 4
	TrdTypeEnum_TRD_TYPE_LATE_BUNCHED_TRADE                   TrdTypeEnum = 5
	TrdTypeEnum_TRD_TYPE_LATE_TRADE                           TrdTypeEnum = 6
	TrdTypeEnum_TRD_TYPE_PRIOR_REFERENCE_PRICE_TRADE          TrdTypeEnum = 7
	TrdTypeEnum_TRD_TYPE_REGULAR_TRADE                        TrdTypeEnum = 8
	TrdTypeEnum_TRD_TYPE_TRANSFER                             TrdTypeEnum = 9
	TrdTypeEnum_TRD_TYPE_TTRADE                               TrdTypeEnum = 10
	TrdTypeEnum_TRD_TYPE_WEIGHTED_AVERAGE_PRICE_TRADE         TrdTypeEnum = 11
	TrdTypeEnum_TRD_TYPE_ALL_OR_NONE                          TrdTypeEnum = 12
	TrdTypeEnum_TRD_TYPE_EXCHANGE_FOR_RISK                    TrdTypeEnum = 13
	TrdTypeEnum_TRD_TYPE_EXCHANGE_FOR_SWAP                    TrdTypeEnum = 14
	TrdTypeEnum_TRD_TYPE_EXCHANGE_OF_FUTURES_FOR              TrdTypeEnum = 15
	TrdTypeEnum_TRD_TYPE_EXCHANGE_OF_FUTURES_FOR_FUTURES      TrdTypeEnum = 16
	TrdTypeEnum_TRD_TYPE_EXCHANGE_OF_OPTIONS_FOR_OPTIONS      TrdTypeEnum = 17
	TrdTypeEnum_TRD_TYPE_FUTURES_LARGE_ORDER_EXECUTION        TrdTypeEnum = 18
	TrdTypeEnum_TRD_TYPE_OPTION_CABINET_TRADE                 TrdTypeEnum = 19
	TrdTypeEnum_TRD_TYPE_OPTION_INTERIM_TRADE                 TrdTypeEnum = 20
	TrdTypeEnum_TRD_TYPE_TRADING_AT_SETTLEMENT                TrdTypeEnum = 21
	TrdTypeEnum_TRD_TYPE_PRIVATELY_NEGOTIATED_TRADES          TrdTypeEnum = 22
	TrdTypeEnum_TRD_TYPE_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS TrdTypeEnum = 23
	TrdTypeEnum_TRD_TYPE_BLOCK_TRADES                         TrdTypeEnum = 24
	TrdTypeEnum_TRD_TYPE_CASH_SETTLEMENT                      TrdTypeEnum = 25
	TrdTypeEnum_TRD_TYPE_DELTA_NEUTRAL_TRANSACTION            TrdTypeEnum = 26
	TrdTypeEnum_TRD_TYPE_ERROR_TRADE                          TrdTypeEnum = 27
	TrdTypeEnum_TRD_TYPE_FINANCING_TRANSACTION                TrdTypeEnum = 28
	TrdTypeEnum_TRD_TYPE_GUARANTEED_DELIVERY                  TrdTypeEnum = 29
	TrdTypeEnum_TRD_TYPE_LARGE_TRADE                          TrdTypeEnum = 30
	TrdTypeEnum_TRD_TYPE_NAME_CHANGE                          TrdTypeEnum = 31
	TrdTypeEnum_TRD_TYPE_OPTION_EXERCISE                      TrdTypeEnum = 32
	TrdTypeEnum_TRD_TYPE_PORTFOLIO_TRANSFER                   TrdTypeEnum = 33
	TrdTypeEnum_TRD_TYPE_PROROGATION_BUY                      TrdTypeEnum = 34
	TrdTypeEnum_TRD_TYPE_PROROGATION_SELL                     TrdTypeEnum = 35
	TrdTypeEnum_TRD_TYPE_SPECIAL_CUM_BONUS                    TrdTypeEnum = 36
	TrdTypeEnum_TRD_TYPE_SPECIAL_CUM_CAPITAL_REPAYMENTS       TrdTypeEnum = 37
	TrdTypeEnum_TRD_TYPE_SPECIAL_CUM_COUPON                   TrdTypeEnum = 38
	TrdTypeEnum_TRD_TYPE_SPECIAL_CUM_DIVIDEND                 TrdTypeEnum = 39
	TrdTypeEnum_TRD_TYPE_SPECIAL_CUM_RIGHTS                   TrdTypeEnum = 40
	TrdTypeEnum_TRD_TYPE_SPECIAL_EX_BONUS                     TrdTypeEnum = 41
	TrdTypeEnum_TRD_TYPE_SPECIAL_EX_CAPITAL_REPAYMENTS        TrdTypeEnum = 42
	TrdTypeEnum_TRD_TYPE_SPECIAL_EX_COUPON                    TrdTypeEnum = 43
	TrdTypeEnum_TRD_TYPE_SPECIAL_EX_DIVIDEND                  TrdTypeEnum = 44
	TrdTypeEnum_TRD_TYPE_SPECIAL_EX_RIGHTS                    TrdTypeEnum = 45
	TrdTypeEnum_TRD_TYPE_SPECIAL_PRICE                        TrdTypeEnum = 46
	TrdTypeEnum_TRD_TYPE_WORKED_PRINCIPAL_TRADE               TrdTypeEnum = 47
	TrdTypeEnum_TRD_TYPE_DERIVATIVE_RELATED_TRANSACTION       TrdTypeEnum = 48
	TrdTypeEnum_TRD_TYPE_EXCHANGE_GRANTED_TRADE               TrdTypeEnum = 49
	TrdTypeEnum_TRD_TYPE_NON_STANDARD_SETTLEMENT              TrdTypeEnum = 50
	TrdTypeEnum_TRD_TYPE_OTC                                  TrdTypeEnum = 51
	TrdTypeEnum_TRD_TYPE_PORTFOLIO_TRADE                      TrdTypeEnum = 52
	TrdTypeEnum_TRD_TYPE_REPURCHASE_AGREEMENT                 TrdTypeEnum = 53
	TrdTypeEnum_TRD_TYPE_VOLUME_WEIGHTED_AVERAGE_TRADE        TrdTypeEnum = 54
	TrdTypeEnum_TRD_TYPE_EXCHANGE_BASIS_FACILITY              TrdTypeEnum = 55
)

var TrdTypeEnum_name = map[int32]string{
	0:  "TRD_TYPE_UNSPECIFIED",
	1:  "TRD_TYPE_AFTER_HOURS_TRADE",
	2:  "TRD_TYPE_BLOCK_TRADE",
	3:  "TRD_TYPE_BUNCHED_TRADE",
	4:  "TRD_TYPE_EFP",
	5:  "TRD_TYPE_LATE_BUNCHED_TRADE",
	6:  "TRD_TYPE_LATE_TRADE",
	7:  "TRD_TYPE_PRIOR_REFERENCE_PRICE_TRADE",
	8:  "TRD_TYPE_REGULAR_TRADE",
	9:  "TRD_TYPE_TRANSFER",
	10: "TRD_TYPE_TTRADE",
	11: "TRD_TYPE_WEIGHTED_AVERAGE_PRICE_TRADE",
	12: "TRD_TYPE_ALL_OR_NONE",
	13: "TRD_TYPE_EXCHANGE_FOR_RISK",
	14: "TRD_TYPE_EXCHANGE_FOR_SWAP",
	15: "TRD_TYPE_EXCHANGE_OF_FUTURES_FOR",
	16: "TRD_TYPE_EXCHANGE_OF_FUTURES_FOR_FUTURES",
	17: "TRD_TYPE_EXCHANGE_OF_OPTIONS_FOR_OPTIONS",
	18: "TRD_TYPE_FUTURES_LARGE_ORDER_EXECUTION",
	19: "TRD_TYPE_OPTION_CABINET_TRADE",
	20: "TRD_TYPE_OPTION_INTERIM_TRADE",
	21: "TRD_TYPE_TRADING_AT_SETTLEMENT",
	22: "TRD_TYPE_PRIVATELY_NEGOTIATED_TRADES",
	23: "TRD_TYPE_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS",
	24: "TRD_TYPE_BLOCK_TRADES",
	25: "TRD_TYPE_CASH_SETTLEMENT",
	26: "TRD_TYPE_DELTA_NEUTRAL_TRANSACTION",
	27: "TRD_TYPE_ERROR_TRADE",
	28: "TRD_TYPE_FINANCING_TRANSACTION",
	29: "TRD_TYPE_GUARANTEED_DELIVERY",
	30: "TRD_TYPE_LARGE_TRADE",
	31: "TRD_TYPE_NAME_CHANGE",
	32: "TRD_TYPE_OPTION_EXERCISE",
	33: "TRD_TYPE_PORTFOLIO_TRANSFER",
	34: "TRD_TYPE_PROROGATION_BUY",
	35: "TRD_TYPE_PROROGATION_SELL",
	36: "TRD_TYPE_SPECIAL_CUM_BONUS",
	37: "TRD_TYPE_SPECIAL_CUM_CAPITAL_REPAYMENTS",
	38: "TRD_TYPE_SPECIAL_CUM_COUPON",
	39: "TRD_TYPE_SPECIAL_CUM_DIVIDEND",
	40: "TRD_TYPE_SPECIAL_CUM_RIGHTS",
	41: "TRD_TYPE_SPECIAL_EX_BONUS",
	42: "TRD_TYPE_SPECIAL_EX_CAPITAL_REPAYMENTS",
	43: "TRD_TYPE_SPECIAL_EX_COUPON",
	44: "TRD_TYPE_SPECIAL_EX_DIVIDEND",
	45: "TRD_TYPE_SPECIAL_EX_RIGHTS",
	46: "TRD_TYPE_SPECIAL_PRICE",
	47: "TRD_TYPE_WORKED_PRINCIPAL_TRADE",
	48: "TRD_TYPE_DERIVATIVE_RELATED_TRANSACTION",
	49: "TRD_TYPE_EXCHANGE_GRANTED_TRADE",
	50: "TRD_TYPE_NON_STANDARD_SETTLEMENT",
	51: "TRD_TYPE_OTC",
	52: "TRD_TYPE_PORTFOLIO_TRADE",
	53: "TRD_TYPE_REPURCHASE_AGREEMENT",
	54: "TRD_TYPE_VOLUME_WEIGHTED_AVERAGE_TRADE",
	55: "TRD_TYPE_EXCHANGE_BASIS_FACILITY",
}

var TrdTypeEnum_value = map[string]int32{
	"TRD_TYPE_UNSPECIFIED":                          0,
	"TRD_TYPE_AFTER_HOURS_TRADE":                    1,
	"TRD_TYPE_BLOCK_TRADE":                          2,
	"TRD_TYPE_BUNCHED_TRADE":                        3,
	"TRD_TYPE_EFP":                                  4,
	"TRD_TYPE_LATE_BUNCHED_TRADE":                   5,
	"TRD_TYPE_LATE_TRADE":                           6,
	"TRD_TYPE_PRIOR_REFERENCE_PRICE_TRADE":          7,
	"TRD_TYPE_REGULAR_TRADE":                        8,
	"TRD_TYPE_TRANSFER":                             9,
	"TRD_TYPE_TTRADE":                               10,
	"TRD_TYPE_WEIGHTED_AVERAGE_PRICE_TRADE":         11,
	"TRD_TYPE_ALL_OR_NONE":                          12,
	"TRD_TYPE_EXCHANGE_FOR_RISK":                    13,
	"TRD_TYPE_EXCHANGE_FOR_SWAP":                    14,
	"TRD_TYPE_EXCHANGE_OF_FUTURES_FOR":              15,
	"TRD_TYPE_EXCHANGE_OF_FUTURES_FOR_FUTURES":      16,
	"TRD_TYPE_EXCHANGE_OF_OPTIONS_FOR_OPTIONS":      17,
	"TRD_TYPE_FUTURES_LARGE_ORDER_EXECUTION":        18,
	"TRD_TYPE_OPTION_CABINET_TRADE":                 19,
	"TRD_TYPE_OPTION_INTERIM_TRADE":                 20,
	"TRD_TYPE_TRADING_AT_SETTLEMENT":                21,
	"TRD_TYPE_PRIVATELY_NEGOTIATED_TRADES":          22,
	"TRD_TYPE_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS": 23,
	"TRD_TYPE_BLOCK_TRADES":                         24,
	"TRD_TYPE_CASH_SETTLEMENT":                      25,
	"TRD_TYPE_DELTA_NEUTRAL_TRANSACTION":            26,
	"TRD_TYPE_ERROR_TRADE":                          27,
	"TRD_TYPE_FINANCING_TRANSACTION":                28,
	"TRD_TYPE_GUARANTEED_DELIVERY":                  29,
	"TRD_TYPE_LARGE_TRADE":                          30,
	"TRD_TYPE_NAME_CHANGE":                          31,
	"TRD_TYPE_OPTION_EXERCISE":                      32,
	"TRD_TYPE_PORTFOLIO_TRANSFER":                   33,
	"TRD_TYPE_PROROGATION_BUY":                      34,
	"TRD_TYPE_PROROGATION_SELL":                     35,
	"TRD_TYPE_SPECIAL_CUM_BONUS":                    36,
	"TRD_TYPE_SPECIAL_CUM_CAPITAL_REPAYMENTS":       37,
	"TRD_TYPE_SPECIAL_CUM_COUPON":                   38,
	"TRD_TYPE_SPECIAL_CUM_DIVIDEND":                 39,
	"TRD_TYPE_SPECIAL_CUM_RIGHTS":                   40,
	"TRD_TYPE_SPECIAL_EX_BONUS":                     41,
	"TRD_TYPE_SPECIAL_EX_CAPITAL_REPAYMENTS":        42,
	"TRD_TYPE_SPECIAL_EX_COUPON":                    43,
	"TRD_TYPE_SPECIAL_EX_DIVIDEND":                  44,
	"TRD_TYPE_SPECIAL_EX_RIGHTS":                    45,
	"TRD_TYPE_SPECIAL_PRICE":                        46,
	"TRD_TYPE_WORKED_PRINCIPAL_TRADE":               47,
	"TRD_TYPE_DERIVATIVE_RELATED_TRANSACTION":       48,
	"TRD_TYPE_EXCHANGE_GRANTED_TRADE":               49,
	"TRD_TYPE_NON_STANDARD_SETTLEMENT":              50,
	"TRD_TYPE_OTC":                                  51,
	"TRD_TYPE_PORTFOLIO_TRADE":                      52,
	"TRD_TYPE_REPURCHASE_AGREEMENT":                 53,
	"TRD_TYPE_VOLUME_WEIGHTED_AVERAGE_TRADE":        54,
	"TRD_TYPE_EXCHANGE_BASIS_FACILITY":              55,
}

func (x TrdTypeEnum) String() string {
	return proto.EnumName(TrdTypeEnum_name, int32(x))
}

func (TrdTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{15}
}

type OrderCapacityEnum int32

const (
	OrderCapacityEnum_ORDER_CAPACITY_UNSPECIFIED            OrderCapacityEnum = 0
	OrderCapacityEnum_ORDER_CAPACITY_AGENCY                 OrderCapacityEnum = 1
	OrderCapacityEnum_ORDER_CAPACITY_AGENT_FOR_OTHER_MEMBER OrderCapacityEnum = 2
	OrderCapacityEnum_ORDER_CAPACITY_INDIVIDUAL             OrderCapacityEnum = 3
	OrderCapacityEnum_ORDER_CAPACITY_PRINCIPAL              OrderCapacityEnum = 4
	OrderCapacityEnum_ORDER_CAPACITY_PROPRIETARY            OrderCapacityEnum = 5
	OrderCapacityEnum_ORDER_CAPACITY_RISKLESS_PRINCIPAL     OrderCapacityEnum = 6
)

var OrderCapacityEnum_name = map[int32]string{
	0: "ORDER_CAPACITY_UNSPECIFIED",
	1: "ORDER_CAPACITY_AGENCY",
	2: "ORDER_CAPACITY_AGENT_FOR_OTHER_MEMBER",
	3: "ORDER_CAPACITY_INDIVIDUAL",
	4: "ORDER_CAPACITY_PRINCIPAL",
	5: "ORDER_CAPACITY_PROPRIETARY",
	6: "ORDER_CAPACITY_RISKLESS_PRINCIPAL",
}

var OrderCapacityEnum_value = map[string]int32{
	"ORDER_CAPACITY_UNSPECIFIED":            0,
	"ORDER_CAPACITY_AGENCY":                 1,
	"ORDER_CAPACITY_AGENT_FOR_OTHER_MEMBER": 2,
	"ORDER_CAPACITY_INDIVIDUAL":             3,
	"ORDER_CAPACITY_PRINCIPAL":              4,
	"ORDER_CAPACITY_PROPRIETARY":            5,
	"ORDER_CAPACITY_RISKLESS_PRINCIPAL":     6,
}

func (x OrderCapacityEnum) String() string {
	return proto.EnumName(OrderCapacityEnum_name, int32(x))
}

func (OrderCapacityEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{16}
}

type MDOriginTypeEnum int32

const (
	MDOriginTypeEnum_MD_ORIGIN_TYPE_UNSPECIFIED MDOriginTypeEnum = 0
	MDOriginTypeEnum_MD_ORIGIN_TYPE_BOOK        MDOriginTypeEnum = 1
	MDOriginTypeEnum_MD_ORIGIN_TYPE_CROSS       MDOriginTypeEnum = 2
	MDOriginTypeEnum_MD_ORIGIN_TYPE_OFF_BOOK    MDOriginTypeEnum = 3
)

var MDOriginTypeEnum_name = map[int32]string{
	0: "MD_ORIGIN_TYPE_UNSPECIFIED",
	1: "MD_ORIGIN_TYPE_BOOK",
	2: "MD_ORIGIN_TYPE_CROSS",
	3: "MD_ORIGIN_TYPE_OFF_BOOK",
}

var MDOriginTypeEnum_value = map[string]int32{
	"MD_ORIGIN_TYPE_UNSPECIFIED": 0,
	"MD_ORIGIN_TYPE_BOOK":        1,
	"MD_ORIGIN_TYPE_CROSS":       2,
	"MD_ORIGIN_TYPE_OFF_BOOK":    3,
}

func (x MDOriginTypeEnum) String() string {
	return proto.EnumName(MDOriginTypeEnum_name, int32(x))
}

func (MDOriginTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{17}
}

type SettlTypeEnum int32

const (
	SettlTypeEnum_SETTL_TYPE_UNSPECIFIED             SettlTypeEnum = 0
	SettlTypeEnum_SETTL_TYPE_CASH                    SettlTypeEnum = 1
	SettlTypeEnum_SETTL_TYPE_FUTURE                  SettlTypeEnum = 2
	SettlTypeEnum_SETTL_TYPE_NEXT_DAY                SettlTypeEnum = 3
	SettlTypeEnum_SETTL_TYPE_REGULAR                 SettlTypeEnum = 4
	SettlTypeEnum_SETTL_TYPE_SELLERS_OPTION          SettlTypeEnum = 5
	SettlTypeEnum_SETTL_TYPE_TPLUS2                  SettlTypeEnum = 6
	SettlTypeEnum_SETTL_TYPE_TPLUS3                  SettlTypeEnum = 7
	SettlTypeEnum_SETTL_TYPE_TPLUS4                  SettlTypeEnum = 8
	SettlTypeEnum_SETTL_TYPE_WHEN_AND_IF_ISSUED      SettlTypeEnum = 9
	SettlTypeEnum_SETTL_TYPE_TPLUS5                  SettlTypeEnum = 10
	SettlTypeEnum_SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT SettlTypeEnum = 11
	SettlTypeEnum_SETTL_TYPE_BROKEN_DATE             SettlTypeEnum = 12
)

var SettlTypeEnum_name = map[int32]string{
	0:  "SETTL_TYPE_UNSPECIFIED",
	1:  "SETTL_TYPE_CASH",
	2:  "SETTL_TYPE_FUTURE",
	3:  "SETTL_TYPE_NEXT_DAY",
	4:  "SETTL_TYPE_REGULAR",
	5:  "SETTL_TYPE_SELLERS_OPTION",
	6:  "SETTL_TYPE_TPLUS2",
	7:  "SETTL_TYPE_TPLUS3",
	8:  "SETTL_TYPE_TPLUS4",
	9:  "SETTL_TYPE_WHEN_AND_IF_ISSUED",
	10: "SETTL_TYPE_TPLUS5",
	11: "SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT",
	12: "SETTL_TYPE_BROKEN_DATE",
}

var SettlTypeEnum_value = map[string]int32{
	"SETTL_TYPE_UNSPECIFIED":             0,
	"SETTL_TYPE_CASH":                    1,
	"SETTL_TYPE_FUTURE":                  2,
	"SETTL_TYPE_NEXT_DAY":                3,
	"SETTL_TYPE_REGULAR":                 4,
	"SETTL_TYPE_SELLERS_OPTION":          5,
	"SETTL_TYPE_TPLUS2":                  6,
	"SETTL_TYPE_TPLUS3":                  7,
	"SETTL_TYPE_TPLUS4":                  8,
	"SETTL_TYPE_WHEN_AND_IF_ISSUED":      9,
	"SETTL_TYPE_TPLUS5":                  10,
	"SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT": 11,
	"SETTL_TYPE_BROKEN_DATE":             12,
}

func (x SettlTypeEnum) String() string {
	return proto.EnumName(SettlTypeEnum_name, int32(x))
}

func (SettlTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{18}
}

type MDQuoteTypeEnum int32

const (
	MDQuoteTypeEnum_MD_QUOTE_TYPE_UNSPECIFIED              MDQuoteTypeEnum = 0
	MDQuoteTypeEnum_MD_QUOTE_TYPE_COUNTER                  MDQuoteTypeEnum = 1
	MDQuoteTypeEnum_MD_QUOTE_TYPE_INDICATIVE               MDQuoteTypeEnum = 2
	MDQuoteTypeEnum_MD_QUOTE_TYPE_INDICATIVE_AND_TRADEABLE MDQuoteTypeEnum = 3
	MDQuoteTypeEnum_MD_QUOTE_TYPE_RESTRICTED_TRADEABLE     MDQuoteTypeEnum = 4
	MDQuoteTypeEnum_MD_QUOTE_TYPE_TRADEABLE                MDQuoteTypeEnum = 5
)

var MDQuoteTypeEnum_name = map[int32]string{
	0: "MD_QUOTE_TYPE_UNSPECIFIED",
	1: "MD_QUOTE_TYPE_COUNTER",
	2: "MD_QUOTE_TYPE_INDICATIVE",
	3: "MD_QUOTE_TYPE_INDICATIVE_AND_TRADEABLE",
	4: "MD_QUOTE_TYPE_RESTRICTED_TRADEABLE",
	5: "MD_QUOTE_TYPE_TRADEABLE",
}

var MDQuoteTypeEnum_value = map[string]int32{
	"MD_QUOTE_TYPE_UNSPECIFIED":              0,
	"MD_QUOTE_TYPE_COUNTER":                  1,
	"MD_QUOTE_TYPE_INDICATIVE":               2,
	"MD_QUOTE_TYPE_INDICATIVE_AND_TRADEABLE": 3,
	"MD_QUOTE_TYPE_RESTRICTED_TRADEABLE":     4,
	"MD_QUOTE_TYPE_TRADEABLE":                5,
}

func (x MDQuoteTypeEnum) String() string {
	return proto.EnumName(MDQuoteTypeEnum_name, int32(x))
}

func (MDQuoteTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{19}
}

type DealingCapacityEnum int32

const (
	DealingCapacityEnum_DEALING_CAPACITY_UNSPECIFIED        DealingCapacityEnum = 0
	DealingCapacityEnum_DEALING_CAPACITY_AGENT              DealingCapacityEnum = 1
	DealingCapacityEnum_DEALING_CAPACITY_PRINCIPAL          DealingCapacityEnum = 2
	DealingCapacityEnum_DEALING_CAPACITY_RISKLESS_PRINCIPAL DealingCapacityEnum = 3
)

var DealingCapacityEnum_name = map[int32]string{
	0: "DEALING_CAPACITY_UNSPECIFIED",
	1: "DEALING_CAPACITY_AGENT",
	2: "DEALING_CAPACITY_PRINCIPAL",
	3: "DEALING_CAPACITY_RISKLESS_PRINCIPAL",
}

var DealingCapacityEnum_value = map[string]int32{
	"DEALING_CAPACITY_UNSPECIFIED":        0,
	"DEALING_CAPACITY_AGENT":              1,
	"DEALING_CAPACITY_PRINCIPAL":          2,
	"DEALING_CAPACITY_RISKLESS_PRINCIPAL": 3,
}

func (x DealingCapacityEnum) String() string {
	return proto.EnumName(DealingCapacityEnum_name, int32(x))
}

func (DealingCapacityEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{20}
}

type MDUpdateActionEnum int32

const (
	MDUpdateActionEnum_MD_UPDATE_ACTION_UNSPECIFIED MDUpdateActionEnum = 0
	MDUpdateActionEnum_MD_UPDATE_ACTION_CHANGE      MDUpdateActionEnum = 1
	MDUpdateActionEnum_MD_UPDATE_ACTION_DELETE      MDUpdateActionEnum = 2
	MDUpdateActionEnum_MD_UPDATE_ACTION_NEW         MDUpdateActionEnum = 3
	MDUpdateActionEnum_MD_UPDATE_ACTION_DELETE_FROM MDUpdateActionEnum = 4
	MDUpdateActionEnum_MD_UPDATE_ACTION_DELETE_THRU MDUpdateActionEnum = 5
	MDUpdateActionEnum_MD_UPDATE_ACTION_OVERLAY     MDUpdateActionEnum = 6
)

var MDUpdateActionEnum_name = map[int32]string{
	0: "MD_UPDATE_ACTION_UNSPECIFIED",
	1: "MD_UPDATE_ACTION_CHANGE",
	2: "MD_UPDATE_ACTION_DELETE",
	3: "MD_UPDATE_ACTION_NEW",
	4: "MD_UPDATE_ACTION_DELETE_FROM",
	5: "MD_UPDATE_ACTION_DELETE_THRU",
	6: "MD_UPDATE_ACTION_OVERLAY",
}

var MDUpdateActionEnum_value = map[string]int32{
	"MD_UPDATE_ACTION_UNSPECIFIED": 0,
	"MD_UPDATE_ACTION_CHANGE":      1,
	"MD_UPDATE_ACTION_DELETE":      2,
	"MD_UPDATE_ACTION_NEW":         3,
	"MD_UPDATE_ACTION_DELETE_FROM": 4,
	"MD_UPDATE_ACTION_DELETE_THRU": 5,
	"MD_UPDATE_ACTION_OVERLAY":     6,
}

func (x MDUpdateActionEnum) String() string {
	return proto.EnumName(MDUpdateActionEnum_name, int32(x))
}

func (MDUpdateActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{21}
}

type DeleteReasonEnum int32

const (
	DeleteReasonEnum_DELETE_REASON_UNSPECIFIED  DeleteReasonEnum = 0
	DeleteReasonEnum_DELETE_REASON_CANCELLATION DeleteReasonEnum = 1
	DeleteReasonEnum_DELETE_REASON_ERROR        DeleteReasonEnum = 2
)

var DeleteReasonEnum_name = map[int32]string{
	0: "DELETE_REASON_UNSPECIFIED",
	1: "DELETE_REASON_CANCELLATION",
	2: "DELETE_REASON_ERROR",
}

var DeleteReasonEnum_value = map[string]int32{
	"DELETE_REASON_UNSPECIFIED":  0,
	"DELETE_REASON_CANCELLATION": 1,
	"DELETE_REASON_ERROR":        2,
}

func (x DeleteReasonEnum) String() string {
	return proto.EnumName(DeleteReasonEnum_name, int32(x))
}

func (DeleteReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{22}
}

type FinancialStatusEnum int32

const (
	FinancialStatusEnum_FINANCIAL_STATUS_UNSPECIFIED       FinancialStatusEnum = 0
	FinancialStatusEnum_FINANCIAL_STATUS_BANKRUPT          FinancialStatusEnum = 1
	FinancialStatusEnum_FINANCIAL_STATUS_PENDING_DELISTING FinancialStatusEnum = 2
	FinancialStatusEnum_FINANCIAL_STATUS_RESTRICTED        FinancialStatusEnum = 3
)

var FinancialStatusEnum_name = map[int32]string{
	0: "FINANCIAL_STATUS_UNSPECIFIED",
	1: "FINANCIAL_STATUS_BANKRUPT",
	2: "FINANCIAL_STATUS_PENDING_DELISTING",
	3: "FINANCIAL_STATUS_RESTRICTED",
}

var FinancialStatusEnum_value = map[string]int32{
	"FINANCIAL_STATUS_UNSPECIFIED":       0,
	"FINANCIAL_STATUS_BANKRUPT":          1,
	"FINANCIAL_STATUS_PENDING_DELISTING": 2,
	"FINANCIAL_STATUS_RESTRICTED":        3,
}

func (x FinancialStatusEnum) String() string {
	return proto.EnumName(FinancialStatusEnum_name, int32(x))
}

func (FinancialStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{23}
}

type CorporateActionEnum int32

const (
	CorporateActionEnum_CORPORATE_ACTION_UNSPECIFIED                  CorporateActionEnum = 0
	CorporateActionEnum_CORPORATE_ACTION_EX_DISTRIBUTION              CorporateActionEnum = 1
	CorporateActionEnum_CORPORATE_ACTION_EX_DIVIDEND                  CorporateActionEnum = 2
	CorporateActionEnum_CORPORATE_ACTION_EX_INTEREST                  CorporateActionEnum = 3
	CorporateActionEnum_CORPORATE_ACTION_EX_RIGHTS                    CorporateActionEnum = 4
	CorporateActionEnum_CORPORATE_ACTION_NEW                          CorporateActionEnum = 5
	CorporateActionEnum_CORPORATE_ACTION_CASH_DIVIDEND                CorporateActionEnum = 6
	CorporateActionEnum_CORPORATE_ACTION_CUSIP                        CorporateActionEnum = 7
	CorporateActionEnum_CORPORATE_ACTION_LIQUIDATION_REORGANIZATION   CorporateActionEnum = 8
	CorporateActionEnum_CORPORATE_ACTION_MERGER_REORGANIZATION        CorporateActionEnum = 9
	CorporateActionEnum_CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT      CorporateActionEnum = 10
	CorporateActionEnum_CORPORATE_ACTION_POSITION_CONSOLIDATION       CorporateActionEnum = 11
	CorporateActionEnum_CORPORATE_ACTION_REVERSE_STOCK_SPLIT          CorporateActionEnum = 12
	CorporateActionEnum_CORPORATE_ACTION_RIGHTS_OFFERING              CorporateActionEnum = 13
	CorporateActionEnum_CORPORATE_ACTION_SHAREHOLDER_MEETING          CorporateActionEnum = 14
	CorporateActionEnum_CORPORATE_ACTION_SPECIAL_ACTION               CorporateActionEnum = 15
	CorporateActionEnum_CORPORATE_ACTION_SPINOFF                      CorporateActionEnum = 16
	CorporateActionEnum_CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT CorporateActionEnum = 17
	CorporateActionEnum_CORPORATE_ACTION_STOCK_DIVIDEND               CorporateActionEnum = 18
	CorporateActionEnum_CORPORATE_ACTION_SYMBOL_CONVERSION            CorporateActionEnum = 19
	CorporateActionEnum_CORPORATE_ACTION_TENDER_OFFER                 CorporateActionEnum = 20
	CorporateActionEnum_CORPORATE_ACTION_WARRANT                      CorporateActionEnum = 21
	CorporateActionEnum_CORPORATE_ACTION_LEAP_ROLLOVER                CorporateActionEnum = 22
	CorporateActionEnum_CORPORATE_ACTION_SUCCESSION_EVENT             CorporateActionEnum = 23
)

var CorporateActionEnum_name = map[int32]string{
	0:  "CORPORATE_ACTION_UNSPECIFIED",
	1:  "CORPORATE_ACTION_EX_DISTRIBUTION",
	2:  "CORPORATE_ACTION_EX_DIVIDEND",
	3:  "CORPORATE_ACTION_EX_INTEREST",
	4:  "CORPORATE_ACTION_EX_RIGHTS",
	5:  "CORPORATE_ACTION_NEW",
	6:  "CORPORATE_ACTION_CASH_DIVIDEND",
	7:  "CORPORATE_ACTION_CUSIP",
	8:  "CORPORATE_ACTION_LIQUIDATION_REORGANIZATION",
	9:  "CORPORATE_ACTION_MERGER_REORGANIZATION",
	10: "CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT",
	11: "CORPORATE_ACTION_POSITION_CONSOLIDATION",
	12: "CORPORATE_ACTION_REVERSE_STOCK_SPLIT",
	13: "CORPORATE_ACTION_RIGHTS_OFFERING",
	14: "CORPORATE_ACTION_SHAREHOLDER_MEETING",
	15: "CORPORATE_ACTION_SPECIAL_ACTION",
	16: "CORPORATE_ACTION_SPINOFF",
	17: "CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT",
	18: "CORPORATE_ACTION_STOCK_DIVIDEND",
	19: "CORPORATE_ACTION_SYMBOL_CONVERSION",
	20: "CORPORATE_ACTION_TENDER_OFFER",
	21: "CORPORATE_ACTION_WARRANT",
	22: "CORPORATE_ACTION_LEAP_ROLLOVER",
	23: "CORPORATE_ACTION_SUCCESSION_EVENT",
}

var CorporateActionEnum_value = map[string]int32{
	"CORPORATE_ACTION_UNSPECIFIED":                  0,
	"CORPORATE_ACTION_EX_DISTRIBUTION":              1,
	"CORPORATE_ACTION_EX_DIVIDEND":                  2,
	"CORPORATE_ACTION_EX_INTEREST":                  3,
	"CORPORATE_ACTION_EX_RIGHTS":                    4,
	"CORPORATE_ACTION_NEW":                          5,
	"CORPORATE_ACTION_CASH_DIVIDEND":                6,
	"CORPORATE_ACTION_CUSIP":                        7,
	"CORPORATE_ACTION_LIQUIDATION_REORGANIZATION":   8,
	"CORPORATE_ACTION_MERGER_REORGANIZATION":        9,
	"CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT":      10,
	"CORPORATE_ACTION_POSITION_CONSOLIDATION":       11,
	"CORPORATE_ACTION_REVERSE_STOCK_SPLIT":          12,
	"CORPORATE_ACTION_RIGHTS_OFFERING":              13,
	"CORPORATE_ACTION_SHAREHOLDER_MEETING":          14,
	"CORPORATE_ACTION_SPECIAL_ACTION":               15,
	"CORPORATE_ACTION_SPINOFF":                      16,
	"CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT": 17,
	"CORPORATE_ACTION_STOCK_DIVIDEND":               18,
	"CORPORATE_ACTION_SYMBOL_CONVERSION":            19,
	"CORPORATE_ACTION_TENDER_OFFER":                 20,
	"CORPORATE_ACTION_WARRANT":                      21,
	"CORPORATE_ACTION_LEAP_ROLLOVER":                22,
	"CORPORATE_ACTION_SUCCESSION_EVENT":             23,
}

func (x CorporateActionEnum) String() string {
	return proto.EnumName(CorporateActionEnum_name, int32(x))
}

func (CorporateActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{24}
}

type MatchTypeEnum int32

const (
	MatchTypeEnum_MATCH_TYPE_UNSPECIFIED                              MatchTypeEnum = 0
	MatchTypeEnum_MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 1
	MatchTypeEnum_MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 2
	MatchTypeEnum_MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 3
	MatchTypeEnum_MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 4
	MatchTypeEnum_MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 5
	MatchTypeEnum_MATCH_TYPE_ACTACCEPTED_TRADE                        MatchTypeEnum = 6
	MatchTypeEnum_MATCH_TYPE_ACTDEFAULT_AFTER_M2                      MatchTypeEnum = 7
	MatchTypeEnum_MATCH_TYPE_ACTDEFAULT_TRADE                         MatchTypeEnum = 8
	MatchTypeEnum_MATCH_TYPE_ACTM6MATCH                               MatchTypeEnum = 9
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES           MatchTypeEnum = 10
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS2BADGES                  MatchTypeEnum = 11
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME        MatchTypeEnum = 12
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS4BADGES                  MatchTypeEnum = 13
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME        MatchTypeEnum = 14
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME               MatchTypeEnum = 15
	MatchTypeEnum_MATCH_TYPE_OCSLOCKED_IN                             MatchTypeEnum = 16
	MatchTypeEnum_MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS MatchTypeEnum = 17
	MatchTypeEnum_MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES      MatchTypeEnum = 18
	MatchTypeEnum_MATCH_TYPE_AUTO_MATCH                               MatchTypeEnum = 19
	MatchTypeEnum_MATCH_TYPE_CALL_AUCTION                             MatchTypeEnum = 20
	MatchTypeEnum_MATCH_TYPE_CONFIRMED_TRADE_REPORT                   MatchTypeEnum = 21
	MatchTypeEnum_MATCH_TYPE_COUNTER_ORDER_SELECTION                  MatchTypeEnum = 22
	MatchTypeEnum_MATCH_TYPE_CROSS_AUCTION                            MatchTypeEnum = 23
	MatchTypeEnum_MATCH_TYPE_ONE_PARTY_TRADE_REPORT                   MatchTypeEnum = 24
	MatchTypeEnum_MATCH_TYPE_TWO_PARTY_TRADE_REPORT                   MatchTypeEnum = 25
	MatchTypeEnum_MATCH_TYPE_ISSUING                                  MatchTypeEnum = 26
)

var MatchTypeEnum_name = map[int32]string{
	0:  "MATCH_TYPE_UNSPECIFIED",
	1:  "MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY",
	2:  "MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY",
	3:  "MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY",
	4:  "MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY",
	5:  "MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY",
	6:  "MATCH_TYPE_ACTACCEPTED_TRADE",
	7:  "MATCH_TYPE_ACTDEFAULT_AFTER_M2",
	8:  "MATCH_TYPE_ACTDEFAULT_TRADE",
	9:  "MATCH_TYPE_ACTM6MATCH",
	10: "MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES",
	11: "MATCH_TYPE_EXACT_MATCH_PLUS2BADGES",
	12: "MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME",
	13: "MATCH_TYPE_EXACT_MATCH_PLUS4BADGES",
	14: "MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME",
	15: "MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME",
	16: "MATCH_TYPE_OCSLOCKED_IN",
	17: "MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS",
	18: "MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES",
	19: "MATCH_TYPE_AUTO_MATCH",
	20: "MATCH_TYPE_CALL_AUCTION",
	21: "MATCH_TYPE_CONFIRMED_TRADE_REPORT",
	22: "MATCH_TYPE_COUNTER_ORDER_SELECTION",
	23: "MATCH_TYPE_CROSS_AUCTION",
	24: "MATCH_TYPE_ONE_PARTY_TRADE_REPORT",
	25: "MATCH_TYPE_TWO_PARTY_TRADE_REPORT",
	26: "MATCH_TYPE_ISSUING",
}

var MatchTypeEnum_value = map[string]int32{
	"MATCH_TYPE_UNSPECIFIED":                              0,
	"MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY":        1,
	"MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY":        2,
	"MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY":        3,
	"MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY":        4,
	"MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY":        5,
	"MATCH_TYPE_ACTACCEPTED_TRADE":                        6,
	"MATCH_TYPE_ACTDEFAULT_AFTER_M2":                      7,
	"MATCH_TYPE_ACTDEFAULT_TRADE":                         8,
	"MATCH_TYPE_ACTM6MATCH":                               9,
	"MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES":           10,
	"MATCH_TYPE_EXACT_MATCH_PLUS2BADGES":                  11,
	"MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME":        12,
	"MATCH_TYPE_EXACT_MATCH_PLUS4BADGES":                  13,
	"MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME":        14,
	"MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME":               15,
	"MATCH_TYPE_OCSLOCKED_IN":                             16,
	"MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS": 17,
	"MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES":      18,
	"MATCH_TYPE_AUTO_MATCH":                               19,
	"MATCH_TYPE_CALL_AUCTION":                             20,
	"MATCH_TYPE_CONFIRMED_TRADE_REPORT":                   21,
	"MATCH_TYPE_COUNTER_ORDER_SELECTION":                  22,
	"MATCH_TYPE_CROSS_AUCTION":                            23,
	"MATCH_TYPE_ONE_PARTY_TRADE_REPORT":                   24,
	"MATCH_TYPE_TWO_PARTY_TRADE_REPORT":                   25,
	"MATCH_TYPE_ISSUING":                                  26,
}

func (x MatchTypeEnum) String() string {
	return proto.EnumName(MatchTypeEnum_name, int32(x))
}

func (MatchTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{25}
}

type MDSecSizeTypeEnum int32

const (
	MDSecSizeTypeEnum_MD_SEC_SIZE_TYPE_UNSPECIFIED MDSecSizeTypeEnum = 0
	MDSecSizeTypeEnum_MD_SEC_SIZE_TYPE_CUSTOMER    MDSecSizeTypeEnum = 1
)

var MDSecSizeTypeEnum_name = map[int32]string{
	0: "MD_SEC_SIZE_TYPE_UNSPECIFIED",
	1: "MD_SEC_SIZE_TYPE_CUSTOMER",
}

var MDSecSizeTypeEnum_value = map[string]int32{
	"MD_SEC_SIZE_TYPE_UNSPECIFIED": 0,
	"MD_SEC_SIZE_TYPE_CUSTOMER":    1,
}

func (x MDSecSizeTypeEnum) String() string {
	return proto.EnumName(MDSecSizeTypeEnum_name, int32(x))
}

func (MDSecSizeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{26}
}

type StatsTypeEnum int32

const (
	StatsTypeEnum_STATS_TYPE_UNSPECIFIED   StatsTypeEnum = 0
	StatsTypeEnum_STATS_TYPE_AVERAGE_PRICE StatsTypeEnum = 1
	StatsTypeEnum_STATS_TYPE_EXCHANGE_LAST StatsTypeEnum = 2
	StatsTypeEnum_STATS_TYPE_HIGH          StatsTypeEnum = 3
	StatsTypeEnum_STATS_TYPE_TURNOVER      StatsTypeEnum = 4
)

var StatsTypeEnum_name = map[int32]string{
	0: "STATS_TYPE_UNSPECIFIED",
	1: "STATS_TYPE_AVERAGE_PRICE",
	2: "STATS_TYPE_EXCHANGE_LAST",
	3: "STATS_TYPE_HIGH",
	4: "STATS_TYPE_TURNOVER",
}

var StatsTypeEnum_value = map[string]int32{
	"STATS_TYPE_UNSPECIFIED":   0,
	"STATS_TYPE_AVERAGE_PRICE": 1,
	"STATS_TYPE_EXCHANGE_LAST": 2,
	"STATS_TYPE_HIGH":          3,
	"STATS_TYPE_TURNOVER":      4,
}

func (x StatsTypeEnum) String() string {
	return proto.EnumName(StatsTypeEnum_name, int32(x))
}

func (StatsTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{27}
}

type StreamAsgnTypeEnum int32

const (
	StreamAsgnTypeEnum_STREAM_ASGN_TYPE_UNSPECIFIED StreamAsgnTypeEnum = 0
	StreamAsgnTypeEnum_STREAM_ASGN_TYPE_ASSIGNMENT  StreamAsgnTypeEnum = 1
	StreamAsgnTypeEnum_STREAM_ASGN_TYPE_REJECTED    StreamAsgnTypeEnum = 2
	StreamAsgnTypeEnum_STREAM_ASGN_TYPE_TERMINATE   StreamAsgnTypeEnum = 3
)

var StreamAsgnTypeEnum_name = map[int32]string{
	0: "STREAM_ASGN_TYPE_UNSPECIFIED",
	1: "STREAM_ASGN_TYPE_ASSIGNMENT",
	2: "STREAM_ASGN_TYPE_REJECTED",
	3: "STREAM_ASGN_TYPE_TERMINATE",
}

var StreamAsgnTypeEnum_value = map[string]int32{
	"STREAM_ASGN_TYPE_UNSPECIFIED": 0,
	"STREAM_ASGN_TYPE_ASSIGNMENT":  1,
	"STREAM_ASGN_TYPE_REJECTED":    2,
	"STREAM_ASGN_TYPE_TERMINATE":   3,
}

func (x StreamAsgnTypeEnum) String() string {
	return proto.EnumName(StreamAsgnTypeEnum_name, int32(x))
}

func (StreamAsgnTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{28}
}

type StreamAsgnRejReasonEnum int32

const (
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_UNSPECIFIED                      StreamAsgnRejReasonEnum = 0
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_EXCEEDS_MAXIMUM_SIZE             StreamAsgnRejReasonEnum = 1
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_NO_AVAILABLE_STREAM              StreamAsgnRejReasonEnum = 2
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_OTHER                            StreamAsgnRejReasonEnum = 3
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_UNKNOWN_CLIENT                   StreamAsgnRejReasonEnum = 4
	StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_UNKNOWN_OR_INVALID_CURRENCY_PAIR StreamAsgnRejReasonEnum = 5
)

var StreamAsgnRejReasonEnum_name = map[int32]string{
	0: "STREAM_ASGN_REJ_REASON_UNSPECIFIED",
	1: "STREAM_ASGN_REJ_REASON_EXCEEDS_MAXIMUM_SIZE",
	2: "STREAM_ASGN_REJ_REASON_NO_AVAILABLE_STREAM",
	3: "STREAM_ASGN_REJ_REASON_OTHER",
	4: "STREAM_ASGN_REJ_REASON_UNKNOWN_CLIENT",
	5: "STREAM_ASGN_REJ_REASON_UNKNOWN_OR_INVALID_CURRENCY_PAIR",
}

var StreamAsgnRejReasonEnum_value = map[string]int32{
	"STREAM_ASGN_REJ_REASON_UNSPECIFIED":                      0,
	"STREAM_ASGN_REJ_REASON_EXCEEDS_MAXIMUM_SIZE":             1,
	"STREAM_ASGN_REJ_REASON_NO_AVAILABLE_STREAM":              2,
	"STREAM_ASGN_REJ_REASON_OTHER":                            3,
	"STREAM_ASGN_REJ_REASON_UNKNOWN_CLIENT":                   4,
	"STREAM_ASGN_REJ_REASON_UNKNOWN_OR_INVALID_CURRENCY_PAIR": 5,
}

func (x StreamAsgnRejReasonEnum) String() string {
	return proto.EnumName(StreamAsgnRejReasonEnum_name, int32(x))
}

func (StreamAsgnRejReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{29}
}

type SubscriptionRequestTypeEnum int32

const (
	SubscriptionRequestTypeEnum_SUBSCRIPTION_REQUEST_TYPE_UNSPECIFIED               SubscriptionRequestTypeEnum = 0
	SubscriptionRequestTypeEnum_SUBSCRIPTION_REQUEST_TYPE_DISABLE_PREVIOUS_SNAPSHOT SubscriptionRequestTypeEnum = 1
	SubscriptionRequestTypeEnum_SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT                  SubscriptionRequestTypeEnum = 2
	SubscriptionRequestTypeEnum_SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT_AND_UPDATES      SubscriptionRequestTypeEnum = 3
)

var SubscriptionRequestTypeEnum_name = map[int32]string{
	0: "SUBSCRIPTION_REQUEST_TYPE_UNSPECIFIED",
	1: "SUBSCRIPTION_REQUEST_TYPE_DISABLE_PREVIOUS_SNAPSHOT",
	2: "SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT",
	3: "SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT_AND_UPDATES",
}

var SubscriptionRequestTypeEnum_value = map[string]int32{
	"SUBSCRIPTION_REQUEST_TYPE_UNSPECIFIED":               0,
	"SUBSCRIPTION_REQUEST_TYPE_DISABLE_PREVIOUS_SNAPSHOT": 1,
	"SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT":                  2,
	"SUBSCRIPTION_REQUEST_TYPE_SNAPSHOT_AND_UPDATES":      3,
}

func (x SubscriptionRequestTypeEnum) String() string {
	return proto.EnumName(SubscriptionRequestTypeEnum_name, int32(x))
}

func (SubscriptionRequestTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{30}
}

type MDUpdateTypeEnum int32

const (
	MDUpdateTypeEnum_MD_UPDATE_TYPE_UNSPECIFIED         MDUpdateTypeEnum = 0
	MDUpdateTypeEnum_MD_UPDATE_TYPE_FULL_REFRESH        MDUpdateTypeEnum = 1
	MDUpdateTypeEnum_MD_UPDATE_TYPE_INCREMENTAL_REFRESH MDUpdateTypeEnum = 2
)

var MDUpdateTypeEnum_name = map[int32]string{
	0: "MD_UPDATE_TYPE_UNSPECIFIED",
	1: "MD_UPDATE_TYPE_FULL_REFRESH",
	2: "MD_UPDATE_TYPE_INCREMENTAL_REFRESH",
}

var MDUpdateTypeEnum_value = map[string]int32{
	"MD_UPDATE_TYPE_UNSPECIFIED":         0,
	"MD_UPDATE_TYPE_FULL_REFRESH":        1,
	"MD_UPDATE_TYPE_INCREMENTAL_REFRESH": 2,
}

func (x MDUpdateTypeEnum) String() string {
	return proto.EnumName(MDUpdateTypeEnum_name, int32(x))
}

func (MDUpdateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{31}
}

type ApplQueueActionEnum int32

const (
	ApplQueueActionEnum_APPL_QUEUE_ACTION_UNSPECIFIED     ApplQueueActionEnum = 0
	ApplQueueActionEnum_APPL_QUEUE_ACTION_END_SESSION     ApplQueueActionEnum = 1
	ApplQueueActionEnum_APPL_QUEUE_ACTION_NO_ACTION_TAKEN ApplQueueActionEnum = 2
	ApplQueueActionEnum_APPL_QUEUE_ACTION_OVERLAY_LAST    ApplQueueActionEnum = 3
	ApplQueueActionEnum_APPL_QUEUE_ACTION_QUEUE_FLUSHED   ApplQueueActionEnum = 4
)

var ApplQueueActionEnum_name = map[int32]string{
	0: "APPL_QUEUE_ACTION_UNSPECIFIED",
	1: "APPL_QUEUE_ACTION_END_SESSION",
	2: "APPL_QUEUE_ACTION_NO_ACTION_TAKEN",
	3: "APPL_QUEUE_ACTION_OVERLAY_LAST",
	4: "APPL_QUEUE_ACTION_QUEUE_FLUSHED",
}

var ApplQueueActionEnum_value = map[string]int32{
	"APPL_QUEUE_ACTION_UNSPECIFIED":     0,
	"APPL_QUEUE_ACTION_END_SESSION":     1,
	"APPL_QUEUE_ACTION_NO_ACTION_TAKEN": 2,
	"APPL_QUEUE_ACTION_OVERLAY_LAST":    3,
	"APPL_QUEUE_ACTION_QUEUE_FLUSHED":   4,
}

func (x ApplQueueActionEnum) String() string {
	return proto.EnumName(ApplQueueActionEnum_name, int32(x))
}

func (ApplQueueActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{32}
}

type MDBookTypeEnum int32

const (
	MDBookTypeEnum_MD_BOOK_TYPE_UNSPECIFIED MDBookTypeEnum = 0
	MDBookTypeEnum_MD_BOOK_TYPE_ORDER_DEPTH MDBookTypeEnum = 1
	MDBookTypeEnum_MD_BOOK_TYPE_PRICE_DEPTH MDBookTypeEnum = 2
	MDBookTypeEnum_MD_BOOK_TYPE_TOP_OF_BOOK MDBookTypeEnum = 3
)

var MDBookTypeEnum_name = map[int32]string{
	0: "MD_BOOK_TYPE_UNSPECIFIED",
	1: "MD_BOOK_TYPE_ORDER_DEPTH",
	2: "MD_BOOK_TYPE_PRICE_DEPTH",
	3: "MD_BOOK_TYPE_TOP_OF_BOOK",
}

var MDBookTypeEnum_value = map[string]int32{
	"MD_BOOK_TYPE_UNSPECIFIED": 0,
	"MD_BOOK_TYPE_ORDER_DEPTH": 1,
	"MD_BOOK_TYPE_PRICE_DEPTH": 2,
	"MD_BOOK_TYPE_TOP_OF_BOOK": 3,
}

func (x MDBookTypeEnum) String() string {
	return proto.EnumName(MDBookTypeEnum_name, int32(x))
}

func (MDBookTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{33}
}

type ApplQueueResolutionEnum int32

const (
	ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_UNSPECIFIED     ApplQueueResolutionEnum = 0
	ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_END_SESSION     ApplQueueResolutionEnum = 1
	ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_NO_ACTION_TAKEN ApplQueueResolutionEnum = 2
	ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_OVERLAY_LAST    ApplQueueResolutionEnum = 3
	ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_QUEUE_FLUSHED   ApplQueueResolutionEnum = 4
)

var ApplQueueResolutionEnum_name = map[int32]string{
	0: "APPL_QUEUE_RESOLUTION_UNSPECIFIED",
	1: "APPL_QUEUE_RESOLUTION_END_SESSION",
	2: "APPL_QUEUE_RESOLUTION_NO_ACTION_TAKEN",
	3: "APPL_QUEUE_RESOLUTION_OVERLAY_LAST",
	4: "APPL_QUEUE_RESOLUTION_QUEUE_FLUSHED",
}

var ApplQueueResolutionEnum_value = map[string]int32{
	"APPL_QUEUE_RESOLUTION_UNSPECIFIED":     0,
	"APPL_QUEUE_RESOLUTION_END_SESSION":     1,
	"APPL_QUEUE_RESOLUTION_NO_ACTION_TAKEN": 2,
	"APPL_QUEUE_RESOLUTION_OVERLAY_LAST":    3,
	"APPL_QUEUE_RESOLUTION_QUEUE_FLUSHED":   4,
}

func (x ApplQueueResolutionEnum) String() string {
	return proto.EnumName(ApplQueueResolutionEnum_name, int32(x))
}

func (ApplQueueResolutionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{34}
}

type MDReqRejReasonEnum int32

const (
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSPECIFIED                           MDReqRejReasonEnum = 0
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_DUPLICATE_MD_REQ_ID                   MDReqRejReasonEnum = 1
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_INSUFFICIENT_BANDWIDTH                MDReqRejReasonEnum = 2
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_INSUFFICIENT_PERMISSIONS              MDReqRejReasonEnum = 3
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNKNOWN_SYMBOL                        MDReqRejReasonEnum = 4
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_AGGREGATED_BOOK           MDReqRejReasonEnum = 5
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_MARKET_DEPTH              MDReqRejReasonEnum = 6
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_MD_ENTRY_TYPE             MDReqRejReasonEnum = 7
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_MD_UPDATE_TYPE            MDReqRejReasonEnum = 8
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE MDReqRejReasonEnum = 9
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_MD_IMPLICIT_DELETE        MDReqRejReasonEnum = 10
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG    MDReqRejReasonEnum = 11
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_SCOPE                     MDReqRejReasonEnum = 12
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSUPPORTED_TRADING_SESSION_ID        MDReqRejReasonEnum = 13
	MDReqRejReasonEnum_MD_REQ_REJ_REASON_INSUFFICIENT_CREDIT                   MDReqRejReasonEnum = 14
)

var MDReqRejReasonEnum_name = map[int32]string{
	0:  "MD_REQ_REJ_REASON_UNSPECIFIED",
	1:  "MD_REQ_REJ_REASON_DUPLICATE_MD_REQ_ID",
	2:  "MD_REQ_REJ_REASON_INSUFFICIENT_BANDWIDTH",
	3:  "MD_REQ_REJ_REASON_INSUFFICIENT_PERMISSIONS",
	4:  "MD_REQ_REJ_REASON_UNKNOWN_SYMBOL",
	5:  "MD_REQ_REJ_REASON_UNSUPPORTED_AGGREGATED_BOOK",
	6:  "MD_REQ_REJ_REASON_UNSUPPORTED_MARKET_DEPTH",
	7:  "MD_REQ_REJ_REASON_UNSUPPORTED_MD_ENTRY_TYPE",
	8:  "MD_REQ_REJ_REASON_UNSUPPORTED_MD_UPDATE_TYPE",
	9:  "MD_REQ_REJ_REASON_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE",
	10: "MD_REQ_REJ_REASON_UNSUPPORTED_MD_IMPLICIT_DELETE",
	11: "MD_REQ_REJ_REASON_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG",
	12: "MD_REQ_REJ_REASON_UNSUPPORTED_SCOPE",
	13: "MD_REQ_REJ_REASON_UNSUPPORTED_TRADING_SESSION_ID",
	14: "MD_REQ_REJ_REASON_INSUFFICIENT_CREDIT",
}

var MDReqRejReasonEnum_value = map[string]int32{
	"MD_REQ_REJ_REASON_UNSPECIFIED":                           0,
	"MD_REQ_REJ_REASON_DUPLICATE_MD_REQ_ID":                   1,
	"MD_REQ_REJ_REASON_INSUFFICIENT_BANDWIDTH":                2,
	"MD_REQ_REJ_REASON_INSUFFICIENT_PERMISSIONS":              3,
	"MD_REQ_REJ_REASON_UNKNOWN_SYMBOL":                        4,
	"MD_REQ_REJ_REASON_UNSUPPORTED_AGGREGATED_BOOK":           5,
	"MD_REQ_REJ_REASON_UNSUPPORTED_MARKET_DEPTH":              6,
	"MD_REQ_REJ_REASON_UNSUPPORTED_MD_ENTRY_TYPE":             7,
	"MD_REQ_REJ_REASON_UNSUPPORTED_MD_UPDATE_TYPE":            8,
	"MD_REQ_REJ_REASON_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE": 9,
	"MD_REQ_REJ_REASON_UNSUPPORTED_MD_IMPLICIT_DELETE":        10,
	"MD_REQ_REJ_REASON_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG":    11,
	"MD_REQ_REJ_REASON_UNSUPPORTED_SCOPE":                     12,
	"MD_REQ_REJ_REASON_UNSUPPORTED_TRADING_SESSION_ID":        13,
	"MD_REQ_REJ_REASON_INSUFFICIENT_CREDIT":                   14,
}

func (x MDReqRejReasonEnum) String() string {
	return proto.EnumName(MDReqRejReasonEnum_name, int32(x))
}

func (MDReqRejReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{35}
}

type StreamAsgnReqTypeEnum int32

const (
	StreamAsgnReqTypeEnum_STREAM_ASGN_REQ_TYPE_UNSPECIFIED                             StreamAsgnReqTypeEnum = 0
	StreamAsgnReqTypeEnum_STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER StreamAsgnReqTypeEnum = 1
	StreamAsgnReqTypeEnum_STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER      StreamAsgnReqTypeEnum = 2
)

var StreamAsgnReqTypeEnum_name = map[int32]string{
	0: "STREAM_ASGN_REQ_TYPE_UNSPECIFIED",
	1: "STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER",
	2: "STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER",
}

var StreamAsgnReqTypeEnum_value = map[string]int32{
	"STREAM_ASGN_REQ_TYPE_UNSPECIFIED":                             0,
	"STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER": 1,
	"STREAM_ASGN_REQ_TYPE_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER":      2,
}

func (x StreamAsgnReqTypeEnum) String() string {
	return proto.EnumName(StreamAsgnReqTypeEnum_name, int32(x))
}

func (StreamAsgnReqTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{36}
}

type StreamAsgnAckTypeEnum int32

const (
	StreamAsgnAckTypeEnum_STREAM_ASGN_ACK_TYPE_UNSPECIFIED         StreamAsgnAckTypeEnum = 0
	StreamAsgnAckTypeEnum_STREAM_ASGN_ACK_TYPE_ASSIGNMENT_ACCEPTED StreamAsgnAckTypeEnum = 1
	StreamAsgnAckTypeEnum_STREAM_ASGN_ACK_TYPE_ASSIGNMENT_REJECTED StreamAsgnAckTypeEnum = 2
)

var StreamAsgnAckTypeEnum_name = map[int32]string{
	0: "STREAM_ASGN_ACK_TYPE_UNSPECIFIED",
	1: "STREAM_ASGN_ACK_TYPE_ASSIGNMENT_ACCEPTED",
	2: "STREAM_ASGN_ACK_TYPE_ASSIGNMENT_REJECTED",
}

var StreamAsgnAckTypeEnum_value = map[string]int32{
	"STREAM_ASGN_ACK_TYPE_UNSPECIFIED":         0,
	"STREAM_ASGN_ACK_TYPE_ASSIGNMENT_ACCEPTED": 1,
	"STREAM_ASGN_ACK_TYPE_ASSIGNMENT_REJECTED": 2,
}

func (x StreamAsgnAckTypeEnum) String() string {
	return proto.EnumName(StreamAsgnAckTypeEnum_name, int32(x))
}

func (StreamAsgnAckTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{37}
}

type MDFullGrp struct {
	Currency             string                   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	DealingCapacity      DealingCapacityEnum      `protobuf:"varint,2,opt,name=dealing_capacity,json=dealingCapacity,proto3,enum=MarketData.DealingCapacityEnum" json:"dealing_capacity,omitempty"`
	DeskId               string                   `protobuf:"bytes,3,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"`
	EncodedText          string                   `protobuf:"bytes,4,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen       int64                    `protobuf:"fixed64,5,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	ExecInst             []ExecInstEnum           `protobuf:"varint,6,rep,packed,name=exec_inst,json=execInst,proto3,enum=MarketData.ExecInstEnum" json:"exec_inst,omitempty"`
	ExpireDate           int32                    `protobuf:"fixed32,7,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	ExpireTime           *fix.Timestamp               `protobuf:"bytes,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	HighPx               *fix.Decimal64               `protobuf:"bytes,9,opt,name=high_px,json=highPx,proto3" json:"high_px,omitempty"`
	LocationId           string                   `protobuf:"bytes,10,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LowPx                *fix.Decimal64               `protobuf:"bytes,11,opt,name=low_px,json=lowPx,proto3" json:"low_px,omitempty"`
	MdEntryBuyer         string                   `protobuf:"bytes,12,opt,name=md_entry_buyer,json=mdEntryBuyer,proto3" json:"md_entry_buyer,omitempty"`
	MdEntryDate          int32                    `protobuf:"fixed32,13,opt,name=md_entry_date,json=mdEntryDate,proto3" json:"md_entry_date,omitempty"`
	MdEntryForwardPoints *fix.Decimal64               `protobuf:"bytes,14,opt,name=md_entry_forward_points,json=mdEntryForwardPoints,proto3" json:"md_entry_forward_points,omitempty"`
	MdEntryId            string                   `protobuf:"bytes,15,opt,name=md_entry_id,json=mdEntryId,proto3" json:"md_entry_id,omitempty"`
	MdEntryOriginator    string                   `protobuf:"bytes,16,opt,name=md_entry_originator,json=mdEntryOriginator,proto3" json:"md_entry_originator,omitempty"`
	MdEntryPositionNo    int64                    `protobuf:"fixed64,17,opt,name=md_entry_position_no,json=mdEntryPositionNo,proto3" json:"md_entry_position_no,omitempty"`
	MdEntryPx            *fix.Decimal64               `protobuf:"bytes,18,opt,name=md_entry_px,json=mdEntryPx,proto3" json:"md_entry_px,omitempty"`
	MdEntrySeller        string                   `protobuf:"bytes,19,opt,name=md_entry_seller,json=mdEntrySeller,proto3" json:"md_entry_seller,omitempty"`
	MdEntrySize          *fix.Decimal64               `protobuf:"bytes,20,opt,name=md_entry_size,json=mdEntrySize,proto3" json:"md_entry_size,omitempty"`
	MdEntrySpotRate      *fix.Decimal64               `protobuf:"bytes,21,opt,name=md_entry_spot_rate,json=mdEntrySpotRate,proto3" json:"md_entry_spot_rate,omitempty"`
	MdEntryTime          *fix.TimeOnly                `protobuf:"bytes,22,opt,name=md_entry_time,json=mdEntryTime,proto3" json:"md_entry_time,omitempty"`
	MdEntryType          MDEntryTypeEnum          `protobuf:"varint,23,opt,name=md_entry_type,json=mdEntryType,proto3,enum=MarketData.MDEntryTypeEnum" json:"md_entry_type,omitempty"`
	MdMkt                string                   `protobuf:"bytes,24,opt,name=md_mkt,json=mdMkt,proto3" json:"md_mkt,omitempty"`
	MdOriginType         MDOriginTypeEnum         `protobuf:"varint,25,opt,name=md_origin_type,json=mdOriginType,proto3,enum=MarketData.MDOriginTypeEnum" json:"md_origin_type,omitempty"`
	MdPriceLevel         int64                    `protobuf:"fixed64,26,opt,name=md_price_level,json=mdPriceLevel,proto3" json:"md_price_level,omitempty"`
	MdQuoteType          MDQuoteTypeEnum          `protobuf:"varint,27,opt,name=md_quote_type,json=mdQuoteType,proto3,enum=MarketData.MDQuoteTypeEnum" json:"md_quote_type,omitempty"`
	MinQty               *fix.Decimal64               `protobuf:"bytes,28,opt,name=min_qty,json=minQty,proto3" json:"min_qty,omitempty"`
	NumberOfOrders       int64                    `protobuf:"fixed64,29,opt,name=number_of_orders,json=numberOfOrders,proto3" json:"number_of_orders,omitempty"`
	OpenCloseSettlFlag   []OpenCloseSettlFlagEnum `protobuf:"varint,30,rep,packed,name=open_close_settl_flag,json=openCloseSettlFlag,proto3,enum=MarketData.OpenCloseSettlFlagEnum" json:"open_close_settl_flag,omitempty"`
	OrdType              OrdTypeEnum              `protobuf:"varint,31,opt,name=ord_type,json=ordType,proto3,enum=MarketData.OrdTypeEnum" json:"ord_type,omitempty"`
	OrderCapacity        OrderCapacityEnum        `protobuf:"varint,32,opt,name=order_capacity,json=orderCapacity,proto3,enum=MarketData.OrderCapacityEnum" json:"order_capacity,omitempty"`
	OrderId              string                   `protobuf:"bytes,33,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Parties              []*common.Parties               `protobuf:"bytes,34,rep,name=parties,proto3" json:"parties,omitempty"`
	PriceDelta           *fix.Decimal64               `protobuf:"bytes,35,opt,name=price_delta,json=priceDelta,proto3" json:"price_delta,omitempty"`
	QuoteCondition       []QuoteConditionEnum     `protobuf:"varint,36,rep,packed,name=quote_condition,json=quoteCondition,proto3,enum=MarketData.QuoteConditionEnum" json:"quote_condition,omitempty"`
	QuoteEntryId         string                   `protobuf:"bytes,37,opt,name=quote_entry_id,json=quoteEntryId,proto3" json:"quote_entry_id,omitempty"`
	RptSeq               int64                    `protobuf:"fixed64,38,opt,name=rpt_seq,json=rptSeq,proto3" json:"rpt_seq,omitempty"`
	Scope                []ScopeEnum              `protobuf:"varint,39,rep,packed,name=scope,proto3,enum=MarketData.ScopeEnum" json:"scope,omitempty"`
	SecondaryOrderId     string                   `protobuf:"bytes,40,opt,name=secondary_order_id,json=secondaryOrderId,proto3" json:"secondary_order_id,omitempty"`
	SellerDays           int64                    `protobuf:"fixed64,41,opt,name=seller_days,json=sellerDays,proto3" json:"seller_days,omitempty"`
	SettlDate            int32                    `protobuf:"fixed32,42,opt,name=settl_date,json=settlDate,proto3" json:"settl_date,omitempty"`
	// Types that are valid to be assigned to SettlTypeUnion:
	//	*MDFullGrp_SettlType
	//	*MDFullGrp_SettlTypeTenor
	SettlTypeUnion isMDFullGrp_SettlTypeUnion `protobuf_oneof:"settl_type_union"`
	Text           string                     `protobuf:"bytes,45,opt,name=text,proto3" json:"text,omitempty"`
	TickDirection  TickDirectionEnum          `protobuf:"varint,46,opt,name=tick_direction,json=tickDirection,proto3,enum=MarketData.TickDirectionEnum" json:"tick_direction,omitempty"`
	TimeInForce    TimeInForceEnum            `protobuf:"varint,47,opt,name=time_in_force,json=timeInForce,proto3,enum=MarketData.TimeInForceEnum" json:"time_in_force,omitempty"`
	TradeCondition []TradeConditionEnum       `protobuf:"varint,48,rep,packed,name=trade_condition,json=tradeCondition,proto3,enum=MarketData.TradeConditionEnum" json:"trade_condition,omitempty"`
	TradeVolume    *fix.Decimal64                 `protobuf:"bytes,49,opt,name=trade_volume,json=tradeVolume,proto3" json:"trade_volume,omitempty"`
	// Types that are valid to be assigned to TradingSessionIdUnion:
	//	*MDFullGrp_TradingSessionId
	//	*MDFullGrp_TradingSessionIdReserved100Plus
	TradingSessionIdUnion isMDFullGrp_TradingSessionIdUnion `protobuf_oneof:"trading_session_id_union"`
	// Types that are valid to be assigned to TradingSessionSubIdUnion:
	//	*MDFullGrp_TradingSessionSubId
	//	*MDFullGrp_TradingSessionSubIdReserved100Plus
	TradingSessionSubIdUnion isMDFullGrp_TradingSessionSubIdUnion `protobuf_oneof:"trading_session_sub_id_union"`
	// Types that are valid to be assigned to HaltReasonUnion:
	//	*MDFullGrp_HaltReason
	//	*MDFullGrp_HaltReasonReserved100Plus
	HaltReasonUnion isMDFullGrp_HaltReasonUnion `protobuf_oneof:"halt_reason_union"`
	LotType         LotTypeEnum                 `protobuf:"varint,56,opt,name=lot_type,json=lotType,proto3,enum=MarketData.LotTypeEnum" json:"lot_type,omitempty"`
	PriceType       PriceTypeEnum               `protobuf:"varint,57,opt,name=price_type,json=priceType,proto3,enum=MarketData.PriceTypeEnum" json:"price_type,omitempty"`
	SecSizesGrp     []*SecSizesGrp              `protobuf:"bytes,58,rep,name=sec_sizes_grp,json=secSizesGrp,proto3" json:"sec_sizes_grp,omitempty"`
	// Types that are valid to be assigned to SecurityTradingStatusUnion:
	//	*MDFullGrp_SecurityTradingStatus
	//	*MDFullGrp_SecurityTradingStatusReserved100Plus
	SecurityTradingStatusUnion isMDFullGrp_SecurityTradingStatusUnion `protobuf_oneof:"security_trading_status_union"`
	SpreadOrBenchmarkCurveData *common.SpreadOrBenchmarkCurveData            `protobuf:"bytes,61,opt,name=spread_or_benchmark_curve_data,json=spreadOrBenchmarkCurveData,proto3" json:"spread_or_benchmark_curve_data,omitempty"`
	YieldData                  *common.YieldData                             `protobuf:"bytes,62,opt,name=yield_data,json=yieldData,proto3" json:"yield_data,omitempty"`
	RateSource                 []*common.RateSource                          `protobuf:"bytes,63,rep,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	SettlCurrency              string                                 `protobuf:"bytes,64,opt,name=settl_currency,json=settlCurrency,proto3" json:"settl_currency,omitempty"`
	FirstPx                    *fix.Decimal64                             `protobuf:"bytes,65,opt,name=first_px,json=firstPx,proto3" json:"first_px,omitempty"`
	LastPx                     *fix.Decimal64                             `protobuf:"bytes,66,opt,name=last_px,json=lastPx,proto3" json:"last_px,omitempty"`
	// Types that are valid to be assigned to TrdTypeUnion:
	//	*MDFullGrp_TrdType
	//	*MDFullGrp_TrdTypeReserved1000Plus
	TrdTypeUnion         isMDFullGrp_TrdTypeUnion `protobuf_oneof:"trd_type_union"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MDFullGrp) Reset()         { *m = MDFullGrp{} }
func (m *MDFullGrp) String() string { return proto.CompactTextString(m) }
func (*MDFullGrp) ProtoMessage()    {}
func (*MDFullGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{0}
}

func (m *MDFullGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDFullGrp.Unmarshal(m, b)
}
func (m *MDFullGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDFullGrp.Marshal(b, m, deterministic)
}
func (m *MDFullGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDFullGrp.Merge(m, src)
}
func (m *MDFullGrp) XXX_Size() int {
	return xxx_messageInfo_MDFullGrp.Size(m)
}
func (m *MDFullGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MDFullGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MDFullGrp proto.InternalMessageInfo

func (m *MDFullGrp) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MDFullGrp) GetDealingCapacity() DealingCapacityEnum {
	if m != nil {
		return m.DealingCapacity
	}
	return DealingCapacityEnum_DEALING_CAPACITY_UNSPECIFIED
}

func (m *MDFullGrp) GetDeskId() string {
	if m != nil {
		return m.DeskId
	}
	return ""
}

func (m *MDFullGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *MDFullGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *MDFullGrp) GetExecInst() []ExecInstEnum {
	if m != nil {
		return m.ExecInst
	}
	return nil
}

func (m *MDFullGrp) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *MDFullGrp) GetExpireTime() *fix.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *MDFullGrp) GetHighPx() *fix.Decimal64 {
	if m != nil {
		return m.HighPx
	}
	return nil
}

func (m *MDFullGrp) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *MDFullGrp) GetLowPx() *fix.Decimal64 {
	if m != nil {
		return m.LowPx
	}
	return nil
}

func (m *MDFullGrp) GetMdEntryBuyer() string {
	if m != nil {
		return m.MdEntryBuyer
	}
	return ""
}

func (m *MDFullGrp) GetMdEntryDate() int32 {
	if m != nil {
		return m.MdEntryDate
	}
	return 0
}

func (m *MDFullGrp) GetMdEntryForwardPoints() *fix.Decimal64 {
	if m != nil {
		return m.MdEntryForwardPoints
	}
	return nil
}

func (m *MDFullGrp) GetMdEntryId() string {
	if m != nil {
		return m.MdEntryId
	}
	return ""
}

func (m *MDFullGrp) GetMdEntryOriginator() string {
	if m != nil {
		return m.MdEntryOriginator
	}
	return ""
}

func (m *MDFullGrp) GetMdEntryPositionNo() int64 {
	if m != nil {
		return m.MdEntryPositionNo
	}
	return 0
}

func (m *MDFullGrp) GetMdEntryPx() *fix.Decimal64 {
	if m != nil {
		return m.MdEntryPx
	}
	return nil
}

func (m *MDFullGrp) GetMdEntrySeller() string {
	if m != nil {
		return m.MdEntrySeller
	}
	return ""
}

func (m *MDFullGrp) GetMdEntrySize() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySize
	}
	return nil
}

func (m *MDFullGrp) GetMdEntrySpotRate() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySpotRate
	}
	return nil
}

func (m *MDFullGrp) GetMdEntryTime() *fix.TimeOnly {
	if m != nil {
		return m.MdEntryTime
	}
	return nil
}

func (m *MDFullGrp) GetMdEntryType() MDEntryTypeEnum {
	if m != nil {
		return m.MdEntryType
	}
	return MDEntryTypeEnum_MD_ENTRY_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetMdMkt() string {
	if m != nil {
		return m.MdMkt
	}
	return ""
}

func (m *MDFullGrp) GetMdOriginType() MDOriginTypeEnum {
	if m != nil {
		return m.MdOriginType
	}
	return MDOriginTypeEnum_MD_ORIGIN_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetMdPriceLevel() int64 {
	if m != nil {
		return m.MdPriceLevel
	}
	return 0
}

func (m *MDFullGrp) GetMdQuoteType() MDQuoteTypeEnum {
	if m != nil {
		return m.MdQuoteType
	}
	return MDQuoteTypeEnum_MD_QUOTE_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetMinQty() *fix.Decimal64 {
	if m != nil {
		return m.MinQty
	}
	return nil
}

func (m *MDFullGrp) GetNumberOfOrders() int64 {
	if m != nil {
		return m.NumberOfOrders
	}
	return 0
}

func (m *MDFullGrp) GetOpenCloseSettlFlag() []OpenCloseSettlFlagEnum {
	if m != nil {
		return m.OpenCloseSettlFlag
	}
	return nil
}

func (m *MDFullGrp) GetOrdType() OrdTypeEnum {
	if m != nil {
		return m.OrdType
	}
	return OrdTypeEnum_ORD_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetOrderCapacity() OrderCapacityEnum {
	if m != nil {
		return m.OrderCapacity
	}
	return OrderCapacityEnum_ORDER_CAPACITY_UNSPECIFIED
}

func (m *MDFullGrp) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MDFullGrp) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *MDFullGrp) GetPriceDelta() *fix.Decimal64 {
	if m != nil {
		return m.PriceDelta
	}
	return nil
}

func (m *MDFullGrp) GetQuoteCondition() []QuoteConditionEnum {
	if m != nil {
		return m.QuoteCondition
	}
	return nil
}

func (m *MDFullGrp) GetQuoteEntryId() string {
	if m != nil {
		return m.QuoteEntryId
	}
	return ""
}

func (m *MDFullGrp) GetRptSeq() int64 {
	if m != nil {
		return m.RptSeq
	}
	return 0
}

func (m *MDFullGrp) GetScope() []ScopeEnum {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *MDFullGrp) GetSecondaryOrderId() string {
	if m != nil {
		return m.SecondaryOrderId
	}
	return ""
}

func (m *MDFullGrp) GetSellerDays() int64 {
	if m != nil {
		return m.SellerDays
	}
	return 0
}

func (m *MDFullGrp) GetSettlDate() int32 {
	if m != nil {
		return m.SettlDate
	}
	return 0
}

type isMDFullGrp_SettlTypeUnion interface {
	isMDFullGrp_SettlTypeUnion()
}

type MDFullGrp_SettlType struct {
	SettlType SettlTypeEnum `protobuf:"varint,43,opt,name=settl_type,json=settlType,proto3,enum=MarketData.SettlTypeEnum,oneof"`
}

type MDFullGrp_SettlTypeTenor struct {
	SettlTypeTenor *fix.Tenor `protobuf:"bytes,44,opt,name=settl_type_tenor,json=settlTypeTenor,proto3,oneof"`
}

func (*MDFullGrp_SettlType) isMDFullGrp_SettlTypeUnion() {}

func (*MDFullGrp_SettlTypeTenor) isMDFullGrp_SettlTypeUnion() {}

func (m *MDFullGrp) GetSettlTypeUnion() isMDFullGrp_SettlTypeUnion {
	if m != nil {
		return m.SettlTypeUnion
	}
	return nil
}

func (m *MDFullGrp) GetSettlType() SettlTypeEnum {
	if x, ok := m.GetSettlTypeUnion().(*MDFullGrp_SettlType); ok {
		return x.SettlType
	}
	return SettlTypeEnum_SETTL_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetSettlTypeTenor() *fix.Tenor {
	if x, ok := m.GetSettlTypeUnion().(*MDFullGrp_SettlTypeTenor); ok {
		return x.SettlTypeTenor
	}
	return nil
}

func (m *MDFullGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MDFullGrp) GetTickDirection() TickDirectionEnum {
	if m != nil {
		return m.TickDirection
	}
	return TickDirectionEnum_TICK_DIRECTION_UNSPECIFIED
}

func (m *MDFullGrp) GetTimeInForce() TimeInForceEnum {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForceEnum_TIME_IN_FORCE_UNSPECIFIED
}

func (m *MDFullGrp) GetTradeCondition() []TradeConditionEnum {
	if m != nil {
		return m.TradeCondition
	}
	return nil
}

func (m *MDFullGrp) GetTradeVolume() *fix.Decimal64 {
	if m != nil {
		return m.TradeVolume
	}
	return nil
}

type isMDFullGrp_TradingSessionIdUnion interface {
	isMDFullGrp_TradingSessionIdUnion()
}

type MDFullGrp_TradingSessionId struct {
	TradingSessionId TradingSessionIDEnum `protobuf:"varint,50,opt,name=trading_session_id,json=tradingSessionId,proto3,enum=MarketData.TradingSessionIDEnum,oneof"`
}

type MDFullGrp_TradingSessionIdReserved100Plus struct {
	TradingSessionIdReserved100Plus uint32 `protobuf:"fixed32,51,opt,name=trading_session_id_reserved100plus,json=tradingSessionIdReserved100plus,proto3,oneof"`
}

func (*MDFullGrp_TradingSessionId) isMDFullGrp_TradingSessionIdUnion() {}

func (*MDFullGrp_TradingSessionIdReserved100Plus) isMDFullGrp_TradingSessionIdUnion() {}

func (m *MDFullGrp) GetTradingSessionIdUnion() isMDFullGrp_TradingSessionIdUnion {
	if m != nil {
		return m.TradingSessionIdUnion
	}
	return nil
}

func (m *MDFullGrp) GetTradingSessionId() TradingSessionIDEnum {
	if x, ok := m.GetTradingSessionIdUnion().(*MDFullGrp_TradingSessionId); ok {
		return x.TradingSessionId
	}
	return TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED
}

func (m *MDFullGrp) GetTradingSessionIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionIdUnion().(*MDFullGrp_TradingSessionIdReserved100Plus); ok {
		return x.TradingSessionIdReserved100Plus
	}
	return 0
}

type isMDFullGrp_TradingSessionSubIdUnion interface {
	isMDFullGrp_TradingSessionSubIdUnion()
}

type MDFullGrp_TradingSessionSubId struct {
	TradingSessionSubId TradingSessionSubIDEnum `protobuf:"varint,52,opt,name=trading_session_sub_id,json=tradingSessionSubId,proto3,enum=MarketData.TradingSessionSubIDEnum,oneof"`
}

type MDFullGrp_TradingSessionSubIdReserved100Plus struct {
	TradingSessionSubIdReserved100Plus uint32 `protobuf:"fixed32,53,opt,name=trading_session_sub_id_reserved100plus,json=tradingSessionSubIdReserved100plus,proto3,oneof"`
}

func (*MDFullGrp_TradingSessionSubId) isMDFullGrp_TradingSessionSubIdUnion() {}

func (*MDFullGrp_TradingSessionSubIdReserved100Plus) isMDFullGrp_TradingSessionSubIdUnion() {}

func (m *MDFullGrp) GetTradingSessionSubIdUnion() isMDFullGrp_TradingSessionSubIdUnion {
	if m != nil {
		return m.TradingSessionSubIdUnion
	}
	return nil
}

func (m *MDFullGrp) GetTradingSessionSubId() TradingSessionSubIDEnum {
	if x, ok := m.GetTradingSessionSubIdUnion().(*MDFullGrp_TradingSessionSubId); ok {
		return x.TradingSessionSubId
	}
	return TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED
}

func (m *MDFullGrp) GetTradingSessionSubIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionSubIdUnion().(*MDFullGrp_TradingSessionSubIdReserved100Plus); ok {
		return x.TradingSessionSubIdReserved100Plus
	}
	return 0
}

type isMDFullGrp_HaltReasonUnion interface {
	isMDFullGrp_HaltReasonUnion()
}

type MDFullGrp_HaltReason struct {
	HaltReason HaltReasonEnum `protobuf:"varint,54,opt,name=halt_reason,json=haltReason,proto3,enum=MarketData.HaltReasonEnum,oneof"`
}

type MDFullGrp_HaltReasonReserved100Plus struct {
	HaltReasonReserved100Plus uint32 `protobuf:"fixed32,55,opt,name=halt_reason_reserved100plus,json=haltReasonReserved100plus,proto3,oneof"`
}

func (*MDFullGrp_HaltReason) isMDFullGrp_HaltReasonUnion() {}

func (*MDFullGrp_HaltReasonReserved100Plus) isMDFullGrp_HaltReasonUnion() {}

func (m *MDFullGrp) GetHaltReasonUnion() isMDFullGrp_HaltReasonUnion {
	if m != nil {
		return m.HaltReasonUnion
	}
	return nil
}

func (m *MDFullGrp) GetHaltReason() HaltReasonEnum {
	if x, ok := m.GetHaltReasonUnion().(*MDFullGrp_HaltReason); ok {
		return x.HaltReason
	}
	return HaltReasonEnum_HALT_REASON_UNSPECIFIED
}

func (m *MDFullGrp) GetHaltReasonReserved100Plus() uint32 {
	if x, ok := m.GetHaltReasonUnion().(*MDFullGrp_HaltReasonReserved100Plus); ok {
		return x.HaltReasonReserved100Plus
	}
	return 0
}

func (m *MDFullGrp) GetLotType() LotTypeEnum {
	if m != nil {
		return m.LotType
	}
	return LotTypeEnum_LOT_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetPriceType() PriceTypeEnum {
	if m != nil {
		return m.PriceType
	}
	return PriceTypeEnum_PRICE_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetSecSizesGrp() []*SecSizesGrp {
	if m != nil {
		return m.SecSizesGrp
	}
	return nil
}

type isMDFullGrp_SecurityTradingStatusUnion interface {
	isMDFullGrp_SecurityTradingStatusUnion()
}

type MDFullGrp_SecurityTradingStatus struct {
	SecurityTradingStatus SecurityTradingStatusEnum `protobuf:"varint,59,opt,name=security_trading_status,json=securityTradingStatus,proto3,enum=MarketData.SecurityTradingStatusEnum,oneof"`
}

type MDFullGrp_SecurityTradingStatusReserved100Plus struct {
	SecurityTradingStatusReserved100Plus uint32 `protobuf:"fixed32,60,opt,name=security_trading_status_reserved100plus,json=securityTradingStatusReserved100plus,proto3,oneof"`
}

func (*MDFullGrp_SecurityTradingStatus) isMDFullGrp_SecurityTradingStatusUnion() {}

func (*MDFullGrp_SecurityTradingStatusReserved100Plus) isMDFullGrp_SecurityTradingStatusUnion() {}

func (m *MDFullGrp) GetSecurityTradingStatusUnion() isMDFullGrp_SecurityTradingStatusUnion {
	if m != nil {
		return m.SecurityTradingStatusUnion
	}
	return nil
}

func (m *MDFullGrp) GetSecurityTradingStatus() SecurityTradingStatusEnum {
	if x, ok := m.GetSecurityTradingStatusUnion().(*MDFullGrp_SecurityTradingStatus); ok {
		return x.SecurityTradingStatus
	}
	return SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *MDFullGrp) GetSecurityTradingStatusReserved100Plus() uint32 {
	if x, ok := m.GetSecurityTradingStatusUnion().(*MDFullGrp_SecurityTradingStatusReserved100Plus); ok {
		return x.SecurityTradingStatusReserved100Plus
	}
	return 0
}

func (m *MDFullGrp) GetSpreadOrBenchmarkCurveData() *common.SpreadOrBenchmarkCurveData {
	if m != nil {
		return m.SpreadOrBenchmarkCurveData
	}
	return nil
}

func (m *MDFullGrp) GetYieldData() *common.YieldData {
	if m != nil {
		return m.YieldData
	}
	return nil
}

func (m *MDFullGrp) GetRateSource() []*common.RateSource {
	if m != nil {
		return m.RateSource
	}
	return nil
}

func (m *MDFullGrp) GetSettlCurrency() string {
	if m != nil {
		return m.SettlCurrency
	}
	return ""
}

func (m *MDFullGrp) GetFirstPx() *fix.Decimal64 {
	if m != nil {
		return m.FirstPx
	}
	return nil
}

func (m *MDFullGrp) GetLastPx() *fix.Decimal64 {
	if m != nil {
		return m.LastPx
	}
	return nil
}

type isMDFullGrp_TrdTypeUnion interface {
	isMDFullGrp_TrdTypeUnion()
}

type MDFullGrp_TrdType struct {
	TrdType TrdTypeEnum `protobuf:"varint,67,opt,name=trd_type,json=trdType,proto3,enum=MarketData.TrdTypeEnum,oneof"`
}

type MDFullGrp_TrdTypeReserved1000Plus struct {
	TrdTypeReserved1000Plus uint32 `protobuf:"fixed32,68,opt,name=trd_type_reserved1000plus,json=trdTypeReserved1000plus,proto3,oneof"`
}

func (*MDFullGrp_TrdType) isMDFullGrp_TrdTypeUnion() {}

func (*MDFullGrp_TrdTypeReserved1000Plus) isMDFullGrp_TrdTypeUnion() {}

func (m *MDFullGrp) GetTrdTypeUnion() isMDFullGrp_TrdTypeUnion {
	if m != nil {
		return m.TrdTypeUnion
	}
	return nil
}

func (m *MDFullGrp) GetTrdType() TrdTypeEnum {
	if x, ok := m.GetTrdTypeUnion().(*MDFullGrp_TrdType); ok {
		return x.TrdType
	}
	return TrdTypeEnum_TRD_TYPE_UNSPECIFIED
}

func (m *MDFullGrp) GetTrdTypeReserved1000Plus() uint32 {
	if x, ok := m.GetTrdTypeUnion().(*MDFullGrp_TrdTypeReserved1000Plus); ok {
		return x.TrdTypeReserved1000Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MDFullGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MDFullGrp_SettlType)(nil),
		(*MDFullGrp_SettlTypeTenor)(nil),
		(*MDFullGrp_TradingSessionId)(nil),
		(*MDFullGrp_TradingSessionIdReserved100Plus)(nil),
		(*MDFullGrp_TradingSessionSubId)(nil),
		(*MDFullGrp_TradingSessionSubIdReserved100Plus)(nil),
		(*MDFullGrp_HaltReason)(nil),
		(*MDFullGrp_HaltReasonReserved100Plus)(nil),
		(*MDFullGrp_SecurityTradingStatus)(nil),
		(*MDFullGrp_SecurityTradingStatusReserved100Plus)(nil),
		(*MDFullGrp_TrdType)(nil),
		(*MDFullGrp_TrdTypeReserved1000Plus)(nil),
	}
}

type MDIncGrp struct {
	CorporateAction      []CorporateActionEnum    `protobuf:"varint,1,rep,packed,name=corporate_action,json=corporateAction,proto3,enum=MarketData.CorporateActionEnum" json:"corporate_action,omitempty"`
	Currency             string                   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	DealingCapacity      DealingCapacityEnum      `protobuf:"varint,3,opt,name=dealing_capacity,json=dealingCapacity,proto3,enum=MarketData.DealingCapacityEnum" json:"dealing_capacity,omitempty"`
	DeleteReason         DeleteReasonEnum         `protobuf:"varint,4,opt,name=delete_reason,json=deleteReason,proto3,enum=MarketData.DeleteReasonEnum" json:"delete_reason,omitempty"`
	DeskId               string                   `protobuf:"bytes,5,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"`
	EncodedText          string                   `protobuf:"bytes,6,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen       int64                    `protobuf:"fixed64,7,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	ExecInst             []ExecInstEnum           `protobuf:"varint,8,rep,packed,name=exec_inst,json=execInst,proto3,enum=MarketData.ExecInstEnum" json:"exec_inst,omitempty"`
	ExpireDate           int32                    `protobuf:"fixed32,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	ExpireTime           *fix.Timestamp               `protobuf:"bytes,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	FinancialStatus      []FinancialStatusEnum    `protobuf:"varint,11,rep,packed,name=financial_status,json=financialStatus,proto3,enum=MarketData.FinancialStatusEnum" json:"financial_status,omitempty"`
	HighPx               *fix.Decimal64               `protobuf:"bytes,12,opt,name=high_px,json=highPx,proto3" json:"high_px,omitempty"`
	InstrmtLegGrp        []*common.InstrmtLegGrp         `protobuf:"bytes,13,rep,name=instrmt_leg_grp,json=instrmtLegGrp,proto3" json:"instrmt_leg_grp,omitempty"`
	Instrument           *common.Instrument              `protobuf:"bytes,14,opt,name=instrument,proto3" json:"instrument,omitempty"`
	LocationId           string                   `protobuf:"bytes,15,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LowPx                *fix.Decimal64               `protobuf:"bytes,16,opt,name=low_px,json=lowPx,proto3" json:"low_px,omitempty"`
	MdEntryBuyer         string                   `protobuf:"bytes,17,opt,name=md_entry_buyer,json=mdEntryBuyer,proto3" json:"md_entry_buyer,omitempty"`
	MdEntryDate          int32                    `protobuf:"fixed32,18,opt,name=md_entry_date,json=mdEntryDate,proto3" json:"md_entry_date,omitempty"`
	MdEntryForwardPoints *fix.Decimal64               `protobuf:"bytes,19,opt,name=md_entry_forward_points,json=mdEntryForwardPoints,proto3" json:"md_entry_forward_points,omitempty"`
	MdEntryId            string                   `protobuf:"bytes,20,opt,name=md_entry_id,json=mdEntryId,proto3" json:"md_entry_id,omitempty"`
	MdEntryOriginator    string                   `protobuf:"bytes,21,opt,name=md_entry_originator,json=mdEntryOriginator,proto3" json:"md_entry_originator,omitempty"`
	MdEntryPositionNo    int64                    `protobuf:"fixed64,22,opt,name=md_entry_position_no,json=mdEntryPositionNo,proto3" json:"md_entry_position_no,omitempty"`
	MdEntryPx            *fix.Decimal64               `protobuf:"bytes,23,opt,name=md_entry_px,json=mdEntryPx,proto3" json:"md_entry_px,omitempty"`
	MdEntryRefId         string                   `protobuf:"bytes,24,opt,name=md_entry_ref_id,json=mdEntryRefId,proto3" json:"md_entry_ref_id,omitempty"`
	MdEntrySeller        string                   `protobuf:"bytes,25,opt,name=md_entry_seller,json=mdEntrySeller,proto3" json:"md_entry_seller,omitempty"`
	MdEntrySize          *fix.Decimal64               `protobuf:"bytes,26,opt,name=md_entry_size,json=mdEntrySize,proto3" json:"md_entry_size,omitempty"`
	MdEntrySpotRate      *fix.Decimal64               `protobuf:"bytes,27,opt,name=md_entry_spot_rate,json=mdEntrySpotRate,proto3" json:"md_entry_spot_rate,omitempty"`
	MdEntryTime          *fix.TimeOnly                `protobuf:"bytes,28,opt,name=md_entry_time,json=mdEntryTime,proto3" json:"md_entry_time,omitempty"`
	MdEntryType          MDEntryTypeEnum          `protobuf:"varint,29,opt,name=md_entry_type,json=mdEntryType,proto3,enum=MarketData.MDEntryTypeEnum" json:"md_entry_type,omitempty"`
	MdMkt                string                   `protobuf:"bytes,30,opt,name=md_mkt,json=mdMkt,proto3" json:"md_mkt,omitempty"`
	MdOriginType         MDOriginTypeEnum         `protobuf:"varint,31,opt,name=md_origin_type,json=mdOriginType,proto3,enum=MarketData.MDOriginTypeEnum" json:"md_origin_type,omitempty"`
	MdPriceLevel         int64                    `protobuf:"fixed64,32,opt,name=md_price_level,json=mdPriceLevel,proto3" json:"md_price_level,omitempty"`
	MdQuoteType          MDQuoteTypeEnum          `protobuf:"varint,33,opt,name=md_quote_type,json=mdQuoteType,proto3,enum=MarketData.MDQuoteTypeEnum" json:"md_quote_type,omitempty"`
	MdUpdateAction       MDUpdateActionEnum       `protobuf:"varint,34,opt,name=md_update_action,json=mdUpdateAction,proto3,enum=MarketData.MDUpdateActionEnum" json:"md_update_action,omitempty"`
	MinQty               *fix.Decimal64               `protobuf:"bytes,35,opt,name=min_qty,json=minQty,proto3" json:"min_qty,omitempty"`
	NetChgPrevDay        *fix.Decimal64               `protobuf:"bytes,36,opt,name=net_chg_prev_day,json=netChgPrevDay,proto3" json:"net_chg_prev_day,omitempty"`
	NumberOfOrders       int64                    `protobuf:"fixed64,37,opt,name=number_of_orders,json=numberOfOrders,proto3" json:"number_of_orders,omitempty"`
	OpenCloseSettlFlag   []OpenCloseSettlFlagEnum `protobuf:"varint,38,rep,packed,name=open_close_settl_flag,json=openCloseSettlFlag,proto3,enum=MarketData.OpenCloseSettlFlagEnum" json:"open_close_settl_flag,omitempty"`
	OrdType              OrdTypeEnum              `protobuf:"varint,39,opt,name=ord_type,json=ordType,proto3,enum=MarketData.OrdTypeEnum" json:"ord_type,omitempty"`
	OrderCapacity        OrderCapacityEnum        `protobuf:"varint,40,opt,name=order_capacity,json=orderCapacity,proto3,enum=MarketData.OrderCapacityEnum" json:"order_capacity,omitempty"`
	OrderId              string                   `protobuf:"bytes,41,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Parties              []*common.Parties               `protobuf:"bytes,42,rep,name=parties,proto3" json:"parties,omitempty"`
	PriceDelta           *fix.Decimal64               `protobuf:"bytes,43,opt,name=price_delta,json=priceDelta,proto3" json:"price_delta,omitempty"`
	QuoteCondition       []QuoteConditionEnum     `protobuf:"varint,44,rep,packed,name=quote_condition,json=quoteCondition,proto3,enum=MarketData.QuoteConditionEnum" json:"quote_condition,omitempty"`
	QuoteEntryId         string                   `protobuf:"bytes,45,opt,name=quote_entry_id,json=quoteEntryId,proto3" json:"quote_entry_id,omitempty"`
	RptSeq               int64                    `protobuf:"fixed64,46,opt,name=rpt_seq,json=rptSeq,proto3" json:"rpt_seq,omitempty"`
	Scope                []ScopeEnum              `protobuf:"varint,47,rep,packed,name=scope,proto3,enum=MarketData.ScopeEnum" json:"scope,omitempty"`
	SecondaryOrderId     string                   `protobuf:"bytes,48,opt,name=secondary_order_id,json=secondaryOrderId,proto3" json:"secondary_order_id,omitempty"`
	SellerDays           int64                    `protobuf:"fixed64,49,opt,name=seller_days,json=sellerDays,proto3" json:"seller_days,omitempty"`
	SettlDate            int32                    `protobuf:"fixed32,50,opt,name=settl_date,json=settlDate,proto3" json:"settl_date,omitempty"`
	// Types that are valid to be assigned to SettlTypeUnion:
	//	*MDIncGrp_SettlType
	//	*MDIncGrp_SettlTypeTenor
	SettlTypeUnion isMDIncGrp_SettlTypeUnion `protobuf_oneof:"settl_type_union"`
	Text           string                    `protobuf:"bytes,53,opt,name=text,proto3" json:"text,omitempty"`
	TickDirection  TickDirectionEnum         `protobuf:"varint,54,opt,name=tick_direction,json=tickDirection,proto3,enum=MarketData.TickDirectionEnum" json:"tick_direction,omitempty"`
	TimeInForce    TimeInForceEnum           `protobuf:"varint,55,opt,name=time_in_force,json=timeInForce,proto3,enum=MarketData.TimeInForceEnum" json:"time_in_force,omitempty"`
	TradeCondition []TradeConditionEnum      `protobuf:"varint,56,rep,packed,name=trade_condition,json=tradeCondition,proto3,enum=MarketData.TradeConditionEnum" json:"trade_condition,omitempty"`
	TradeVolume    *fix.Decimal64                `protobuf:"bytes,57,opt,name=trade_volume,json=tradeVolume,proto3" json:"trade_volume,omitempty"`
	// Types that are valid to be assigned to TradingSessionIdUnion:
	//	*MDIncGrp_TradingSessionId
	//	*MDIncGrp_TradingSessionIdReserved100Plus
	TradingSessionIdUnion isMDIncGrp_TradingSessionIdUnion `protobuf_oneof:"trading_session_id_union"`
	// Types that are valid to be assigned to TradingSessionSubIdUnion:
	//	*MDIncGrp_TradingSessionSubId
	//	*MDIncGrp_TradingSessionSubIdReserved100Plus
	TradingSessionSubIdUnion isMDIncGrp_TradingSessionSubIdUnion `protobuf_oneof:"trading_session_sub_id_union"`
	UndInstrmtGrp            []*common.UndInstrmtGrp                    `protobuf:"bytes,62,rep,name=und_instrmt_grp,json=undInstrmtGrp,proto3" json:"und_instrmt_grp,omitempty"`
	// Types that are valid to be assigned to HaltReasonUnion:
	//	*MDIncGrp_HaltReason
	//	*MDIncGrp_HaltReasonReserved100Plus
	HaltReasonUnion isMDIncGrp_HaltReasonUnion `protobuf_oneof:"halt_reason_union"`
	LotType         LotTypeEnum                `protobuf:"varint,65,opt,name=lot_type,json=lotType,proto3,enum=MarketData.LotTypeEnum" json:"lot_type,omitempty"`
	MarketDepth     int64                      `protobuf:"fixed64,66,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	MatchType       MatchTypeEnum              `protobuf:"varint,67,opt,name=match_type,json=matchType,proto3,enum=MarketData.MatchTypeEnum" json:"match_type,omitempty"`
	MdSubBookType   int64                      `protobuf:"fixed64,68,opt,name=md_sub_book_type,json=mdSubBookType,proto3" json:"md_sub_book_type,omitempty"`
	PriceType       PriceTypeEnum              `protobuf:"varint,69,opt,name=price_type,json=priceType,proto3,enum=MarketData.PriceTypeEnum" json:"price_type,omitempty"`
	SecSizesGrp     []*SecSizesGrp             `protobuf:"bytes,70,rep,name=sec_sizes_grp,json=secSizesGrp,proto3" json:"sec_sizes_grp,omitempty"`
	// Types that are valid to be assigned to SecurityTradingStatusUnion:
	//	*MDIncGrp_SecurityTradingStatus
	//	*MDIncGrp_SecurityTradingStatusReserved100Plus
	SecurityTradingStatusUnion isMDIncGrp_SecurityTradingStatusUnion `protobuf_oneof:"security_trading_status_union"`
	SpreadOrBenchmarkCurveData *common.SpreadOrBenchmarkCurveData           `protobuf:"bytes,73,opt,name=spread_or_benchmark_curve_data,json=spreadOrBenchmarkCurveData,proto3" json:"spread_or_benchmark_curve_data,omitempty"`
	StatsIndGrp                []*StatsIndGrp                        `protobuf:"bytes,74,rep,name=stats_ind_grp,json=statsIndGrp,proto3" json:"stats_ind_grp,omitempty"`
	TradeId                    string                                `protobuf:"bytes,75,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TransBkdTime               *fix.Timestamp                            `protobuf:"bytes,76,opt,name=trans_bkd_time,json=transBkdTime,proto3" json:"trans_bkd_time,omitempty"`
	TransactTime               *fix.Timestamp                            `protobuf:"bytes,77,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	// Types that are valid to be assigned to TrdTypeUnion:
	//	*MDIncGrp_TrdType
	//	*MDIncGrp_TrdTypeReserved1000Plus
	TrdTypeUnion         isMDIncGrp_TrdTypeUnion `protobuf_oneof:"trd_type_union"`
	YieldData            *common.YieldData              `protobuf:"bytes,80,opt,name=yield_data,json=yieldData,proto3" json:"yield_data,omitempty"`
	RateSource           []*common.RateSource           `protobuf:"bytes,81,rep,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	SettlCurrency        string                  `protobuf:"bytes,82,opt,name=settl_currency,json=settlCurrency,proto3" json:"settl_currency,omitempty"`
	FirstPx              *fix.Decimal64              `protobuf:"bytes,83,opt,name=first_px,json=firstPx,proto3" json:"first_px,omitempty"`
	LastPx               *fix.Decimal64              `protobuf:"bytes,84,opt,name=last_px,json=lastPx,proto3" json:"last_px,omitempty"`
	MdStreamId           string                  `protobuf:"bytes,85,opt,name=md_stream_id,json=mdStreamId,proto3" json:"md_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MDIncGrp) Reset()         { *m = MDIncGrp{} }
func (m *MDIncGrp) String() string { return proto.CompactTextString(m) }
func (*MDIncGrp) ProtoMessage()    {}
func (*MDIncGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{1}
}

func (m *MDIncGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDIncGrp.Unmarshal(m, b)
}
func (m *MDIncGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDIncGrp.Marshal(b, m, deterministic)
}
func (m *MDIncGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDIncGrp.Merge(m, src)
}
func (m *MDIncGrp) XXX_Size() int {
	return xxx_messageInfo_MDIncGrp.Size(m)
}
func (m *MDIncGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MDIncGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MDIncGrp proto.InternalMessageInfo

func (m *MDIncGrp) GetCorporateAction() []CorporateActionEnum {
	if m != nil {
		return m.CorporateAction
	}
	return nil
}

func (m *MDIncGrp) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MDIncGrp) GetDealingCapacity() DealingCapacityEnum {
	if m != nil {
		return m.DealingCapacity
	}
	return DealingCapacityEnum_DEALING_CAPACITY_UNSPECIFIED
}

func (m *MDIncGrp) GetDeleteReason() DeleteReasonEnum {
	if m != nil {
		return m.DeleteReason
	}
	return DeleteReasonEnum_DELETE_REASON_UNSPECIFIED
}

func (m *MDIncGrp) GetDeskId() string {
	if m != nil {
		return m.DeskId
	}
	return ""
}

func (m *MDIncGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *MDIncGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *MDIncGrp) GetExecInst() []ExecInstEnum {
	if m != nil {
		return m.ExecInst
	}
	return nil
}

func (m *MDIncGrp) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *MDIncGrp) GetExpireTime() *fix.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *MDIncGrp) GetFinancialStatus() []FinancialStatusEnum {
	if m != nil {
		return m.FinancialStatus
	}
	return nil
}

func (m *MDIncGrp) GetHighPx() *fix.Decimal64 {
	if m != nil {
		return m.HighPx
	}
	return nil
}

func (m *MDIncGrp) GetInstrmtLegGrp() []*common.InstrmtLegGrp {
	if m != nil {
		return m.InstrmtLegGrp
	}
	return nil
}

func (m *MDIncGrp) GetInstrument() *common.Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *MDIncGrp) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *MDIncGrp) GetLowPx() *fix.Decimal64 {
	if m != nil {
		return m.LowPx
	}
	return nil
}

func (m *MDIncGrp) GetMdEntryBuyer() string {
	if m != nil {
		return m.MdEntryBuyer
	}
	return ""
}

func (m *MDIncGrp) GetMdEntryDate() int32 {
	if m != nil {
		return m.MdEntryDate
	}
	return 0
}

func (m *MDIncGrp) GetMdEntryForwardPoints() *fix.Decimal64 {
	if m != nil {
		return m.MdEntryForwardPoints
	}
	return nil
}

func (m *MDIncGrp) GetMdEntryId() string {
	if m != nil {
		return m.MdEntryId
	}
	return ""
}

func (m *MDIncGrp) GetMdEntryOriginator() string {
	if m != nil {
		return m.MdEntryOriginator
	}
	return ""
}

func (m *MDIncGrp) GetMdEntryPositionNo() int64 {
	if m != nil {
		return m.MdEntryPositionNo
	}
	return 0
}

func (m *MDIncGrp) GetMdEntryPx() *fix.Decimal64 {
	if m != nil {
		return m.MdEntryPx
	}
	return nil
}

func (m *MDIncGrp) GetMdEntryRefId() string {
	if m != nil {
		return m.MdEntryRefId
	}
	return ""
}

func (m *MDIncGrp) GetMdEntrySeller() string {
	if m != nil {
		return m.MdEntrySeller
	}
	return ""
}

func (m *MDIncGrp) GetMdEntrySize() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySize
	}
	return nil
}

func (m *MDIncGrp) GetMdEntrySpotRate() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySpotRate
	}
	return nil
}

func (m *MDIncGrp) GetMdEntryTime() *fix.TimeOnly {
	if m != nil {
		return m.MdEntryTime
	}
	return nil
}

func (m *MDIncGrp) GetMdEntryType() MDEntryTypeEnum {
	if m != nil {
		return m.MdEntryType
	}
	return MDEntryTypeEnum_MD_ENTRY_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetMdMkt() string {
	if m != nil {
		return m.MdMkt
	}
	return ""
}

func (m *MDIncGrp) GetMdOriginType() MDOriginTypeEnum {
	if m != nil {
		return m.MdOriginType
	}
	return MDOriginTypeEnum_MD_ORIGIN_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetMdPriceLevel() int64 {
	if m != nil {
		return m.MdPriceLevel
	}
	return 0
}

func (m *MDIncGrp) GetMdQuoteType() MDQuoteTypeEnum {
	if m != nil {
		return m.MdQuoteType
	}
	return MDQuoteTypeEnum_MD_QUOTE_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetMdUpdateAction() MDUpdateActionEnum {
	if m != nil {
		return m.MdUpdateAction
	}
	return MDUpdateActionEnum_MD_UPDATE_ACTION_UNSPECIFIED
}

func (m *MDIncGrp) GetMinQty() *fix.Decimal64 {
	if m != nil {
		return m.MinQty
	}
	return nil
}

func (m *MDIncGrp) GetNetChgPrevDay() *fix.Decimal64 {
	if m != nil {
		return m.NetChgPrevDay
	}
	return nil
}

func (m *MDIncGrp) GetNumberOfOrders() int64 {
	if m != nil {
		return m.NumberOfOrders
	}
	return 0
}

func (m *MDIncGrp) GetOpenCloseSettlFlag() []OpenCloseSettlFlagEnum {
	if m != nil {
		return m.OpenCloseSettlFlag
	}
	return nil
}

func (m *MDIncGrp) GetOrdType() OrdTypeEnum {
	if m != nil {
		return m.OrdType
	}
	return OrdTypeEnum_ORD_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetOrderCapacity() OrderCapacityEnum {
	if m != nil {
		return m.OrderCapacity
	}
	return OrderCapacityEnum_ORDER_CAPACITY_UNSPECIFIED
}

func (m *MDIncGrp) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MDIncGrp) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *MDIncGrp) GetPriceDelta() *fix.Decimal64 {
	if m != nil {
		return m.PriceDelta
	}
	return nil
}

func (m *MDIncGrp) GetQuoteCondition() []QuoteConditionEnum {
	if m != nil {
		return m.QuoteCondition
	}
	return nil
}

func (m *MDIncGrp) GetQuoteEntryId() string {
	if m != nil {
		return m.QuoteEntryId
	}
	return ""
}

func (m *MDIncGrp) GetRptSeq() int64 {
	if m != nil {
		return m.RptSeq
	}
	return 0
}

func (m *MDIncGrp) GetScope() []ScopeEnum {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *MDIncGrp) GetSecondaryOrderId() string {
	if m != nil {
		return m.SecondaryOrderId
	}
	return ""
}

func (m *MDIncGrp) GetSellerDays() int64 {
	if m != nil {
		return m.SellerDays
	}
	return 0
}

func (m *MDIncGrp) GetSettlDate() int32 {
	if m != nil {
		return m.SettlDate
	}
	return 0
}

type isMDIncGrp_SettlTypeUnion interface {
	isMDIncGrp_SettlTypeUnion()
}

type MDIncGrp_SettlType struct {
	SettlType SettlTypeEnum `protobuf:"varint,51,opt,name=settl_type,json=settlType,proto3,enum=MarketData.SettlTypeEnum,oneof"`
}

type MDIncGrp_SettlTypeTenor struct {
	SettlTypeTenor *fix.Tenor `protobuf:"bytes,52,opt,name=settl_type_tenor,json=settlTypeTenor,proto3,oneof"`
}

func (*MDIncGrp_SettlType) isMDIncGrp_SettlTypeUnion() {}

func (*MDIncGrp_SettlTypeTenor) isMDIncGrp_SettlTypeUnion() {}

func (m *MDIncGrp) GetSettlTypeUnion() isMDIncGrp_SettlTypeUnion {
	if m != nil {
		return m.SettlTypeUnion
	}
	return nil
}

func (m *MDIncGrp) GetSettlType() SettlTypeEnum {
	if x, ok := m.GetSettlTypeUnion().(*MDIncGrp_SettlType); ok {
		return x.SettlType
	}
	return SettlTypeEnum_SETTL_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetSettlTypeTenor() *fix.Tenor {
	if x, ok := m.GetSettlTypeUnion().(*MDIncGrp_SettlTypeTenor); ok {
		return x.SettlTypeTenor
	}
	return nil
}

func (m *MDIncGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MDIncGrp) GetTickDirection() TickDirectionEnum {
	if m != nil {
		return m.TickDirection
	}
	return TickDirectionEnum_TICK_DIRECTION_UNSPECIFIED
}

func (m *MDIncGrp) GetTimeInForce() TimeInForceEnum {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForceEnum_TIME_IN_FORCE_UNSPECIFIED
}

func (m *MDIncGrp) GetTradeCondition() []TradeConditionEnum {
	if m != nil {
		return m.TradeCondition
	}
	return nil
}

func (m *MDIncGrp) GetTradeVolume() *fix.Decimal64 {
	if m != nil {
		return m.TradeVolume
	}
	return nil
}

type isMDIncGrp_TradingSessionIdUnion interface {
	isMDIncGrp_TradingSessionIdUnion()
}

type MDIncGrp_TradingSessionId struct {
	TradingSessionId TradingSessionIDEnum `protobuf:"varint,58,opt,name=trading_session_id,json=tradingSessionId,proto3,enum=MarketData.TradingSessionIDEnum,oneof"`
}

type MDIncGrp_TradingSessionIdReserved100Plus struct {
	TradingSessionIdReserved100Plus uint32 `protobuf:"fixed32,59,opt,name=trading_session_id_reserved100plus,json=tradingSessionIdReserved100plus,proto3,oneof"`
}

func (*MDIncGrp_TradingSessionId) isMDIncGrp_TradingSessionIdUnion() {}

func (*MDIncGrp_TradingSessionIdReserved100Plus) isMDIncGrp_TradingSessionIdUnion() {}

func (m *MDIncGrp) GetTradingSessionIdUnion() isMDIncGrp_TradingSessionIdUnion {
	if m != nil {
		return m.TradingSessionIdUnion
	}
	return nil
}

func (m *MDIncGrp) GetTradingSessionId() TradingSessionIDEnum {
	if x, ok := m.GetTradingSessionIdUnion().(*MDIncGrp_TradingSessionId); ok {
		return x.TradingSessionId
	}
	return TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED
}

func (m *MDIncGrp) GetTradingSessionIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionIdUnion().(*MDIncGrp_TradingSessionIdReserved100Plus); ok {
		return x.TradingSessionIdReserved100Plus
	}
	return 0
}

type isMDIncGrp_TradingSessionSubIdUnion interface {
	isMDIncGrp_TradingSessionSubIdUnion()
}

type MDIncGrp_TradingSessionSubId struct {
	TradingSessionSubId TradingSessionSubIDEnum `protobuf:"varint,60,opt,name=trading_session_sub_id,json=tradingSessionSubId,proto3,enum=MarketData.TradingSessionSubIDEnum,oneof"`
}

type MDIncGrp_TradingSessionSubIdReserved100Plus struct {
	TradingSessionSubIdReserved100Plus uint32 `protobuf:"fixed32,61,opt,name=trading_session_sub_id_reserved100plus,json=tradingSessionSubIdReserved100plus,proto3,oneof"`
}

func (*MDIncGrp_TradingSessionSubId) isMDIncGrp_TradingSessionSubIdUnion() {}

func (*MDIncGrp_TradingSessionSubIdReserved100Plus) isMDIncGrp_TradingSessionSubIdUnion() {}

func (m *MDIncGrp) GetTradingSessionSubIdUnion() isMDIncGrp_TradingSessionSubIdUnion {
	if m != nil {
		return m.TradingSessionSubIdUnion
	}
	return nil
}

func (m *MDIncGrp) GetTradingSessionSubId() TradingSessionSubIDEnum {
	if x, ok := m.GetTradingSessionSubIdUnion().(*MDIncGrp_TradingSessionSubId); ok {
		return x.TradingSessionSubId
	}
	return TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED
}

func (m *MDIncGrp) GetTradingSessionSubIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionSubIdUnion().(*MDIncGrp_TradingSessionSubIdReserved100Plus); ok {
		return x.TradingSessionSubIdReserved100Plus
	}
	return 0
}

func (m *MDIncGrp) GetUndInstrmtGrp() []*common.UndInstrmtGrp {
	if m != nil {
		return m.UndInstrmtGrp
	}
	return nil
}

type isMDIncGrp_HaltReasonUnion interface {
	isMDIncGrp_HaltReasonUnion()
}

type MDIncGrp_HaltReason struct {
	HaltReason HaltReasonEnum `protobuf:"varint,63,opt,name=halt_reason,json=haltReason,proto3,enum=MarketData.HaltReasonEnum,oneof"`
}

type MDIncGrp_HaltReasonReserved100Plus struct {
	HaltReasonReserved100Plus uint32 `protobuf:"fixed32,64,opt,name=halt_reason_reserved100plus,json=haltReasonReserved100plus,proto3,oneof"`
}

func (*MDIncGrp_HaltReason) isMDIncGrp_HaltReasonUnion() {}

func (*MDIncGrp_HaltReasonReserved100Plus) isMDIncGrp_HaltReasonUnion() {}

func (m *MDIncGrp) GetHaltReasonUnion() isMDIncGrp_HaltReasonUnion {
	if m != nil {
		return m.HaltReasonUnion
	}
	return nil
}

func (m *MDIncGrp) GetHaltReason() HaltReasonEnum {
	if x, ok := m.GetHaltReasonUnion().(*MDIncGrp_HaltReason); ok {
		return x.HaltReason
	}
	return HaltReasonEnum_HALT_REASON_UNSPECIFIED
}

func (m *MDIncGrp) GetHaltReasonReserved100Plus() uint32 {
	if x, ok := m.GetHaltReasonUnion().(*MDIncGrp_HaltReasonReserved100Plus); ok {
		return x.HaltReasonReserved100Plus
	}
	return 0
}

func (m *MDIncGrp) GetLotType() LotTypeEnum {
	if m != nil {
		return m.LotType
	}
	return LotTypeEnum_LOT_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MDIncGrp) GetMatchType() MatchTypeEnum {
	if m != nil {
		return m.MatchType
	}
	return MatchTypeEnum_MATCH_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetMdSubBookType() int64 {
	if m != nil {
		return m.MdSubBookType
	}
	return 0
}

func (m *MDIncGrp) GetPriceType() PriceTypeEnum {
	if m != nil {
		return m.PriceType
	}
	return PriceTypeEnum_PRICE_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetSecSizesGrp() []*SecSizesGrp {
	if m != nil {
		return m.SecSizesGrp
	}
	return nil
}

type isMDIncGrp_SecurityTradingStatusUnion interface {
	isMDIncGrp_SecurityTradingStatusUnion()
}

type MDIncGrp_SecurityTradingStatus struct {
	SecurityTradingStatus SecurityTradingStatusEnum `protobuf:"varint,71,opt,name=security_trading_status,json=securityTradingStatus,proto3,enum=MarketData.SecurityTradingStatusEnum,oneof"`
}

type MDIncGrp_SecurityTradingStatusReserved100Plus struct {
	SecurityTradingStatusReserved100Plus uint32 `protobuf:"fixed32,72,opt,name=security_trading_status_reserved100plus,json=securityTradingStatusReserved100plus,proto3,oneof"`
}

func (*MDIncGrp_SecurityTradingStatus) isMDIncGrp_SecurityTradingStatusUnion() {}

func (*MDIncGrp_SecurityTradingStatusReserved100Plus) isMDIncGrp_SecurityTradingStatusUnion() {}

func (m *MDIncGrp) GetSecurityTradingStatusUnion() isMDIncGrp_SecurityTradingStatusUnion {
	if m != nil {
		return m.SecurityTradingStatusUnion
	}
	return nil
}

func (m *MDIncGrp) GetSecurityTradingStatus() SecurityTradingStatusEnum {
	if x, ok := m.GetSecurityTradingStatusUnion().(*MDIncGrp_SecurityTradingStatus); ok {
		return x.SecurityTradingStatus
	}
	return SecurityTradingStatusEnum_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (m *MDIncGrp) GetSecurityTradingStatusReserved100Plus() uint32 {
	if x, ok := m.GetSecurityTradingStatusUnion().(*MDIncGrp_SecurityTradingStatusReserved100Plus); ok {
		return x.SecurityTradingStatusReserved100Plus
	}
	return 0
}

func (m *MDIncGrp) GetSpreadOrBenchmarkCurveData() *common.SpreadOrBenchmarkCurveData {
	if m != nil {
		return m.SpreadOrBenchmarkCurveData
	}
	return nil
}

func (m *MDIncGrp) GetStatsIndGrp() []*StatsIndGrp {
	if m != nil {
		return m.StatsIndGrp
	}
	return nil
}

func (m *MDIncGrp) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *MDIncGrp) GetTransBkdTime() *fix.Timestamp {
	if m != nil {
		return m.TransBkdTime
	}
	return nil
}

func (m *MDIncGrp) GetTransactTime() *fix.Timestamp {
	if m != nil {
		return m.TransactTime
	}
	return nil
}

type isMDIncGrp_TrdTypeUnion interface {
	isMDIncGrp_TrdTypeUnion()
}

type MDIncGrp_TrdType struct {
	TrdType TrdTypeEnum `protobuf:"varint,78,opt,name=trd_type,json=trdType,proto3,enum=MarketData.TrdTypeEnum,oneof"`
}

type MDIncGrp_TrdTypeReserved1000Plus struct {
	TrdTypeReserved1000Plus uint32 `protobuf:"fixed32,79,opt,name=trd_type_reserved1000plus,json=trdTypeReserved1000plus,proto3,oneof"`
}

func (*MDIncGrp_TrdType) isMDIncGrp_TrdTypeUnion() {}

func (*MDIncGrp_TrdTypeReserved1000Plus) isMDIncGrp_TrdTypeUnion() {}

func (m *MDIncGrp) GetTrdTypeUnion() isMDIncGrp_TrdTypeUnion {
	if m != nil {
		return m.TrdTypeUnion
	}
	return nil
}

func (m *MDIncGrp) GetTrdType() TrdTypeEnum {
	if x, ok := m.GetTrdTypeUnion().(*MDIncGrp_TrdType); ok {
		return x.TrdType
	}
	return TrdTypeEnum_TRD_TYPE_UNSPECIFIED
}

func (m *MDIncGrp) GetTrdTypeReserved1000Plus() uint32 {
	if x, ok := m.GetTrdTypeUnion().(*MDIncGrp_TrdTypeReserved1000Plus); ok {
		return x.TrdTypeReserved1000Plus
	}
	return 0
}

func (m *MDIncGrp) GetYieldData() *common.YieldData {
	if m != nil {
		return m.YieldData
	}
	return nil
}

func (m *MDIncGrp) GetRateSource() []*common.RateSource {
	if m != nil {
		return m.RateSource
	}
	return nil
}

func (m *MDIncGrp) GetSettlCurrency() string {
	if m != nil {
		return m.SettlCurrency
	}
	return ""
}

func (m *MDIncGrp) GetFirstPx() *fix.Decimal64 {
	if m != nil {
		return m.FirstPx
	}
	return nil
}

func (m *MDIncGrp) GetLastPx() *fix.Decimal64 {
	if m != nil {
		return m.LastPx
	}
	return nil
}

func (m *MDIncGrp) GetMdStreamId() string {
	if m != nil {
		return m.MdStreamId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MDIncGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MDIncGrp_SettlType)(nil),
		(*MDIncGrp_SettlTypeTenor)(nil),
		(*MDIncGrp_TradingSessionId)(nil),
		(*MDIncGrp_TradingSessionIdReserved100Plus)(nil),
		(*MDIncGrp_TradingSessionSubId)(nil),
		(*MDIncGrp_TradingSessionSubIdReserved100Plus)(nil),
		(*MDIncGrp_HaltReason)(nil),
		(*MDIncGrp_HaltReasonReserved100Plus)(nil),
		(*MDIncGrp_SecurityTradingStatus)(nil),
		(*MDIncGrp_SecurityTradingStatusReserved100Plus)(nil),
		(*MDIncGrp_TrdType)(nil),
		(*MDIncGrp_TrdTypeReserved1000Plus)(nil),
	}
}

type MDReqGrp struct {
	MdEntryType          MDEntryTypeEnum `protobuf:"varint,1,opt,name=md_entry_type,json=mdEntryType,proto3,enum=MarketData.MDEntryTypeEnum" json:"md_entry_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MDReqGrp) Reset()         { *m = MDReqGrp{} }
func (m *MDReqGrp) String() string { return proto.CompactTextString(m) }
func (*MDReqGrp) ProtoMessage()    {}
func (*MDReqGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{2}
}

func (m *MDReqGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDReqGrp.Unmarshal(m, b)
}
func (m *MDReqGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDReqGrp.Marshal(b, m, deterministic)
}
func (m *MDReqGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDReqGrp.Merge(m, src)
}
func (m *MDReqGrp) XXX_Size() int {
	return xxx_messageInfo_MDReqGrp.Size(m)
}
func (m *MDReqGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MDReqGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MDReqGrp proto.InternalMessageInfo

func (m *MDReqGrp) GetMdEntryType() MDEntryTypeEnum {
	if m != nil {
		return m.MdEntryType
	}
	return MDEntryTypeEnum_MD_ENTRY_TYPE_UNSPECIFIED
}

type MDRjctGrp struct {
	AltMdSourceId        string   `protobuf:"bytes,1,opt,name=alt_md_source_id,json=altMdSourceId,proto3" json:"alt_md_source_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MDRjctGrp) Reset()         { *m = MDRjctGrp{} }
func (m *MDRjctGrp) String() string { return proto.CompactTextString(m) }
func (*MDRjctGrp) ProtoMessage()    {}
func (*MDRjctGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{3}
}

func (m *MDRjctGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDRjctGrp.Unmarshal(m, b)
}
func (m *MDRjctGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDRjctGrp.Marshal(b, m, deterministic)
}
func (m *MDRjctGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDRjctGrp.Merge(m, src)
}
func (m *MDRjctGrp) XXX_Size() int {
	return xxx_messageInfo_MDRjctGrp.Size(m)
}
func (m *MDRjctGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MDRjctGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MDRjctGrp proto.InternalMessageInfo

func (m *MDRjctGrp) GetAltMdSourceId() string {
	if m != nil {
		return m.AltMdSourceId
	}
	return ""
}

type SecSizesGrp struct {
	MdSecSize *fix.Decimal64 `protobuf:"bytes,1,opt,name=md_sec_size,json=mdSecSize,proto3" json:"md_sec_size,omitempty"`
	// Types that are valid to be assigned to MdSecSizeTypeUnion:
	//	*SecSizesGrp_MdSecSizeType
	//	*SecSizesGrp_MdSecSizeTypeReserved100Plus
	MdSecSizeTypeUnion   isSecSizesGrp_MdSecSizeTypeUnion `protobuf_oneof:"md_sec_size_type_union"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SecSizesGrp) Reset()         { *m = SecSizesGrp{} }
func (m *SecSizesGrp) String() string { return proto.CompactTextString(m) }
func (*SecSizesGrp) ProtoMessage()    {}
func (*SecSizesGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{4}
}

func (m *SecSizesGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecSizesGrp.Unmarshal(m, b)
}
func (m *SecSizesGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecSizesGrp.Marshal(b, m, deterministic)
}
func (m *SecSizesGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecSizesGrp.Merge(m, src)
}
func (m *SecSizesGrp) XXX_Size() int {
	return xxx_messageInfo_SecSizesGrp.Size(m)
}
func (m *SecSizesGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_SecSizesGrp.DiscardUnknown(m)
}

var xxx_messageInfo_SecSizesGrp proto.InternalMessageInfo

func (m *SecSizesGrp) GetMdSecSize() *fix.Decimal64 {
	if m != nil {
		return m.MdSecSize
	}
	return nil
}

type isSecSizesGrp_MdSecSizeTypeUnion interface {
	isSecSizesGrp_MdSecSizeTypeUnion()
}

type SecSizesGrp_MdSecSizeType struct {
	MdSecSizeType MDSecSizeTypeEnum `protobuf:"varint,2,opt,name=md_sec_size_type,json=mdSecSizeType,proto3,enum=MarketData.MDSecSizeTypeEnum,oneof"`
}

type SecSizesGrp_MdSecSizeTypeReserved100Plus struct {
	MdSecSizeTypeReserved100Plus uint32 `protobuf:"fixed32,3,opt,name=md_sec_size_type_reserved100plus,json=mdSecSizeTypeReserved100plus,proto3,oneof"`
}

func (*SecSizesGrp_MdSecSizeType) isSecSizesGrp_MdSecSizeTypeUnion() {}

func (*SecSizesGrp_MdSecSizeTypeReserved100Plus) isSecSizesGrp_MdSecSizeTypeUnion() {}

func (m *SecSizesGrp) GetMdSecSizeTypeUnion() isSecSizesGrp_MdSecSizeTypeUnion {
	if m != nil {
		return m.MdSecSizeTypeUnion
	}
	return nil
}

func (m *SecSizesGrp) GetMdSecSizeType() MDSecSizeTypeEnum {
	if x, ok := m.GetMdSecSizeTypeUnion().(*SecSizesGrp_MdSecSizeType); ok {
		return x.MdSecSizeType
	}
	return MDSecSizeTypeEnum_MD_SEC_SIZE_TYPE_UNSPECIFIED
}

func (m *SecSizesGrp) GetMdSecSizeTypeReserved100Plus() uint32 {
	if x, ok := m.GetMdSecSizeTypeUnion().(*SecSizesGrp_MdSecSizeTypeReserved100Plus); ok {
		return x.MdSecSizeTypeReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SecSizesGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SecSizesGrp_MdSecSizeType)(nil),
		(*SecSizesGrp_MdSecSizeTypeReserved100Plus)(nil),
	}
}

type StatsIndGrp struct {
	StatsType            StatsTypeEnum `protobuf:"varint,1,opt,name=stats_type,json=statsType,proto3,enum=MarketData.StatsTypeEnum" json:"stats_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StatsIndGrp) Reset()         { *m = StatsIndGrp{} }
func (m *StatsIndGrp) String() string { return proto.CompactTextString(m) }
func (*StatsIndGrp) ProtoMessage()    {}
func (*StatsIndGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{5}
}

func (m *StatsIndGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsIndGrp.Unmarshal(m, b)
}
func (m *StatsIndGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsIndGrp.Marshal(b, m, deterministic)
}
func (m *StatsIndGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsIndGrp.Merge(m, src)
}
func (m *StatsIndGrp) XXX_Size() int {
	return xxx_messageInfo_StatsIndGrp.Size(m)
}
func (m *StatsIndGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsIndGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StatsIndGrp proto.InternalMessageInfo

func (m *StatsIndGrp) GetStatsType() StatsTypeEnum {
	if m != nil {
		return m.StatsType
	}
	return StatsTypeEnum_STATS_TYPE_UNSPECIFIED
}

type StrmAsgnReqGrp struct {
	Parties               []*common.Parties               `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	StrmAsgnReqInstrmtGrp []*StrmAsgnReqInstrmtGrp `protobuf:"bytes,2,rep,name=strm_asgn_req_instrmt_grp,json=strmAsgnReqInstrmtGrp,proto3" json:"strm_asgn_req_instrmt_grp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_unrecognized      []byte                   `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *StrmAsgnReqGrp) Reset()         { *m = StrmAsgnReqGrp{} }
func (m *StrmAsgnReqGrp) String() string { return proto.CompactTextString(m) }
func (*StrmAsgnReqGrp) ProtoMessage()    {}
func (*StrmAsgnReqGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{6}
}

func (m *StrmAsgnReqGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrmAsgnReqGrp.Unmarshal(m, b)
}
func (m *StrmAsgnReqGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrmAsgnReqGrp.Marshal(b, m, deterministic)
}
func (m *StrmAsgnReqGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrmAsgnReqGrp.Merge(m, src)
}
func (m *StrmAsgnReqGrp) XXX_Size() int {
	return xxx_messageInfo_StrmAsgnReqGrp.Size(m)
}
func (m *StrmAsgnReqGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StrmAsgnReqGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StrmAsgnReqGrp proto.InternalMessageInfo

func (m *StrmAsgnReqGrp) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *StrmAsgnReqGrp) GetStrmAsgnReqInstrmtGrp() []*StrmAsgnReqInstrmtGrp {
	if m != nil {
		return m.StrmAsgnReqInstrmtGrp
	}
	return nil
}

type StrmAsgnRptGrp struct {
	Parties               []*common.Parties               `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	StrmAsgnRptInstrmtGrp []*StrmAsgnRptInstrmtGrp `protobuf:"bytes,2,rep,name=strm_asgn_rpt_instrmt_grp,json=strmAsgnRptInstrmtGrp,proto3" json:"strm_asgn_rpt_instrmt_grp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_unrecognized      []byte                   `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *StrmAsgnRptGrp) Reset()         { *m = StrmAsgnRptGrp{} }
func (m *StrmAsgnRptGrp) String() string { return proto.CompactTextString(m) }
func (*StrmAsgnRptGrp) ProtoMessage()    {}
func (*StrmAsgnRptGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{7}
}

func (m *StrmAsgnRptGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrmAsgnRptGrp.Unmarshal(m, b)
}
func (m *StrmAsgnRptGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrmAsgnRptGrp.Marshal(b, m, deterministic)
}
func (m *StrmAsgnRptGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrmAsgnRptGrp.Merge(m, src)
}
func (m *StrmAsgnRptGrp) XXX_Size() int {
	return xxx_messageInfo_StrmAsgnRptGrp.Size(m)
}
func (m *StrmAsgnRptGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StrmAsgnRptGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StrmAsgnRptGrp proto.InternalMessageInfo

func (m *StrmAsgnRptGrp) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *StrmAsgnRptGrp) GetStrmAsgnRptInstrmtGrp() []*StrmAsgnRptInstrmtGrp {
	if m != nil {
		return m.StrmAsgnRptInstrmtGrp
	}
	return nil
}

type StrmAsgnReqInstrmtGrp struct {
	Instrument  *common.Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	MdEntrySize *fix.Decimal64  `protobuf:"bytes,2,opt,name=md_entry_size,json=mdEntrySize,proto3" json:"md_entry_size,omitempty"`
	MdStreamId  string      `protobuf:"bytes,3,opt,name=md_stream_id,json=mdStreamId,proto3" json:"md_stream_id,omitempty"`
	// Types that are valid to be assigned to SettlTypeUnion:
	//	*StrmAsgnReqInstrmtGrp_SettlType
	//	*StrmAsgnReqInstrmtGrp_SettlTypeTenor
	SettlTypeUnion       isStrmAsgnReqInstrmtGrp_SettlTypeUnion `protobuf_oneof:"settl_type_union"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *StrmAsgnReqInstrmtGrp) Reset()         { *m = StrmAsgnReqInstrmtGrp{} }
func (m *StrmAsgnReqInstrmtGrp) String() string { return proto.CompactTextString(m) }
func (*StrmAsgnReqInstrmtGrp) ProtoMessage()    {}
func (*StrmAsgnReqInstrmtGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{8}
}

func (m *StrmAsgnReqInstrmtGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrmAsgnReqInstrmtGrp.Unmarshal(m, b)
}
func (m *StrmAsgnReqInstrmtGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrmAsgnReqInstrmtGrp.Marshal(b, m, deterministic)
}
func (m *StrmAsgnReqInstrmtGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrmAsgnReqInstrmtGrp.Merge(m, src)
}
func (m *StrmAsgnReqInstrmtGrp) XXX_Size() int {
	return xxx_messageInfo_StrmAsgnReqInstrmtGrp.Size(m)
}
func (m *StrmAsgnReqInstrmtGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StrmAsgnReqInstrmtGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StrmAsgnReqInstrmtGrp proto.InternalMessageInfo

func (m *StrmAsgnReqInstrmtGrp) GetInstrument() *common.Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *StrmAsgnReqInstrmtGrp) GetMdEntrySize() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySize
	}
	return nil
}

func (m *StrmAsgnReqInstrmtGrp) GetMdStreamId() string {
	if m != nil {
		return m.MdStreamId
	}
	return ""
}

type isStrmAsgnReqInstrmtGrp_SettlTypeUnion interface {
	isStrmAsgnReqInstrmtGrp_SettlTypeUnion()
}

type StrmAsgnReqInstrmtGrp_SettlType struct {
	SettlType SettlTypeEnum `protobuf:"varint,4,opt,name=settl_type,json=settlType,proto3,enum=MarketData.SettlTypeEnum,oneof"`
}

type StrmAsgnReqInstrmtGrp_SettlTypeTenor struct {
	SettlTypeTenor *fix.Tenor `protobuf:"bytes,5,opt,name=settl_type_tenor,json=settlTypeTenor,proto3,oneof"`
}

func (*StrmAsgnReqInstrmtGrp_SettlType) isStrmAsgnReqInstrmtGrp_SettlTypeUnion() {}

func (*StrmAsgnReqInstrmtGrp_SettlTypeTenor) isStrmAsgnReqInstrmtGrp_SettlTypeUnion() {}

func (m *StrmAsgnReqInstrmtGrp) GetSettlTypeUnion() isStrmAsgnReqInstrmtGrp_SettlTypeUnion {
	if m != nil {
		return m.SettlTypeUnion
	}
	return nil
}

func (m *StrmAsgnReqInstrmtGrp) GetSettlType() SettlTypeEnum {
	if x, ok := m.GetSettlTypeUnion().(*StrmAsgnReqInstrmtGrp_SettlType); ok {
		return x.SettlType
	}
	return SettlTypeEnum_SETTL_TYPE_UNSPECIFIED
}

func (m *StrmAsgnReqInstrmtGrp) GetSettlTypeTenor() *fix.Tenor {
	if x, ok := m.GetSettlTypeUnion().(*StrmAsgnReqInstrmtGrp_SettlTypeTenor); ok {
		return x.SettlTypeTenor
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StrmAsgnReqInstrmtGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StrmAsgnReqInstrmtGrp_SettlType)(nil),
		(*StrmAsgnReqInstrmtGrp_SettlTypeTenor)(nil),
	}
}

type StrmAsgnRptInstrmtGrp struct {
	Instrument     *common.Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	EncodedText    string      `protobuf:"bytes,2,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen int64       `protobuf:"fixed64,3,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	MdStreamId     string      `protobuf:"bytes,4,opt,name=md_stream_id,json=mdStreamId,proto3" json:"md_stream_id,omitempty"`
	// Types that are valid to be assigned to SettlTypeUnion:
	//	*StrmAsgnRptInstrmtGrp_SettlType
	//	*StrmAsgnRptInstrmtGrp_SettlTypeTenor
	SettlTypeUnion isStrmAsgnRptInstrmtGrp_SettlTypeUnion `protobuf_oneof:"settl_type_union"`
	// Types that are valid to be assigned to StreamAsgnRejReasonUnion:
	//	*StrmAsgnRptInstrmtGrp_StreamAsgnRejReason
	//	*StrmAsgnRptInstrmtGrp_StreamAsgnRejReasonReserved100Plus
	StreamAsgnRejReasonUnion isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion `protobuf_oneof:"stream_asgn_rej_reason_union"`
	StreamAsgnType           StreamAsgnTypeEnum                               `protobuf:"varint,9,opt,name=stream_asgn_type,json=streamAsgnType,proto3,enum=MarketData.StreamAsgnTypeEnum" json:"stream_asgn_type,omitempty"`
	Text                     string                                           `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                         `json:"-"`
	XXX_unrecognized         []byte                                           `json:"-"`
	XXX_sizecache            int32                                            `json:"-"`
}

func (m *StrmAsgnRptInstrmtGrp) Reset()         { *m = StrmAsgnRptInstrmtGrp{} }
func (m *StrmAsgnRptInstrmtGrp) String() string { return proto.CompactTextString(m) }
func (*StrmAsgnRptInstrmtGrp) ProtoMessage()    {}
func (*StrmAsgnRptInstrmtGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{9}
}

func (m *StrmAsgnRptInstrmtGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrmAsgnRptInstrmtGrp.Unmarshal(m, b)
}
func (m *StrmAsgnRptInstrmtGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrmAsgnRptInstrmtGrp.Marshal(b, m, deterministic)
}
func (m *StrmAsgnRptInstrmtGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrmAsgnRptInstrmtGrp.Merge(m, src)
}
func (m *StrmAsgnRptInstrmtGrp) XXX_Size() int {
	return xxx_messageInfo_StrmAsgnRptInstrmtGrp.Size(m)
}
func (m *StrmAsgnRptInstrmtGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StrmAsgnRptInstrmtGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StrmAsgnRptInstrmtGrp proto.InternalMessageInfo

func (m *StrmAsgnRptInstrmtGrp) GetInstrument() *common.Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *StrmAsgnRptInstrmtGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *StrmAsgnRptInstrmtGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *StrmAsgnRptInstrmtGrp) GetMdStreamId() string {
	if m != nil {
		return m.MdStreamId
	}
	return ""
}

type isStrmAsgnRptInstrmtGrp_SettlTypeUnion interface {
	isStrmAsgnRptInstrmtGrp_SettlTypeUnion()
}

type StrmAsgnRptInstrmtGrp_SettlType struct {
	SettlType SettlTypeEnum `protobuf:"varint,5,opt,name=settl_type,json=settlType,proto3,enum=MarketData.SettlTypeEnum,oneof"`
}

type StrmAsgnRptInstrmtGrp_SettlTypeTenor struct {
	SettlTypeTenor *fix.Tenor `protobuf:"bytes,6,opt,name=settl_type_tenor,json=settlTypeTenor,proto3,oneof"`
}

func (*StrmAsgnRptInstrmtGrp_SettlType) isStrmAsgnRptInstrmtGrp_SettlTypeUnion() {}

func (*StrmAsgnRptInstrmtGrp_SettlTypeTenor) isStrmAsgnRptInstrmtGrp_SettlTypeUnion() {}

func (m *StrmAsgnRptInstrmtGrp) GetSettlTypeUnion() isStrmAsgnRptInstrmtGrp_SettlTypeUnion {
	if m != nil {
		return m.SettlTypeUnion
	}
	return nil
}

func (m *StrmAsgnRptInstrmtGrp) GetSettlType() SettlTypeEnum {
	if x, ok := m.GetSettlTypeUnion().(*StrmAsgnRptInstrmtGrp_SettlType); ok {
		return x.SettlType
	}
	return SettlTypeEnum_SETTL_TYPE_UNSPECIFIED
}

func (m *StrmAsgnRptInstrmtGrp) GetSettlTypeTenor() *fix.Tenor {
	if x, ok := m.GetSettlTypeUnion().(*StrmAsgnRptInstrmtGrp_SettlTypeTenor); ok {
		return x.SettlTypeTenor
	}
	return nil
}

type isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion interface {
	isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion()
}

type StrmAsgnRptInstrmtGrp_StreamAsgnRejReason struct {
	StreamAsgnRejReason StreamAsgnRejReasonEnum `protobuf:"varint,7,opt,name=stream_asgn_rej_reason,json=streamAsgnRejReason,proto3,enum=MarketData.StreamAsgnRejReasonEnum,oneof"`
}

type StrmAsgnRptInstrmtGrp_StreamAsgnRejReasonReserved100Plus struct {
	StreamAsgnRejReasonReserved100Plus uint32 `protobuf:"fixed32,8,opt,name=stream_asgn_rej_reason_reserved100plus,json=streamAsgnRejReasonReserved100plus,proto3,oneof"`
}

func (*StrmAsgnRptInstrmtGrp_StreamAsgnRejReason) isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion() {}

func (*StrmAsgnRptInstrmtGrp_StreamAsgnRejReasonReserved100Plus) isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion() {
}

func (m *StrmAsgnRptInstrmtGrp) GetStreamAsgnRejReasonUnion() isStrmAsgnRptInstrmtGrp_StreamAsgnRejReasonUnion {
	if m != nil {
		return m.StreamAsgnRejReasonUnion
	}
	return nil
}

func (m *StrmAsgnRptInstrmtGrp) GetStreamAsgnRejReason() StreamAsgnRejReasonEnum {
	if x, ok := m.GetStreamAsgnRejReasonUnion().(*StrmAsgnRptInstrmtGrp_StreamAsgnRejReason); ok {
		return x.StreamAsgnRejReason
	}
	return StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_UNSPECIFIED
}

func (m *StrmAsgnRptInstrmtGrp) GetStreamAsgnRejReasonReserved100Plus() uint32 {
	if x, ok := m.GetStreamAsgnRejReasonUnion().(*StrmAsgnRptInstrmtGrp_StreamAsgnRejReasonReserved100Plus); ok {
		return x.StreamAsgnRejReasonReserved100Plus
	}
	return 0
}

func (m *StrmAsgnRptInstrmtGrp) GetStreamAsgnType() StreamAsgnTypeEnum {
	if m != nil {
		return m.StreamAsgnType
	}
	return StreamAsgnTypeEnum_STREAM_ASGN_TYPE_UNSPECIFIED
}

func (m *StrmAsgnRptInstrmtGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StrmAsgnRptInstrmtGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StrmAsgnRptInstrmtGrp_SettlType)(nil),
		(*StrmAsgnRptInstrmtGrp_SettlTypeTenor)(nil),
		(*StrmAsgnRptInstrmtGrp_StreamAsgnRejReason)(nil),
		(*StrmAsgnRptInstrmtGrp_StreamAsgnRejReasonReserved100Plus)(nil),
	}
}

type MarketDataRequest struct {
	AggregatedBook          bool                        `protobuf:"varint,1,opt,name=aggregated_book,json=aggregatedBook,proto3" json:"aggregated_book,omitempty"`
	MarketDepth             int64                       `protobuf:"fixed64,2,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	MdReqId                 string                      `protobuf:"bytes,3,opt,name=md_req_id,json=mdReqId,proto3" json:"md_req_id,omitempty"`
	MdUpdateType            MDUpdateTypeEnum            `protobuf:"varint,4,opt,name=md_update_type,json=mdUpdateType,proto3,enum=MarketData.MDUpdateTypeEnum" json:"md_update_type,omitempty"`
	StandardHeader          *session.StandardHeader             `protobuf:"bytes,5,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer         *session.StandardTrailer            `protobuf:"bytes,6,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	SubscriptionRequestType SubscriptionRequestTypeEnum `protobuf:"varint,7,opt,name=subscription_request_type,json=subscriptionRequestType,proto3,enum=MarketData.SubscriptionRequestTypeEnum" json:"subscription_request_type,omitempty"`
	MdImplicitDelete        bool                        `protobuf:"varint,8,opt,name=md_implicit_delete,json=mdImplicitDelete,proto3" json:"md_implicit_delete,omitempty"`
	OpenCloseSettlFlag      []OpenCloseSettlFlagEnum    `protobuf:"varint,9,rep,packed,name=open_close_settl_flag,json=openCloseSettlFlag,proto3,enum=MarketData.OpenCloseSettlFlagEnum" json:"open_close_settl_flag,omitempty"`
	Scope                   []ScopeEnum                 `protobuf:"varint,10,rep,packed,name=scope,proto3,enum=MarketData.ScopeEnum" json:"scope,omitempty"`
	ApplQueueAction         ApplQueueActionEnum         `protobuf:"varint,11,opt,name=appl_queue_action,json=applQueueAction,proto3,enum=MarketData.ApplQueueActionEnum" json:"appl_queue_action,omitempty"`
	ApplQueueMax            int64                       `protobuf:"fixed64,12,opt,name=appl_queue_max,json=applQueueMax,proto3" json:"appl_queue_max,omitempty"`
	InstrmtMdReqGrp         []*common.InstrmtMDReqGrp          `protobuf:"bytes,13,rep,name=instrmt_md_req_grp,json=instrmtMdReqGrp,proto3" json:"instrmt_md_req_grp,omitempty"`
	MdQuoteType             MDQuoteTypeEnum             `protobuf:"varint,14,opt,name=md_quote_type,json=mdQuoteType,proto3,enum=MarketData.MDQuoteTypeEnum" json:"md_quote_type,omitempty"`
	MdReqGrp                []*MDReqGrp                 `protobuf:"bytes,15,rep,name=md_req_grp,json=mdReqGrp,proto3" json:"md_req_grp,omitempty"`
	TrdgSesGrp              []*common.TrdgSesGrp               `protobuf:"bytes,16,rep,name=trdg_ses_grp,json=trdgSesGrp,proto3" json:"trdg_ses_grp,omitempty"`
	Parties                 []*common.Parties                  `protobuf:"bytes,17,rep,name=parties,proto3" json:"parties,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                    `json:"-"`
	XXX_unrecognized        []byte                      `json:"-"`
	XXX_sizecache           int32                       `json:"-"`
}

func (m *MarketDataRequest) Reset()         { *m = MarketDataRequest{} }
func (m *MarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequest) ProtoMessage()    {}
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{10}
}

func (m *MarketDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataRequest.Unmarshal(m, b)
}
func (m *MarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataRequest.Marshal(b, m, deterministic)
}
func (m *MarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequest.Merge(m, src)
}
func (m *MarketDataRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDataRequest.Size(m)
}
func (m *MarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequest proto.InternalMessageInfo

func (m *MarketDataRequest) GetAggregatedBook() bool {
	if m != nil {
		return m.AggregatedBook
	}
	return false
}

func (m *MarketDataRequest) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MarketDataRequest) GetMdReqId() string {
	if m != nil {
		return m.MdReqId
	}
	return ""
}

func (m *MarketDataRequest) GetMdUpdateType() MDUpdateTypeEnum {
	if m != nil {
		return m.MdUpdateType
	}
	return MDUpdateTypeEnum_MD_UPDATE_TYPE_UNSPECIFIED
}

func (m *MarketDataRequest) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *MarketDataRequest) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *MarketDataRequest) GetSubscriptionRequestType() SubscriptionRequestTypeEnum {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return SubscriptionRequestTypeEnum_SUBSCRIPTION_REQUEST_TYPE_UNSPECIFIED
}

func (m *MarketDataRequest) GetMdImplicitDelete() bool {
	if m != nil {
		return m.MdImplicitDelete
	}
	return false
}

func (m *MarketDataRequest) GetOpenCloseSettlFlag() []OpenCloseSettlFlagEnum {
	if m != nil {
		return m.OpenCloseSettlFlag
	}
	return nil
}

func (m *MarketDataRequest) GetScope() []ScopeEnum {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *MarketDataRequest) GetApplQueueAction() ApplQueueActionEnum {
	if m != nil {
		return m.ApplQueueAction
	}
	return ApplQueueActionEnum_APPL_QUEUE_ACTION_UNSPECIFIED
}

func (m *MarketDataRequest) GetApplQueueMax() int64 {
	if m != nil {
		return m.ApplQueueMax
	}
	return 0
}

func (m *MarketDataRequest) GetInstrmtMdReqGrp() []*common.InstrmtMDReqGrp {
	if m != nil {
		return m.InstrmtMdReqGrp
	}
	return nil
}

func (m *MarketDataRequest) GetMdQuoteType() MDQuoteTypeEnum {
	if m != nil {
		return m.MdQuoteType
	}
	return MDQuoteTypeEnum_MD_QUOTE_TYPE_UNSPECIFIED
}

func (m *MarketDataRequest) GetMdReqGrp() []*MDReqGrp {
	if m != nil {
		return m.MdReqGrp
	}
	return nil
}

func (m *MarketDataRequest) GetTrdgSesGrp() []*common.TrdgSesGrp {
	if m != nil {
		return m.TrdgSesGrp
	}
	return nil
}

func (m *MarketDataRequest) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

type MarketDataSnapshotFullRefresh struct {
	CorporateAction            []CorporateActionEnum       `protobuf:"varint,1,rep,packed,name=corporate_action,json=corporateAction,proto3,enum=MarketData.CorporateActionEnum" json:"corporate_action,omitempty"`
	FinancialStatus            []FinancialStatusEnum       `protobuf:"varint,2,rep,packed,name=financial_status,json=financialStatus,proto3,enum=MarketData.FinancialStatusEnum" json:"financial_status,omitempty"`
	MdReqId                    string                      `protobuf:"bytes,3,opt,name=md_req_id,json=mdReqId,proto3" json:"md_req_id,omitempty"`
	StandardHeader             *session.StandardHeader             `protobuf:"bytes,4,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer            *session.StandardTrailer            `protobuf:"bytes,5,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	Instrument                 *common.Instrument                 `protobuf:"bytes,6,opt,name=instrument,proto3" json:"instrument,omitempty"`
	NetChgPrevDay              *fix.Decimal64                  `protobuf:"bytes,7,opt,name=net_chg_prev_day,json=netChgPrevDay,proto3" json:"net_chg_prev_day,omitempty"`
	ApplQueueDepth             int64                       `protobuf:"fixed64,8,opt,name=appl_queue_depth,json=applQueueDepth,proto3" json:"appl_queue_depth,omitempty"`
	ApplQueueResolution        ApplQueueResolutionEnum     `protobuf:"varint,9,opt,name=appl_queue_resolution,json=applQueueResolution,proto3,enum=MarketData.ApplQueueResolutionEnum" json:"appl_queue_resolution,omitempty"`
	ClearingBusinessDate       int32                       `protobuf:"fixed32,10,opt,name=clearing_business_date,json=clearingBusinessDate,proto3" json:"clearing_business_date,omitempty"`
	InstrmtLegGrp              []*common.InstrmtLegGrp            `protobuf:"bytes,11,rep,name=instrmt_leg_grp,json=instrmtLegGrp,proto3" json:"instrmt_leg_grp,omitempty"`
	MdBookType                 MDBookTypeEnum              `protobuf:"varint,12,opt,name=md_book_type,json=mdBookType,proto3,enum=MarketData.MDBookTypeEnum" json:"md_book_type,omitempty"`
	MdFeedType                 string                      `protobuf:"bytes,13,opt,name=md_feed_type,json=mdFeedType,proto3" json:"md_feed_type,omitempty"`
	MdFullGrp                  []*MDFullGrp                `protobuf:"bytes,14,rep,name=md_full_grp,json=mdFullGrp,proto3" json:"md_full_grp,omitempty"`
	MdReportId                 int64                       `protobuf:"fixed64,15,opt,name=md_report_id,json=mdReportId,proto3" json:"md_report_id,omitempty"`
	RoutingGrp                 []*common.RoutingGrp               `protobuf:"bytes,16,rep,name=routing_grp,json=routingGrp,proto3" json:"routing_grp,omitempty"`
	TradeDate                  int32                       `protobuf:"fixed32,17,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	UndInstrmtGrp              []*common.UndInstrmtGrp            `protobuf:"bytes,18,rep,name=und_instrmt_grp,json=undInstrmtGrp,proto3" json:"und_instrmt_grp,omitempty"`
	ApplicationSequenceControl *common.ApplicationSequenceControl `protobuf:"bytes,19,opt,name=application_sequence_control,json=applicationSequenceControl,proto3" json:"application_sequence_control,omitempty"`
	MarketDepth                int64                       `protobuf:"fixed64,20,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	MdSubBookType              int64                       `protobuf:"fixed64,21,opt,name=md_sub_book_type,json=mdSubBookType,proto3" json:"md_sub_book_type,omitempty"`
	RefreshIndicator           bool                        `protobuf:"varint,22,opt,name=refresh_indicator,json=refreshIndicator,proto3" json:"refresh_indicator,omitempty"`
	TotNumReports              int64                       `protobuf:"fixed64,23,opt,name=tot_num_reports,json=totNumReports,proto3" json:"tot_num_reports,omitempty"`
	MdStreamId                 string                      `protobuf:"bytes,24,opt,name=md_stream_id,json=mdStreamId,proto3" json:"md_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *MarketDataSnapshotFullRefresh) Reset()         { *m = MarketDataSnapshotFullRefresh{} }
func (m *MarketDataSnapshotFullRefresh) String() string { return proto.CompactTextString(m) }
func (*MarketDataSnapshotFullRefresh) ProtoMessage()    {}
func (*MarketDataSnapshotFullRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{11}
}

func (m *MarketDataSnapshotFullRefresh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataSnapshotFullRefresh.Unmarshal(m, b)
}
func (m *MarketDataSnapshotFullRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataSnapshotFullRefresh.Marshal(b, m, deterministic)
}
func (m *MarketDataSnapshotFullRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataSnapshotFullRefresh.Merge(m, src)
}
func (m *MarketDataSnapshotFullRefresh) XXX_Size() int {
	return xxx_messageInfo_MarketDataSnapshotFullRefresh.Size(m)
}
func (m *MarketDataSnapshotFullRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataSnapshotFullRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataSnapshotFullRefresh proto.InternalMessageInfo

func (m *MarketDataSnapshotFullRefresh) GetCorporateAction() []CorporateActionEnum {
	if m != nil {
		return m.CorporateAction
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetFinancialStatus() []FinancialStatusEnum {
	if m != nil {
		return m.FinancialStatus
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetMdReqId() string {
	if m != nil {
		return m.MdReqId
	}
	return ""
}

func (m *MarketDataSnapshotFullRefresh) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetInstrument() *common.Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetNetChgPrevDay() *fix.Decimal64 {
	if m != nil {
		return m.NetChgPrevDay
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetApplQueueDepth() int64 {
	if m != nil {
		return m.ApplQueueDepth
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetApplQueueResolution() ApplQueueResolutionEnum {
	if m != nil {
		return m.ApplQueueResolution
	}
	return ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_UNSPECIFIED
}

func (m *MarketDataSnapshotFullRefresh) GetClearingBusinessDate() int32 {
	if m != nil {
		return m.ClearingBusinessDate
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetInstrmtLegGrp() []*common.InstrmtLegGrp {
	if m != nil {
		return m.InstrmtLegGrp
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetMdBookType() MDBookTypeEnum {
	if m != nil {
		return m.MdBookType
	}
	return MDBookTypeEnum_MD_BOOK_TYPE_UNSPECIFIED
}

func (m *MarketDataSnapshotFullRefresh) GetMdFeedType() string {
	if m != nil {
		return m.MdFeedType
	}
	return ""
}

func (m *MarketDataSnapshotFullRefresh) GetMdFullGrp() []*MDFullGrp {
	if m != nil {
		return m.MdFullGrp
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetMdReportId() int64 {
	if m != nil {
		return m.MdReportId
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetRoutingGrp() []*common.RoutingGrp {
	if m != nil {
		return m.RoutingGrp
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetUndInstrmtGrp() []*common.UndInstrmtGrp {
	if m != nil {
		return m.UndInstrmtGrp
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetApplicationSequenceControl() *common.ApplicationSequenceControl {
	if m != nil {
		return m.ApplicationSequenceControl
	}
	return nil
}

func (m *MarketDataSnapshotFullRefresh) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetMdSubBookType() int64 {
	if m != nil {
		return m.MdSubBookType
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetRefreshIndicator() bool {
	if m != nil {
		return m.RefreshIndicator
	}
	return false
}

func (m *MarketDataSnapshotFullRefresh) GetTotNumReports() int64 {
	if m != nil {
		return m.TotNumReports
	}
	return 0
}

func (m *MarketDataSnapshotFullRefresh) GetMdStreamId() string {
	if m != nil {
		return m.MdStreamId
	}
	return ""
}

type MarketDataIncrementalRefresh struct {
	MdReqId                    string                      `protobuf:"bytes,1,opt,name=md_req_id,json=mdReqId,proto3" json:"md_req_id,omitempty"`
	StandardHeader             *session.StandardHeader             `protobuf:"bytes,2,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer            *session.StandardTrailer            `protobuf:"bytes,3,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	ApplQueueDepth             int64                       `protobuf:"fixed64,4,opt,name=appl_queue_depth,json=applQueueDepth,proto3" json:"appl_queue_depth,omitempty"`
	ApplQueueResolution        ApplQueueResolutionEnum     `protobuf:"varint,5,opt,name=appl_queue_resolution,json=applQueueResolution,proto3,enum=MarketData.ApplQueueResolutionEnum" json:"appl_queue_resolution,omitempty"`
	MdBookType                 MDBookTypeEnum              `protobuf:"varint,6,opt,name=md_book_type,json=mdBookType,proto3,enum=MarketData.MDBookTypeEnum" json:"md_book_type,omitempty"`
	MdFeedType                 string                      `protobuf:"bytes,7,opt,name=md_feed_type,json=mdFeedType,proto3" json:"md_feed_type,omitempty"`
	MdIncGrp                   []*MDIncGrp                 `protobuf:"bytes,8,rep,name=md_inc_grp,json=mdIncGrp,proto3" json:"md_inc_grp,omitempty"`
	RoutingGrp                 []*common.RoutingGrp               `protobuf:"bytes,9,rep,name=routing_grp,json=routingGrp,proto3" json:"routing_grp,omitempty"`
	TradeDate                  int32                       `protobuf:"fixed32,10,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	ApplicationSequenceControl *common.ApplicationSequenceControl `protobuf:"bytes,11,opt,name=application_sequence_control,json=applicationSequenceControl,proto3" json:"application_sequence_control,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *MarketDataIncrementalRefresh) Reset()         { *m = MarketDataIncrementalRefresh{} }
func (m *MarketDataIncrementalRefresh) String() string { return proto.CompactTextString(m) }
func (*MarketDataIncrementalRefresh) ProtoMessage()    {}
func (*MarketDataIncrementalRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{12}
}

func (m *MarketDataIncrementalRefresh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataIncrementalRefresh.Unmarshal(m, b)
}
func (m *MarketDataIncrementalRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataIncrementalRefresh.Marshal(b, m, deterministic)
}
func (m *MarketDataIncrementalRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataIncrementalRefresh.Merge(m, src)
}
func (m *MarketDataIncrementalRefresh) XXX_Size() int {
	return xxx_messageInfo_MarketDataIncrementalRefresh.Size(m)
}
func (m *MarketDataIncrementalRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataIncrementalRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataIncrementalRefresh proto.InternalMessageInfo

func (m *MarketDataIncrementalRefresh) GetMdReqId() string {
	if m != nil {
		return m.MdReqId
	}
	return ""
}

func (m *MarketDataIncrementalRefresh) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *MarketDataIncrementalRefresh) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *MarketDataIncrementalRefresh) GetApplQueueDepth() int64 {
	if m != nil {
		return m.ApplQueueDepth
	}
	return 0
}

func (m *MarketDataIncrementalRefresh) GetApplQueueResolution() ApplQueueResolutionEnum {
	if m != nil {
		return m.ApplQueueResolution
	}
	return ApplQueueResolutionEnum_APPL_QUEUE_RESOLUTION_UNSPECIFIED
}

func (m *MarketDataIncrementalRefresh) GetMdBookType() MDBookTypeEnum {
	if m != nil {
		return m.MdBookType
	}
	return MDBookTypeEnum_MD_BOOK_TYPE_UNSPECIFIED
}

func (m *MarketDataIncrementalRefresh) GetMdFeedType() string {
	if m != nil {
		return m.MdFeedType
	}
	return ""
}

func (m *MarketDataIncrementalRefresh) GetMdIncGrp() []*MDIncGrp {
	if m != nil {
		return m.MdIncGrp
	}
	return nil
}

func (m *MarketDataIncrementalRefresh) GetRoutingGrp() []*common.RoutingGrp {
	if m != nil {
		return m.RoutingGrp
	}
	return nil
}

func (m *MarketDataIncrementalRefresh) GetTradeDate() int32 {
	if m != nil {
		return m.TradeDate
	}
	return 0
}

func (m *MarketDataIncrementalRefresh) GetApplicationSequenceControl() *common.ApplicationSequenceControl {
	if m != nil {
		return m.ApplicationSequenceControl
	}
	return nil
}

type MarketDataRequestReject struct {
	EncodedText          string             `protobuf:"bytes,1,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen       int64              `protobuf:"fixed64,2,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	MdReqId              string             `protobuf:"bytes,3,opt,name=md_req_id,json=mdReqId,proto3" json:"md_req_id,omitempty"`
	MdReqRejReason       MDReqRejReasonEnum `protobuf:"varint,4,opt,name=md_req_rej_reason,json=mdReqRejReason,proto3,enum=MarketData.MDReqRejReasonEnum" json:"md_req_rej_reason,omitempty"`
	StandardHeader       *session.StandardHeader    `protobuf:"bytes,5,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *session.StandardTrailer   `protobuf:"bytes,6,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	Text                 string             `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	MdRjctGrp            []*MDRjctGrp       `protobuf:"bytes,8,rep,name=md_rjct_grp,json=mdRjctGrp,proto3" json:"md_rjct_grp,omitempty"`
	Parties              []*common.Parties         `protobuf:"bytes,9,rep,name=parties,proto3" json:"parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MarketDataRequestReject) Reset()         { *m = MarketDataRequestReject{} }
func (m *MarketDataRequestReject) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequestReject) ProtoMessage()    {}
func (*MarketDataRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{13}
}

func (m *MarketDataRequestReject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataRequestReject.Unmarshal(m, b)
}
func (m *MarketDataRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataRequestReject.Marshal(b, m, deterministic)
}
func (m *MarketDataRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequestReject.Merge(m, src)
}
func (m *MarketDataRequestReject) XXX_Size() int {
	return xxx_messageInfo_MarketDataRequestReject.Size(m)
}
func (m *MarketDataRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequestReject proto.InternalMessageInfo

func (m *MarketDataRequestReject) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *MarketDataRequestReject) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *MarketDataRequestReject) GetMdReqId() string {
	if m != nil {
		return m.MdReqId
	}
	return ""
}

func (m *MarketDataRequestReject) GetMdReqRejReason() MDReqRejReasonEnum {
	if m != nil {
		return m.MdReqRejReason
	}
	return MDReqRejReasonEnum_MD_REQ_REJ_REASON_UNSPECIFIED
}

func (m *MarketDataRequestReject) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *MarketDataRequestReject) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *MarketDataRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MarketDataRequestReject) GetMdRjctGrp() []*MDRjctGrp {
	if m != nil {
		return m.MdRjctGrp
	}
	return nil
}

func (m *MarketDataRequestReject) GetParties() []*common.Parties {
	if m != nil {
		return m.Parties
	}
	return nil
}

type StreamAssignmentRequest struct {
	StandardHeader       *session.StandardHeader       `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *session.StandardTrailer      `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	StrmAsgnReqGrp       []*StrmAsgnReqGrp     `protobuf:"bytes,3,rep,name=strm_asgn_req_grp,json=strmAsgnReqGrp,proto3" json:"strm_asgn_req_grp,omitempty"`
	StreamAsgnReqId      string                `protobuf:"bytes,4,opt,name=stream_asgn_req_id,json=streamAsgnReqId,proto3" json:"stream_asgn_req_id,omitempty"`
	StreamAsgnReqType    StreamAsgnReqTypeEnum `protobuf:"varint,5,opt,name=stream_asgn_req_type,json=streamAsgnReqType,proto3,enum=MarketData.StreamAsgnReqTypeEnum" json:"stream_asgn_req_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StreamAssignmentRequest) Reset()         { *m = StreamAssignmentRequest{} }
func (m *StreamAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*StreamAssignmentRequest) ProtoMessage()    {}
func (*StreamAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{14}
}

func (m *StreamAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamAssignmentRequest.Unmarshal(m, b)
}
func (m *StreamAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *StreamAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamAssignmentRequest.Merge(m, src)
}
func (m *StreamAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_StreamAssignmentRequest.Size(m)
}
func (m *StreamAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamAssignmentRequest proto.InternalMessageInfo

func (m *StreamAssignmentRequest) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *StreamAssignmentRequest) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *StreamAssignmentRequest) GetStrmAsgnReqGrp() []*StrmAsgnReqGrp {
	if m != nil {
		return m.StrmAsgnReqGrp
	}
	return nil
}

func (m *StreamAssignmentRequest) GetStreamAsgnReqId() string {
	if m != nil {
		return m.StreamAsgnReqId
	}
	return ""
}

func (m *StreamAssignmentRequest) GetStreamAsgnReqType() StreamAsgnReqTypeEnum {
	if m != nil {
		return m.StreamAsgnReqType
	}
	return StreamAsgnReqTypeEnum_STREAM_ASGN_REQ_TYPE_UNSPECIFIED
}

type StreamAssignmentReport struct {
	StandardHeader       *session.StandardHeader       `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *session.StandardTrailer      `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	StrmAsgnRptGrp       []*StrmAsgnRptGrp     `protobuf:"bytes,3,rep,name=strm_asgn_rpt_grp,json=strmAsgnRptGrp,proto3" json:"strm_asgn_rpt_grp,omitempty"`
	StreamAsgnReqId      string                `protobuf:"bytes,4,opt,name=stream_asgn_req_id,json=streamAsgnReqId,proto3" json:"stream_asgn_req_id,omitempty"`
	StreamAsgnReqType    StreamAsgnReqTypeEnum `protobuf:"varint,5,opt,name=stream_asgn_req_type,json=streamAsgnReqType,proto3,enum=MarketData.StreamAsgnReqTypeEnum" json:"stream_asgn_req_type,omitempty"`
	StreamAsgnRptId      string                `protobuf:"bytes,6,opt,name=stream_asgn_rpt_id,json=streamAsgnRptId,proto3" json:"stream_asgn_rpt_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StreamAssignmentReport) Reset()         { *m = StreamAssignmentReport{} }
func (m *StreamAssignmentReport) String() string { return proto.CompactTextString(m) }
func (*StreamAssignmentReport) ProtoMessage()    {}
func (*StreamAssignmentReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{15}
}

func (m *StreamAssignmentReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamAssignmentReport.Unmarshal(m, b)
}
func (m *StreamAssignmentReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamAssignmentReport.Marshal(b, m, deterministic)
}
func (m *StreamAssignmentReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamAssignmentReport.Merge(m, src)
}
func (m *StreamAssignmentReport) XXX_Size() int {
	return xxx_messageInfo_StreamAssignmentReport.Size(m)
}
func (m *StreamAssignmentReport) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamAssignmentReport.DiscardUnknown(m)
}

var xxx_messageInfo_StreamAssignmentReport proto.InternalMessageInfo

func (m *StreamAssignmentReport) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *StreamAssignmentReport) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *StreamAssignmentReport) GetStrmAsgnRptGrp() []*StrmAsgnRptGrp {
	if m != nil {
		return m.StrmAsgnRptGrp
	}
	return nil
}

func (m *StreamAssignmentReport) GetStreamAsgnReqId() string {
	if m != nil {
		return m.StreamAsgnReqId
	}
	return ""
}

func (m *StreamAssignmentReport) GetStreamAsgnReqType() StreamAsgnReqTypeEnum {
	if m != nil {
		return m.StreamAsgnReqType
	}
	return StreamAsgnReqTypeEnum_STREAM_ASGN_REQ_TYPE_UNSPECIFIED
}

func (m *StreamAssignmentReport) GetStreamAsgnRptId() string {
	if m != nil {
		return m.StreamAsgnRptId
	}
	return ""
}

type StreamAssignmentReportACK struct {
	StandardHeader    *session.StandardHeader       `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer   *session.StandardTrailer      `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	EncodedText       string                `protobuf:"bytes,3,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen    int64                 `protobuf:"fixed64,4,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	StreamAsgnAckType StreamAsgnAckTypeEnum `protobuf:"varint,5,opt,name=stream_asgn_ack_type,json=streamAsgnAckType,proto3,enum=MarketData.StreamAsgnAckTypeEnum" json:"stream_asgn_ack_type,omitempty"`
	// Types that are valid to be assigned to StreamAsgnRejReasonUnion:
	//	*StreamAssignmentReportACK_StreamAsgnRejReason
	//	*StreamAssignmentReportACK_StreamAsgnRejReasonReserved100Plus
	StreamAsgnRejReasonUnion isStreamAssignmentReportACK_StreamAsgnRejReasonUnion `protobuf_oneof:"stream_asgn_rej_reason_union"`
	StreamAsgnRptId          string                                               `protobuf:"bytes,8,opt,name=stream_asgn_rpt_id,json=streamAsgnRptId,proto3" json:"stream_asgn_rpt_id,omitempty"`
	Text                     string                                               `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                             `json:"-"`
	XXX_unrecognized         []byte                                               `json:"-"`
	XXX_sizecache            int32                                                `json:"-"`
}

func (m *StreamAssignmentReportACK) Reset()         { *m = StreamAssignmentReportACK{} }
func (m *StreamAssignmentReportACK) String() string { return proto.CompactTextString(m) }
func (*StreamAssignmentReportACK) ProtoMessage()    {}
func (*StreamAssignmentReportACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6b85761666e9c8c, []int{16}
}

func (m *StreamAssignmentReportACK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamAssignmentReportACK.Unmarshal(m, b)
}
func (m *StreamAssignmentReportACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamAssignmentReportACK.Marshal(b, m, deterministic)
}
func (m *StreamAssignmentReportACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamAssignmentReportACK.Merge(m, src)
}
func (m *StreamAssignmentReportACK) XXX_Size() int {
	return xxx_messageInfo_StreamAssignmentReportACK.Size(m)
}
func (m *StreamAssignmentReportACK) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamAssignmentReportACK.DiscardUnknown(m)
}

var xxx_messageInfo_StreamAssignmentReportACK proto.InternalMessageInfo

func (m *StreamAssignmentReportACK) GetStandardHeader() *session.StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *StreamAssignmentReportACK) GetStandardTrailer() *session.StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *StreamAssignmentReportACK) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *StreamAssignmentReportACK) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *StreamAssignmentReportACK) GetStreamAsgnAckType() StreamAsgnAckTypeEnum {
	if m != nil {
		return m.StreamAsgnAckType
	}
	return StreamAsgnAckTypeEnum_STREAM_ASGN_ACK_TYPE_UNSPECIFIED
}

type isStreamAssignmentReportACK_StreamAsgnRejReasonUnion interface {
	isStreamAssignmentReportACK_StreamAsgnRejReasonUnion()
}

type StreamAssignmentReportACK_StreamAsgnRejReason struct {
	StreamAsgnRejReason StreamAsgnRejReasonEnum `protobuf:"varint,6,opt,name=stream_asgn_rej_reason,json=streamAsgnRejReason,proto3,enum=MarketData.StreamAsgnRejReasonEnum,oneof"`
}

type StreamAssignmentReportACK_StreamAsgnRejReasonReserved100Plus struct {
	StreamAsgnRejReasonReserved100Plus uint32 `protobuf:"fixed32,7,opt,name=stream_asgn_rej_reason_reserved100plus,json=streamAsgnRejReasonReserved100plus,proto3,oneof"`
}

func (*StreamAssignmentReportACK_StreamAsgnRejReason) isStreamAssignmentReportACK_StreamAsgnRejReasonUnion() {
}

func (*StreamAssignmentReportACK_StreamAsgnRejReasonReserved100Plus) isStreamAssignmentReportACK_StreamAsgnRejReasonUnion() {
}

func (m *StreamAssignmentReportACK) GetStreamAsgnRejReasonUnion() isStreamAssignmentReportACK_StreamAsgnRejReasonUnion {
	if m != nil {
		return m.StreamAsgnRejReasonUnion
	}
	return nil
}

func (m *StreamAssignmentReportACK) GetStreamAsgnRejReason() StreamAsgnRejReasonEnum {
	if x, ok := m.GetStreamAsgnRejReasonUnion().(*StreamAssignmentReportACK_StreamAsgnRejReason); ok {
		return x.StreamAsgnRejReason
	}
	return StreamAsgnRejReasonEnum_STREAM_ASGN_REJ_REASON_UNSPECIFIED
}

func (m *StreamAssignmentReportACK) GetStreamAsgnRejReasonReserved100Plus() uint32 {
	if x, ok := m.GetStreamAsgnRejReasonUnion().(*StreamAssignmentReportACK_StreamAsgnRejReasonReserved100Plus); ok {
		return x.StreamAsgnRejReasonReserved100Plus
	}
	return 0
}

func (m *StreamAssignmentReportACK) GetStreamAsgnRptId() string {
	if m != nil {
		return m.StreamAsgnRptId
	}
	return ""
}

func (m *StreamAssignmentReportACK) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamAssignmentReportACK) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamAssignmentReportACK_StreamAsgnRejReason)(nil),
		(*StreamAssignmentReportACK_StreamAsgnRejReasonReserved100Plus)(nil),
	}
}

func init() {
	proto.RegisterEnum("MarketData.MDEntryTypeEnum", MDEntryTypeEnum_name, MDEntryTypeEnum_value)
	proto.RegisterEnum("MarketData.PriceTypeEnum", PriceTypeEnum_name, PriceTypeEnum_value)
	proto.RegisterEnum("MarketData.OrdTypeEnum", OrdTypeEnum_name, OrdTypeEnum_value)
	proto.RegisterEnum("MarketData.LotTypeEnum", LotTypeEnum_name, LotTypeEnum_value)
	proto.RegisterEnum("MarketData.TickDirectionEnum", TickDirectionEnum_name, TickDirectionEnum_value)
	proto.RegisterEnum("MarketData.TradingSessionIDEnum", TradingSessionIDEnum_name, TradingSessionIDEnum_value)
	proto.RegisterEnum("MarketData.TradingSessionSubIDEnum", TradingSessionSubIDEnum_name, TradingSessionSubIDEnum_value)
	proto.RegisterEnum("MarketData.SecurityTradingStatusEnum", SecurityTradingStatusEnum_name, SecurityTradingStatusEnum_value)
	proto.RegisterEnum("MarketData.HaltReasonEnum", HaltReasonEnum_name, HaltReasonEnum_value)
	proto.RegisterEnum("MarketData.QuoteConditionEnum", QuoteConditionEnum_name, QuoteConditionEnum_value)
	proto.RegisterEnum("MarketData.TradeConditionEnum", TradeConditionEnum_name, TradeConditionEnum_value)
	proto.RegisterEnum("MarketData.OpenCloseSettlFlagEnum", OpenCloseSettlFlagEnum_name, OpenCloseSettlFlagEnum_value)
	proto.RegisterEnum("MarketData.TimeInForceEnum", TimeInForceEnum_name, TimeInForceEnum_value)
	proto.RegisterEnum("MarketData.ExecInstEnum", ExecInstEnum_name, ExecInstEnum_value)
	proto.RegisterEnum("MarketData.ScopeEnum", ScopeEnum_name, ScopeEnum_value)
	proto.RegisterEnum("MarketData.TrdTypeEnum", TrdTypeEnum_name, TrdTypeEnum_value)
	proto.RegisterEnum("MarketData.OrderCapacityEnum", OrderCapacityEnum_name, OrderCapacityEnum_value)
	proto.RegisterEnum("MarketData.MDOriginTypeEnum", MDOriginTypeEnum_name, MDOriginTypeEnum_value)
	proto.RegisterEnum("MarketData.SettlTypeEnum", SettlTypeEnum_name, SettlTypeEnum_value)
	proto.RegisterEnum("MarketData.MDQuoteTypeEnum", MDQuoteTypeEnum_name, MDQuoteTypeEnum_value)
	proto.RegisterEnum("MarketData.DealingCapacityEnum", DealingCapacityEnum_name, DealingCapacityEnum_value)
	proto.RegisterEnum("MarketData.MDUpdateActionEnum", MDUpdateActionEnum_name, MDUpdateActionEnum_value)
	proto.RegisterEnum("MarketData.DeleteReasonEnum", DeleteReasonEnum_name, DeleteReasonEnum_value)
	proto.RegisterEnum("MarketData.FinancialStatusEnum", FinancialStatusEnum_name, FinancialStatusEnum_value)
	proto.RegisterEnum("MarketData.CorporateActionEnum", CorporateActionEnum_name, CorporateActionEnum_value)
	proto.RegisterEnum("MarketData.MatchTypeEnum", MatchTypeEnum_name, MatchTypeEnum_value)
	proto.RegisterEnum("MarketData.MDSecSizeTypeEnum", MDSecSizeTypeEnum_name, MDSecSizeTypeEnum_value)
	proto.RegisterEnum("MarketData.StatsTypeEnum", StatsTypeEnum_name, StatsTypeEnum_value)
	proto.RegisterEnum("MarketData.StreamAsgnTypeEnum", StreamAsgnTypeEnum_name, StreamAsgnTypeEnum_value)
	proto.RegisterEnum("MarketData.StreamAsgnRejReasonEnum", StreamAsgnRejReasonEnum_name, StreamAsgnRejReasonEnum_value)
	proto.RegisterEnum("MarketData.SubscriptionRequestTypeEnum", SubscriptionRequestTypeEnum_name, SubscriptionRequestTypeEnum_value)
	proto.RegisterEnum("MarketData.MDUpdateTypeEnum", MDUpdateTypeEnum_name, MDUpdateTypeEnum_value)
	proto.RegisterEnum("MarketData.ApplQueueActionEnum", ApplQueueActionEnum_name, ApplQueueActionEnum_value)
	proto.RegisterEnum("MarketData.MDBookTypeEnum", MDBookTypeEnum_name, MDBookTypeEnum_value)
	proto.RegisterEnum("MarketData.ApplQueueResolutionEnum", ApplQueueResolutionEnum_name, ApplQueueResolutionEnum_value)
	proto.RegisterEnum("MarketData.MDReqRejReasonEnum", MDReqRejReasonEnum_name, MDReqRejReasonEnum_value)
	proto.RegisterEnum("MarketData.StreamAsgnReqTypeEnum", StreamAsgnReqTypeEnum_name, StreamAsgnReqTypeEnum_value)
	proto.RegisterEnum("MarketData.StreamAsgnAckTypeEnum", StreamAsgnAckTypeEnum_name, StreamAsgnAckTypeEnum_value)
	proto.RegisterType((*MDFullGrp)(nil), "MarketData.MDFullGrp")
	proto.RegisterType((*MDIncGrp)(nil), "MarketData.MDIncGrp")
	proto.RegisterType((*MDReqGrp)(nil), "MarketData.MDReqGrp")
	proto.RegisterType((*MDRjctGrp)(nil), "MarketData.MDRjctGrp")
	proto.RegisterType((*SecSizesGrp)(nil), "MarketData.SecSizesGrp")
	proto.RegisterType((*StatsIndGrp)(nil), "MarketData.StatsIndGrp")
	proto.RegisterType((*StrmAsgnReqGrp)(nil), "MarketData.StrmAsgnReqGrp")
	proto.RegisterType((*StrmAsgnRptGrp)(nil), "MarketData.StrmAsgnRptGrp")
	proto.RegisterType((*StrmAsgnReqInstrmtGrp)(nil), "MarketData.StrmAsgnReqInstrmtGrp")
	proto.RegisterType((*StrmAsgnRptInstrmtGrp)(nil), "MarketData.StrmAsgnRptInstrmtGrp")
	proto.RegisterType((*MarketDataRequest)(nil), "MarketData.MarketDataRequest")
	proto.RegisterType((*MarketDataSnapshotFullRefresh)(nil), "MarketData.MarketDataSnapshotFullRefresh")
	proto.RegisterType((*MarketDataIncrementalRefresh)(nil), "MarketData.MarketDataIncrementalRefresh")
	proto.RegisterType((*MarketDataRequestReject)(nil), "MarketData.MarketDataRequestReject")
	proto.RegisterType((*StreamAssignmentRequest)(nil), "MarketData.StreamAssignmentRequest")
	proto.RegisterType((*StreamAssignmentReport)(nil), "MarketData.StreamAssignmentReport")
	proto.RegisterType((*StreamAssignmentReportACK)(nil), "MarketData.StreamAssignmentReportACK")
}

func init() { proto.RegisterFile("marketdata.proto", fileDescriptor_e6b85761666e9c8c) }

var fileDescriptor_e6b85761666e9c8c = []byte{
	// 13167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x5b, 0x6c, 0x1c, 0xdb,
	0x9a, 0x56, 0xda, 0x77, 0x2f, 0xc7, 0x76, 0xb9, 0x12, 0xdb, 0xed, 0x4b, 0x12, 0x5f, 0x72, 0x71,
	0x9c, 0xc4, 0xf1, 0xfd, 0x92, 0x9d, 0xec, 0xbd, 0xab, 0xbb, 0x56, 0xb7, 0x6b, 0xbb, 0xba, 0xaa,
	0x53, 0x55, 0xed, 0xd8, 0x7b, 0x66, 0x28, 0x3a, 0xee, 0x4a, 0xd2, 0x3b, 0x76, 0xb7, 0xd3, 0xdd,
	0xde, 0x27, 0x39, 0x0f, 0x68, 0x40, 0x20, 0x1e, 0x47, 0x8c, 0x36, 0x62, 0x04, 0x3a, 0x08, 0x66,
	0x90, 0xd8, 0x48, 0xfb, 0x01, 0x8d, 0x38, 0xd2, 0x48, 0x08, 0x90, 0x38, 0x12, 0x48, 0x03, 0x0f,
	0x68, 0xde, 0x40, 0x0c, 0x20, 0xe6, 0x05, 0x84, 0xe6, 0x15, 0x10, 0x1a, 0x06, 0xb4, 0x6e, 0x55,
	0x6b, 0xd5, 0xc5, 0xed, 0x5c, 0x36, 0x73, 0x78, 0x39, 0x67, 0xc7, 0xf5, 0x7f, 0xff, 0xba, 0xff,
	0xeb, 0xff, 0xbf, 0x7f, 0xad, 0xd5, 0x40, 0x3a, 0x29, 0x37, 0x5e, 0x7b, 0xad, 0x4a, 0xb9, 0x55,
	0x5e, 0x3a, 0x6d, 0xd4, 0x5b, 0x75, 0x19, 0x14, 0xf0, 0x5f, 0xd4, 0x72, 0xab, 0x3c, 0x09, 0x4e,
	0x3c, 0xf6, 0xf7, 0xc9, 0xfe, 0x17, 0xd5, 0xb7, 0xf4, 0x3f, 0x2f, 0x1f, 0xd5, 0x4f, 0x4e, 0xea,
	0x35, 0xfa, 0xaf, 0xc1, 0xa6, 0xd7, 0x6c, 0x56, 0xd9, 0x3f, 0xe7, 0x7e, 0xb8, 0x0d, 0xfa, 0x0b,
	0x6a, 0xee, 0xec, 0xf8, 0x38, 0xdf, 0x38, 0x95, 0xef, 0x81, 0xbe, 0xa3, 0xb3, 0x46, 0xc3, 0xab,
	0x1d, 0xbd, 0x4b, 0xa7, 0x66, 0x52, 0x0b, 0xfd, 0x99, 0xe1, 0x9f, 0xfd, 0x30, 0x35, 0x7c, 0xe9,
	0xd2, 0xa5, 0xbf, 0xf3, 0xc3, 0x54, 0xff, 0xf7, 0x3f, 0x4c, 0xf5, 0x5a, 0xbe, 0x80, 0xfc, 0x2b,
	0x40, 0xaa, 0x78, 0xe5, 0xe3, 0x6a, 0xed, 0xa5, 0x7b, 0x54, 0x3e, 0x2d, 0x1f, 0x55, 0x5b, 0xef,
	0xd2, 0x1d, 0x33, 0xa9, 0x85, 0xa1, 0xd5, 0x1b, 0x4b, 0x41, 0xad, 0x96, 0x54, 0x22, 0x93, 0xa5,
	0x22, 0xb0, 0x76, 0x76, 0x82, 0xb5, 0xa6, 0xbb, 0xb0, 0xd6, 0x14, 0xd6, 0x3a, 0x5c, 0x11, 0xa5,
	0xe4, 0x05, 0xd0, 0x5b, 0xf1, 0x9a, 0xaf, 0xdd, 0x6a, 0x25, 0xdd, 0xe9, 0x57, 0x64, 0x3a, 0x85,
	0x21, 0x12, 0x86, 0xf4, 0xa0, 0xef, 0x5a, 0x45, 0x5e, 0x05, 0x97, 0xbd, 0xda, 0x51, 0xbd, 0xe2,
	0x55, 0xdc, 0x96, 0xf7, 0xb6, 0x95, 0xee, 0xf2, 0xc5, 0x8f, 0x88, 0x78, 0x07, 0x16, 0x1f, 0xa0,
	0x42, 0x8e, 0xf7, 0xb6, 0x25, 0xef, 0x00, 0x89, 0xc7, 0xb8, 0xc7, 0x5e, 0x2d, 0xdd, 0x3d, 0x93,
	0x5a, 0x90, 0x30, 0xee, 0x39, 0xc1, 0x5d, 0xc1, 0xb8, 0x21, 0x0e, 0xa7, 0x7b, 0x35, 0x39, 0x07,
	0xfa, 0xbd, 0xb7, 0xde, 0x91, 0x5b, 0xad, 0x35, 0x5b, 0xe9, 0x9e, 0x99, 0xce, 0x85, 0xa1, 0xd5,
	0x34, 0xdf, 0x5c, 0xf8, 0xd6, 0x3b, 0xd2, 0x6a, 0xcd, 0x96, 0xdf, 0x4e, 0x99, 0xf4, 0xde, 0x04,
	0xe9, 0x3d, 0x8f, 0x7e, 0x96, 0x97, 0xc1, 0x80, 0xf7, 0xf6, 0xb4, 0xda, 0xf0, 0xdc, 0x4a, 0xb9,
	0xe5, 0xa5, 0x7b, 0x67, 0x52, 0x0b, 0xc3, 0x58, 0xfe, 0x1f, 0x92, 0xd2, 0x07, 0xb0, 0x3c, 0x20,
	0x32, 0x6a, 0xb9, 0xe5, 0xc9, 0x5f, 0xfa, 0x88, 0x56, 0xf5, 0xc4, 0x4b, 0xf7, 0xcd, 0xa4, 0x16,
	0x06, 0x56, 0x87, 0x96, 0xd0, 0x40, 0x3b, 0xd5, 0x13, 0xaf, 0xd9, 0x2a, 0x9f, 0x9c, 0x62, 0x0d,
	0x7f, 0x81, 0x94, 0x38, 0xc2, 0x6b, 0x40, 0x12, 0xf2, 0x36, 0xe8, 0x7d, 0x55, 0x7d, 0xf9, 0xca,
	0x3d, 0x7d, 0x9b, 0xee, 0xe7, 0xd0, 0xaa, 0x77, 0x54, 0x3d, 0x29, 0x1f, 0x6f, 0xae, 0x63, 0xb4,
	0x4e, 0xca, 0x1f, 0x24, 0x9d, 0x8c, 0xe4, 0x8b, 0x6f, 0x51, 0x6d, 0x8f, 0xeb, 0x47, 0xe5, 0x56,
	0xb5, 0x5e, 0x43, 0x43, 0x02, 0xfc, 0x3e, 0x9e, 0xe2, 0x87, 0x04, 0x30, 0x19, 0xad, 0x22, 0x6f,
	0x82, 0x9e, 0xe3, 0xfa, 0x4f, 0x50, 0x51, 0x03, 0x89, 0x45, 0x15, 0xf8, 0xa2, 0xba, 0x8f, 0xeb,
	0x3f, 0x29, 0xbe, 0x95, 0x37, 0xc0, 0xd0, 0x49, 0xc5, 0xf5, 0x6a, 0xad, 0xc6, 0x3b, 0xf7, 0xf9,
	0xd9, 0x3b, 0xaf, 0x91, 0xbe, 0xec, 0x17, 0x36, 0xc3, 0x17, 0x76, 0xf9, 0xa4, 0x02, 0x91, 0x54,
	0x06, 0x09, 0xc9, 0x6b, 0x60, 0xd0, 0x87, 0xe1, 0x0e, 0x1d, 0xf4, 0x3b, 0x54, 0x22, 0xa8, 0x59,
	0x32, 0x0d, 0x28, 0x0a, 0xf7, 0xe8, 0x3e, 0x18, 0xf7, 0x41, 0x2f, 0xea, 0x8d, 0x9f, 0x94, 0x1b,
	0x15, 0xf7, 0xb4, 0x5e, 0xad, 0xb5, 0x9a, 0xe9, 0xa1, 0xc4, 0x4a, 0x77, 0x92, 0x79, 0x3b, 0x84,
	0xd5, 0x5d, 0xa5, 0xea, 0x72, 0x04, 0x5d, 0xc4, 0x60, 0xf9, 0x21, 0x18, 0xf0, 0xf5, 0x56, 0x2b,
	0xe9, 0x61, 0xbf, 0x01, 0x63, 0x7c, 0x03, 0xfa, 0x29, 0x56, 0xab, 0xc8, 0x5f, 0x80, 0x2b, 0x3e,
	0xa0, 0xde, 0xa8, 0xbe, 0xac, 0xd6, 0xca, 0xad, 0x7a, 0x23, 0x2d, 0xf9, 0xc0, 0x49, 0x1e, 0x38,
	0x42, 0x81, 0xa6, 0x2f, 0x29, 0x7f, 0x09, 0xae, 0xfa, 0x0a, 0x4e, 0xeb, 0xcd, 0x2a, 0x1e, 0xa8,
	0x5a, 0x3d, 0x3d, 0xe2, 0x4f, 0xea, 0x39, 0xa2, 0xa1, 0x4b, 0xd0, 0x50, 0xa4, 0xa2, 0x46, 0x5d,
	0xfe, 0x82, 0xab, 0xf3, 0xe9, 0xdb, 0xb4, 0x9c, 0xd8, 0xfe, 0x21, 0x7e, 0xd0, 0x58, 0x1b, 0x8a,
	0x6f, 0xe5, 0x2d, 0x30, 0xec, 0x2b, 0x68, 0x7a, 0xc7, 0xc7, 0x5e, 0x23, 0x7d, 0xc5, 0xaf, 0xff,
	0x2c, 0x5f, 0xff, 0x41, 0x0a, 0xb2, 0xb1, 0x94, 0x9c, 0xe5, 0x86, 0xae, 0x59, 0xfd, 0xa9, 0x97,
	0xbe, 0x9a, 0x58, 0xf6, 0x30, 0x51, 0x33, 0x2c, 0x0c, 0xa5, 0x5d, 0xfd, 0xa9, 0x27, 0xeb, 0x40,
	0x0e, 0x94, 0x9c, 0xd6, 0x5b, 0x6e, 0x03, 0x4d, 0x82, 0xd1, 0x44, 0x4d, 0x1d, 0x64, 0x14, 0x3b,
	0x89, 0xf5, 0x61, 0x9a, 0x4e, 0xeb, 0x2d, 0x0b, 0x4d, 0x8c, 0x0c, 0x57, 0x25, 0xbc, 0xd8, 0xc6,
	0xb0, 0xa2, 0x41, 0x7f, 0xb1, 0x99, 0xb5, 0xe3, 0x77, 0x58, 0xcf, 0x08, 0xa9, 0x91, 0x2c, 0xd4,
	0x08, 0x2f, 0xb6, 0x22, 0xaf, 0xe3, 0xdd, 0xa9, 0x97, 0x1e, 0xc7, 0xb6, 0x71, 0x8a, 0x37, 0x16,
	0x05, 0x95, 0xc8, 0xbf, 0x3b, 0xf5, 0x7c, 0x7b, 0x31, 0x98, 0xe2, 0xec, 0xa2, 0xaf, 0xf1, 0xdd,
	0xa9, 0x27, 0xdf, 0x06, 0x3d, 0x27, 0x15, 0xf7, 0xe4, 0x75, 0x2b, 0x9d, 0xf6, 0x3b, 0xf6, 0x0a,
	0x91, 0x06, 0x64, 0x09, 0x9d, 0x54, 0x0a, 0xaf, 0x5b, 0xb2, 0x8d, 0x97, 0x10, 0x99, 0x47, 0xa4,
	0xe8, 0x09, 0x5c, 0xf4, 0xb4, 0x58, 0x34, 0x99, 0x3e, 0x42, 0xd9, 0x97, 0xba, 0xb8, 0x49, 0x72,
	0xf9, 0xa4, 0x12, 0x88, 0xd0, 0x75, 0x79, 0xda, 0xa8, 0x1e, 0x79, 0xee, 0xb1, 0xf7, 0xad, 0x77,
	0x9c, 0x9e, 0xf4, 0xe7, 0xd6, 0xff, 0xe9, 0x14, 0x61, 0x45, 0x24, 0xa5, 0x23, 0x21, 0xda, 0x0b,
	0x6f, 0xce, 0xea, 0x2d, 0x8f, 0x54, 0x65, 0x2a, 0xae, 0x17, 0x9e, 0xa2, 0xef, 0x42, 0x4d, 0x96,
	0xf8, 0x9a, 0x0c, 0x9c, 0x54, 0x7c, 0x09, 0x64, 0xc4, 0x4e, 0xaa, 0x35, 0xf7, 0x4d, 0xeb, 0x5d,
	0x7a, 0x3a, 0x71, 0x78, 0x6b, 0x97, 0xb8, 0x89, 0xd2, 0x73, 0x52, 0xad, 0x3d, 0x6d, 0xbd, 0x43,
	0x56, 0xbf, 0x76, 0x76, 0xf2, 0xdc, 0x6b, 0xb8, 0xf5, 0x17, 0x6e, 0xbd, 0x51, 0xf1, 0x1a, 0xcd,
	0xf4, 0x35, 0xbf, 0x11, 0x5f, 0xf3, 0x0b, 0x64, 0x88, 0x08, 0x9a, 0x2f, 0x4c, 0x2c, 0x26, 0xbf,
	0x00, 0xa3, 0xf5, 0x53, 0xaf, 0xe6, 0x1e, 0x1d, 0xd7, 0x9b, 0x9e, 0xdb, 0xf4, 0x5a, 0xad, 0x63,
	0xf7, 0xc5, 0x71, 0xf9, 0x65, 0xfa, 0x3a, 0xde, 0x01, 0xe6, 0xf8, 0xe6, 0x98, 0xa7, 0x5e, 0x2d,
	0x8b, 0xe4, 0x6c, 0x24, 0x96, 0x3b, 0x2e, 0xbf, 0xf4, 0x5b, 0x75, 0x3d, 0xc5, 0xed, 0x05, 0x72,
	0x3d, 0x22, 0x28, 0x67, 0x41, 0x5f, 0xbd, 0x51, 0x21, 0x3d, 0x75, 0x03, 0xf7, 0xd4, 0xb8, 0xa0,
	0xba, 0x51, 0x11, 0x7a, 0x69, 0xe1, 0x12, 0x37, 0x57, 0x7a, 0xeb, 0xe4, 0xab, 0x5c, 0x02, 0x43,
	0xb8, 0x75, 0xc1, 0xb6, 0x3c, 0x83, 0x55, 0x5d, 0x0b, 0xa9, 0xf2, 0x1a, 0x91, 0x4d, 0x59, 0xea,
	0xe0, 0x14, 0x0e, 0xd6, 0x79, 0x19, 0x79, 0x11, 0xd7, 0xcd, 0x6b, 0x20, 0x93, 0x36, 0xeb, 0x4f,
	0xc0, 0x5b, 0x97, 0xb8, 0x95, 0xdd, 0x8b, 0x05, 0xb4, 0x8a, 0xfc, 0x10, 0xf4, 0x9e, 0x96, 0x1b,
	0xad, 0xaa, 0xd7, 0x4c, 0xcf, 0xcd, 0x74, 0x2e, 0x0c, 0xac, 0x0e, 0x2f, 0x65, 0x89, 0x17, 0x52,
	0x24, 0x7f, 0xce, 0x90, 0x7e, 0x66, 0x52, 0x68, 0x73, 0x23, 0x73, 0xab, 0xe2, 0x1d, 0xb7, 0xca,
	0xe9, 0xf9, 0xc4, 0x91, 0xbd, 0xd7, 0xc9, 0x2d, 0x5c, 0x80, 0x31, 0x2a, 0x82, 0xc8, 0x07, 0x60,
	0x98, 0x4c, 0xb3, 0xa3, 0x7a, 0xad, 0x82, 0xad, 0x5a, 0xfa, 0x26, 0x1e, 0x9c, 0xeb, 0x7c, 0xb3,
	0xf1, 0x3c, 0xca, 0x32, 0x09, 0xbf, 0xdd, 0x57, 0xc9, 0xc0, 0x5c, 0x26, 0x83, 0xff, 0x46, 0x10,
	0x42, 0x53, 0x9f, 0x68, 0xf6, 0x2d, 0xfa, 0x2d, 0xbf, 0xf9, 0xf7, 0x84, 0x2d, 0x09, 0x8b, 0x31,
	0xa3, 0xbe, 0x00, 0x7a, 0x1b, 0xa7, 0x2d, 0xb7, 0xe9, 0xbd, 0x49, 0xdf, 0xf6, 0x67, 0x99, 0x7d,
	0x89, 0x9b, 0x65, 0x3d, 0x8d, 0xd3, 0x96, 0xed, 0xbd, 0x91, 0x1f, 0x83, 0xee, 0xe6, 0x51, 0xfd,
	0xd4, 0x4b, 0xdf, 0xc1, 0x15, 0x1e, 0xe5, 0x2b, 0x6c, 0xa3, 0x0f, 0x7e, 0x3d, 0xe7, 0x3a, 0xb8,
	0x09, 0x44, 0x40, 0xf2, 0x13, 0x20, 0x37, 0x3d, 0xd4, 0xe8, 0x32, 0xde, 0x3d, 0xe8, 0x08, 0x2d,
	0xf8, 0x55, 0xfc, 0x17, 0xfc, 0x08, 0x49, 0xbe, 0xa8, 0x49, 0x87, 0x6a, 0x19, 0x0c, 0x10, 0x73,
	0xed, 0x56, 0xca, 0xef, 0x9a, 0xe9, 0xbb, 0x7e, 0x55, 0x6f, 0xf0, 0x0b, 0x02, 0x10, 0x19, 0xb5,
	0xfc, 0xae, 0x29, 0x2f, 0x01, 0x40, 0x56, 0x00, 0xde, 0x68, 0x17, 0xfd, 0x8d, 0xf6, 0xcb, 0x4b,
	0x9c, 0xe7, 0xd2, 0x8f, 0x45, 0xf0, 0x36, 0xbb, 0xc7, 0xe4, 0xf1, 0xb4, 0xbe, 0x87, 0xe7, 0xe2,
	0x84, 0xd0, 0x46, 0xf4, 0x55, 0x98, 0xd8, 0x5f, 0x70, 0x75, 0xde, 0xbd, 0x44, 0x95, 0xe1, 0xc9,
	0x9d, 0x07, 0x52, 0xa0, 0xcc, 0x6d, 0x79, 0xb5, 0x7a, 0x23, 0x7d, 0x1f, 0xcf, 0x16, 0x40, 0xac,
	0x33, 0xfa, 0x0b, 0xaf, 0xe3, 0x3a, 0xd5, 0x31, 0xe4, 0xeb, 0xc0, 0x22, 0xf2, 0x3c, 0xe8, 0xc2,
	0xfe, 0xe2, 0x03, 0xbf, 0xa3, 0x1e, 0xf1, 0x1d, 0x85, 0x3f, 0xa2, 0xa5, 0xd4, 0xaa, 0x1e, 0xbd,
	0x76, 0x2b, 0xd5, 0x86, 0x77, 0x84, 0xe7, 0xd4, 0x52, 0x74, 0x29, 0x39, 0xd5, 0xa3, 0xd7, 0x2a,
	0x13, 0x08, 0xfc, 0x3e, 0xde, 0x8e, 0x0f, 0xb6, 0x78, 0x19, 0x64, 0x15, 0xd1, 0xb6, 0xe2, 0x56,
	0x6b, 0xc8, 0xef, 0x38, 0xf2, 0xd2, 0x0f, 0xa3, 0x56, 0x11, 0x6d, 0x22, 0x5a, 0x2d, 0x87, 0x3e,
	0xfb, 0x3a, 0x3f, 0xe3, 0xd7, 0xfb, 0x40, 0x2b, 0x90, 0x40, 0xb3, 0xbf, 0xd5, 0x28, 0x57, 0xf8,
	0xd9, 0xbf, 0x1c, 0x9d, 0xfd, 0x0e, 0x12, 0x89, 0xce, 0xfe, 0x51, 0x61, 0xf6, 0xb7, 0x04, 0x21,
	0x39, 0x03, 0x2e, 0x13, 0xcd, 0xdf, 0xd6, 0x8f, 0xcf, 0x4e, 0xbc, 0xf4, 0x4a, 0xe2, 0xd2, 0xfc,
	0x93, 0x4e, 0x7e, 0x77, 0xc6, 0xa0, 0x7d, 0x8c, 0x91, 0xcb, 0x40, 0x46, 0xff, 0x44, 0xa1, 0x02,
	0x0d, 0x3f, 0xd0, 0x14, 0x5d, 0xc5, 0x8d, 0x9e, 0x09, 0x57, 0xb0, 0x5a, 0x7b, 0x69, 0x13, 0x21,
	0x4d, 0xf5, 0xab, 0x58, 0xe4, 0xd6, 0xd9, 0x6e, 0xca, 0x92, 0x5a, 0xa2, 0x60, 0x45, 0xfe, 0x73,
	0x60, 0x2e, 0x5a, 0x84, 0xdb, 0xf0, 0x9a, 0x5e, 0xe3, 0x5b, 0xaf, 0xb2, 0xb2, 0xbc, 0x7c, 0x7a,
	0x7c, 0xd6, 0x4c, 0xaf, 0xcd, 0xa4, 0x16, 0x7a, 0x79, 0x85, 0xd3, 0x54, 0xe1, 0x8d, 0xb0, 0x42,
	0x4b, 0x44, 0xca, 0xaf, 0xc1, 0x58, 0x58, 0x7f, 0xf3, 0xec, 0x39, 0x6a, 0xc6, 0x3a, 0x6e, 0xc6,
	0x7c, 0x72, 0x33, 0xec, 0xb3, 0xe7, 0x5c, 0x4b, 0xde, 0x74, 0x70, 0x2d, 0xe9, 0xb0, 0xae, 0xb4,
	0x22, 0xb2, 0x15, 0xd9, 0x03, 0xb7, 0xe3, 0x0b, 0x8b, 0x34, 0x68, 0xc3, 0x6f, 0x10, 0xd5, 0x3b,
	0x4d, 0xf5, 0xce, 0xc5, 0xe8, 0x0d, 0xb7, 0xc9, 0x00, 0x03, 0xaf, 0xca, 0xc7, 0x2d, 0xb7, 0xe1,
	0x95, 0x9b, 0xf5, 0x5a, 0x7a, 0x13, 0x37, 0x64, 0x92, 0x6f, 0xc8, 0x6e, 0xf9, 0xb8, 0x65, 0xe1,
	0xaf, 0x7e, 0xfd, 0xf3, 0x81, 0x59, 0xe8, 0xdb, 0xed, 0xb4, 0xc0, 0x2b, 0x5f, 0x44, 0x7e, 0x0a,
	0xa6, 0x38, 0x7d, 0x91, 0xba, 0x6e, 0xf9, 0x75, 0xcd, 0x07, 0x9d, 0x8f, 0x74, 0x4c, 0x04, 0x3a,
	0xc2, 0x55, 0xcc, 0x82, 0xbe, 0xe3, 0x7a, 0x8b, 0x58, 0x8e, 0xed, 0xe8, 0x86, 0xa8, 0xd7, 0x5b,
	0x82, 0xdd, 0x80, 0x41, 0x50, 0xd9, 0x67, 0xf5, 0x1e, 0x93, 0xaf, 0xb2, 0x06, 0xc8, 0x46, 0x41,
	0xd4, 0xec, 0x44, 0x0d, 0x10, 0x76, 0x58, 0x04, 0x45, 0x7f, 0x9f, 0x6b, 0xa5, 0xd5, 0x7f, 0xca,
	0xbe, 0xcb, 0x0a, 0x18, 0x6c, 0x7a, 0x47, 0xd8, 0x4f, 0x6d, 0xba, 0x2f, 0x1b, 0xa7, 0xe9, 0x47,
	0x78, 0x7b, 0x1b, 0x17, 0xcd, 0xd9, 0x11, 0xf2, 0x49, 0x9b, 0xf9, 0xc6, 0x69, 0x86, 0x28, 0x18,
	0x68, 0x06, 0x7f, 0x92, 0x4f, 0xc1, 0x78, 0xd3, 0x3b, 0x3a, 0x6b, 0x54, 0x5b, 0xef, 0x5c, 0x7f,
	0x94, 0x5b, 0xe5, 0xd6, 0x59, 0x33, 0xfd, 0x19, 0xae, 0xda, 0xad, 0x90, 0x32, 0x2c, 0xca, 0xa6,
	0x14, 0x16, 0xf4, 0xab, 0x99, 0xe3, 0x07, 0xa3, 0xcb, 0x1a, 0x6d, 0xc6, 0x49, 0xcb, 0xaf, 0xc0,
	0x9d, 0x84, 0x12, 0x23, 0x63, 0xf4, 0xd8, 0x1f, 0xa3, 0x1c, 0x3f, 0x46, 0x5d, 0xd6, 0xcd, 0x58,
	0xd5, 0xe1, 0xe1, 0x3a, 0x06, 0xd7, 0x9b, 0xa7, 0x0d, 0xaf, 0x8c, 0xdc, 0x4f, 0xf7, 0xb9, 0x57,
	0x3b, 0x7a, 0x75, 0x52, 0x6e, 0xbc, 0x76, 0x8f, 0xce, 0x1a, 0xdf, 0xe2, 0x40, 0xb7, 0x9c, 0x7e,
	0x82, 0xcd, 0xc7, 0x1c, 0x73, 0x07, 0x6c, 0x2c, 0x6d, 0x36, 0x32, 0x4c, 0x36, 0x8b, 0x44, 0x51,
	0xcb, 0x69, 0xd7, 0x4d, 0x36, 0x13, 0x25, 0xe4, 0x4d, 0x00, 0xde, 0x55, 0xbd, 0xe3, 0x0a, 0xd1,
	0xfc, 0x39, 0xd6, 0x3c, 0xc2, 0x34, 0x1f, 0xa2, 0x2f, 0x9c, 0xa2, 0xfe, 0x77, 0xec, 0x0f, 0xf2,
	0x0e, 0x18, 0x40, 0xe1, 0x81, 0xdb, 0xac, 0x9f, 0x21, 0xe3, 0xfb, 0x05, 0x1e, 0x42, 0x99, 0x01,
	0x51, 0x04, 0x60, 0xe3, 0x2f, 0x18, 0x09, 0x2c, 0xd0, 0xf0, 0xff, 0x22, 0x3f, 0x01, 0x64, 0x1f,
	0x71, 0x7d, 0x9e, 0xe4, 0x4b, 0xbc, 0x7f, 0x8c, 0xfd, 0xec, 0x87, 0xa9, 0xb7, 0x01, 0x4f, 0x02,
	0x7e, 0xfe, 0xc3, 0x94, 0x75, 0xe9, 0xd2, 0x25, 0x6b, 0x10, 0x4b, 0x67, 0x19, 0x67, 0xa2, 0x80,
	0xbe, 0x17, 0xd5, 0x46, 0xb3, 0x85, 0x42, 0x2c, 0x25, 0xd6, 0x90, 0x22, 0x45, 0xa9, 0x2e, 0x3f,
	0xc4, 0x42, 0x8a, 0x1c, 0xa4, 0xa8, 0x17, 0xe3, 0x8a, 0x6f, 0xe5, 0x2f, 0x40, 0xef, 0x71, 0x99,
	0x68, 0xc8, 0x24, 0x6a, 0xb8, 0x71, 0x29, 0xaa, 0xa1, 0x07, 0xc1, 0x8a, 0x6f, 0x65, 0x1d, 0xf4,
	0xb5, 0x98, 0x8f, 0x99, 0x8d, 0x2e, 0x29, 0x87, 0xf3, 0x31, 0x91, 0xaa, 0xc7, 0x81, 0x73, 0xcf,
	0x54, 0xed, 0x76, 0x5b, 0xbd, 0x2d, 0xea, 0x6c, 0x3a, 0x60, 0x82, 0x69, 0xe3, 0x27, 0x13, 0x99,
	0x4d, 0x2a, 0x9e, 0x4d, 0x9c, 0x96, 0x29, 0x51, 0xcb, 0x38, 0xd5, 0x62, 0x85, 0x80, 0x19, 0x59,
	0xd8, 0xe5, 0xcf, 0x6a, 0xd5, 0x7a, 0x2d, 0x33, 0x09, 0xd2, 0x31, 0x16, 0x9e, 0x7c, 0xbb, 0x0e,
	0xa6, 0x13, 0x0c, 0x26, 0xf9, 0x7e, 0x05, 0x8c, 0xf0, 0x96, 0x89, 0xfc, 0xf1, 0x06, 0xb8, 0x96,
	0xb4, 0x2c, 0x88, 0x80, 0x04, 0x86, 0xfc, 0xb6, 0xe1, 0xbf, 0xcc, 0xfd, 0xe3, 0x87, 0xa0, 0xaf,
	0xa0, 0x6a, 0xb5, 0x23, 0xb4, 0x90, 0x7f, 0x05, 0x48, 0x47, 0xf5, 0xc6, 0x69, 0x1d, 0xcf, 0xa5,
	0x32, 0x71, 0x0f, 0x52, 0x78, 0xd3, 0x15, 0x08, 0xb0, 0x2c, 0x93, 0x51, 0x44, 0x07, 0xe1, 0x26,
	0x1f, 0x0c, 0x0c, 0x1f, 0x89, 0x52, 0x02, 0x15, 0xd7, 0xf1, 0x21, 0x54, 0x5c, 0xe7, 0xa7, 0xa2,
	0xe2, 0x2c, 0x30, 0x58, 0xf1, 0x8e, 0xbd, 0x96, 0xc7, 0xf6, 0x89, 0xae, 0x68, 0x34, 0xa9, 0x62,
	0x81, 0xd0, 0x4e, 0x71, 0x8d, 0xf7, 0x80, 0x2e, 0x57, 0x38, 0x11, 0x9e, 0xde, 0xeb, 0x7e, 0x3f,
	0x7a, 0xaf, 0xe7, 0x03, 0xe9, 0xbd, 0xde, 0x0f, 0xa0, 0xf7, 0xfa, 0x3e, 0x19, 0xbd, 0xd7, 0xff,
	0xde, 0xf4, 0x1e, 0x78, 0x7f, 0x7a, 0xef, 0x57, 0x80, 0xf4, 0xa2, 0x5a, 0x2b, 0xd7, 0x8e, 0xaa,
	0xe5, 0x63, 0xb6, 0xa3, 0x0c, 0x44, 0xe7, 0x63, 0x8e, 0xc9, 0x84, 0xf6, 0x92, 0x79, 0x61, 0x3e,
	0xbe, 0x10, 0xa5, 0x78, 0xee, 0xf0, 0xf2, 0xfb, 0x71, 0x87, 0x59, 0x30, 0x8c, 0x7a, 0xb3, 0x71,
	0x82, 0x06, 0xe2, 0x25, 0xde, 0x34, 0x07, 0xb1, 0xc5, 0x1d, 0x65, 0x16, 0x57, 0x23, 0x9f, 0x75,
	0xef, 0x25, 0xdb, 0x32, 0x7b, 0xad, 0xc1, 0x2a, 0xff, 0x47, 0x79, 0x1b, 0x00, 0xfc, 0x87, 0xb3,
	0x13, 0xaf, 0xd6, 0xa2, 0xec, 0x9c, 0x2c, 0xe0, 0xf1, 0x17, 0x0a, 0xe6, 0x64, 0xc3, 0xd4, 0xe5,
	0xf0, 0xfb, 0x50, 0x97, 0xd2, 0x47, 0x52, 0x97, 0x23, 0x1f, 0x44, 0x5d, 0xca, 0x1f, 0x47, 0x5d,
	0x5e, 0xf9, 0x84, 0xd4, 0xe5, 0xd5, 0x0f, 0xa5, 0x2e, 0x47, 0x3f, 0x9a, 0xba, 0x1c, 0xfb, 0x50,
	0xea, 0x72, 0xfc, 0xbd, 0xa9, 0xcb, 0x4d, 0x8e, 0xba, 0x6c, 0x78, 0x2f, 0x50, 0xc3, 0x03, 0x86,
	0x2d, 0x1d, 0x37, 0x72, 0x96, 0xf7, 0x42, 0xab, 0xc4, 0x51, 0x9e, 0x13, 0x1f, 0x46, 0x79, 0x4e,
	0x7e, 0x32, 0xca, 0x73, 0xea, 0x53, 0x51, 0x9e, 0xd3, 0x9f, 0x80, 0xf2, 0xbc, 0xf6, 0xe9, 0x28,
	0xcf, 0xeb, 0xef, 0x49, 0x79, 0xde, 0xf8, 0x31, 0x28, 0xcf, 0x99, 0x0f, 0xa2, 0x3c, 0x67, 0x3f,
	0x96, 0xf2, 0x3c, 0x04, 0xd2, 0x49, 0xc5, 0x3d, 0x3b, 0xad, 0x70, 0x8e, 0xc6, 0x1c, 0x56, 0x7a,
	0x5d, 0x54, 0x5a, 0xc2, 0x22, 0x21, 0x3f, 0x63, 0x9c, 0xef, 0xdd, 0xa1, 0x93, 0x0a, 0x2f, 0xc4,
	0xb3, 0xa9, 0xf3, 0xef, 0xc7, 0xa6, 0xee, 0x02, 0xa9, 0xe6, 0xb5, 0xdc, 0xa3, 0x57, 0x2f, 0xdd,
	0xd3, 0x86, 0xf7, 0xad, 0x5b, 0x29, 0xbf, 0x4b, 0xdf, 0x4c, 0x54, 0xf1, 0x8b, 0x14, 0x67, 0x7a,
	0x06, 0x6b, 0x5e, 0x2b, 0xfb, 0xea, 0x65, 0xb1, 0xe1, 0x7d, 0xab, 0x96, 0xe3, 0x79, 0xd9, 0x5b,
	0x1f, 0xc9, 0xcb, 0xde, 0xfe, 0xf1, 0x78, 0xd9, 0x3b, 0x9f, 0x8e, 0x97, 0x5d, 0xf8, 0xd4, 0xbc,
	0xec, 0xdd, 0x8b, 0xf3, 0xb2, 0x8b, 0x1f, 0xc2, 0xcb, 0xde, 0xfb, 0x24, 0xbc, 0xec, 0xfd, 0x1f,
	0x8b, 0x97, 0x7d, 0xf0, 0x9e, 0xbc, 0xec, 0xd2, 0x05, 0x79, 0xd9, 0x87, 0x9f, 0x8e, 0x97, 0x5d,
	0xfe, 0x40, 0x5e, 0x76, 0xe5, 0x7d, 0x79, 0xd9, 0xd5, 0xf7, 0xe4, 0x65, 0xd7, 0x3e, 0x3d, 0x2f,
	0xbb, 0xfe, 0x31, 0xbc, 0xec, 0xc6, 0xfb, 0xf1, 0xb2, 0x9b, 0x3f, 0x0a, 0x2f, 0xbb, 0xf5, 0x23,
	0xf0, 0xb2, 0xdb, 0x3f, 0x0e, 0x2f, 0xbb, 0xf3, 0xc9, 0x78, 0xd9, 0x47, 0xff, 0xef, 0x79, 0xd9,
	0xcf, 0x7e, 0x04, 0x5e, 0xf6, 0xf1, 0x9f, 0x25, 0x2f, 0xfb, 0xe4, 0x63, 0x78, 0xd9, 0x2c, 0x18,
	0x3e, 0xab, 0x55, 0x5c, 0x16, 0x35, 0xa1, 0x88, 0xe9, 0x73, 0x31, 0x62, 0x2a, 0xd5, 0x2a, 0x34,
	0x68, 0xe2, 0x22, 0xa6, 0x33, 0xfe, 0x8f, 0x61, 0x72, 0xf7, 0x8b, 0x1f, 0x99, 0xdc, 0xfd, 0xf2,
	0x23, 0xc9, 0x5d, 0xe5, 0x43, 0xc9, 0xdd, 0x55, 0x70, 0x99, 0x9c, 0x8a, 0x72, 0x2b, 0xde, 0x69,
	0xeb, 0x15, 0x26, 0xc5, 0x88, 0xa1, 0xec, 0xe3, 0x39, 0xdc, 0x01, 0x22, 0xa4, 0x22, 0x19, 0x59,
	0x03, 0xe0, 0xa4, 0xdc, 0x3a, 0x7a, 0xc5, 0x93, 0x60, 0x82, 0xe5, 0x2b, 0xa0, 0xaf, 0x42, 0xe1,
	0x9f, 0x07, 0xd3, 0xa3, 0xcf, 0xea, 0x3f, 0x61, 0xdf, 0xe5, 0x6d, 0xec, 0x9b, 0xa1, 0x59, 0xf0,
	0xbc, 0x5e, 0x7f, 0x4d, 0x14, 0xaa, 0x7e, 0x15, 0xfe, 0x7a, 0x17, 0x57, 0x85, 0xc1, 0x93, 0x8a,
	0x7d, 0xf6, 0x3c, 0x53, 0xaf, 0xbf, 0x8e, 0x61, 0xa5, 0xe1, 0x27, 0x65, 0xa5, 0x73, 0x9f, 0x92,
	0x95, 0xce, 0xff, 0x99, 0xb3, 0xd2, 0xbb, 0x3f, 0x36, 0x2b, 0xad, 0x7d, 0x42, 0x56, 0x1a, 0x0d,
	0x46, 0xab, 0xdc, 0x6a, 0xba, 0xd5, 0x5a, 0x05, 0x0f, 0xc6, 0x57, 0x31, 0x83, 0x81, 0x04, 0xb4,
	0x5a, 0x85, 0x1f, 0x8c, 0xe0, 0x4f, 0xc8, 0xa5, 0x23, 0xb6, 0xbd, 0x5a, 0x49, 0xef, 0xf9, 0xfb,
	0xe0, 0x7f, 0xeb, 0xe4, 0xa6, 0x60, 0x2f, 0x16, 0xd0, 0x2a, 0x32, 0x04, 0x68, 0x67, 0xa8, 0x35,
	0xdd, 0xe7, 0xaf, 0x2b, 0x24, 0x72, 0xd3, 0x13, 0xa9, 0xa3, 0x3f, 0x4a, 0xf9, 0xd4, 0x51, 0x9f,
	0x75, 0x19, 0xc3, 0x32, 0xaf, 0x2b, 0x38, 0x76, 0x53, 0xc1, 0x20, 0xfe, 0x77, 0xf9, 0xa8, 0x45,
	0xb4, 0x14, 0x12, 0xb5, 0x3c, 0xbe, 0x14, 0xd1, 0x52, 0x3e, 0x6a, 0x61, 0x2d, 0x90, 0xe3, 0x96,
	0x8d, 0xf3, 0xb9, 0xe5, 0x61, 0x91, 0x5b, 0xee, 0xe3, 0x49, 0xe5, 0xc2, 0x79, 0xa4, 0xb2, 0xe9,
	0x4f, 0x06, 0x8e, 0x54, 0xee, 0x3b, 0x87, 0x4d, 0x0e, 0xe5, 0x09, 0x8a, 0x1f, 0x9a, 0x27, 0x78,
	0xfa, 0x51, 0x79, 0x02, 0xeb, 0x43, 0xf3, 0x04, 0xf6, 0x47, 0xe7, 0x09, 0x9c, 0x0f, 0xca, 0x13,
	0x6c, 0x83, 0xcb, 0xc8, 0xb2, 0xb5, 0x1a, 0x5e, 0xf9, 0x04, 0x4d, 0xc4, 0x92, 0xdf, 0x80, 0x7f,
	0xdf, 0xed, 0x4f, 0x44, 0x84, 0xfa, 0x35, 0x84, 0x02, 0x27, 0x15, 0x1b, 0x8b, 0x6a, 0x95, 0x5f,
	0x5a, 0xf6, 0xfe, 0x57, 0x41, 0x5f, 0x41, 0xb5, 0xbc, 0x37, 0x68, 0x89, 0x45, 0xb8, 0x8a, 0xd4,
	0x47, 0x72, 0x15, 0x73, 0x10, 0xf4, 0x17, 0x54, 0xeb, 0x9b, 0xa3, 0x16, 0xe1, 0x2b, 0x25, 0x54,
	0x63, 0xd4, 0x81, 0x78, 0x42, 0xa0, 0x0e, 0x0c, 0x4e, 0xd4, 0xae, 0x74, 0xf2, 0xdc, 0x50, 0xf9,
	0xb8, 0x55, 0xa8, 0x90, 0x79, 0xa3, 0x55, 0xe6, 0xfe, 0x76, 0x07, 0x18, 0xe0, 0x6c, 0x35, 0x65,
	0xb7, 0x98, 0x79, 0xc7, 0x4a, 0xe2, 0xdd, 0xbc, 0xbf, 0xd5, 0xe5, 0xbb, 0x79, 0x68, 0x87, 0xaa,
	0x50, 0x25, 0x94, 0x3d, 0x60, 0x0a, 0x48, 0x63, 0x3b, 0xa2, 0xde, 0x72, 0x41, 0xa5, 0x00, 0xa1,
	0xb9, 0x7f, 0x93, 0xdb, 0xc0, 0x76, 0x2f, 0xe1, 0x2d, 0x2c, 0x90, 0x92, 0x0f, 0xc1, 0x4c, 0x58,
	0x75, 0xc4, 0x76, 0x77, 0xfa, 0xcb, 0x95, 0xea, 0x9a, 0xa6, 0xba, 0xa6, 0x05, 0x5d, 0x21, 0x9b,
	0x9d, 0x49, 0x83, 0xb1, 0x88, 0x6a, 0x32, 0x8a, 0x07, 0x60, 0x80, 0x33, 0x9f, 0x68, 0x1b, 0x25,
	0xe6, 0x96, 0x1b, 0xc5, 0x89, 0x88, 0xad, 0x15, 0x1a, 0xf5, 0x5b, 0xfc, 0xae, 0xdc, 0xdf, 0x64,
	0xdf, 0xe7, 0xfe, 0x5e, 0x0a, 0x0c, 0xd9, 0xad, 0xc6, 0x89, 0xd2, 0x7c, 0x59, 0xa3, 0xd3, 0x84,
	0x0b, 0x98, 0x53, 0xc9, 0x01, 0x33, 0x08, 0x02, 0xe6, 0x32, 0x98, 0x40, 0x2e, 0x98, 0x5b, 0x6e,
	0xbe, 0x44, 0x4e, 0xd2, 0x1b, 0xc1, 0x8b, 0xeb, 0xc0, 0x2a, 0x66, 0xc5, 0xda, 0xf9, 0xe5, 0x85,
	0x3c, 0x3a, 0x60, 0x8d, 0x36, 0xe3, 0x3e, 0x8a, 0xd5, 0x3c, 0x6d, 0x7d, 0x82, 0x6a, 0x9e, 0xb6,
	0x2e, 0x5c, 0xcd, 0xd3, 0xd6, 0x39, 0xd5, 0xe4, 0x3f, 0xce, 0xfd, 0x46, 0x27, 0x18, 0x8d, 0x6d,
	0x5d, 0x88, 0xcc, 0x4f, 0x9d, 0x4b, 0xe6, 0x03, 0x81, 0xcc, 0xff, 0x2a, 0x4c, 0x9c, 0x76, 0x24,
	0x9a, 0x36, 0x8e, 0x38, 0xf5, 0x8d, 0x94, 0xc0, 0x9f, 0x86, 0xed, 0x5b, 0xe7, 0x45, 0xed, 0x9b,
	0x6c, 0x09, 0x81, 0x73, 0x57, 0xbb, 0xc0, 0x79, 0x4c, 0x0c, 0x9c, 0x99, 0x4a, 0x31, 0x7e, 0x36,
	0x62, 0xe2, 0xe7, 0xee, 0x48, 0xfc, 0x3c, 0x26, 0xc6, 0xcf, 0x9c, 0xaa, 0x50, 0x18, 0x1d, 0x67,
	0x83, 0xe7, 0xfe, 0x4d, 0x0f, 0x37, 0x22, 0xfc, 0x58, 0x7d, 0xc4, 0x88, 0xec, 0x84, 0xf2, 0x73,
	0x1d, 0x7e, 0x2f, 0x72, 0xf9, 0xb9, 0x60, 0x00, 0xf8, 0x34, 0xdd, 0x97, 0x31, 0x69, 0xba, 0x4e,
	0xec, 0x3a, 0x8f, 0x89, 0x69, 0x3a, 0x1f, 0x1e, 0xce, 0xd6, 0x85, 0x87, 0xb0, 0xeb, 0x03, 0x87,
	0xb0, 0xfb, 0x47, 0x1b, 0xc2, 0x9e, 0x0f, 0x1f, 0x42, 0xb9, 0x01, 0xc6, 0x68, 0xd3, 0xa8, 0x31,
	0xf9, 0x86, 0x05, 0x73, 0xbd, 0xd1, 0xd0, 0x96, 0xb4, 0x8c, 0xac, 0xb5, 0x6f, 0xb8, 0xa8, 0x0e,
	0x15, 0xf7, 0x1f, 0xba, 0x85, 0x14, 0x3e, 0x2e, 0x2e, 0x65, 0x5d, 0x69, 0x46, 0x21, 0xf2, 0x31,
	0xb8, 0x1d, 0x5f, 0x66, 0xc4, 0xae, 0xf7, 0xf9, 0xb9, 0x7d, 0xaa, 0x7e, 0x5a, 0x54, 0x3f, 0x17,
	0xa3, 0x3e, 0xec, 0x98, 0xff, 0x79, 0x20, 0xf1, 0xa5, 0xe1, 0xb1, 0xe8, 0x8f, 0x12, 0xdb, 0x41,
	0xdb, 0x84, 0x01, 0x79, 0xda, 0x13, 0x69, 0x96, 0x35, 0xd4, 0x14, 0x64, 0xe5, 0x45, 0xca, 0x26,
	0x01, 0x7f, 0x66, 0x3c, 0x8a, 0x0e, 0x23, 0x21, 0x95, 0x62, 0xdd, 0x96, 0xeb, 0x60, 0x3a, 0xa1,
	0x3f, 0xc8, 0x92, 0xfa, 0x83, 0x7e, 0x30, 0x12, 0xd4, 0xd4, 0xf2, 0xde, 0x9c, 0x79, 0xcd, 0x96,
	0xbc, 0x0d, 0x86, 0xcb, 0x2f, 0x5f, 0x36, 0xbc, 0x97, 0xe5, 0x96, 0x57, 0xc1, 0x81, 0x21, 0x5e,
	0x53, 0x7d, 0x78, 0xf7, 0x01, 0x64, 0x62, 0xf7, 0x7d, 0xff, 0xc3, 0x54, 0xb7, 0x35, 0x14, 0xc8,
	0xa1, 0xc0, 0x30, 0x12, 0xcd, 0x76, 0xc4, 0x45, 0xb3, 0xdd, 0x62, 0x34, 0x7b, 0x0f, 0xf4, 0x9f,
	0x54, 0xc8, 0x5e, 0xc3, 0xdf, 0x96, 0xe9, 0x09, 0xa8, 0x99, 0x6e, 0xab, 0xf7, 0xa4, 0x82, 0x6c,
	0x70, 0x85, 0x66, 0x4a, 0x68, 0x2e, 0x81, 0xb3, 0x5f, 0xd3, 0x71, 0x99, 0x04, 0x61, 0xd7, 0xec,
	0xe7, 0x2b, 0x70, 0x99, 0xe5, 0x11, 0x70, 0x2f, 0xe7, 0xc0, 0x70, 0xb3, 0x55, 0xae, 0x55, 0xca,
	0x8d, 0x8a, 0xfb, 0xca, 0x2b, 0x57, 0x3c, 0x66, 0xbb, 0xc6, 0x97, 0x28, 0xcf, 0x81, 0x76, 0x61,
	0xfc, 0x7d, 0x17, 0x7f, 0xce, 0x10, 0x2d, 0x43, 0x4d, 0xe1, 0xaf, 0xb2, 0x86, 0xe6, 0x03, 0xd5,
	0xd3, 0x6a, 0x94, 0xab, 0xc7, 0x1e, 0x5b, 0x41, 0xe9, 0x88, 0x22, 0x87, 0x7c, 0xa7, 0x9a, 0xfc,
	0xf2, 0xe9, 0x9f, 0xe5, 0x16, 0x98, 0x68, 0x9e, 0x3d, 0x6f, 0x1e, 0x35, 0xaa, 0xa7, 0x38, 0xa3,
	0xd8, 0x20, 0x43, 0x43, 0x9a, 0x4c, 0xd6, 0xcf, 0x1d, 0x61, 0x8e, 0x71, 0xc2, 0x74, 0x18, 0x85,
	0xd6, 0xf7, 0x06, 0x7e, 0x5f, 0xb7, 0x35, 0xde, 0x8c, 0x97, 0x96, 0x9f, 0xe0, 0x9c, 0x5c, 0xf5,
	0xe4, 0xf4, 0xb8, 0x7a, 0x54, 0x45, 0x63, 0x78, 0xec, 0xb5, 0xc8, 0x55, 0x1d, 0x32, 0xf6, 0xf3,
	0x1d, 0xfe, 0xd8, 0xf7, 0x58, 0xd2, 0x49, 0x45, 0xa3, 0x92, 0xe4, 0xfc, 0x44, 0x72, 0x3a, 0xa3,
	0xff, 0x43, 0xd3, 0x19, 0x3d, 0xb1, 0xe9, 0x0c, 0x9f, 0xd8, 0x06, 0xef, 0x41, 0x6c, 0xf7, 0x30,
	0x62, 0xfb, 0x57, 0xc1, 0x48, 0xf9, 0xf4, 0xf4, 0xd8, 0x7d, 0x73, 0xe6, 0x9d, 0xf9, 0xf9, 0xa8,
	0x81, 0xe8, 0x71, 0x13, 0xe5, 0xf4, 0xf4, 0xf8, 0x29, 0x92, 0x09, 0x25, 0xa4, 0x1e, 0xf2, 0xb9,
	0xb3, 0xe1, 0xb2, 0x28, 0x25, 0x6f, 0x80, 0x21, 0x4e, 0xfb, 0x49, 0x99, 0x9c, 0x37, 0x20, 0x6b,
	0xe0, 0xbe, 0x90, 0x75, 0xf3, 0x91, 0x85, 0xf2, 0x5b, 0xf9, 0x2b, 0x20, 0x33, 0x17, 0x86, 0x2e,
	0x86, 0xe0, 0xa0, 0xc1, 0x78, 0xe8, 0xa0, 0x01, 0x0b, 0x02, 0x28, 0x71, 0xc6, 0x8e, 0x27, 0x14,
	0x2a, 0x42, 0x6c, 0xc0, 0x65, 0xf0, 0x86, 0x3e, 0xfe, 0xd2, 0x02, 0xe0, 0x6a, 0x35, 0x8c, 0x6b,
	0x75, 0x55, 0x54, 0x27, 0x54, 0xa9, 0xef, 0x84, 0xd5, 0xe5, 0x11, 0xb8, 0xdc, 0x6a, 0x54, 0x70,
	0x60, 0x84, 0xb1, 0x92, 0x18, 0x84, 0x3a, 0x8d, 0xca, 0x4b, 0x3b, 0x20, 0x75, 0x7a, 0x2d, 0xd0,
	0xf2, 0xff, 0xc2, 0x7b, 0x85, 0x23, 0xc9, 0x5e, 0x61, 0x9f, 0xef, 0x15, 0x3e, 0xea, 0xfe, 0xfd,
	0x3f, 0x9e, 0x4c, 0xed, 0xcf, 0xfd, 0xa5, 0x41, 0x70, 0x2d, 0xa8, 0x9b, 0x5d, 0x2b, 0x9f, 0x36,
	0x5f, 0xd5, 0x5b, 0xb9, 0xb3, 0xe3, 0x63, 0xcb, 0x7b, 0xd1, 0xf0, 0x9a, 0xaf, 0x3e, 0xe1, 0xd1,
	0xa7, 0xee, 0xe8, 0xd1, 0xa7, 0xb8, 0x73, 0x2c, 0x1d, 0x1f, 0x74, 0x8e, 0xa5, 0x3b, 0x7a, 0x8e,
	0xe5, 0xbd, 0x8c, 0x65, 0x8c, 0x5d, 0xeb, 0xfa, 0x54, 0x76, 0xad, 0xfb, 0xc3, 0xec, 0x9a, 0xe8,
	0xa9, 0xf5, 0x9c, 0xeb, 0xa9, 0xf5, 0x08, 0x9e, 0x5a, 0x5c, 0xc2, 0xb6, 0xf7, 0x22, 0x09, 0xdb,
	0x9e, 0x98, 0x84, 0x2d, 0xb7, 0x44, 0xc9, 0x46, 0xd5, 0xe7, 0x2f, 0xd2, 0x07, 0xfc, 0x22, 0x1d,
	0xf2, 0x17, 0x29, 0xd9, 0xab, 0x5e, 0x81, 0x51, 0x0e, 0xda, 0xf0, 0x9a, 0xf5, 0xe3, 0x33, 0x3c,
	0x7b, 0xfa, 0xa3, 0x2e, 0x8d, 0x6f, 0x3f, 0x2c, 0x5f, 0x2c, 0x58, 0x6a, 0x7c, 0x21, 0x57, 0xca,
	0x51, 0x49, 0x19, 0x82, 0xb1, 0xa3, 0x63, 0xaf, 0xdc, 0xa8, 0xd6, 0x5e, 0xba, 0xcf, 0xcf, 0x9a,
	0xd5, 0x9a, 0xd7, 0x6c, 0x92, 0xcc, 0x18, 0xf0, 0x33, 0x63, 0xff, 0xaa, 0x83, 0xcb, 0x8c, 0x5d,
	0x65, 0xe2, 0x19, 0x2a, 0x8d, 0x93, 0x64, 0x31, 0xa7, 0x97, 0x06, 0xde, 0xfb, 0xf4, 0x52, 0x01,
	0xfb, 0xa9, 0x01, 0x41, 0x7c, 0x39, 0x4a, 0xc6, 0x17, 0x54, 0x46, 0x0c, 0xfb, 0x6d, 0xfc, 0xdf,
	0x7c, 0x1b, 0xc1, 0x49, 0xc5, 0x67, 0x8e, 0x57, 0xb0, 0xba, 0x17, 0x9e, 0x47, 0x99, 0xb6, 0x41,
	0x7f, 0x1a, 0xff, 0x29, 0x4f, 0x2c, 0x80, 0x93, 0x4a, 0xce, 0xf3, 0x08, 0xa3, 0xf6, 0x19, 0x66,
	0x11, 0x5e, 0x9c, 0x1d, 0x1f, 0xe3, 0x26, 0x0c, 0xd1, 0x26, 0x08, 0x15, 0xa0, 0xb7, 0x80, 0x69,
	0x13, 0xfa, 0x4f, 0x2a, 0xec, 0x5a, 0x30, 0x29, 0xaf, 0xe1, 0x9d, 0xd6, 0x1b, 0x2d, 0x76, 0x86,
	0x8a, 0x8c, 0xf5, 0x2f, 0x42, 0x55, 0xb4, 0xb0, 0x8c, 0x56, 0xc1, 0xd4, 0x59, 0xfd, 0xac, 0x85,
	0x3a, 0x3f, 0xc6, 0x6a, 0x59, 0xe4, 0x13, 0x67, 0xb5, 0x1a, 0xfe, 0x5f, 0xe4, 0x25, 0x00, 0x08,
	0xf9, 0x89, 0x07, 0x6b, 0xc4, 0x1f, 0xac, 0x3d, 0x21, 0x8d, 0x89, 0x45, 0xd8, 0x08, 0x85, 0xb3,
	0x25, 0xf2, 0x7b, 0x67, 0x4b, 0xbe, 0x01, 0xd3, 0x68, 0x12, 0x55, 0xe9, 0x41, 0xb1, 0x26, 0xda,
	0xd3, 0x6b, 0x47, 0x38, 0x6d, 0xd7, 0x6a, 0xd4, 0x8f, 0xe9, 0xa1, 0x2a, 0x9f, 0x20, 0x56, 0x02,
	0x59, 0x9b, 0x8a, 0x66, 0x89, 0x24, 0x23, 0x88, 0xcb, 0x89, 0x12, 0x11, 0x1f, 0xef, 0xea, 0x05,
	0x32, 0x16, 0x71, 0x69, 0x86, 0xd1, 0x0b, 0xa5, 0x19, 0x1e, 0x83, 0x91, 0x06, 0xb1, 0xda, 0x6e,
	0xb5, 0x56, 0x41, 0x55, 0xaa, 0x37, 0xf0, 0xe1, 0x2a, 0xe2, 0x91, 0xfc, 0x4e, 0x97, 0xef, 0x91,
	0xf4, 0x59, 0x12, 0x95, 0xd4, 0x98, 0xa0, 0xbc, 0x05, 0x86, 0x5b, 0xf5, 0x96, 0x5b, 0x3b, 0x3b,
	0xa1, 0xe3, 0xdf, 0xc4, 0xe7, 0xab, 0x48, 0xb1, 0xbf, 0xd1, 0xc9, 0x17, 0xdb, 0xaa, 0xb7, 0x8c,
	0xb3, 0x13, 0x32, 0x03, 0x9a, 0x91, 0xd0, 0x2c, 0x7d, 0xd1, 0xd0, 0x8c, 0x6c, 0x42, 0xcf, 0xe6,
	0x7e, 0xd6, 0x03, 0xa6, 0x83, 0xe9, 0xa9, 0xd5, 0x8e, 0x1a, 0x1e, 0x32, 0x63, 0x65, 0x7f, 0x0f,
	0x12, 0x2c, 0x79, 0xea, 0xfd, 0x2d, 0x79, 0xc7, 0xa7, 0xb2, 0xe4, 0x9d, 0x1f, 0x66, 0xc9, 0xe3,
	0xac, 0x68, 0xd7, 0x47, 0x5a, 0xd1, 0xee, 0x4f, 0x6d, 0x45, 0xc3, 0x96, 0xab, 0xe7, 0xd3, 0x5a,
	0xae, 0xde, 0xf6, 0x96, 0x8b, 0xb8, 0x4e, 0xd5, 0xda, 0x11, 0x5e, 0xd9, 0x7d, 0x71, 0xae, 0x13,
	0x39, 0x8f, 0x1d, 0xb8, 0x4e, 0xf4, 0x7c, 0x76, 0xc8, 0x06, 0xf5, 0x7f, 0xb0, 0x0d, 0x02, 0x6d,
	0x6d, 0x50, 0x3b, 0xf3, 0x31, 0xf0, 0xe9, 0xcc, 0x07, 0x59, 0x1f, 0x07, 0x73, 0xff, 0xb4, 0x0b,
	0x8c, 0x47, 0x22, 0x4f, 0xcb, 0xfb, 0xc6, 0x3b, 0x6a, 0x45, 0x0e, 0x4d, 0xa7, 0xe2, 0x0e, 0x4d,
	0x77, 0xb7, 0x3f, 0x34, 0xdd, 0x11, 0x77, 0x68, 0xba, 0x3b, 0x42, 0xc3, 0xbc, 0x97, 0x4f, 0xf5,
	0x35, 0x18, 0xa1, 0xc2, 0x1c, 0xa1, 0xd1, 0x15, 0x77, 0x9a, 0xcd, 0xf2, 0xde, 0x88, 0x5c, 0x06,
	0x52, 0x3a, 0xc1, 0xc7, 0x61, 0x43, 0x58, 0x69, 0xc0, 0x5e, 0xfc, 0x12, 0xc6, 0xa1, 0xec, 0x38,
	0x4b, 0x6f, 0xdc, 0x71, 0x96, 0x6e, 0x7a, 0x9c, 0x85, 0xec, 0xce, 0x8d, 0x6f, 0x8e, 0x5a, 0xdc,
	0x24, 0x0f, 0xed, 0xce, 0x34, 0xb3, 0x10, 0xec, 0xce, 0x2c, 0xd5, 0xc0, 0x79, 0xf9, 0xfd, 0x17,
	0xf7, 0xf2, 0x0f, 0xe7, 0x7e, 0xb7, 0x13, 0x8c, 0x33, 0x66, 0xa5, 0x59, 0x7d, 0x59, 0x43, 0xd6,
	0x95, 0x11, 0x18, 0x31, 0x1d, 0x99, 0x6a, 0xdf, 0x91, 0xe0, 0x42, 0x1d, 0xd9, 0x71, 0x81, 0x8e,
	0x04, 0xd1, 0x8e, 0xdc, 0x03, 0x23, 0x22, 0xb1, 0x8e, 0x7a, 0xaa, 0x13, 0x37, 0x78, 0x32, 0x81,
	0x50, 0x0f, 0x28, 0xea, 0xa1, 0xa6, 0x48, 0xeb, 0x67, 0x81, 0x2c, 0xd2, 0x3a, 0x6f, 0x44, 0xfa,
	0xf0, 0xdf, 0xc6, 0xec, 0x51, 0xc3, 0x3c, 0xa1, 0x85, 0x66, 0xf2, 0x37, 0xe0, 0x6a, 0x58, 0x09,
	0xc7, 0x26, 0xce, 0x26, 0xb1, 0x73, 0x6f, 0x04, 0x12, 0xeb, 0xdf, 0x45, 0xb9, 0x39, 0x6b, 0xa4,
	0x19, 0x16, 0x7f, 0xd4, 0xf3, 0xfb, 0x7f, 0x3c, 0xd9, 0x91, 0xcd, 0xce, 0xfd, 0xf7, 0x4e, 0x30,
	0x16, 0x1d, 0x34, 0xb4, 0xe5, 0xfe, 0xf2, 0x8f, 0xd9, 0x69, 0xab, 0xed, 0x98, 0x9d, 0xb6, 0xe2,
	0xc6, 0x8c, 0xe4, 0x38, 0xfe, 0x7f, 0x1b, 0xb3, 0x48, 0x85, 0x4f, 0xb1, 0xf3, 0xdc, 0xe3, 0x57,
	0xf8, 0x0f, 0xdb, 0x54, 0xf8, 0xb4, 0xa5, 0x55, 0xe8, 0xc0, 0xab, 0x73, 0xbf, 0xd9, 0x03, 0x26,
	0xe2, 0x07, 0x5e, 0xc9, 0xee, 0xfd, 0x32, 0x8e, 0x7d, 0x38, 0x31, 0xd0, 0xf9, 0x71, 0x89, 0x81,
	0xae, 0xf7, 0x4a, 0x0c, 0x84, 0x86, 0xb9, 0x7c, 0xf4, 0xfa, 0x02, 0xc3, 0xac, 0x1c, 0xbd, 0x16,
	0x86, 0xf9, 0x3f, 0x9e, 0x3f, 0xcc, 0x54, 0xfc, 0x1c, 0x9a, 0xbe, 0xe7, 0xe3, 0x69, 0xfa, 0x4b,
	0x1f, 0x4b, 0xd3, 0xf7, 0x9e, 0x4b, 0xd3, 0x5f, 0xba, 0x10, 0x4d, 0x1f, 0x3f, 0x91, 0xfb, 0xde,
	0x6b, 0x22, 0xfb, 0x4c, 0x7c, 0x7f, 0x7b, 0x26, 0x9e, 0x4e, 0x7a, 0xd8, 0x8e, 0x7d, 0x5f, 0xfc,
	0xe7, 0xc3, 0x60, 0x38, 0x94, 0xa4, 0x97, 0xaf, 0x81, 0x89, 0x82, 0xea, 0x42, 0xc3, 0xb1, 0x0e,
	0x5d, 0xe7, 0xb0, 0x08, 0xdd, 0x92, 0x61, 0x17, 0x61, 0x56, 0xcb, 0x69, 0x50, 0x95, 0x2e, 0xc9,
	0x33, 0x60, 0x44, 0xfc, 0x9c, 0xd1, 0x54, 0x29, 0x35, 0xd9, 0xff, 0xdb, 0xdf, 0xcd, 0xa7, 0x96,
	0xbf, 0xff, 0x6e, 0xbe, 0x5b, 0x5e, 0x04, 0x53, 0xa2, 0x44, 0x56, 0x37, 0x6d, 0xcd, 0xc8, 0xbb,
	0x45, 0x4b, 0xcb, 0x42, 0xa9, 0x83, 0xc8, 0x6e, 0x60, 0xd9, 0x85, 0x70, 0x61, 0x9a, 0xa1, 0xc2,
	0x03, 0x77, 0x5f, 0xd1, 0x4b, 0x50, 0xea, 0x24, 0x92, 0x6b, 0x58, 0x72, 0x0e, 0x5c, 0x11, 0x25,
	0xcd, 0x5c, 0x0e, 0x5a, 0x52, 0x17, 0x91, 0x59, 0x89, 0x2f, 0xd9, 0x2c, 0x42, 0x23, 0x28, 0xb9,
	0x9b, 0xc8, 0xae, 0x63, 0xd9, 0x07, 0xe0, 0xba, 0x28, 0x6b, 0x43, 0xc7, 0xd1, 0x61, 0x01, 0x1a,
	0x0e, 0x15, 0xef, 0x21, 0xe2, 0x9b, 0xf1, 0xc5, 0x3b, 0x96, 0xa2, 0x42, 0xa9, 0x97, 0xc8, 0xac,
	0x62, 0x99, 0x2d, 0xb0, 0x10, 0x95, 0x41, 0xc5, 0xdb, 0xd0, 0xb6, 0x35, 0xd3, 0x70, 0x77, 0xb5,
	0xfc, 0x2e, 0x55, 0xde, 0x47, 0x80, 0x5b, 0x18, 0xb8, 0x09, 0xee, 0x9c, 0x0f, 0xd4, 0xcd, 0x67,
	0x14, 0xd7, 0x4f, 0x70, 0xdb, 0x17, 0xc3, 0xed, 0x3f, 0x53, 0x8a, 0x04, 0x07, 0x08, 0x6e, 0x07,
	0xe3, 0x6e, 0x83, 0xf1, 0x50, 0xaf, 0x17, 0x32, 0x8a, 0xae, 0x18, 0x59, 0x28, 0x0d, 0x10, 0x39,
	0xe5, 0xfb, 0xef, 0xe6, 0x7b, 0xe2, 0xfb, 0xd3, 0xd5, 0x0c, 0x07, 0x5a, 0xd0, 0x76, 0xa4, 0xcb,
	0x44, 0x36, 0xfb, 0xfd, 0x77, 0xf3, 0xbd, 0xf2, 0x5d, 0x30, 0x19, 0xd3, 0x41, 0xee, 0xbe, 0xa9,
	0x97, 0x0a, 0x50, 0x1a, 0x24, 0xa2, 0x19, 0x2c, 0xfa, 0x79, 0xb8, 0x9f, 0xb2, 0x66, 0xa1, 0x68,
	0xda, 0x9a, 0x83, 0xe6, 0x9a, 0x0a, 0x2d, 0xfd, 0x30, 0x18, 0xb3, 0xa1, 0x49, 0x09, 0x01, 0x55,
	0x04, 0xfc, 0xf9, 0x77, 0xf3, 0x5d, 0x97, 0x2e, 0x5d, 0x92, 0x97, 0x40, 0x5a, 0xc4, 0xc3, 0x42,
	0xd1, 0x39, 0x74, 0x33, 0xa6, 0xb9, 0x27, 0x0d, 0x13, 0xf9, 0xaf, 0xa8, 0x7c, 0x2f, 0x92, 0x7f,
	0x18, 0x9e, 0x64, 0x05, 0xc5, 0xca, 0x6b, 0x86, 0x6b, 0x29, 0x0e, 0x94, 0x24, 0x02, 0xc8, 0xf3,
	0x80, 0x07, 0xe1, 0xfe, 0x29, 0x68, 0x2a, 0xad, 0xcf, 0x08, 0x11, 0xdf, 0xe5, 0xc5, 0x37, 0xc1,
	0x8c, 0x28, 0x5e, 0xb4, 0x34, 0xd3, 0xa2, 0x13, 0x8a, 0xe2, 0x64, 0x82, 0x2b, 0xf0, 0xb8, 0xf5,
	0xe8, 0x14, 0xe4, 0xe6, 0x09, 0x5a, 0x57, 0x57, 0x08, 0xca, 0xe0, 0x51, 0x1b, 0xe0, 0x46, 0x3c,
	0x0a, 0x4d, 0x12, 0xb2, 0x28, 0xae, 0x12, 0x98, 0xd9, 0x06, 0x86, 0xab, 0xc7, 0xcd, 0xc9, 0x51,
	0x02, 0xdb, 0x6b, 0x53, 0x47, 0x0c, 0x0b, 0x66, 0xe4, 0x18, 0x41, 0xe9, 0x3c, 0x6a, 0x0b, 0xcc,
	0x86, 0x50, 0x5a, 0xa1, 0xa4, 0x2b, 0x0e, 0x54, 0xdd, 0x4c, 0xe9, 0x90, 0x02, 0xc7, 0x09, 0x30,
	0xc7, 0x03, 0xb7, 0xc1, 0x5c, 0x12, 0xd0, 0x86, 0xba, 0x4e, 0x91, 0x69, 0x82, 0x84, 0x3c, 0x72,
	0x39, 0x3c, 0xff, 0xa0, 0x62, 0xe9, 0xb4, 0x28, 0x5b, 0x9a, 0x20, 0x88, 0x22, 0x45, 0xf4, 0x21,
	0xc4, 0x23, 0x70, 0x53, 0x44, 0x28, 0xa5, 0xac, 0x83, 0x3a, 0x32, 0xab, 0x43, 0xc5, 0x0a, 0xa6,
	0xe0, 0x24, 0xc1, 0x3e, 0xa5, 0xd8, 0xc9, 0xf8, 0xde, 0x7c, 0xa6, 0x14, 0x89, 0xd9, 0x72, 0x73,
	0x4a, 0xd6, 0x31, 0x2d, 0x69, 0x8a, 0xc0, 0xec, 0xef, 0xbf, 0x9b, 0xef, 0xfb, 0xf9, 0x77, 0xf3,
	0x9b, 0x08, 0x66, 0x81, 0xc7, 0xa1, 0x99, 0x5f, 0xc2, 0xcd, 0xd3, 0xf6, 0x21, 0x05, 0x2b, 0xea,
	0x57, 0x25, 0xdb, 0xc1, 0x56, 0x28, 0x67, 0x5a, 0xae, 0x6e, 0xa2, 0x6a, 0xa0, 0xb5, 0xa1, 0x99,
	0x86, 0x2d, 0x4d, 0x13, 0x9d, 0x0e, 0xd5, 0xb9, 0x85, 0x74, 0xda, 0xe0, 0xc9, 0xfb, 0xe9, 0xb4,
	0x77, 0x4d, 0xcb, 0xe1, 0x94, 0x5e, 0x23, 0x4a, 0xf7, 0x79, 0xa5, 0x05, 0xb0, 0x25, 0x2a, 0x55,
	0x15, 0x4d, 0x3f, 0xbc, 0x50, 0x1d, 0xaf, 0x13, 0x75, 0x16, 0xaf, 0xce, 0x00, 0xdb, 0x17, 0x56,
	0x17, 0xae, 0xde, 0x0d, 0xa2, 0xaf, 0xc4, 0xeb, 0x5b, 0x09, 0x1b, 0x26, 0x0b, 0x66, 0xcd, 0x7d,
	0x68, 0x1d, 0x92, 0x35, 0x3d, 0x43, 0x20, 0x87, 0xdf, 0x7f, 0x37, 0x0f, 0x7e, 0xfe, 0xdd, 0xbc,
	0x1d, 0x3b, 0xda, 0x02, 0xc4, 0x6f, 0x88, 0x34, 0x4b, 0xb0, 0x5f, 0xf3, 0xd8, 0xcf, 0xc0, 0xad,
	0x76, 0x58, 0x5c, 0x6b, 0x69, 0x8e, 0x80, 0xcb, 0x3c, 0x38, 0x62, 0x4c, 0xb2, 0x8a, 0xbd, 0x4b,
	0xea, 0x39, 0x4f, 0xc4, 0x0f, 0xa8, 0xb8, 0x13, 0x3b, 0x8f, 0x73, 0xda, 0x41, 0x30, 0x17, 0x6f,
	0x12, 0xc4, 0x33, 0x0e, 0xb1, 0xf8, 0x5b, 0xbd, 0x60, 0x50, 0x38, 0xea, 0x2c, 0x4f, 0x82, 0x31,
	0x2c, 0x1e, 0xb7, 0x7f, 0xdf, 0x06, 0xe3, 0xdc, 0xb7, 0x9c, 0x76, 0x00, 0x55, 0x57, 0x29, 0x98,
	0x25, 0xc3, 0x61, 0xbb, 0x38, 0xd9, 0x6f, 0x6f, 0x82, 0x51, 0x4e, 0xae, 0x08, 0xad, 0x2c, 0x34,
	0x1c, 0x25, 0xef, 0xef, 0xdf, 0x2b, 0x6c, 0x5b, 0x14, 0xa5, 0xdc, 0x92, 0xa1, 0x39, 0x6c, 0xe7,
	0x5e, 0x8d, 0x91, 0x51, 0x35, 0x3b, 0x8b, 0x4b, 0xeb, 0x0a, 0x76, 0xe3, 0x1e, 0x79, 0x16, 0xc8,
	0xbc, 0x1e, 0x0b, 0x16, 0xb4, 0x52, 0x81, 0x6d, 0xd8, 0x1b, 0x58, 0x64, 0x06, 0x8c, 0x70, 0x22,
	0x76, 0xd1, 0x82, 0x8a, 0xca, 0xef, 0xd1, 0x3d, 0xa1, 0x82, 0x1c, 0xa8, 0x92, 0x3e, 0xeb, 0x0d,
	0xb6, 0xda, 0x18, 0x99, 0x43, 0x0d, 0xea, 0x2a, 0xdb, 0x8e, 0xb7, 0xb1, 0xcc, 0x3a, 0xb8, 0x19,
	0xe9, 0xa2, 0xac, 0x92, 0xd1, 0x0c, 0xe8, 0xd0, 0x5d, 0x8d, 0xed, 0xc5, 0xe0, 0xb7, 0xbf, 0x9b,
	0xef, 0x58, 0x59, 0xc6, 0xbb, 0xda, 0x16, 0xb8, 0xc3, 0xa1, 0xf6, 0x15, 0x4b, 0x53, 0x32, 0x3a,
	0x8c, 0x05, 0x02, 0x0a, 0x5c, 0xc1, 0xc0, 0x1b, 0x40, 0xe2, 0x80, 0xa4, 0x3e, 0x03, 0xc1, 0x76,
	0xdd, 0x2b, 0xef, 0x80, 0x39, 0xa1, 0x73, 0x4c, 0xb5, 0x94, 0x75, 0x5c, 0x47, 0xcb, 0xee, 0xd9,
	0xae, 0x66, 0xb8, 0x50, 0xcb, 0xef, 0x3a, 0xb6, 0x74, 0x79, 0x72, 0x04, 0x2b, 0xdd, 0xa0, 0x76,
	0xea, 0x0a, 0x99, 0xf5, 0xf3, 0xe7, 0x41, 0x73, 0x66, 0xc9, 0x72, 0x76, 0x6d, 0x69, 0x90, 0x62,
	0xd7, 0x79, 0xec, 0x36, 0x98, 0x3d, 0x0f, 0xbb, 0xab, 0xe8, 0x39, 0x5b, 0x1a, 0xa2, 0xc8, 0x35,
	0x1e, 0xa9, 0x82, 0x07, 0xe7, 0x21, 0x4d, 0x03, 0xba, 0xce, 0x33, 0x68, 0x38, 0x87, 0xac, 0xee,
	0xc3, 0x54, 0xcb, 0x0e, 0xaf, 0xe5, 0x09, 0xb8, 0x7d, 0x9e, 0x16, 0x5b, 0x3b, 0x70, 0x20, 0x34,
	0x50, 0xf5, 0x25, 0x0a, 0xdf, 0xe4, 0xe1, 0x5f, 0x80, 0x85, 0x76, 0xf0, 0x43, 0xb4, 0x74, 0x91,
	0x82, 0x11, 0xaa, 0x60, 0x9b, 0x57, 0xa0, 0x80, 0xc5, 0xf3, 0x14, 0x38, 0xbb, 0x9a, 0xe5, 0x1c,
	0xba, 0x36, 0xcc, 0x9a, 0x86, 0x6a, 0x4b, 0x32, 0x55, 0xb1, 0xc5, 0xa9, 0x58, 0xfc, 0xad, 0x3e,
	0x30, 0xc0, 0xdd, 0x6d, 0x94, 0xd3, 0xe0, 0xaa, 0x69, 0xa9, 0x71, 0xcb, 0xf2, 0x1a, 0x18, 0xf2,
	0xbf, 0xe8, 0x5a, 0x41, 0xf3, 0x57, 0x23, 0x5a, 0x43, 0x29, 0x79, 0x11, 0x8c, 0x8b, 0x9f, 0x5d,
	0xbc, 0x4f, 0x99, 0x36, 0x5a, 0x8f, 0x83, 0xcc, 0xb5, 0x4a, 0xfd, 0x1e, 0x9a, 0xbe, 0xf7, 0x40,
	0x3a, 0x2c, 0x6b, 0xb9, 0x19, 0xe8, 0x38, 0xd0, 0x92, 0x3a, 0x89, 0xf0, 0x16, 0x15, 0xee, 0x45,
	0x6e, 0x70, 0x48, 0xf8, 0x99, 0xe6, 0xec, 0x22, 0x04, 0xfa, 0x7f, 0xb3, 0xe4, 0xaf, 0xd3, 0x6d,
	0x5c, 0x8f, 0xeb, 0x60, 0xd8, 0x17, 0x2f, 0x28, 0xd6, 0x1e, 0x74, 0xd8, 0x22, 0x5d, 0xc1, 0xdf,
	0xf9, 0xb2, 0xc9, 0xf7, 0xa0, 0xa2, 0x3d, 0xa4, 0xec, 0x0d, 0xbf, 0xa2, 0x33, 0x60, 0xc4, 0x17,
	0x36, 0x0d, 0x37, 0xa3, 0xd8, 0x9a, 0xcd, 0x56, 0xeb, 0x0e, 0x56, 0x77, 0x53, 0x94, 0x20, 0x7a,
	0xfa, 0x88, 0x1e, 0xc5, 0xd7, 0x33, 0x0d, 0x06, 0x7d, 0x29, 0xdb, 0x31, 0x8b, 0xcc, 0x49, 0x5e,
	0xc3, 0x3a, 0xe6, 0xc0, 0x15, 0xe1, 0x2b, 0xed, 0x5e, 0x10, 0x98, 0x9f, 0x94, 0x7c, 0x87, 0xab,
	0x76, 0xb8, 0xfd, 0x03, 0x81, 0x89, 0x11, 0xdb, 0x5f, 0x84, 0xf9, 0x3c, 0x54, 0x99, 0x17, 0x8c,
	0x5c, 0x8b, 0x0e, 0x79, 0x01, 0x8c, 0xfa, 0xdf, 0x73, 0xa6, 0x05, 0x0f, 0x58, 0x2f, 0x0d, 0x92,
	0x4a, 0x23, 0x5f, 0xb9, 0x13, 0x57, 0xfa, 0x3e, 0xb8, 0x16, 0x68, 0xb2, 0xe0, 0xbe, 0x66, 0x96,
	0x6c, 0xfd, 0x10, 0xc5, 0x3f, 0x5a, 0x16, 0xf9, 0x3b, 0xd2, 0x10, 0xd1, 0x8b, 0x9c, 0x9c, 0x4e,
	0xe4, 0x5d, 0xc7, 0x49, 0x3f, 0x2d, 0x99, 0x48, 0x74, 0x98, 0x88, 0xaa, 0x58, 0xf4, 0x0e, 0x37,
	0xc7, 0x48, 0x15, 0x48, 0x83, 0x25, 0x52, 0x03, 0xe4, 0x6e, 0x75, 0xe1, 0x1a, 0xac, 0x81, 0x99,
	0x90, 0x60, 0x54, 0xf3, 0x08, 0x01, 0xed, 0xfa, 0x20, 0xbe, 0x37, 0x09, 0x08, 0x79, 0x3e, 0x92,
	0x4c, 0x6a, 0x80, 0xbc, 0xe8, 0x2e, 0xa1, 0x93, 0x72, 0x25, 0x43, 0xb1, 0x34, 0xe9, 0x0a, 0xf9,
	0xae, 0xe1, 0x0d, 0x81, 0x6f, 0x0c, 0x9d, 0x24, 0x5a, 0xce, 0x75, 0xcc, 0x52, 0x76, 0x17, 0xaa,
	0xd2, 0x55, 0x22, 0xfa, 0x15, 0x36, 0xc5, 0x9b, 0xe0, 0x4e, 0x58, 0x14, 0x8f, 0x8f, 0x0e, 0x73,
	0x8e, 0x8b, 0xb6, 0x60, 0x57, 0xb1, 0x69, 0xfb, 0x46, 0x09, 0x6e, 0x0f, 0xe3, 0x56, 0xc0, 0x9c,
	0x8f, 0x33, 0xe0, 0x81, 0x83, 0xea, 0xa1, 0x62, 0x7f, 0x43, 0xc1, 0x2e, 0x5e, 0xd1, 0xd4, 0x0c,
	0x47, 0x1a, 0x23, 0x90, 0x02, 0x86, 0x6c, 0x80, 0xdb, 0x91, 0x2e, 0x8e, 0x87, 0x8d, 0x13, 0x98,
	0x4e, 0x6b, 0x18, 0xf4, 0x22, 0xde, 0xd8, 0xa0, 0xe5, 0x9a, 0x96, 0x0a, 0x91, 0xff, 0xaf, 0x43,
	0xec, 0x50, 0x32, 0x7f, 0x95, 0x79, 0x90, 0x63, 0xc8, 0x34, 0xfc, 0x22, 0x05, 0x06, 0xb8, 0x0b,
	0x5a, 0xc8, 0x34, 0xe8, 0xa6, 0x13, 0x67, 0x1a, 0x66, 0x81, 0xec, 0x7f, 0xc9, 0xe8, 0x66, 0x76,
	0xcf, 0xd5, 0x4d, 0x61, 0xb3, 0xc6, 0x5b, 0x88, 0x2f, 0x62, 0xaa, 0x2a, 0x16, 0xe0, 0xf6, 0xe9,
	0x5e, 0x41, 0x87, 0x65, 0xa2, 0x46, 0x21, 0x11, 0x6e, 0x9b, 0xee, 0x95, 0xd7, 0xc0, 0xb5, 0xa8,
	0x08, 0x5a, 0x94, 0x50, 0x75, 0x4b, 0x45, 0xd3, 0x90, 0xba, 0x48, 0x2b, 0xd6, 0xa9, 0xef, 0x51,
	0x44, 0xad, 0xf8, 0xa3, 0x14, 0x18, 0x89, 0x5c, 0x13, 0x95, 0xaf, 0x83, 0x49, 0x64, 0x26, 0x5d,
	0x55, 0xb3, 0x48, 0x0f, 0x84, 0x5a, 0xb4, 0x00, 0x26, 0x42, 0xdf, 0x0b, 0x9a, 0x51, 0xb2, 0xb1,
	0x6d, 0xe5, 0xed, 0x5e, 0x37, 0x5a, 0x98, 0x21, 0xc9, 0xa2, 0xce, 0x04, 0x3b, 0x78, 0xd2, 0xe1,
	0x01, 0xb8, 0x1e, 0x12, 0xfc, 0x1a, 0x5a, 0x26, 0xaf, 0x57, 0x60, 0x13, 0xee, 0x83, 0x6b, 0x71,
	0xe2, 0x81, 0x72, 0x9e, 0x57, 0x58, 0xfc, 0xaf, 0x1d, 0xe0, 0x6a, 0xdc, 0x0d, 0x4e, 0x79, 0x0e,
	0x5c, 0x0f, 0x87, 0xdc, 0x9a, 0x1a, 0x6a, 0xec, 0x2a, 0x98, 0x8e, 0x91, 0x51, 0x72, 0x0e, 0xb4,
	0x0c, 0xd3, 0x34, 0xa4, 0x54, 0xd0, 0xad, 0xc8, 0xbf, 0x7d, 0x44, 0xa3, 0xae, 0x24, 0x8c, 0xbb,
	0x6b, 0x96, 0x2c, 0x5b, 0xea, 0x20, 0xa8, 0x4d, 0x1e, 0x75, 0x1f, 0x8c, 0xc5, 0xa0, 0x54, 0xe5,
	0x50, 0xea, 0x24, 0xd2, 0x2b, 0xbc, 0xf4, 0x32, 0x98, 0x8c, 0x91, 0x86, 0xfb, 0x98, 0x31, 0x61,
	0x83, 0xbd, 0xc1, 0x23, 0x56, 0xc0, 0x54, 0x0c, 0x02, 0xf9, 0x01, 0xb8, 0x90, 0x6e, 0x02, 0x59,
	0x6d, 0x5f, 0x48, 0xc1, 0xb4, 0x70, 0x21, 0x3d, 0x04, 0xb1, 0xc6, 0x21, 0x16, 0xff, 0x67, 0x27,
	0x18, 0x4f, 0xb8, 0x66, 0x2a, 0xdf, 0x06, 0x73, 0x61, 0x6d, 0x76, 0x29, 0x13, 0xed, 0xf2, 0x3c,
	0x58, 0x49, 0x90, 0x63, 0x54, 0x94, 0x69, 0xf9, 0xff, 0x49, 0xa3, 0xbe, 0xd8, 0x71, 0xd8, 0x02,
	0xb3, 0x49, 0x8a, 0x4c, 0xc3, 0xd1, 0x8c, 0x92, 0x59, 0xf2, 0x87, 0x82, 0x6f, 0x85, 0xfc, 0x04,
	0xdc, 0x49, 0x00, 0x6a, 0x06, 0xfa, 0xa0, 0x1c, 0xfa, 0xe5, 0x76, 0xc6, 0x8c, 0x64, 0x72, 0x03,
	0x18, 0xa3, 0x65, 0x5a, 0xfe, 0x7f, 0x32, 0x45, 0x5d, 0x31, 0xfd, 0xbf, 0x03, 0xe6, 0x13, 0x14,
	0x15, 0x4d, 0xdb, 0x61, 0x7c, 0x11, 0x1b, 0x3a, 0x61, 0xb4, 0xb7, 0x13, 0x3b, 0xbb, 0x68, 0xf9,
	0x4c, 0x13, 0x1b, 0x42, 0x61, 0x66, 0x6d, 0x82, 0x99, 0x04, 0xe4, 0xd3, 0x92, 0x06, 0x6d, 0x14,
	0x48, 0x48, 0xbd, 0x04, 0xb7, 0xc5, 0x0f, 0xfd, 0x6f, 0x5e, 0x06, 0x13, 0x89, 0x17, 0x23, 0xe5,
	0x3b, 0x60, 0xde, 0x86, 0xd9, 0x92, 0xa5, 0x39, 0x87, 0x01, 0xcf, 0xe5, 0x28, 0x4e, 0xc9, 0x0e,
	0x8d, 0xfe, 0x26, 0xb8, 0x9d, 0x24, 0xa8, 0x39, 0x28, 0x6e, 0x60, 0x3d, 0x27, 0xa5, 0xa8, 0x1f,
	0x4e, 0x18, 0xc1, 0xcf, 0xc0, 0xfd, 0x24, 0x1c, 0xdb, 0xa5, 0x18, 0x4d, 0xe6, 0x66, 0x4a, 0x87,
	0xcc, 0xfe, 0x10, 0x0a, 0xef, 0x31, 0x78, 0x70, 0x61, 0xb0, 0x0d, 0x75, 0x9d, 0x99, 0x23, 0x42,
	0xe4, 0xa9, 0x60, 0xa3, 0x0d, 0x9a, 0x79, 0x3f, 0xa1, 0x3a, 0x74, 0xf1, 0xb4, 0x5e, 0x0e, 0x6c,
	0xbe, 0xbf, 0x16, 0x5c, 0x99, 0x6e, 0x2e, 0x92, 0x41, 0x6d, 0x49, 0xec, 0x08, 0x03, 0x52, 0xda,
	0x87, 0x39, 0x2a, 0x68, 0xe2, 0xf5, 0x50, 0x34, 0xa1, 0x74, 0x15, 0xb0, 0x92, 0x88, 0x36, 0x1d,
	0x57, 0xd9, 0x57, 0x34, 0x1d, 0x47, 0x46, 0x28, 0x6c, 0x66, 0xd3, 0xa8, 0x97, 0xaa, 0xd8, 0xbe,
	0x88, 0x0a, 0x1c, 0x4a, 0xa9, 0xa8, 0x31, 0xce, 0xae, 0xc6, 0xda, 0x26, 0xf5, 0x51, 0x15, 0x3b,
	0x74, 0x30, 0xef, 0x25, 0xab, 0x88, 0x0c, 0x89, 0x1f, 0xca, 0xad, 0xd2, 0xe1, 0x58, 0x6f, 0x0f,
	0x8e, 0xf6, 0xa5, 0x1f, 0xd7, 0x91, 0x3d, 0x66, 0x09, 0xdc, 0x38, 0x47, 0x0b, 0x9a, 0x83, 0xcc,
	0xb7, 0x24, 0xf3, 0x6f, 0x1d, 0xdc, 0x4a, 0x92, 0x67, 0x4b, 0x5d, 0x85, 0xba, 0x72, 0xc8, 0x3c,
	0xce, 0x15, 0x46, 0x3a, 0x27, 0xa1, 0x22, 0x03, 0x35, 0xc8, 0x53, 0xef, 0xe7, 0x2c, 0x13, 0x14,
	0x5a, 0x1f, 0xba, 0x8e, 0x49, 0x49, 0xee, 0x21, 0xda, 0xac, 0x2d, 0xb6, 0xd3, 0x26, 0xe3, 0xec,
	0x52, 0x01, 0x32, 0x77, 0x94, 0xf4, 0xc2, 0x97, 0x60, 0x39, 0x49, 0x9c, 0x84, 0xc4, 0xaa, 0x66,
	0xdb, 0xb0, 0xa0, 0x19, 0xc4, 0xc3, 0x72, 0xb4, 0x02, 0x94, 0x24, 0x5a, 0x20, 0xa1, 0xde, 0xd7,
	0xc0, 0xcd, 0xf3, 0x34, 0xa0, 0x7f, 0xee, 0x2a, 0xba, 0x23, 0x8d, 0xf0, 0x8e, 0xc3, 0x17, 0xe7,
	0x17, 0x8b, 0xfe, 0x69, 0x29, 0x46, 0x5e, 0xe8, 0x1e, 0x99, 0x27, 0xfc, 0x1f, 0x81, 0xc5, 0x64,
	0x73, 0xb3, 0x67, 0x98, 0xcf, 0x0c, 0x64, 0x83, 0x35, 0x63, 0x5f, 0xd1, 0x31, 0x51, 0x8b, 0x6b,
	0xbc, 0xba, 0x4c, 0x6b, 0x9c, 0x68, 0xaa, 0x72, 0x8a, 0xed, 0xb0, 0x19, 0x7b, 0x95, 0x82, 0xd6,
	0xb0, 0x23, 0xb9, 0x9d, 0x3c, 0x90, 0x6c, 0xf8, 0x2d, 0xd3, 0x21, 0x35, 0x1d, 0xa5, 0xc8, 0x55,
	0x8c, 0x5c, 0x06, 0x33, 0xc9, 0x53, 0x80, 0x58, 0x3b, 0x69, 0x8c, 0x22, 0x56, 0x28, 0xc3, 0x71,
	0x2d, 0x09, 0x91, 0xb5, 0x4c, 0xdb, 0x96, 0xc6, 0x49, 0x34, 0xbb, 0xca, 0x76, 0x84, 0x45, 0x4a,
	0x08, 0x9c, 0x57, 0x0e, 0x41, 0xa6, 0x29, 0x72, 0x9d, 0x47, 0xee, 0x80, 0xb9, 0x44, 0x24, 0xda,
	0x87, 0x48, 0x60, 0x37, 0x41, 0xa1, 0x9b, 0x3c, 0xbb, 0xf5, 0x5f, 0x3a, 0xc0, 0x90, 0xf8, 0xd0,
	0x82, 0x3c, 0x05, 0xc6, 0xd1, 0x80, 0xa3, 0x69, 0x6a, 0x47, 0x7c, 0xcb, 0x6d, 0x30, 0xc7, 0x7f,
	0x54, 0x54, 0x15, 0xf3, 0x88, 0x8a, 0xee, 0x6a, 0x46, 0xce, 0xb4, 0x0a, 0x0a, 0xbf, 0xd9, 0xaf,
	0xd1, 0x92, 0xf6, 0xe9, 0xb6, 0xc5, 0x23, 0xe1, 0xd3, 0x92, 0x56, 0xc4, 0xac, 0x64, 0x76, 0x17,
	0xcd, 0x14, 0x14, 0x6d, 0xb0, 0xbd, 0x7e, 0x83, 0xc7, 0xad, 0x83, 0xeb, 0x3c, 0xce, 0x80, 0xcf,
	0x6c, 0x71, 0x52, 0xb3, 0x2d, 0x7e, 0x99, 0x47, 0x2d, 0x81, 0x74, 0x04, 0x55, 0x84, 0x86, 0xca,
	0x39, 0x5f, 0xeb, 0xbc, 0xfc, 0x0a, 0x98, 0xe2, 0xe5, 0x49, 0x88, 0x11, 0x98, 0x1e, 0xce, 0xf9,
	0x4a, 0x2a, 0x82, 0x42, 0x8c, 0x9c, 0x5e, 0x3a, 0xe0, 0xf7, 0x6d, 0x26, 0xbf, 0xf8, 0x9f, 0xd3,
	0x40, 0x8e, 0xbe, 0x23, 0x24, 0xdf, 0x00, 0x53, 0x38, 0x1a, 0x44, 0x3e, 0x0f, 0xe9, 0xcc, 0x50,
	0x97, 0xdf, 0x02, 0x63, 0x61, 0x01, 0x3c, 0xa0, 0x7e, 0x5e, 0x30, 0x83, 0x57, 0xc5, 0x32, 0x98,
	0x8d, 0x88, 0x99, 0x86, 0x6d, 0xea, 0x9a, 0x4a, 0x32, 0x03, 0xd0, 0xf6, 0xa3, 0x16, 0x95, 0xe5,
	0xa9, 0x22, 0x08, 0x34, 0xc9, 0xa0, 0xca, 0xb6, 0xcf, 0x1c, 0xe3, 0x2a, 0xc3, 0x72, 0x2a, 0x2c,
	0x3a, 0xbb, 0x6c, 0x7b, 0xcc, 0x33, 0x9f, 0x3f, 0x2c, 0x05, 0x0f, 0xc8, 0xd8, 0x92, 0xb2, 0xbb,
	0x83, 0x7c, 0x56, 0xb7, 0x7c, 0x0f, 0x4c, 0x87, 0xa5, 0xf1, 0xda, 0x0d, 0x1c, 0x9f, 0x7e, 0x16,
	0x19, 0x77, 0xc7, 0xf5, 0x00, 0x0a, 0xd4, 0xa0, 0xca, 0xe8, 0x0c, 0xc8, 0xa2, 0x99, 0xb0, 0x98,
	0x81, 0xf4, 0x6a, 0x56, 0x81, 0x31, 0x90, 0x24, 0x42, 0x9e, 0x07, 0x57, 0xc3, 0x82, 0x78, 0x15,
	0xf7, 0x07, 0xd9, 0xb9, 0x6e, 0xf9, 0x21, 0xb8, 0x11, 0x5b, 0x43, 0xba, 0x3f, 0x41, 0x67, 0x97,
	0x6d, 0x48, 0x2f, 0x66, 0x70, 0x84, 0x77, 0x3f, 0x5a, 0xcb, 0x82, 0x62, 0x94, 0x14, 0x5d, 0x1a,
	0x10, 0x73, 0x38, 0x3d, 0x34, 0xc5, 0x11, 0x96, 0x0e, 0x2d, 0x26, 0xe9, 0x72, 0x40, 0xcd, 0xfb,
	0x79, 0x18, 0x15, 0x2c, 0xb5, 0x81, 0xb9, 0x6a, 0x09, 0xa2, 0xcd, 0xc5, 0x82, 0x38, 0xb1, 0x23,
	0x0d, 0x06, 0xf9, 0x07, 0x5f, 0xcb, 0x0e, 0x98, 0x8f, 0x68, 0x29, 0x39, 0x26, 0x5a, 0xbd, 0x59,
	0x17, 0x1e, 0xc0, 0x6c, 0x09, 0x2f, 0x2c, 0x9a, 0x1d, 0xac, 0xf0, 0xd0, 0x27, 0xe0, 0xce, 0x05,
	0xa0, 0xb8, 0x7b, 0x68, 0xb2, 0xd0, 0xe3, 0xe1, 0x8f, 0xc0, 0xcd, 0x30, 0x3c, 0x83, 0xfc, 0xee,
	0x5c, 0x0e, 0x85, 0xf4, 0x68, 0xd6, 0x2b, 0xba, 0x66, 0x3b, 0x2c, 0x6f, 0xd8, 0x08, 0x25, 0xcb,
	0xe2, 0xb0, 0x1c, 0x8a, 0xa6, 0x0f, 0x4f, 0x43, 0xd9, 0xc6, 0xb8, 0xe5, 0x83, 0x26, 0x99, 0x1c,
	0x93, 0xc8, 0x5b, 0x8d, 0x4e, 0x4c, 0x3c, 0xd9, 0x5d, 0x52, 0x5a, 0x6c, 0xce, 0x30, 0xa6, 0x62,
	0x3e, 0x46, 0x48, 0x19, 0x0a, 0xf9, 0xc9, 0x2f, 0xc0, 0xdd, 0x08, 0x8a, 0x0c, 0x5d, 0x8c, 0x8d,
	0xa3, 0xc9, 0xc3, 0xe3, 0x36, 0xa3, 0xc8, 0x2b, 0x60, 0xe6, 0x8e, 0x66, 0x10, 0x4f, 0xda, 0xd5,
	0x58, 0x9c, 0x36, 0xe3, 0x41, 0x7e, 0xed, 0x3c, 0x14, 0x34, 0xd0, 0xe0, 0xa1, 0x00, 0xd5, 0xb5,
	0x95, 0x02, 0xa3, 0x62, 0x9a, 0x6d, 0x86, 0x3c, 0xd6, 0xf8, 0x4f, 0x04, 0xd9, 0x1d, 0x1f, 0xbb,
	0x16, 0x35, 0x2a, 0x39, 0xd3, 0xca, 0x68, 0xaa, 0x0a, 0x0d, 0x5c, 0x20, 0xcd, 0x1e, 0xb6, 0x42,
	0xb9, 0xca, 0x08, 0xc8, 0x32, 0xbf, 0xa6, 0x08, 0x9a, 0x38, 0x3c, 0xe3, 0x11, 0x8b, 0x51, 0x83,
	0x80, 0x7d, 0x1e, 0x9a, 0x10, 0xfc, 0x86, 0x97, 0x5d, 0x8a, 0x5a, 0x19, 0xbc, 0x0d, 0xa0, 0x19,
	0x4f, 0x73, 0x7d, 0xaf, 0xdb, 0x34, 0x41, 0x2b, 0x14, 0x75, 0x0d, 0xb2, 0x9c, 0xf7, 0xf5, 0x98,
	0xbc, 0x70, 0xcc, 0x2c, 0xd4, 0x0c, 0x25, 0x8b, 0xb3, 0x8e, 0xa8, 0x20, 0x9a, 0xb5, 0x7b, 0x19,
	0x4a, 0xee, 0x46, 0xcc, 0x5f, 0x74, 0x22, 0xcd, 0x88, 0xa9, 0xda, 0xa4, 0xd2, 0x84, 0x19, 0x34,
	0x1b, 0xe4, 0x45, 0xcf, 0x6b, 0x96, 0x61, 0xba, 0xb4, 0x8a, 0xa8, 0x9f, 0xe7, 0x82, 0x2d, 0xf0,
	0xbc, 0xb5, 0xc8, 0x7c, 0x75, 0x9a, 0xac, 0x7b, 0x1e, 0xca, 0xfc, 0x47, 0xec, 0x74, 0xd8, 0x50,
	0xd0, 0x94, 0xdd, 0x1b, 0x1e, 0xb7, 0x12, 0xdd, 0x52, 0x99, 0x8f, 0x87, 0x6a, 0x76, 0x8b, 0x40,
	0x7e, 0xd2, 0x66, 0x54, 0xf1, 0x69, 0x0c, 0x24, 0x7f, 0x9b, 0xc8, 0xbf, 0x0d, 0xe5, 0xfb, 0x23,
	0xf2, 0x21, 0x9f, 0xe1, 0x4e, 0x90, 0xea, 0x3c, 0xaf, 0xa7, 0x05, 0xbf, 0x61, 0x21, 0xc8, 0xee,
	0x9e, 0xb7, 0xea, 0xcc, 0x92, 0x63, 0x69, 0xf9, 0x5d, 0x76, 0x94, 0xe6, 0x6e, 0xcc, 0xa9, 0x8c,
	0xb8, 0x0a, 0x96, 0x1c, 0xb4, 0x56, 0x6d, 0xf8, 0xb4, 0x04, 0x51, 0x05, 0x17, 0x09, 0xac, 0xde,
	0x06, 0xc6, 0x85, 0xf4, 0xb8, 0x3b, 0xee, 0x11, 0xd8, 0xb7, 0x6d, 0x7a, 0xdc, 0x82, 0xf9, 0x92,
	0xae, 0x58, 0x78, 0xba, 0xde, 0x27, 0x90, 0xa3, 0x36, 0x5d, 0x61, 0x41, 0x1b, 0x5a, 0xfb, 0x50,
	0xc5, 0xc5, 0x3c, 0x08, 0xbc, 0xba, 0xf3, 0x56, 0xb6, 0x05, 0x6d, 0xc7, 0xd2, 0xb2, 0xc8, 0x64,
	0x2d, 0x05, 0x4e, 0x9a, 0x8f, 0x88, 0xd9, 0x94, 0x69, 0x18, 0xf5, 0x30, 0xc8, 0xf5, 0x9e, 0x37,
	0x0b, 0xfc, 0xa0, 0x60, 0x99, 0xc8, 0xbf, 0x6a, 0xd7, 0x06, 0x2a, 0x8f, 0xdb, 0xbd, 0x42, 0x30,
	0xd5, 0x36, 0x93, 0xda, 0x2e, 0x59, 0xfb, 0x50, 0xd3, 0x29, 0x63, 0xa0, 0x14, 0xa4, 0x55, 0x82,
	0x7b, 0xd7, 0x66, 0xc1, 0xd9, 0x25, 0x1b, 0x2d, 0x51, 0xda, 0x61, 0x6b, 0x04, 0xf4, 0xd3, 0x36,
	0x20, 0x21, 0x3e, 0x93, 0xd6, 0x45, 0xee, 0x3c, 0x69, 0xc2, 0xf9, 0x20, 0xd2, 0x77, 0x1b, 0x04,
	0x55, 0x6b, 0x83, 0xda, 0xd7, 0xe0, 0x33, 0x34, 0xe3, 0xb2, 0x66, 0xa1, 0x60, 0x1a, 0xd2, 0x66,
	0x90, 0x8f, 0x3f, 0xaf, 0x07, 0xc9, 0x99, 0x26, 0x57, 0xd1, 0xa1, 0xe5, 0x48, 0x5b, 0xc1, 0x59,
	0x03, 0x1f, 0xa3, 0x81, 0xb5, 0x88, 0x1f, 0x80, 0xf3, 0x6f, 0xf4, 0x38, 0x8a, 0xab, 0x19, 0xc1,
	0x27, 0x45, 0x27, 0x2b, 0xcc, 0x96, 0xb6, 0x45, 0x06, 0xf2, 0x21, 0x65, 0x20, 0xe3, 0x26, 0x14,
	0xaa, 0x74, 0xc6, 0x34, 0xf7, 0xf0, 0x09, 0x2f, 0x69, 0x47, 0x64, 0x20, 0x1f, 0x26, 0xd4, 0xbb,
	0x00, 0x55, 0x4d, 0x31, 0xe8, 0x92, 0x7c, 0x24, 0x52, 0x7e, 0x4f, 0x92, 0xf6, 0x25, 0x5d, 0x71,
	0xdc, 0x2c, 0x1a, 0x7e, 0xe9, 0xb3, 0x80, 0xb2, 0xf3, 0x0f, 0x37, 0xc4, 0x21, 0x4a, 0xba, 0x4e,
	0x11, 0x8f, 0x03, 0x6a, 0x93, 0x21, 0x16, 0xff, 0xd7, 0x0d, 0x20, 0x47, 0x9f, 0x6b, 0x44, 0x41,
	0x06, 0xa1, 0x03, 0x92, 0x82, 0x8c, 0x55, 0xc2, 0x64, 0x0a, 0x6e, 0xdd, 0x3e, 0xb4, 0x94, 0x3c,
	0x4d, 0xaa, 0x53, 0xae, 0x42, 0x88, 0x38, 0xe6, 0xc1, 0xd5, 0x30, 0x26, 0xab, 0xd8, 0xbb, 0x2c,
	0xc8, 0x50, 0x58, 0x36, 0x2a, 0x4e, 0x88, 0xea, 0xeb, 0xe4, 0x63, 0x82, 0x75, 0x70, 0x2b, 0x2c,
	0xea, 0xd3, 0xb9, 0x94, 0xcc, 0x80, 0x8e, 0xa2, 0xe9, 0x2c, 0xee, 0xc8, 0xf9, 0x39, 0x8c, 0x10,
	0x0a, 0xa7, 0xa4, 0x08, 0x67, 0xce, 0x85, 0x3b, 0x0f, 0x08, 0xeb, 0x1f, 0x27, 0x48, 0x6b, 0xd3,
	0x13, 0xe4, 0xc6, 0x70, 0xd0, 0x11, 0x16, 0x47, 0x56, 0x30, 0x08, 0x3a, 0xf6, 0x58, 0x10, 0x15,
	0x27, 0x86, 0xb6, 0xcd, 0x3e, 0x3e, 0x38, 0xb9, 0x47, 0xf2, 0x14, 0xc2, 0x4c, 0x2b, 0xe9, 0x70,
	0x65, 0x75, 0x8b, 0x94, 0xdd, 0xcf, 0xc7, 0x52, 0x49, 0xc2, 0x1b, 0x1b, 0x44, 0x18, 0x84, 0xa2,
	0xa3, 0xb0, 0xb0, 0x0d, 0x75, 0x1d, 0x5a, 0x8c, 0xff, 0xd2, 0x93, 0x46, 0xcb, 0x36, 0x75, 0x3f,
	0xc1, 0x5a, 0x60, 0x07, 0x46, 0xe3, 0x84, 0x5c, 0x5d, 0xb1, 0x1d, 0xc6, 0x6f, 0x69, 0x7e, 0x8a,
	0x27, 0x2c, 0xe9, 0x98, 0xc5, 0x22, 0x32, 0x46, 0x8e, 0x99, 0xdd, 0x63, 0x09, 0x56, 0x23, 0x71,
	0x68, 0x7d, 0x8e, 0xb4, 0x60, 0x5a, 0x98, 0x6e, 0x45, 0x8b, 0x74, 0x38, 0x48, 0xf7, 0xe2, 0x9c,
	0x61, 0x1b, 0x14, 0x69, 0xa8, 0x2d, 0x49, 0x04, 0xf6, 0xf4, 0x7b, 0x9a, 0xfb, 0x4d, 0x18, 0x12,
	0xff, 0x94, 0x61, 0x3f, 0xdb, 0x65, 0x7b, 0xe4, 0x02, 0xd8, 0x0a, 0x4b, 0xe3, 0x7f, 0x13, 0xbe,
	0x4d, 0x77, 0x10, 0x2c, 0x67, 0x99, 0x05, 0x72, 0x30, 0x93, 0x46, 0x7f, 0xf6, 0x33, 0x08, 0x8b,
	0x2c, 0x7e, 0xf8, 0x9a, 0x8f, 0xeb, 0x32, 0xe0, 0xfe, 0xc5, 0xd4, 0xd1, 0xd8, 0xf0, 0x8a, 0x68,
	0xe0, 0x7a, 0xb8, 0x4c, 0x90, 0xb0, 0x18, 0xb3, 0x4f, 0x4b, 0x1a, 0x39, 0xb3, 0xc5, 0x82, 0x89,
	0xa3, 0xd0, 0xce, 0x15, 0x81, 0xe0, 0x83, 0x5f, 0x50, 0x65, 0xb1, 0xc3, 0xbb, 0x90, 0xdd, 0x4d,
	0x92, 0xc7, 0x3b, 0xd7, 0x58, 0xcc, 0x66, 0xf2, 0x28, 0xc6, 0x46, 0xc4, 0x44, 0x8d, 0x94, 0xdc,
	0x52, 0x9e, 0x86, 0x9c, 0xd3, 0x38, 0x6c, 0x28, 0x62, 0x4c, 0xc7, 0xb8, 0x16, 0x34, 0x49, 0x24,
	0x58, 0x7b, 0xc5, 0xca, 0x2b, 0xbc, 0x91, 0x67, 0xb1, 0x83, 0x2d, 0xee, 0x7d, 0xd3, 0x51, 0xa0,
	0x8d, 0x89, 0x69, 0x43, 0x85, 0x07, 0xd2, 0x24, 0xad, 0xa7, 0x1d, 0xf2, 0x50, 0x23, 0xa0, 0x92,
	0x81, 0x33, 0xe7, 0x53, 0x31, 0xd1, 0x70, 0x4c, 0x37, 0x52, 0x71, 0xd7, 0x56, 0x74, 0xc8, 0x02,
	0x88, 0x17, 0xed, 0xea, 0x55, 0xb2, 0x6c, 0x87, 0xd6, 0x4e, 0xba, 0x46, 0xeb, 0xe5, 0x84, 0xfc,
	0x98, 0xa8, 0x19, 0x35, 0xb2, 0x50, 0x67, 0xe1, 0x43, 0xd8, 0x4f, 0x8a, 0x97, 0xe6, 0x83, 0x87,
	0x6a, 0xc8, 0x81, 0x4b, 0x40, 0xe0, 0xa5, 0x3f, 0x13, 0xb3, 0xe1, 0x6f, 0x80, 0x1b, 0xe7, 0x40,
	0x70, 0x49, 0xb3, 0x31, 0x51, 0x6b, 0x72, 0x49, 0xa6, 0xa1, 0x1f, 0xb2, 0xb0, 0xa1, 0x79, 0xb1,
	0x92, 0x10, 0x04, 0x97, 0x34, 0x1f, 0x13, 0x07, 0x9e, 0x53, 0x12, 0x8a, 0x38, 0x6e, 0xc6, 0x90,
	0x05, 0xe7, 0x94, 0x84, 0xa2, 0x01, 0x54, 0xd2, 0xad, 0x98, 0x80, 0x63, 0x3d, 0xba, 0xb5, 0x50,
	0x18, 0xb5, 0x89, 0x2c, 0x86, 0x78, 0xd5, 0x66, 0x4d, 0x88, 0x28, 0x5c, 0xde, 0x9d, 0x98, 0x18,
	0xf4, 0x3e, 0x18, 0x8d, 0x20, 0xcd, 0x42, 0xc6, 0x94, 0x16, 0xe8, 0xdc, 0xd9, 0x15, 0x67, 0xc3,
	0x44, 0xac, 0x34, 0x56, 0x7f, 0x97, 0x22, 0xb4, 0x10, 0x35, 0x11, 0x45, 0x18, 0xfb, 0xd0, 0x72,
	0x58, 0xd4, 0xca, 0x88, 0x7d, 0xd3, 0x62, 0x61, 0x84, 0xd3, 0x66, 0x19, 0x31, 0x6a, 0xf1, 0x5e,
	0xac, 0x17, 0x38, 0x95, 0x20, 0xee, 0xa2, 0x2d, 0xea, 0x3e, 0xad, 0xa3, 0xd9, 0x66, 0x74, 0xc9,
	0x71, 0x03, 0x7c, 0xcc, 0x80, 0x85, 0x0f, 0xcf, 0xdb, 0xac, 0x56, 0x55, 0x43, 0xe1, 0x43, 0x86,
	0x58, 0xae, 0xa5, 0x18, 0xc2, 0x6a, 0x2d, 0xba, 0x99, 0xf8, 0xb4, 0x26, 0x5e, 0x1a, 0x0f, 0x63,
	0x58, 0xba, 0x98, 0xd5, 0x0a, 0x0f, 0xdc, 0xa2, 0xe6, 0xb0, 0x28, 0xe2, 0x59, 0x9b, 0xd6, 0xf3,
	0x79, 0x8c, 0x15, 0xda, 0x7a, 0x21, 0x64, 0x7f, 0x1c, 0xdd, 0x1a, 0x73, 0x1a, 0x72, 0x76, 0xc9,
	0xe8, 0xe0, 0x30, 0x0f, 0xe7, 0x86, 0x59, 0x2c, 0xb1, 0x2f, 0x0e, 0x4f, 0xa4, 0x7e, 0x39, 0xd3,
	0x2a, 0xb8, 0x8e, 0xb4, 0x46, 0x0b, 0xb3, 0xda, 0xf4, 0x01, 0xa3, 0x30, 0x88, 0x3f, 0xb2, 0x1e,
	0x13, 0xeb, 0xc7, 0x80, 0x74, 0xc5, 0x81, 0xc1, 0x42, 0xda, 0x88, 0x21, 0x62, 0x62, 0x26, 0x1e,
	0xe9, 0x85, 0xa2, 0xae, 0x64, 0xa1, 0x0b, 0xf1, 0xdd, 0x08, 0x56, 0xea, 0x66, 0x4c, 0xbc, 0xf7,
	0x25, 0x58, 0x8c, 0x28, 0x40, 0xbb, 0xae, 0x0e, 0xf3, 0xae, 0x63, 0x72, 0xff, 0x8d, 0x35, 0x6c,
	0x05, 0x21, 0x81, 0xaf, 0x01, 0x82, 0x87, 0x71, 0x1a, 0x5c, 0xc5, 0xb6, 0xa1, 0xe3, 0x66, 0x75,
	0xc5, 0xb6, 0xc3, 0x6a, 0xb6, 0x83, 0x00, 0x81, 0x1b, 0xa0, 0x88, 0xc7, 0x63, 0xe6, 0x72, 0x5a,
	0x56, 0xd1, 0x43, 0x17, 0x76, 0x76, 0x68, 0x8f, 0x1b, 0x22, 0xcb, 0x7a, 0x3b, 0x16, 0xad, 0x45,
	0xe0, 0x8f, 0x28, 0xfc, 0xab, 0x36, 0x66, 0x8c, 0xf8, 0xae, 0x78, 0x57, 0xc2, 0xbd, 0xff, 0x59,
	0x0c, 0xc1, 0xba, 0x13, 0xdd, 0xe0, 0x43, 0x9c, 0x01, 0x86, 0x3e, 0x8e, 0x61, 0xb9, 0x62, 0x9a,
	0x4b, 0xae, 0x69, 0x58, 0x30, 0x07, 0x2d, 0x0c, 0x25, 0xf5, 0x7d, 0x42, 0xeb, 0xbb, 0xd7, 0x66,
	0x05, 0xf0, 0xf4, 0xc1, 0xe7, 0x14, 0x93, 0x6f, 0xb3, 0xc6, 0x2c, 0x88, 0x0d, 0xfb, 0x17, 0x31,
	0xfc, 0x4e, 0xcc, 0x8e, 0x48, 0xa4, 0x71, 0x01, 0x5f, 0xc6, 0x30, 0x3c, 0x31, 0x36, 0xdd, 0x77,
	0x85, 0xc9, 0xe6, 0xae, 0xc4, 0xf0, 0x27, 0x31, 0x36, 0x5d, 0x44, 0xe1, 0xf2, 0x32, 0x31, 0x94,
	0x6c, 0x8c, 0x3d, 0xb3, 0x8b, 0xba, 0x46, 0xf3, 0xf1, 0x52, 0x36, 0x86, 0xf1, 0x8b, 0x59, 0xc6,
	0xf4, 0xe0, 0xb6, 0x4a, 0x7b, 0x4c, 0x11, 0x4b, 0x98, 0x8c, 0x17, 0xc7, 0x75, 0x82, 0x14, 0x92,
	0x11, 0xdd, 0xca, 0xf1, 0x04, 0x2f, 0x5f, 0xca, 0x51, 0x79, 0xd8, 0x66, 0x20, 0xf9, 0xbd, 0x2c,
	0x4f, 0x31, 0xc2, 0xa5, 0x94, 0xcf, 0xc9, 0x61, 0x9e, 0x38, 0x4c, 0x98, 0xb1, 0xda, 0xa5, 0xf8,
	0x82, 0xd8, 0xe5, 0xb3, 0x89, 0x91, 0x88, 0x1f, 0xbb, 0x68, 0x14, 0xa9, 0x8b, 0x37, 0x97, 0xd2,
	0x51, 0xa4, 0xa5, 0xa8, 0xaa, 0x0e, 0xa5, 0xaf, 0x28, 0x20, 0xdb, 0xc6, 0x75, 0x63, 0x00, 0xdc,
	0xbe, 0x3d, 0x0a, 0x52, 0xdb, 0x0c, 0x2c, 0xa5, 0x38, 0xb0, 0xc3, 0xa3, 0xc7, 0xd0, 0xde, 0x1b,
	0xd1, 0xb9, 0x67, 0x96, 0x1c, 0x5b, 0x53, 0xfd, 0x93, 0xf9, 0x05, 0x5a, 0xd2, 0x3e, 0x47, 0x4a,
	0x2c, 0xfe, 0xac, 0x13, 0x8c, 0xc5, 0xbf, 0xbb, 0x26, 0xdf, 0x02, 0xb3, 0x78, 0xb6, 0x93, 0x33,
	0x15, 0xf8, 0x96, 0x91, 0x9b, 0xd3, 0x95, 0x7c, 0x88, 0x06, 0x78, 0x08, 0x66, 0xe2, 0xc5, 0xc8,
	0x8d, 0x12, 0xbc, 0xbc, 0x84, 0xdb, 0x88, 0x9f, 0x83, 0x87, 0x09, 0x00, 0xa8, 0x6b, 0xf8, 0x0e,
	0x07, 0x77, 0xf1, 0x0f, 0x5f, 0xbb, 0x60, 0xf4, 0x00, 0x39, 0x48, 0xb0, 0x02, 0xe6, 0xe2, 0xf1,
	0xec, 0x68, 0x13, 0x2e, 0xb2, 0x93, 0x3f, 0x92, 0x01, 0xc1, 0x66, 0x3c, 0x84, 0xdc, 0xea, 0xc0,
	0xc1, 0x95, 0x7f, 0xc2, 0x34, 0x53, 0xb2, 0x35, 0x03, 0xda, 0x36, 0xa6, 0x03, 0x84, 0x3b, 0x11,
	0x6b, 0xe0, 0x66, 0x82, 0x9a, 0x83, 0x22, 0xcc, 0xe2, 0x38, 0x08, 0x57, 0xb7, 0x3b, 0x38, 0x6e,
	0xd1, 0x23, 0x3f, 0x06, 0x0f, 0xe2, 0x41, 0xce, 0x2e, 0x34, 0x2d, 0xe8, 0x60, 0xfb, 0x4e, 0xb6,
	0x60, 0x72, 0xc9, 0xb2, 0x27, 0x38, 0x13, 0xd2, 0xbb, 0xf8, 0xeb, 0x5d, 0x60, 0x38, 0xf4, 0xfb,
	0x1c, 0xf2, 0x35, 0x30, 0xe1, 0x68, 0x05, 0x48, 0xae, 0x0b, 0x58, 0xd9, 0xf0, 0xe9, 0xd4, 0x7b,
	0x60, 0x5a, 0xfc, 0xac, 0x38, 0xa8, 0x2c, 0xee, 0x8c, 0x15, 0x77, 0x8c, 0x7d, 0x06, 0x8c, 0x88,
	0xc2, 0xa8, 0xd1, 0xdc, 0x39, 0xce, 0x14, 0x66, 0x63, 0x04, 0x89, 0x9c, 0xa6, 0xeb, 0xae, 0x69,
	0xb9, 0x7b, 0x5a, 0x70, 0x68, 0x8a, 0x1c, 0xda, 0xc6, 0x47, 0x3e, 0x79, 0xd1, 0xbc, 0x69, 0xaa,
	0xae, 0x83, 0xe4, 0x69, 0xe4, 0xd1, 0xc5, 0x1f, 0x4d, 0x7f, 0x08, 0x66, 0x12, 0xc5, 0x91, 0x2b,
	0x47, 0xce, 0xc1, 0xf9, 0x9d, 0x91, 0x92, 0x97, 0xc1, 0xac, 0x08, 0xd0, 0x0a, 0x98, 0x41, 0x43,
	0x2e, 0x82, 0xc5, 0x8a, 0xe8, 0xe1, 0x8f, 0x9a, 0x47, 0xfa, 0x22, 0x28, 0x42, 0x55, 0x1c, 0xff,
	0x26, 0xca, 0x26, 0x3b, 0xd2, 0x1d, 0xdb, 0x71, 0xec, 0x90, 0x3b, 0x77, 0x69, 0xe5, 0x61, 0x78,
	0x08, 0x14, 0x27, 0xa8, 0x73, 0x3f, 0x59, 0x9e, 0x3b, 0x3c, 0x91, 0x87, 0xf6, 0xc9, 0x98, 0x8a,
	0xec, 0x5a, 0x66, 0x29, 0xbf, 0x1b, 0x40, 0x01, 0x81, 0x6e, 0x73, 0xd0, 0xc5, 0xbf, 0x32, 0x0a,
	0x2e, 0xf3, 0x3f, 0xd2, 0x28, 0x4f, 0x80, 0x51, 0x14, 0x03, 0xbb, 0x9a, 0x61, 0x3b, 0xa1, 0xb1,
	0xbf, 0xc9, 0x7f, 0x52, 0xc8, 0x38, 0x19, 0xa6, 0xe1, 0xb3, 0x70, 0x79, 0xdc, 0x2b, 0xf3, 0xe0,
	0x6a, 0x20, 0x95, 0x45, 0x62, 0x39, 0xcd, 0x0a, 0x52, 0xfd, 0x59, 0x2c, 0xb4, 0x00, 0x26, 0x02,
	0x21, 0xd5, 0xc4, 0xe7, 0xbc, 0x34, 0x23, 0x6b, 0x41, 0xc5, 0xf6, 0x49, 0x38, 0x88, 0x25, 0x6f,
	0x83, 0xf1, 0x88, 0xa4, 0x05, 0xd5, 0x52, 0x16, 0xf2, 0xb4, 0x5b, 0x4a, 0x9e, 0x05, 0x72, 0x20,
	0x97, 0x37, 0x5d, 0x05, 0x5f, 0xef, 0xea, 0xe6, 0xc7, 0xeb, 0x1a, 0x18, 0x0a, 0x44, 0x76, 0xa1,
	0xae, 0xf2, 0xab, 0x21, 0xa4, 0x01, 0x15, 0x83, 0x45, 0x7a, 0xf9, 0x49, 0x15, 0x12, 0xa1, 0x67,
	0x60, 0xfa, 0x02, 0x7e, 0x31, 0xd4, 0x7c, 0x73, 0xcf, 0x61, 0x42, 0xfd, 0x01, 0x53, 0x99, 0x92,
	0x6f, 0x81, 0x31, 0x4e, 0x68, 0x1f, 0x5a, 0x78, 0x2a, 0xa0, 0xd5, 0x21, 0xdc, 0x53, 0x58, 0x07,
	0xb7, 0x02, 0xb1, 0xa2, 0x62, 0x39, 0x5a, 0x56, 0x2b, 0xa2, 0x09, 0xe9, 0xf7, 0x98, 0xe6, 0xa0,
	0x09, 0x2a, 0x5e, 0x5a, 0x58, 0x04, 0x53, 0x1c, 0x8a, 0xdc, 0xe4, 0x42, 0xbb, 0x16, 0xbd, 0x9b,
	0x7b, 0x39, 0xe0, 0x20, 0xf1, 0xfa, 0x0b, 0x64, 0x6d, 0x47, 0x39, 0x74, 0x59, 0x12, 0x5b, 0x53,
	0xfd, 0x6b, 0xbc, 0x3b, 0x6c, 0xb6, 0x47, 0x45, 0x69, 0xfa, 0x4b, 0xc3, 0xc7, 0xc6, 0xb8, 0x75,
	0x2d, 0x34, 0x90, 0x24, 0x44, 0x5c, 0x3b, 0x8b, 0x9c, 0x94, 0xe1, 0x60, 0xa6, 0x87, 0xc4, 0xf0,
	0x15, 0x38, 0x93, 0x8a, 0x49, 0xfc, 0x35, 0x14, 0x61, 0xe0, 0x9e, 0x99, 0xd6, 0x1e, 0x7f, 0xf8,
	0x2b, 0xd4, 0x60, 0xf4, 0x3f, 0x9a, 0x83, 0xe3, 0x27, 0x9b, 0x6c, 0x68, 0x72, 0x40, 0x13, 0x76,
	0xc8, 0xb7, 0xf8, 0x11, 0xc4, 0x4e, 0x50, 0x11, 0xe6, 0xa5, 0x2b, 0xe4, 0xde, 0x03, 0xda, 0x8c,
	0x3b, 0x7e, 0xef, 0xbb, 0xf9, 0x3e, 0xf9, 0x0e, 0x3f, 0x8a, 0x94, 0x63, 0x43, 0x82, 0x57, 0x89,
	0x60, 0xd1, 0x17, 0x5c, 0xe4, 0xa7, 0xa7, 0x7f, 0x6f, 0x18, 0xcb, 0x8e, 0x12, 0xd9, 0x02, 0xa7,
	0x34, 0xcd, 0xcf, 0x1e, 0xc3, 0x35, 0x60, 0xde, 0x74, 0xf0, 0xbd, 0x31, 0x76, 0x37, 0xc1, 0x60,
	0xd7, 0x4a, 0xb8, 0xe9, 0xc1, 0xa8, 0x42, 0x98, 0x97, 0xc6, 0x89, 0x4a, 0xd3, 0x57, 0x29, 0x48,
	0x16, 0x2d, 0xad, 0xa0, 0x58, 0x87, 0x58, 0x32, 0x4d, 0x24, 0x2d, 0x5f, 0x72, 0x06, 0x8c, 0x70,
	0x23, 0x42, 0x12, 0x35, 0xd2, 0x04, 0x29, 0xd5, 0xc6, 0xa5, 0x6e, 0x80, 0xdb, 0xdc, 0xc2, 0x2d,
	0xd9, 0x8e, 0x59, 0x80, 0x16, 0x0a, 0x48, 0x8b, 0xba, 0x72, 0x88, 0xff, 0x6a, 0xd1, 0xa3, 0xc7,
	0x93, 0x04, 0x56, 0xc2, 0xd7, 0x3f, 0x04, 0xc5, 0x06, 0x74, 0x1c, 0x64, 0x6a, 0xa6, 0x88, 0xc4,
	0x3e, 0x96, 0x10, 0x2b, 0x49, 0x02, 0x1f, 0x9c, 0xc8, 0x98, 0x26, 0x95, 0x44, 0xc1, 0x67, 0x37,
	0xae, 0xe4, 0x0a, 0x98, 0xe3, 0x6d, 0x07, 0xa5, 0x54, 0x5c, 0xfb, 0xd0, 0x76, 0x60, 0xc1, 0xcd,
	0x29, 0x9a, 0x5e, 0xb2, 0xa0, 0x74, 0x8d, 0x27, 0x57, 0x1f, 0x82, 0x99, 0x38, 0x88, 0x70, 0x54,
	0xf0, 0x3a, 0x7f, 0x57, 0x44, 0x58, 0x54, 0x16, 0x44, 0xff, 0x87, 0x6d, 0x7c, 0xa4, 0x98, 0x1b,
	0x01, 0xa9, 0xdd, 0x23, 0xaf, 0x82, 0xf9, 0x04, 0x94, 0x50, 0xd2, 0x0c, 0x7f, 0x9b, 0x45, 0xb0,
	0x97, 0xc4, 0x7f, 0x52, 0xe8, 0xa5, 0xd3, 0x7e, 0x46, 0x39, 0x44, 0xa4, 0xc8, 0x1a, 0x70, 0xcc,
	0xa2, 0x34, 0x47, 0xa4, 0x0e, 0xbf, 0x27, 0xb7, 0xbc, 0xa6, 0x23, 0xcd, 0xd4, 0x72, 0xd8, 0x0a,
	0xe0, 0xc3, 0x4c, 0xf3, 0x44, 0x18, 0x53, 0xbf, 0xe2, 0x48, 0x6a, 0x79, 0xc3, 0xb4, 0x60, 0xe0,
	0x04, 0x68, 0xaa, 0xe6, 0x1c, 0xba, 0xd9, 0x5d, 0x98, 0xdd, 0xb3, 0xa5, 0x9b, 0x04, 0x86, 0xa9,
	0x5b, 0xf9, 0x21, 0x5f, 0x06, 0x1d, 0x27, 0x72, 0x49, 0x8c, 0x84, 0x4a, 0xb7, 0xc8, 0x70, 0x61,
	0xc2, 0x11, 0x0f, 0x57, 0xdc, 0x2a, 0x27, 0xb7, 0x73, 0x6e, 0x13, 0xbd, 0x98, 0xed, 0x90, 0x97,
	0xf8, 0xf5, 0xe9, 0x58, 0x8a, 0xa6, 0x93, 0x03, 0x81, 0x66, 0x11, 0x4f, 0xd5, 0x3b, 0x44, 0x6d,
	0xd9, 0x57, 0xbb, 0x0c, 0x66, 0xc5, 0xe5, 0x8e, 0xcf, 0xa6, 0x2a, 0x56, 0x1e, 0xe2, 0x52, 0x14,
	0x07, 0xe6, 0x0f, 0xa5, 0x05, 0x52, 0x02, 0xe6, 0x46, 0x90, 0x4b, 0xcb, 0x5b, 0x80, 0x30, 0x2f,
	0x7e, 0x57, 0x64, 0x3d, 0x31, 0xa7, 0xfd, 0x15, 0x58, 0xe7, 0xea, 0xae, 0x19, 0x79, 0xe4, 0x32,
	0xfb, 0xe4, 0xaf, 0x85, 0x3c, 0x7c, 0x4c, 0x3e, 0xe7, 0x4c, 0x8b, 0x5e, 0xc3, 0x21, 0x71, 0xcf,
	0xa2, 0x48, 0x7f, 0xf5, 0xd0, 0x20, 0x2b, 0xd0, 0x05, 0x0f, 0x1c, 0x68, 0x19, 0x8a, 0xee, 0x5a,
	0x66, 0x09, 0xb3, 0xeb, 0x8a, 0xae, 0x9b, 0xcf, 0x02, 0xa2, 0x89, 0x45, 0x4c, 0x43, 0x94, 0x36,
	0x39, 0x07, 0x89, 0x0f, 0x50, 0x53, 0xf4, 0x7d, 0x91, 0xb0, 0x1b, 0xa2, 0x24, 0x3b, 0xd7, 0x6c,
	0x3f, 0x13, 0x81, 0xad, 0xde, 0x03, 0x91, 0x54, 0x1d, 0x8b, 0xc8, 0xa3, 0x69, 0xc3, 0xb1, 0xe4,
	0x4b, 0x62, 0x10, 0x3d, 0x8f, 0xe4, 0x0f, 0xc1, 0x17, 0x81, 0x3c, 0xb9, 0x18, 0xcb, 0xa6, 0x85,
	0x89, 0x1c, 0x4b, 0xac, 0x02, 0x1f, 0x97, 0xb2, 0xe8, 0x4e, 0x80, 0x9c, 0x1a, 0xe4, 0x89, 0x98,
	0x39, 0x92, 0xe5, 0x94, 0x1e, 0x4e, 0x5e, 0xe5, 0xc9, 0x38, 0xa4, 0x16, 0x8f, 0xf1, 0x0e, 0xbf,
	0x9e, 0x82, 0x65, 0x9b, 0x35, 0x0d, 0x83, 0xde, 0xd0, 0xd1, 0xd1, 0xae, 0xb9, 0x1c, 0x84, 0xb4,
	0xfe, 0x7d, 0x03, 0xa1, 0xcf, 0x84, 0xa5, 0x18, 0x46, 0xaf, 0x04, 0x2c, 0x31, 0x7f, 0xc7, 0x83,
	0x47, 0xeb, 0xc8, 0xe3, 0x20, 0x3e, 0x3a, 0x31, 0x8a, 0x3c, 0x47, 0xf5, 0x86, 0x07, 0x3e, 0x02,
	0x37, 0x23, 0x06, 0x34, 0xae, 0xd0, 0xb5, 0x80, 0xc6, 0xe5, 0xef, 0x65, 0xc4, 0x62, 0x43, 0x16,
	0x67, 0x3d, 0xa0, 0xa7, 0xe3, 0xeb, 0xcb, 0x41, 0x05, 0xb3, 0xb3, 0x11, 0xc4, 0xef, 0xfc, 0x85,
	0x0e, 0x7e, 0x6a, 0xa1, 0x71, 0x86, 0xae, 0x62, 0xa3, 0x40, 0xc8, 0x51, 0x5c, 0x03, 0x96, 0x1c,
	0x4b, 0xd1, 0x19, 0x67, 0xd5, 0xa0, 0xc8, 0xcf, 0xe8, 0xfd, 0xf7, 0x78, 0x64, 0xc9, 0x52, 0x68,
	0x9a, 0x92, 0x80, 0xb7, 0x02, 0x6e, 0xdc, 0x07, 0x6f, 0x80, 0x1b, 0xb1, 0xe0, 0xdc, 0x81, 0x0f,
	0xdb, 0x0e, 0xb8, 0x71, 0x06, 0x5b, 0xfc, 0x8b, 0x29, 0xd0, 0xef, 0x3f, 0xa5, 0x2d, 0x8f, 0x82,
	0x11, 0x3b, 0x6b, 0x46, 0xae, 0xc6, 0x4d, 0x81, 0xcb, 0xe4, 0xcf, 0x79, 0xdd, 0xcc, 0x28, 0x3a,
	0x7f, 0x29, 0x0e, 0xdf, 0x29, 0x27, 0x1f, 0xc9, 0xdc, 0xa4, 0x64, 0x25, 0x77, 0x2d, 0xae, 0x07,
	0xf9, 0x11, 0x44, 0x84, 0x9c, 0x3d, 0x52, 0x74, 0xfe, 0x4a, 0x5c, 0xcf, 0xe2, 0xdf, 0x1d, 0x03,
	0x03, 0x8e, 0x78, 0x7d, 0xd7, 0x89, 0xbf, 0xbe, 0xbb, 0x08, 0x26, 0xfd, 0x2f, 0xdc, 0x35, 0x2d,
	0x3f, 0x29, 0xcd, 0x5f, 0x14, 0x9f, 0xe7, 0xb4, 0xf0, 0x86, 0x44, 0xb8, 0xb0, 0x87, 0x73, 0xa6,
	0x4c, 0x88, 0x26, 0x6c, 0x84, 0x8c, 0x34, 0xbe, 0x67, 0x8c, 0x3a, 0xc0, 0x17, 0x83, 0xb9, 0x22,
	0xf3, 0x80, 0xc9, 0x8d, 0xbe, 0x45, 0x14, 0xd7, 0xb3, 0xbb, 0xbd, 0x68, 0x45, 0x88, 0x8a, 0xba,
	0x03, 0x8f, 0xaa, 0x57, 0x9e, 0x03, 0x57, 0x44, 0x59, 0x21, 0xe1, 0xbc, 0x4e, 0x6f, 0x08, 0xde,
	0x74, 0x82, 0x1b, 0x92, 0x31, 0xdc, 0x99, 0xf8, 0x28, 0xce, 0x4e, 0xa4, 0x21, 0x8c, 0x32, 0x23,
	0x62, 0x7d, 0x81, 0x7f, 0xd8, 0x8b, 0x23, 0x43, 0x26, 0xe6, 0x58, 0x8a, 0x61, 0xe7, 0xa0, 0xc5,
	0xdf, 0xe3, 0xed, 0x95, 0xaf, 0x83, 0xe1, 0x40, 0x42, 0xc8, 0x32, 0xe3, 0xd8, 0x95, 0x64, 0x70,
	0xd9, 0x1d, 0x5e, 0x7c, 0xaf, 0x1c, 0xaa, 0xb1, 0x47, 0x04, 0x38, 0xdf, 0xb8, 0x57, 0xbe, 0xc7,
	0x0d, 0x06, 0x1f, 0xc1, 0x5c, 0x0e, 0x5d, 0x29, 0xef, 0xf6, 0xf9, 0x29, 0xd6, 0xdb, 0x8c, 0x63,
	0x47, 0xfb, 0x81, 0xa5, 0xd9, 0x7b, 0xfe, 0x25, 0xfa, 0x95, 0x0b, 0x41, 0xf0, 0xb5, 0x59, 0x76,
	0x7b, 0x7e, 0x95, 0x87, 0x6c, 0x81, 0x99, 0x28, 0xc4, 0xcc, 0xb9, 0xb9, 0x92, 0x53, 0xb2, 0xa0,
	0x8d, 0xd0, 0xfe, 0x85, 0xf9, 0x35, 0x1e, 0xf8, 0x05, 0x58, 0x68, 0x07, 0x64, 0xff, 0xed, 0x5f,
	0x99, 0xdf, 0xbe, 0x88, 0x02, 0xb3, 0x48, 0xbc, 0xe7, 0x1c, 0xbe, 0x75, 0x46, 0x9e, 0xe5, 0x18,
	0x09, 0x3d, 0x19, 0xd0, 0xed, 0xb3, 0xc2, 0xfe, 0xcd, 0x5f, 0x52, 0xaa, 0x8e, 0xf6, 0x69, 0x7a,
	0x88, 0x2c, 0xd8, 0x5d, 0xc2, 0xd7, 0xe5, 0xbb, 0x09, 0xa3, 0x79, 0xcd, 0x87, 0x93, 0x72, 0xc4,
	0xe7, 0x13, 0xa4, 0x2b, 0xf4, 0x86, 0xc0, 0x72, 0x1b, 0x14, 0xde, 0xf1, 0xb5, 0x02, 0x45, 0x5d,
	0x0d, 0xbd, 0x2e, 0xd0, 0xed, 0x33, 0x58, 0xaa, 0xf8, 0x6c, 0x92, 0xe2, 0x70, 0x64, 0x90, 0x34,
	0x1a, 0x7a, 0x50, 0xa1, 0x9b, 0x98, 0x42, 0x61, 0x0d, 0xec, 0x2b, 0x0e, 0xd4, 0x0f, 0x99, 0xdf,
	0xee, 0xb0, 0xb5, 0x65, 0x4b, 0x63, 0xb4, 0xa6, 0xab, 0xa1, 0x77, 0x11, 0x7c, 0xb0, 0x5d, 0xca,
	0xf8, 0x71, 0x49, 0x64, 0x90, 0x4c, 0xeb, 0x99, 0x62, 0xa9, 0xc1, 0x35, 0x0c, 0xe1, 0x75, 0x05,
	0x9c, 0x5b, 0x8b, 0xda, 0x0f, 0xff, 0xea, 0xc5, 0xfa, 0x32, 0xff, 0x52, 0x0d, 0xa6, 0x10, 0x55,
	0xee, 0xe5, 0x11, 0xae, 0x85, 0xec, 0xc2, 0xc5, 0x0e, 0x0f, 0xd8, 0x01, 0x73, 0x3e, 0x40, 0xd8,
	0x1a, 0xc8, 0xba, 0x54, 0x98, 0xc7, 0x4f, 0xca, 0xda, 0xe4, 0xa1, 0xfc, 0x62, 0x82, 0x96, 0x65,
	0xb2, 0x95, 0x3e, 0xc5, 0xdd, 0x09, 0xe1, 0x9e, 0xd0, 0x09, 0x06, 0x20, 0xa7, 0x19, 0x8a, 0x91,
	0x45, 0x43, 0xc0, 0x97, 0x31, 0x4d, 0xcb, 0xd8, 0xe2, 0x61, 0x98, 0xe1, 0xa4, 0xb0, 0x7c, 0x49,
	0xb1, 0x14, 0xc3, 0x81, 0x50, 0xf5, 0xd9, 0x3c, 0x96, 0x9c, 0x5e, 0x5b, 0x49, 0xaa, 0x18, 0x99,
	0x8f, 0xa4, 0x62, 0xd7, 0xa9, 0xf0, 0x76, 0x92, 0xb0, 0xa1, 0x14, 0x20, 0x3d, 0x02, 0x2c, 0xdd,
	0xa0, 0xd5, 0x59, 0x49, 0xea, 0x5e, 0x3a, 0xf9, 0xe0, 0x01, 0xb4, 0xb2, 0x9a, 0x0d, 0xa5, 0x19,
	0x0a, 0xd8, 0xe0, 0x01, 0xab, 0x9c, 0x51, 0x2e, 0x9a, 0x96, 0x93, 0x33, 0x75, 0xcd, 0x0c, 0x4c,
	0xde, 0x2c, 0xc5, 0xac, 0x26, 0x15, 0x52, 0xb4, 0x4c, 0xcb, 0xcc, 0x2b, 0x34, 0x2b, 0x7f, 0x28,
	0xcd, 0x51, 0xc0, 0x1a, 0x0f, 0xc0, 0x09, 0xd5, 0x18, 0x00, 0xbe, 0xec, 0x37, 0x4f, 0x11, 0xc2,
	0x68, 0xf0, 0x76, 0x8a, 0x1e, 0x5e, 0x75, 0xb3, 0xa5, 0x82, 0x9b, 0x31, 0x8d, 0x12, 0x8a, 0x0a,
	0x48, 0x3f, 0x09, 0xa3, 0x8d, 0x69, 0xf1, 0x18, 0x48, 0x56, 0x29, 0x6a, 0x0e, 0x72, 0x5a, 0x61,
	0x51, 0x39, 0x44, 0xf3, 0xcc, 0x96, 0x6e, 0x51, 0xfc, 0x7a, 0x52, 0x4f, 0x08, 0x78, 0x13, 0x5f,
	0x37, 0xbf, 0x4d, 0x27, 0x8d, 0x30, 0xfa, 0xfc, 0x5a, 0xe7, 0x31, 0xaa, 0xb6, 0xaf, 0xa9, 0x28,
	0x80, 0xbd, 0xc3, 0x5d, 0x5c, 0x6a, 0x5b, 0x92, 0x45, 0x5e, 0x1f, 0xa1, 0x39, 0xe9, 0xb5, 0xd5,
	0xa4, 0x2e, 0x64, 0x18, 0x78, 0x40, 0xfb, 0x83, 0xe6, 0xa4, 0xd7, 0x84, 0xba, 0xf1, 0xc6, 0x8f,
	0x43, 0xc4, 0x74, 0xc7, 0x22, 0x85, 0x6f, 0xb4, 0x1b, 0x01, 0x04, 0x27, 0xbd, 0x71, 0x8f, 0xb6,
	0x6b, 0x3b, 0x69, 0x2d, 0x70, 0x10, 0xbf, 0x33, 0xee, 0x73, 0x17, 0xaa, 0xda, 0x95, 0x43, 0xfb,
	0xe2, 0x01, 0xad, 0x9a, 0x30, 0x9d, 0x1e, 0x70, 0x7b, 0x38, 0x83, 0x90, 0x08, 0x70, 0x89, 0x8a,
	0x0b, 0x26, 0x67, 0x13, 0xdc, 0x08, 0x76, 0x62, 0xd3, 0xda, 0x23, 0x29, 0x79, 0x23, 0xab, 0x15,
	0x89, 0x11, 0x51, 0xa1, 0xf4, 0x90, 0xe2, 0x76, 0x92, 0x26, 0x94, 0x0a, 0xb1, 0x71, 0xd5, 0xf6,
	0x21, 0x3b, 0xf0, 0x2f, 0x98, 0x86, 0x65, 0x3a, 0x87, 0x77, 0xf8, 0x23, 0x8f, 0x7c, 0xb9, 0xfe,
	0xf6, 0x95, 0xc7, 0x16, 0x82, 0xf9, 0x3c, 0x34, 0x55, 0xbd, 0xb1, 0x2a, 0x9e, 0xb1, 0x0c, 0x36,
	0x5c, 0x03, 0x67, 0x4c, 0x14, 0x43, 0x55, 0x2c, 0x95, 0x37, 0x95, 0xab, 0xb4, 0xc0, 0x6d, 0x1e,
	0x38, 0xcf, 0x79, 0x5f, 0xa6, 0x93, 0x65, 0xb9, 0xe9, 0x0d, 0xe1, 0x04, 0xa7, 0xb0, 0x78, 0xf9,
	0x05, 0x8f, 0xd3, 0xd2, 0x04, 0xb0, 0xcc, 0x03, 0xf8, 0x39, 0x6e, 0xc1, 0x62, 0xc9, 0xca, 0xee,
	0xa2, 0x90, 0x44, 0xc9, 0x5b, 0x90, 0xd4, 0x65, 0x83, 0xa2, 0x84, 0xf3, 0x9e, 0xfc, 0xec, 0xa3,
	0xd9, 0x9b, 0x88, 0x17, 0xc4, 0xb2, 0xd2, 0x04, 0xbe, 0x92, 0xd4, 0x07, 0xc1, 0xad, 0x28, 0xc5,
	0xd6, 0x6c, 0x37, 0xa7, 0x64, 0x35, 0x5d, 0x73, 0x0e, 0xa5, 0x2d, 0x0a, 0xdc, 0xe0, 0x9e, 0xe2,
	0x5a, 0xfc, 0x67, 0x1d, 0x60, 0x24, 0xf2, 0x9b, 0xfb, 0xf2, 0x75, 0xfc, 0xc4, 0x07, 0xb4, 0xd0,
	0xec, 0x57, 0xb2, 0x9a, 0x73, 0x18, 0x65, 0x8e, 0x43, 0xdf, 0x95, 0x3c, 0x34, 0xb2, 0x87, 0xcc,
	0x83, 0x57, 0x18, 0x33, 0x13, 0x23, 0x45, 0x9e, 0x09, 0x33, 0x9d, 0x5d, 0x68, 0xb9, 0x05, 0x58,
	0xc8, 0xe0, 0x6b, 0x79, 0xfd, 0x8c, 0x37, 0xea, 0x91, 0x17, 0xc0, 0x44, 0x08, 0xa5, 0x19, 0x78,
	0x49, 0x94, 0x02, 0xff, 0x5e, 0xc3, 0x92, 0xe4, 0xd9, 0x17, 0x5e, 0xd2, 0x9f, 0xa7, 0xcc, 0x93,
	0x26, 0xe7, 0xfc, 0xee, 0x46, 0x9a, 0x53, 0xb4, 0xcc, 0xa2, 0xa5, 0x41, 0x47, 0x09, 0x12, 0x30,
	0x79, 0x7a, 0x19, 0x73, 0x36, 0x24, 0x8a, 0x9c, 0x43, 0x1d, 0xda, 0x36, 0xa7, 0xbc, 0x87, 0x3b,
	0xdf, 0xb7, 0xf8, 0x3b, 0x29, 0x20, 0x15, 0x54, 0xb3, 0x51, 0x7d, 0x59, 0xf5, 0x7f, 0x9f, 0x0b,
	0x75, 0x60, 0x01, 0x85, 0xd1, 0x5a, 0x5e, 0x33, 0xe2, 0x02, 0x0e, 0xf2, 0x1e, 0x25, 0xff, 0x1d,
	0x3f, 0x7f, 0x98, 0xe2, 0x7d, 0xea, 0x79, 0x70, 0x35, 0x24, 0x43, 0x98, 0xe7, 0x0e, 0x3e, 0x48,
	0x20, 0x6f, 0x41, 0xf2, 0x42, 0x66, 0x8e, 0x9c, 0x2d, 0xe6, 0x93, 0x5a, 0xbd, 0x8b, 0x7f, 0xd2,
	0x09, 0x06, 0x85, 0xdf, 0x74, 0x93, 0x27, 0xc1, 0x18, 0xc9, 0x2f, 0xc5, 0x54, 0xef, 0x3a, 0x18,
	0xe6, 0xbe, 0xe1, 0x43, 0xb7, 0x29, 0x9e, 0x37, 0x9f, 0x01, 0x23, 0xdc, 0x77, 0xe2, 0xfb, 0xb0,
	0x7a, 0x6d, 0xb2, 0x67, 0x7b, 0x38, 0x09, 0xff, 0xc0, 0x6c, 0x27, 0xcf, 0xf3, 0xa2, 0x08, 0x2f,
	0x90, 0xa1, 0xd1, 0x05, 0x1b, 0xb9, 0x65, 0x96, 0x57, 0xe0, 0x44, 0xe8, 0x69, 0x4c, 0xba, 0x53,
	0xf3, 0x11, 0x50, 0xb8, 0x4a, 0x4e, 0x51, 0x2f, 0xd9, 0xab, 0x62, 0x7a, 0x27, 0x46, 0x62, 0x8d,
	0x05, 0x3b, 0xeb, 0x49, 0x12, 0xeb, 0x2c, 0xce, 0x21, 0x39, 0x85, 0xfb, 0xe0, 0x1a, 0x27, 0xf1,
	0x6c, 0x17, 0x1a, 0xae, 0x62, 0xa8, 0xae, 0x96, 0x73, 0x35, 0xdb, 0x2e, 0x41, 0x95, 0xc5, 0x3c,
	0x5b, 0x49, 0xfa, 0x36, 0xf8, 0xa7, 0x3c, 0x3b, 0x50, 0x50, 0xcf, 0x77, 0xe4, 0x81, 0x6b, 0x17,
	0x4d, 0x87, 0x74, 0x17, 0x67, 0xbd, 0xe8, 0xfd, 0x3e, 0x96, 0x2a, 0x1e, 0xa5, 0xc7, 0x13, 0x38,
	0x64, 0xc6, 0x32, 0xf7, 0xa0, 0x41, 0xd2, 0x54, 0xf4, 0x5a, 0x1f, 0xcb, 0xb3, 0x4f, 0xa0, 0x65,
	0xfe, 0x8f, 0x3a, 0xc0, 0x70, 0xe8, 0x27, 0x9b, 0xe8, 0x4b, 0xb1, 0xe4, 0xfc, 0x77, 0xcc, 0x1c,
	0xb8, 0x07, 0x46, 0xc5, 0xcf, 0xf4, 0x79, 0x1c, 0xfe, 0xf2, 0x2d, 0xd2, 0x3f, 0x13, 0xbc, 0xe9,
	0xc9, 0x09, 0xb3, 0x7b, 0xd9, 0xfb, 0x90, 0x5d, 0xba, 0x5d, 0xe6, 0xe5, 0x1f, 0x83, 0xdb, 0x49,
	0xf2, 0xb8, 0x43, 0xb1, 0xa9, 0xc3, 0x44, 0x7a, 0xa7, 0x78, 0x84, 0x66, 0x26, 0x78, 0x66, 0x92,
	0x43, 0x07, 0x97, 0x34, 0x38, 0x64, 0x97, 0x78, 0x7c, 0x67, 0x26, 0x78, 0xcd, 0x8f, 0x43, 0x06,
	0xe2, 0xdd, 0xe2, 0x19, 0x23, 0x24, 0xbe, 0xf8, 0x07, 0x29, 0x70, 0x45, 0xf5, 0xca, 0xc7, 0xd5,
	0xda, 0x4b, 0xc1, 0x3e, 0xce, 0x80, 0x69, 0x15, 0x2a, 0x98, 0xf6, 0x4c, 0xb0, 0x90, 0xf7, 0xc1,
	0x58, 0x44, 0x02, 0x5b, 0x3f, 0xd6, 0x7d, 0x0a, 0x3d, 0x55, 0xef, 0xd2, 0xd3, 0x23, 0x11, 0xe9,
	0xc0, 0xdc, 0x74, 0x04, 0x57, 0xaa, 0x7c, 0xc4, 0x0e, 0x98, 0x8f, 0x20, 0x62, 0x2c, 0x55, 0x67,
	0x70, 0xdf, 0x87, 0x41, 0x17, 0x7f, 0xd1, 0x01, 0x64, 0xf6, 0x0b, 0x77, 0xc1, 0x0f, 0x53, 0xa1,
	0x36, 0x15, 0x54, 0xb7, 0x54, 0x44, 0x73, 0xc8, 0x55, 0xe2, 0xde, 0xfd, 0x21, 0xb6, 0x46, 0x94,
	0xa0, 0xce, 0x75, 0x8a, 0x4f, 0xa0, 0xc7, 0xc9, 0xa9, 0x50, 0x87, 0x0e, 0x14, 0x73, 0xf3, 0xc4,
	0xc0, 0x89, 0x72, 0x06, 0x7c, 0xc6, 0x8c, 0x04, 0x39, 0x00, 0xb0, 0x1a, 0x53, 0x2d, 0xa2, 0x0c,
	0xb3, 0x7c, 0xfc, 0x65, 0x6b, 0xfe, 0x1c, 0x5e, 0x12, 0xc6, 0xd9, 0xb5, 0x4a, 0x6c, 0xa8, 0xd7,
	0x42, 0x07, 0x9c, 0x23, 0x18, 0x73, 0x1f, 0x5a, 0xba, 0x72, 0xc8, 0x6e, 0x5b, 0xf3, 0xb7, 0xe9,
	0x17, 0x7f, 0x3d, 0x05, 0x24, 0xf2, 0xb3, 0x75, 0xdc, 0xd5, 0xf6, 0x6b, 0x60, 0x82, 0x96, 0x13,
	0x7b, 0xb9, 0xfd, 0x2e, 0x1a, 0x66, 0xfe, 0x33, 0x21, 0x4a, 0x75, 0x76, 0xa9, 0x9d, 0x6b, 0xf6,
	0x1c, 0xb8, 0x22, 0x8a, 0xe2, 0x80, 0x4c, 0x78, 0xbd, 0x71, 0xf1, 0x5f, 0xa6, 0xc0, 0x95, 0x98,
	0x5f, 0x01, 0x43, 0x23, 0x49, 0x23, 0x32, 0x45, 0x8f, 0x7f, 0x63, 0x65, 0x01, 0x4c, 0x44, 0x24,
	0x32, 0x8a, 0xb1, 0x67, 0x95, 0x8a, 0x8e, 0x38, 0x96, 0x2b, 0x60, 0x2e, 0x22, 0x49, 0xaf, 0xed,
	0xe1, 0xa0, 0xcd, 0xc6, 0xe9, 0x21, 0x6e, 0x58, 0x7b, 0xe4, 0x15, 0x30, 0x15, 0x81, 0x70, 0xb7,
	0xa8, 0x3a, 0xc5, 0xce, 0xbf, 0x8c, 0x3a, 0xf3, 0x6f, 0x00, 0x70, 0x25, 0xe6, 0xc7, 0xd2, 0x50,
	0x4b, 0xb2, 0xa6, 0x55, 0x34, 0xad, 0xc4, 0x39, 0xf9, 0x10, 0xcc, 0x44, 0x24, 0xb0, 0x0f, 0xcd,
	0x1d, 0xbb, 0x14, 0x2e, 0x95, 0xdc, 0x8b, 0x51, 0xc9, 0x3b, 0xdd, 0xc2, 0xe5, 0x92, 0x04, 0x61,
	0xff, 0x09, 0xe5, 0x4e, 0xfe, 0x06, 0xc6, 0x5d, 0x30, 0x19, 0x27, 0x4c, 0x3d, 0xf3, 0x2e, 0xfe,
	0x26, 0xca, 0x3c, 0xb8, 0x1a, 0x11, 0x45, 0x33, 0x5f, 0xb8, 0x4f, 0xb2, 0x0e, 0xae, 0x47, 0x84,
	0x30, 0x05, 0xe0, 0xd7, 0xb5, 0x47, 0x7c, 0x82, 0xb7, 0x8b, 0xee, 0x0b, 0x51, 0x54, 0xc9, 0xd6,
	0x8a, 0xec, 0xcd, 0x9e, 0x12, 0x2f, 0xad, 0x80, 0x7b, 0x11, 0x69, 0x5d, 0x7b, 0x5a, 0xd2, 0x54,
	0x85, 0x9d, 0x61, 0xb3, 0xf2, 0x8a, 0xa1, 0x7d, 0x4d, 0xa6, 0x68, 0x9f, 0x78, 0xd1, 0xbc, 0x8b,
	0x9a, 0xf2, 0x88, 0x8a, 0x02, 0xb4, 0xf2, 0xd0, 0x0a, 0xa3, 0xfb, 0xc5, 0x4b, 0xca, 0x5d, 0x24,
	0x68, 0x58, 0x88, 0xf6, 0x04, 0xa5, 0x80, 0x90, 0x0a, 0x7c, 0xd7, 0x83, 0x1c, 0x54, 0x63, 0xe7,
	0x1d, 0x76, 0x79, 0xfc, 0x13, 0x70, 0x27, 0x82, 0x67, 0x8f, 0xcf, 0x72, 0xef, 0x13, 0xa0, 0xe2,
	0x07, 0xc4, 0x7b, 0xb0, 0x5d, 0x34, 0x09, 0x10, 0x81, 0x5b, 0x70, 0x1f, 0x5a, 0x36, 0x14, 0x8a,
	0xa6, 0x7b, 0xaa, 0xc6, 0x63, 0x37, 0x63, 0xa6, 0x1e, 0x19, 0x6c, 0x92, 0x3c, 0x41, 0x0b, 0x63,
	0x50, 0xbc, 0xcd, 0x9d, 0x58, 0xa6, 0xbd, 0xab, 0x58, 0x70, 0xd7, 0xd4, 0x55, 0xec, 0x14, 0x43,
	0xbc, 0xa8, 0x86, 0xc4, 0xdb, 0xe3, 0x5d, 0x94, 0x8d, 0x8f, 0x62, 0x69, 0x48, 0x47, 0x63, 0xab,
	0x61, 0xf1, 0xaa, 0x02, 0x7b, 0x72, 0x3b, 0x06, 0xa6, 0x19, 0x66, 0x2e, 0xc7, 0x6e, 0xc2, 0x17,
	0x79, 0xf9, 0x2c, 0x78, 0x10, 0x95, 0x67, 0x61, 0x55, 0xdc, 0xd0, 0x8c, 0x88, 0x37, 0x44, 0x93,
	0xeb, 0x8a, 0x31, 0xfe, 0x04, 0x96, 0xc5, 0xd7, 0xbb, 0xbb, 0xe8, 0xe6, 0x1e, 0x85, 0x1d, 0x16,
	0x32, 0xa6, 0x4e, 0xcf, 0x88, 0xe3, 0x8c, 0xce, 0x15, 0xf1, 0x50, 0x78, 0x17, 0x3d, 0x11, 0x1c,
	0x41, 0x3a, 0xd0, 0x40, 0x7d, 0x2a, 0xdc, 0x92, 0x7f, 0xda, 0xae, 0x6b, 0x9e, 0x29, 0x16, 0x0a,
	0x3b, 0xd9, 0xc5, 0x16, 0x8b, 0x97, 0x8f, 0x5b, 0x95, 0x3a, 0x54, 0x8a, 0xae, 0x65, 0xea, 0x3a,
	0xbe, 0x67, 0x3e, 0x26, 0x1e, 0x88, 0xee, 0xa3, 0x59, 0x9f, 0x68, 0xa3, 0x4a, 0xd9, 0x2c, 0x3d,
	0x84, 0x06, 0xf7, 0x21, 0x7e, 0x98, 0xd0, 0x3f, 0xbb, 0xed, 0x6f, 0x33, 0xbf, 0x3b, 0x00, 0x06,
	0x0b, 0xe5, 0xd6, 0xd1, 0x2b, 0xde, 0x6f, 0x2f, 0x28, 0x4e, 0x76, 0x37, 0xce, 0x67, 0x7b, 0x0c,
	0xee, 0x73, 0xdf, 0x94, 0x15, 0x78, 0xa0, 0x64, 0x1d, 0x97, 0xfc, 0xc9, 0x2e, 0x15, 0x0a, 0x8a,
	0xa5, 0x7d, 0x0d, 0x91, 0xff, 0xa3, 0x18, 0x0e, 0x0a, 0x09, 0x69, 0x66, 0xc3, 0x5e, 0xa1, 0x87,
	0xcf, 0x04, 0xf4, 0x6a, 0x3b, 0x74, 0x07, 0x45, 0xaf, 0xc6, 0xa1, 0xd7, 0xda, 0xa1, 0x3b, 0x29,
	0x7a, 0x2d, 0x0e, 0xbd, 0xde, 0x0e, 0xdd, 0x45, 0xd1, 0xeb, 0x71, 0xe8, 0x8d, 0x76, 0x68, 0xfa,
	0x60, 0x96, 0xbd, 0x41, 0xef, 0x73, 0x4d, 0xf3, 0xe8, 0xac, 0xa3, 0x64, 0xb3, 0xb0, 0x18, 0xb0,
	0x0e, 0xf4, 0x81, 0xac, 0x02, 0xa9, 0xe9, 0x12, 0xb8, 0x2e, 0x4a, 0xab, 0x30, 0xa7, 0xe0, 0x03,
	0xdc, 0x38, 0x71, 0x54, 0x58, 0x65, 0xaf, 0x61, 0x15, 0x36, 0x68, 0xa6, 0x7f, 0x2a, 0x5e, 0x9e,
	0xa5, 0x51, 0x88, 0x30, 0x69, 0xc8, 0x2d, 0x30, 0x2a, 0x0a, 0x17, 0x36, 0xf1, 0xbf, 0xd9, 0x0b,
	0x57, 0x05, 0xf2, 0x54, 0xf2, 0x0e, 0xb8, 0xcb, 0x89, 0xf1, 0xad, 0x25, 0x2f, 0x26, 0x66, 0x14,
	0x35, 0x0f, 0x6d, 0x9c, 0xba, 0xb5, 0xd9, 0x2b, 0x22, 0x85, 0x15, 0x7a, 0xf0, 0x61, 0x2e, 0x01,
	0x8a, 0x43, 0x26, 0x82, 0x94, 0x06, 0x08, 0x46, 0x89, 0xeb, 0xde, 0x04, 0x0c, 0xce, 0x0e, 0x90,
	0x07, 0xa0, 0x2e, 0x53, 0xf4, 0xda, 0x05, 0x4a, 0x5c, 0xa7, 0x25, 0x0e, 0x52, 0xcc, 0xea, 0x05,
	0x4a, 0x5c, 0x8f, 0x94, 0x48, 0xdf, 0xb8, 0x52, 0x56, 0xe8, 0xbd, 0xbe, 0x5b, 0xe7, 0xa0, 0x39,
	0xd8, 0x30, 0x85, 0x6d, 0x50, 0x3e, 0x61, 0x9c, 0x83, 0x99, 0x59, 0x9b, 0x3c, 0x02, 0xe3, 0x6a,
	0x06, 0x7b, 0xd2, 0xaa, 0xe0, 0x60, 0xc1, 0x2c, 0x58, 0xe3, 0x04, 0x6d, 0x47, 0x29, 0x14, 0xa1,
	0xea, 0x2a, 0xea, 0xbe, 0x66, 0x9b, 0x96, 0x06, 0x6d, 0xd7, 0xe4, 0x9f, 0x10, 0x70, 0xc9, 0x74,
	0xb2, 0xa5, 0x11, 0x5a, 0x1a, 0x39, 0xe8, 0xf2, 0x39, 0x58, 0xe2, 0x95, 0x04, 0xb3, 0x34, 0x71,
	0x20, 0x65, 0x5a, 0x89, 0x55, 0x3a, 0xaf, 0x84, 0xa9, 0x52, 0x72, 0x4c, 0x82, 0x64, 0xa6, 0x71,
	0x9d, 0x3f, 0x29, 0xf0, 0x40, 0x68, 0x1a, 0x3e, 0xc5, 0xc7, 0xde, 0x1d, 0xbc, 0x1a, 0xdc, 0x0b,
	0xf6, 0xc5, 0xb7, 0xc0, 0x2c, 0x2f, 0x6e, 0x1a, 0x39, 0xcd, 0x2a, 0xb0, 0xf5, 0xe0, 0x5a, 0xb0,
	0x68, 0x5a, 0xbe, 0x75, 0x5c, 0xe3, 0x81, 0xdb, 0xc2, 0x58, 0x27, 0x3d, 0xa8, 0x3a, 0x16, 0x5c,
	0x2c, 0xe6, 0xcf, 0x32, 0xf0, 0x48, 0xcb, 0xb4, 0x6d, 0xbf, 0x8a, 0xe3, 0x81, 0xff, 0x9d, 0x50,
	0x45, 0xd3, 0x80, 0xf8, 0x40, 0xdd, 0xa1, 0x58, 0xc5, 0xb4, 0x18, 0xd3, 0xc5, 0x00, 0x9d, 0x67,
	0x66, 0x1c, 0x70, 0x42, 0x8c, 0x1d, 0x31, 0x70, 0x01, 0xc8, 0x1c, 0x10, 0xc5, 0xfb, 0x68, 0x97,
	0x9e, 0x14, 0x0f, 0x61, 0xe2, 0x73, 0xd2, 0x2f, 0xc0, 0x48, 0x41, 0xb5, 0xbd, 0x23, 0xbb, 0xfa,
	0xd3, 0x20, 0xdc, 0x26, 0xf1, 0x95, 0x0d, 0xb3, 0xae, 0xad, 0x7d, 0x1d, 0x1b, 0x71, 0x93, 0x1f,
	0xba, 0x10, 0x25, 0xd8, 0xb9, 0x2d, 0x16, 0x36, 0xf2, 0xac, 0xdf, 0xe2, 0x1f, 0xa6, 0xc0, 0x20,
	0xf2, 0xfb, 0x9b, 0x02, 0xa9, 0xe3, 0x28, 0x8e, 0x1d, 0xa7, 0x7e, 0x09, 0xa4, 0xb9, 0x6f, 0x42,
	0x6a, 0x95, 0x8f, 0xe9, 0x7d, 0x4e, 0x51, 0x94, 0x17, 0x2f, 0x25, 0x75, 0x44, 0x6b, 0x23, 0xdf,
	0x02, 0xc3, 0x9c, 0xfc, 0xae, 0x96, 0xdf, 0x65, 0xbe, 0xbe, 0x40, 0xd7, 0xde, 0x05, 0x57, 0x38,
	0x31, 0xa7, 0x64, 0x19, 0x78, 0xd7, 0xec, 0x8a, 0xde, 0x9e, 0x5f, 0xfc, 0xd7, 0x29, 0x20, 0x47,
	0x7f, 0xfc, 0x1e, 0xf5, 0xa4, 0xed, 0x58, 0x50, 0x29, 0xb8, 0x8a, 0x9d, 0x8f, 0xa5, 0xd7, 0x56,
	0xc0, 0x54, 0x44, 0x42, 0xb1, 0x6d, 0x2d, 0x6f, 0x14, 0xb8, 0x10, 0x9c, 0xbd, 0x9e, 0xf5, 0x6b,
	0xf4, 0x57, 0x46, 0x22, 0x10, 0x0b, 0x7e, 0x85, 0x4f, 0x6a, 0xb3, 0xe6, 0xae, 0xf2, 0x80, 0x65,
	0x30, 0x19, 0x01, 0x38, 0xd0, 0xc2, 0x0f, 0xa1, 0x40, 0x3e, 0xca, 0x61, 0x88, 0xc5, 0xbf, 0xca,
	0xfd, 0xe2, 0x5c, 0xe8, 0x07, 0x90, 0xe4, 0xdb, 0x60, 0x8e, 0xd7, 0x66, 0xc1, 0xaf, 0xe2, 0x43,
	0x48, 0x05, 0xdc, 0x4b, 0x90, 0x83, 0x07, 0x59, 0x08, 0x55, 0xdb, 0x2d, 0x28, 0x07, 0x5a, 0xa1,
	0x54, 0xc0, 0x73, 0x28, 0xb6, 0xa5, 0x5f, 0x82, 0xc5, 0x04, 0x15, 0x86, 0xc9, 0xbd, 0xef, 0x48,
	0x64, 0xf8, 0xe7, 0x51, 0x7d, 0x0d, 0x6b, 0xe2, 0x00, 0x70, 0x1a, 0x30, 0xad, 0x2b, 0x75, 0x12,
	0xa6, 0x79, 0x67, 0x87, 0x07, 0x7d, 0x06, 0x6e, 0x25, 0xb6, 0x90, 0x3c, 0xc8, 0x97, 0xd5, 0x35,
	0x88, 0x7f, 0x59, 0x40, 0x78, 0x6e, 0xed, 0xd7, 0xe8, 0x0f, 0x5a, 0xb4, 0x01, 0x07, 0xaf, 0xf9,
	0xb9, 0xd9, 0x92, 0x65, 0x41, 0x23, 0x7b, 0xe8, 0x16, 0x15, 0xcd, 0x0a, 0x3f, 0xad, 0x86, 0x47,
	0xe2, 0x4f, 0x53, 0x60, 0xea, 0x9c, 0x5f, 0xbc, 0x97, 0xef, 0x82, 0x5b, 0x76, 0x29, 0x63, 0x67,
	0x2d, 0xad, 0xc8, 0x1f, 0x1f, 0x8b, 0x9b, 0x6a, 0x19, 0xb0, 0x96, 0x2c, 0xaa, 0x6a, 0x36, 0xee,
	0x4b, 0xff, 0xba, 0x80, 0x6d, 0x28, 0x45, 0x7b, 0xd7, 0x74, 0xc4, 0x67, 0x92, 0x57, 0xc0, 0x5c,
	0xb2, 0x0e, 0x1f, 0x22, 0x3c, 0x98, 0xfc, 0x04, 0x2c, 0xb5, 0x87, 0x60, 0x2a, 0x8d, 0x50, 0x1a,
	0xb6, 0x70, 0xc7, 0x61, 0xf1, 0xaf, 0x61, 0xd2, 0x9a, 0x70, 0x40, 0x21, 0xd2, 0x9a, 0x52, 0x20,
	0xb1, 0xa7, 0x64, 0xa6, 0x42, 0xdf, 0xf1, 0x63, 0x11, 0x16, 0xcc, 0x59, 0x30, 0x60, 0x88, 0x97,
	0x59, 0x93, 0x42, 0xb2, 0xf8, 0x38, 0x38, 0x5a, 0x7e, 0x4a, 0x00, 0x11, 0xe8, 0x8c, 0xff, 0x91,
	0x02, 0x57, 0x62, 0x7e, 0x33, 0x5f, 0x9e, 0x05, 0xd7, 0x94, 0x62, 0x51, 0x77, 0x9f, 0x96, 0x60,
	0x29, 0x81, 0x05, 0xb8, 0x1f, 0x27, 0x02, 0x0d, 0xd5, 0xbf, 0xa4, 0x28, 0x3c, 0xb7, 0xbd, 0x0c,
	0x66, 0xa3, 0xd2, 0xf4, 0x71, 0x21, 0x14, 0x32, 0x28, 0x7b, 0xd0, 0xe0, 0x7b, 0x1b, 0x3f, 0xb3,
	0x1f, 0x45, 0x50, 0x76, 0x88, 0x18, 0x44, 0xe1, 0x2d, 0xee, 0x25, 0x70, 0x23, 0x2a, 0x4e, 0xfe,
	0x91, 0xd3, 0x4b, 0xf6, 0x2e, 0x54, 0xf9, 0xbb, 0x0d, 0xbd, 0x8b, 0xff, 0x20, 0x05, 0x86, 0xc4,
	0x9f, 0x91, 0x95, 0xa7, 0x31, 0x1d, 0x85, 0xdf, 0x08, 0x89, 0x19, 0x89, 0x3b, 0xa1, 0xaf, 0x64,
	0x83, 0x25, 0x8f, 0xe6, 0x09, 0x4d, 0x0d, 0x0b, 0x92, 0x83, 0x34, 0x44, 0x50, 0xc8, 0x23, 0x84,
	0x05, 0x1d, 0xb3, 0xc8, 0x1e, 0x29, 0x11, 0x13, 0x09, 0xbf, 0xd1, 0x01, 0xc6, 0x13, 0x7e, 0x53,
	0x57, 0xbe, 0x25, 0x74, 0xac, 0x05, 0x6d, 0x53, 0x2f, 0xc5, 0x8c, 0xd6, 0x72, 0x92, 0x58, 0xe2,
	0x88, 0xad, 0x83, 0x5b, 0xf1, 0x88, 0x73, 0x47, 0x6d, 0x05, 0xcc, 0xc5, 0xa3, 0x92, 0x47, 0x6e,
	0x15, 0xcc, 0xc7, 0x43, 0xce, 0x19, 0xbd, 0xbf, 0xdc, 0x0b, 0xe4, 0xe8, 0xaf, 0xb5, 0xa2, 0x69,
	0x5b, 0x50, 0xd1, 0xba, 0x4c, 0x36, 0xe6, 0xeb, 0xf8, 0x87, 0x69, 0x42, 0x22, 0x6a, 0xa9, 0xa8,
	0xe3, 0xdf, 0x10, 0x70, 0xe9, 0xb7, 0xe0, 0x07, 0xda, 0x56, 0xb8, 0xdf, 0x29, 0x0b, 0xa1, 0x34,
	0xc3, 0x2e, 0xe1, 0x0b, 0x9c, 0xd0, 0x70, 0xdc, 0x8c, 0x62, 0xa8, 0xcf, 0x34, 0x55, 0x1c, 0xe3,
	0x6e, 0x79, 0x07, 0x2c, 0xb6, 0x01, 0x16, 0xd1, 0xfe, 0x85, 0xfb, 0xdf, 0x16, 0x1f, 0x5c, 0x7f,
	0x88, 0x7f, 0x23, 0x2b, 0xd2, 0x18, 0x62, 0x7a, 0x49, 0x74, 0xce, 0x27, 0x6e, 0xf0, 0x83, 0xca,
	0xb1, 0xad, 0x2f, 0x15, 0x91, 0x7f, 0x85, 0xbc, 0xe5, 0x7c, 0xde, 0x82, 0x79, 0xf2, 0x72, 0x24,
	0x9a, 0x64, 0xdd, 0xfc, 0x73, 0xcc, 0xb1, 0x35, 0xe5, 0xd1, 0xf4, 0x38, 0x30, 0x99, 0xc8, 0x3d,
	0xfc, 0xbb, 0xb8, 0x8f, 0xc0, 0xbd, 0x36, 0x50, 0xfe, 0xe7, 0x79, 0x58, 0xfe, 0x67, 0x9b, 0x3d,
	0x21, 0xdd, 0x16, 0xcb, 0x99, 0x34, 0x96, 0x1a, 0xda, 0xa4, 0xcf, 0x37, 0x6f, 0x9d, 0x0f, 0x4e,
	0xb4, 0xd7, 0x2c, 0x69, 0xb4, 0xce, 0x9e, 0xbe, 0x6d, 0x5b, 0x09, 0x7c, 0x3b, 0x3a, 0xab, 0x39,
	0x8c, 0x56, 0x07, 0x01, 0xb9, 0x88, 0xa2, 0x93, 0xf5, 0xf3, 0x15, 0x84, 0x6f, 0x98, 0x41, 0x7c,
	0xc5, 0x8c, 0x1d, 0xac, 0xcb, 0xb0, 0xf3, 0xf1, 0x6d, 0x5a, 0x93, 0x35, 0x8b, 0xfe, 0xe5, 0x13,
	0x92, 0xef, 0x6d, 0x5b, 0xf3, 0xe8, 0x5b, 0xf2, 0xfc, 0x95, 0x94, 0x1e, 0xfa, 0x43, 0x4d, 0xe7,
	0x4d, 0xd0, 0xac, 0x05, 0x55, 0xcd, 0x09, 0xff, 0xac, 0xdc, 0x28, 0xda, 0xd3, 0xff, 0x53, 0x0a,
	0x8c, 0xc6, 0xfe, 0x66, 0xa9, 0x7c, 0x13, 0xcc, 0x88, 0xce, 0xc3, 0xd3, 0x38, 0x9b, 0x6a, 0x81,
	0xc7, 0xb1, 0x52, 0xfe, 0x1f, 0x99, 0xfb, 0x88, 0xf3, 0xd7, 0xf0, 0x80, 0x50, 0xdf, 0x11, 0x07,
	0x7d, 0xf5, 0x5c, 0xb7, 0xe5, 0x5c, 0x9d, 0x06, 0x7c, 0x16, 0xa8, 0xeb, 0x88, 0x7a, 0x6e, 0x8b,
	0xff, 0x44, 0x68, 0x22, 0xf7, 0x7b, 0x9d, 0xe1, 0x26, 0x2a, 0xd9, 0xd8, 0x6d, 0xe3, 0x73, 0xb0,
	0x10, 0x2b, 0xc5, 0xd5, 0x83, 0x51, 0x1f, 0xac, 0x39, 0x82, 0x17, 0x76, 0x01, 0x7c, 0xd8, 0x65,
	0xe6, 0xeb, 0x9f, 0x59, 0x07, 0x93, 0xf5, 0xc6, 0xcb, 0xa5, 0x17, 0xd5, 0xb7, 0xa7, 0x8d, 0x7a,
	0xab, 0x7e, 0x54, 0x3f, 0x5e, 0x3a, 0xaa, 0x9f, 0x9c, 0xd6, 0x6b, 0x5e, 0xad, 0xd5, 0xcc, 0x80,
	0xe0, 0x77, 0x42, 0xbf, 0x06, 0xe4, 0xc7, 0xff, 0x2b, 0xe5, 0x56, 0xf9, 0x79, 0x0f, 0x16, 0x5e,
	0xfb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95, 0x64, 0x9a, 0x5e, 0xfe, 0xbd, 0x00, 0x00,
}
