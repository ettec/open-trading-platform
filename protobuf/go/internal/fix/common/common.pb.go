// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package common

import (
	fix "github.com/ettec/open-trading-platform/go/market-data-gateway-fixsim/internal/fix/fix"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommTypeEnum int32

const (
	CommTypeEnum_COMM_TYPE_UNSPECIFIED                      CommTypeEnum = 0
	CommTypeEnum_COMM_TYPE_ABSOLUTE                         CommTypeEnum = 1
	CommTypeEnum_COMM_TYPE_PERCENT                          CommTypeEnum = 2
	CommTypeEnum_COMM_TYPE_PER_UNIT                         CommTypeEnum = 3
	CommTypeEnum_COMM_TYPE_PERCENTAGE_WAIVED_CASH_DISCOUNT  CommTypeEnum = 4
	CommTypeEnum_COMM_TYPE_PERCENTAGE_WAIVED_ENHANCED_UNITS CommTypeEnum = 5
	CommTypeEnum_COMM_TYPE_POINTS_PER_BOND_OR_CONTRACT      CommTypeEnum = 6
)

var CommTypeEnum_name = map[int32]string{
	0: "COMM_TYPE_UNSPECIFIED",
	1: "COMM_TYPE_ABSOLUTE",
	2: "COMM_TYPE_PERCENT",
	3: "COMM_TYPE_PER_UNIT",
	4: "COMM_TYPE_PERCENTAGE_WAIVED_CASH_DISCOUNT",
	5: "COMM_TYPE_PERCENTAGE_WAIVED_ENHANCED_UNITS",
	6: "COMM_TYPE_POINTS_PER_BOND_OR_CONTRACT",
}

var CommTypeEnum_value = map[string]int32{
	"COMM_TYPE_UNSPECIFIED":                      0,
	"COMM_TYPE_ABSOLUTE":                         1,
	"COMM_TYPE_PERCENT":                          2,
	"COMM_TYPE_PER_UNIT":                         3,
	"COMM_TYPE_PERCENTAGE_WAIVED_CASH_DISCOUNT":  4,
	"COMM_TYPE_PERCENTAGE_WAIVED_ENHANCED_UNITS": 5,
	"COMM_TYPE_POINTS_PER_BOND_OR_CONTRACT":      6,
}

func (x CommTypeEnum) String() string {
	return proto.EnumName(CommTypeEnum_name, int32(x))
}

func (CommTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type FundRenewWaivEnum int32

const (
	FundRenewWaivEnum_FUND_RENEW_WAIV_UNSPECIFIED FundRenewWaivEnum = 0
	FundRenewWaivEnum_FUND_RENEW_WAIV_NO          FundRenewWaivEnum = 1
	FundRenewWaivEnum_FUND_RENEW_WAIV_YES         FundRenewWaivEnum = 2
)

var FundRenewWaivEnum_name = map[int32]string{
	0: "FUND_RENEW_WAIV_UNSPECIFIED",
	1: "FUND_RENEW_WAIV_NO",
	2: "FUND_RENEW_WAIV_YES",
}

var FundRenewWaivEnum_value = map[string]int32{
	"FUND_RENEW_WAIV_UNSPECIFIED": 0,
	"FUND_RENEW_WAIV_NO":          1,
	"FUND_RENEW_WAIV_YES":         2,
}

func (x FundRenewWaivEnum) String() string {
	return proto.EnumName(FundRenewWaivEnum_name, int32(x))
}

func (FundRenewWaivEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

type DiscretionInstEnum int32

const (
	DiscretionInstEnum_DISCRETION_INST_UNSPECIFIED                    DiscretionInstEnum = 0
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_DISPLAYED_PRICE     DiscretionInstEnum = 1
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_LAST_TRADE_PRICE    DiscretionInstEnum = 2
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_LOCAL_PRIMARY_PRICE DiscretionInstEnum = 3
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_MARKET_PRICE        DiscretionInstEnum = 4
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_MIDPOINT_PRICE      DiscretionInstEnum = 5
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_PRIMARY_PRICE       DiscretionInstEnum = 6
	DiscretionInstEnum_DISCRETION_INST_RELATED_TO_VWAP                DiscretionInstEnum = 7
	DiscretionInstEnum_DISCRETION_INST_AVERAGE_PRICE_GUARANTEE        DiscretionInstEnum = 8
)

var DiscretionInstEnum_name = map[int32]string{
	0: "DISCRETION_INST_UNSPECIFIED",
	1: "DISCRETION_INST_RELATED_TO_DISPLAYED_PRICE",
	2: "DISCRETION_INST_RELATED_TO_LAST_TRADE_PRICE",
	3: "DISCRETION_INST_RELATED_TO_LOCAL_PRIMARY_PRICE",
	4: "DISCRETION_INST_RELATED_TO_MARKET_PRICE",
	5: "DISCRETION_INST_RELATED_TO_MIDPOINT_PRICE",
	6: "DISCRETION_INST_RELATED_TO_PRIMARY_PRICE",
	7: "DISCRETION_INST_RELATED_TO_VWAP",
	8: "DISCRETION_INST_AVERAGE_PRICE_GUARANTEE",
}

var DiscretionInstEnum_value = map[string]int32{
	"DISCRETION_INST_UNSPECIFIED":                    0,
	"DISCRETION_INST_RELATED_TO_DISPLAYED_PRICE":     1,
	"DISCRETION_INST_RELATED_TO_LAST_TRADE_PRICE":    2,
	"DISCRETION_INST_RELATED_TO_LOCAL_PRIMARY_PRICE": 3,
	"DISCRETION_INST_RELATED_TO_MARKET_PRICE":        4,
	"DISCRETION_INST_RELATED_TO_MIDPOINT_PRICE":      5,
	"DISCRETION_INST_RELATED_TO_PRIMARY_PRICE":       6,
	"DISCRETION_INST_RELATED_TO_VWAP":                7,
	"DISCRETION_INST_AVERAGE_PRICE_GUARANTEE":        8,
}

func (x DiscretionInstEnum) String() string {
	return proto.EnumName(DiscretionInstEnum_name, int32(x))
}

func (DiscretionInstEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

type DiscretionMoveTypeEnum int32

const (
	DiscretionMoveTypeEnum_DISCRETION_MOVE_TYPE_UNSPECIFIED DiscretionMoveTypeEnum = 0
	DiscretionMoveTypeEnum_DISCRETION_MOVE_TYPE_FIXED       DiscretionMoveTypeEnum = 1
	DiscretionMoveTypeEnum_DISCRETION_MOVE_TYPE_FLOATING    DiscretionMoveTypeEnum = 2
)

var DiscretionMoveTypeEnum_name = map[int32]string{
	0: "DISCRETION_MOVE_TYPE_UNSPECIFIED",
	1: "DISCRETION_MOVE_TYPE_FIXED",
	2: "DISCRETION_MOVE_TYPE_FLOATING",
}

var DiscretionMoveTypeEnum_value = map[string]int32{
	"DISCRETION_MOVE_TYPE_UNSPECIFIED": 0,
	"DISCRETION_MOVE_TYPE_FIXED":       1,
	"DISCRETION_MOVE_TYPE_FLOATING":    2,
}

func (x DiscretionMoveTypeEnum) String() string {
	return proto.EnumName(DiscretionMoveTypeEnum_name, int32(x))
}

func (DiscretionMoveTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

type DiscretionOffsetTypeEnum int32

const (
	DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_UNSPECIFIED  DiscretionOffsetTypeEnum = 0
	DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_BASIS_POINTS DiscretionOffsetTypeEnum = 1
	DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_PRICE        DiscretionOffsetTypeEnum = 2
	DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_PRICE_TIER   DiscretionOffsetTypeEnum = 3
	DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_TICKS        DiscretionOffsetTypeEnum = 4
)

var DiscretionOffsetTypeEnum_name = map[int32]string{
	0: "DISCRETION_OFFSET_TYPE_UNSPECIFIED",
	1: "DISCRETION_OFFSET_TYPE_BASIS_POINTS",
	2: "DISCRETION_OFFSET_TYPE_PRICE",
	3: "DISCRETION_OFFSET_TYPE_PRICE_TIER",
	4: "DISCRETION_OFFSET_TYPE_TICKS",
}

var DiscretionOffsetTypeEnum_value = map[string]int32{
	"DISCRETION_OFFSET_TYPE_UNSPECIFIED":  0,
	"DISCRETION_OFFSET_TYPE_BASIS_POINTS": 1,
	"DISCRETION_OFFSET_TYPE_PRICE":        2,
	"DISCRETION_OFFSET_TYPE_PRICE_TIER":   3,
	"DISCRETION_OFFSET_TYPE_TICKS":        4,
}

func (x DiscretionOffsetTypeEnum) String() string {
	return proto.EnumName(DiscretionOffsetTypeEnum_name, int32(x))
}

func (DiscretionOffsetTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

type DiscretionLimitTypeEnum int32

const (
	DiscretionLimitTypeEnum_DISCRETION_LIMIT_TYPE_UNSPECIFIED DiscretionLimitTypeEnum = 0
	DiscretionLimitTypeEnum_DISCRETION_LIMIT_TYPE_OR_BETTER   DiscretionLimitTypeEnum = 1
	DiscretionLimitTypeEnum_DISCRETION_LIMIT_TYPE_OR_WORSE    DiscretionLimitTypeEnum = 2
	DiscretionLimitTypeEnum_DISCRETION_LIMIT_TYPE_STRICT      DiscretionLimitTypeEnum = 3
)

var DiscretionLimitTypeEnum_name = map[int32]string{
	0: "DISCRETION_LIMIT_TYPE_UNSPECIFIED",
	1: "DISCRETION_LIMIT_TYPE_OR_BETTER",
	2: "DISCRETION_LIMIT_TYPE_OR_WORSE",
	3: "DISCRETION_LIMIT_TYPE_STRICT",
}

var DiscretionLimitTypeEnum_value = map[string]int32{
	"DISCRETION_LIMIT_TYPE_UNSPECIFIED": 0,
	"DISCRETION_LIMIT_TYPE_OR_BETTER":   1,
	"DISCRETION_LIMIT_TYPE_OR_WORSE":    2,
	"DISCRETION_LIMIT_TYPE_STRICT":      3,
}

func (x DiscretionLimitTypeEnum) String() string {
	return proto.EnumName(DiscretionLimitTypeEnum_name, int32(x))
}

func (DiscretionLimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

type DiscretionRoundDirectionEnum int32

const (
	DiscretionRoundDirectionEnum_DISCRETION_ROUND_DIRECTION_UNSPECIFIED     DiscretionRoundDirectionEnum = 0
	DiscretionRoundDirectionEnum_DISCRETION_ROUND_DIRECTION_MORE_AGGRESSIVE DiscretionRoundDirectionEnum = 1
	DiscretionRoundDirectionEnum_DISCRETION_ROUND_DIRECTION_MORE_PASSIVE    DiscretionRoundDirectionEnum = 2
)

var DiscretionRoundDirectionEnum_name = map[int32]string{
	0: "DISCRETION_ROUND_DIRECTION_UNSPECIFIED",
	1: "DISCRETION_ROUND_DIRECTION_MORE_AGGRESSIVE",
	2: "DISCRETION_ROUND_DIRECTION_MORE_PASSIVE",
}

var DiscretionRoundDirectionEnum_value = map[string]int32{
	"DISCRETION_ROUND_DIRECTION_UNSPECIFIED":     0,
	"DISCRETION_ROUND_DIRECTION_MORE_AGGRESSIVE": 1,
	"DISCRETION_ROUND_DIRECTION_MORE_PASSIVE":    2,
}

func (x DiscretionRoundDirectionEnum) String() string {
	return proto.EnumName(DiscretionRoundDirectionEnum_name, int32(x))
}

func (DiscretionRoundDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

type DiscretionScopeEnum int32

const (
	DiscretionScopeEnum_DISCRETION_SCOPE_UNSPECIFIED              DiscretionScopeEnum = 0
	DiscretionScopeEnum_DISCRETION_SCOPE_GLOBAL                   DiscretionScopeEnum = 1
	DiscretionScopeEnum_DISCRETION_SCOPE_LOCAL                    DiscretionScopeEnum = 2
	DiscretionScopeEnum_DISCRETION_SCOPE_NATIONAL                 DiscretionScopeEnum = 3
	DiscretionScopeEnum_DISCRETION_SCOPE_NATIONAL_EXCLUDING_LOCAL DiscretionScopeEnum = 4
)

var DiscretionScopeEnum_name = map[int32]string{
	0: "DISCRETION_SCOPE_UNSPECIFIED",
	1: "DISCRETION_SCOPE_GLOBAL",
	2: "DISCRETION_SCOPE_LOCAL",
	3: "DISCRETION_SCOPE_NATIONAL",
	4: "DISCRETION_SCOPE_NATIONAL_EXCLUDING_LOCAL",
}

var DiscretionScopeEnum_value = map[string]int32{
	"DISCRETION_SCOPE_UNSPECIFIED":              0,
	"DISCRETION_SCOPE_GLOBAL":                   1,
	"DISCRETION_SCOPE_LOCAL":                    2,
	"DISCRETION_SCOPE_NATIONAL":                 3,
	"DISCRETION_SCOPE_NATIONAL_EXCLUDING_LOCAL": 4,
}

func (x DiscretionScopeEnum) String() string {
	return proto.EnumName(DiscretionScopeEnum_name, int32(x))
}

func (DiscretionScopeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

type TerminationTypeEnum int32

const (
	TerminationTypeEnum_TERMINATION_TYPE_UNSPECIFIED TerminationTypeEnum = 0
	TerminationTypeEnum_TERMINATION_TYPE_FLEXIBLE    TerminationTypeEnum = 1
	TerminationTypeEnum_TERMINATION_TYPE_OPEN        TerminationTypeEnum = 2
	TerminationTypeEnum_TERMINATION_TYPE_OVERNIGHT   TerminationTypeEnum = 3
	TerminationTypeEnum_TERMINATION_TYPE_TERM        TerminationTypeEnum = 4
)

var TerminationTypeEnum_name = map[int32]string{
	0: "TERMINATION_TYPE_UNSPECIFIED",
	1: "TERMINATION_TYPE_FLEXIBLE",
	2: "TERMINATION_TYPE_OPEN",
	3: "TERMINATION_TYPE_OVERNIGHT",
	4: "TERMINATION_TYPE_TERM",
}

var TerminationTypeEnum_value = map[string]int32{
	"TERMINATION_TYPE_UNSPECIFIED": 0,
	"TERMINATION_TYPE_FLEXIBLE":    1,
	"TERMINATION_TYPE_OPEN":        2,
	"TERMINATION_TYPE_OVERNIGHT":   3,
	"TERMINATION_TYPE_TERM":        4,
}

func (x TerminationTypeEnum) String() string {
	return proto.EnumName(TerminationTypeEnum_name, int32(x))
}

func (TerminationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

type DeliveryTypeEnum int32

const (
	DeliveryTypeEnum_DELIVERY_TYPE_UNSPECIFIED     DeliveryTypeEnum = 0
	DeliveryTypeEnum_DELIVERY_TYPE_FREE            DeliveryTypeEnum = 1
	DeliveryTypeEnum_DELIVERY_TYPE_HOLD_IN_CUSTODY DeliveryTypeEnum = 2
	DeliveryTypeEnum_DELIVERY_TYPE_TRI_PARTY       DeliveryTypeEnum = 3
	DeliveryTypeEnum_DELIVERY_TYPE_VERSUS_PAYMENT  DeliveryTypeEnum = 4
)

var DeliveryTypeEnum_name = map[int32]string{
	0: "DELIVERY_TYPE_UNSPECIFIED",
	1: "DELIVERY_TYPE_FREE",
	2: "DELIVERY_TYPE_HOLD_IN_CUSTODY",
	3: "DELIVERY_TYPE_TRI_PARTY",
	4: "DELIVERY_TYPE_VERSUS_PAYMENT",
}

var DeliveryTypeEnum_value = map[string]int32{
	"DELIVERY_TYPE_UNSPECIFIED":     0,
	"DELIVERY_TYPE_FREE":            1,
	"DELIVERY_TYPE_HOLD_IN_CUSTODY": 2,
	"DELIVERY_TYPE_TRI_PARTY":       3,
	"DELIVERY_TYPE_VERSUS_PAYMENT":  4,
}

func (x DeliveryTypeEnum) String() string {
	return proto.EnumName(DeliveryTypeEnum_name, int32(x))
}

func (DeliveryTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

type SymbolSfxEnum int32

const (
	SymbolSfxEnum_SYMBOL_SFX_UNSPECIFIED                 SymbolSfxEnum = 0
	SymbolSfxEnum_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST SymbolSfxEnum = 1
	SymbolSfxEnum_SYMBOL_SFX_WHEN_ISSUED                 SymbolSfxEnum = 2
)

var SymbolSfxEnum_name = map[int32]string{
	0: "SYMBOL_SFX_UNSPECIFIED",
	1: "SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST",
	2: "SYMBOL_SFX_WHEN_ISSUED",
}

var SymbolSfxEnum_value = map[string]int32{
	"SYMBOL_SFX_UNSPECIFIED":                 0,
	"SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST": 1,
	"SYMBOL_SFX_WHEN_ISSUED":                 2,
}

func (x SymbolSfxEnum) String() string {
	return proto.EnumName(SymbolSfxEnum_name, int32(x))
}

func (SymbolSfxEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

type SecurityIDSourceEnum int32

const (
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_UNSPECIFIED                      SecurityIDSourceEnum = 0
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_CUSIP                            SecurityIDSourceEnum = 1
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_QUIK                             SecurityIDSourceEnum = 2
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_SEDOL                            SecurityIDSourceEnum = 3
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_ISIN_NUMBER                      SecurityIDSourceEnum = 4
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_RIC_CODE                         SecurityIDSourceEnum = 5
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 SecurityIDSourceEnum = 6
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                SecurityIDSourceEnum = 7
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    SecurityIDSourceEnum = 8
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  SecurityIDSourceEnum = 9
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_BELGIAN                          SecurityIDSourceEnum = 10
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 SecurityIDSourceEnum = 11
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_COMMON                           SecurityIDSourceEnum = 12
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_DUTCH                            SecurityIDSourceEnum = 13
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_SICOVAM                          SecurityIDSourceEnum = 14
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_VALOREN                          SecurityIDSourceEnum = 15
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_WERTPAPIER                       SecurityIDSourceEnum = 16
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_CLEARING_HOUSE                   SecurityIDSourceEnum = 17
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          SecurityIDSourceEnum = 18
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY SecurityIDSourceEnum = 19
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 SecurityIDSourceEnum = 20
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_ISDA_FPML_URL                    SecurityIDSourceEnum = 21
	SecurityIDSourceEnum_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  SecurityIDSourceEnum = 22
)

var SecurityIDSourceEnum_name = map[int32]string{
	0:  "SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "SECURITY_ID_SOURCE_CUSIP",
	2:  "SECURITY_ID_SOURCE_QUIK",
	3:  "SECURITY_ID_SOURCE_SEDOL",
	4:  "SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "SECURITY_ID_SOURCE_RIC_CODE",
	6:  "SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "SECURITY_ID_SOURCE_BELGIAN",
	11: "SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "SECURITY_ID_SOURCE_COMMON",
	13: "SECURITY_ID_SOURCE_DUTCH",
	14: "SECURITY_ID_SOURCE_SICOVAM",
	15: "SECURITY_ID_SOURCE_VALOREN",
	16: "SECURITY_ID_SOURCE_WERTPAPIER",
	17: "SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var SecurityIDSourceEnum_value = map[string]int32{
	"SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"SECURITY_ID_SOURCE_CUSIP":                            1,
	"SECURITY_ID_SOURCE_QUIK":                             2,
	"SECURITY_ID_SOURCE_SEDOL":                            3,
	"SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"SECURITY_ID_SOURCE_BELGIAN":                          10,
	"SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"SECURITY_ID_SOURCE_COMMON":                           12,
	"SECURITY_ID_SOURCE_DUTCH":                            13,
	"SECURITY_ID_SOURCE_SICOVAM":                          14,
	"SECURITY_ID_SOURCE_VALOREN":                          15,
	"SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x SecurityIDSourceEnum) String() string {
	return proto.EnumName(SecurityIDSourceEnum_name, int32(x))
}

func (SecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

type ProductEnum int32

const (
	ProductEnum_PRODUCT_UNSPECIFIED ProductEnum = 0
	ProductEnum_PRODUCT_AGENCY      ProductEnum = 1
	ProductEnum_PRODUCT_COMMODITY   ProductEnum = 2
	ProductEnum_PRODUCT_CORPORATE   ProductEnum = 3
	ProductEnum_PRODUCT_CURRENCY    ProductEnum = 4
	ProductEnum_PRODUCT_EQUITY      ProductEnum = 5
	ProductEnum_PRODUCT_GOVERNMENT  ProductEnum = 6
	ProductEnum_PRODUCT_INDEX       ProductEnum = 7
	ProductEnum_PRODUCT_LOAN        ProductEnum = 8
	ProductEnum_PRODUCT_MONEYMARKET ProductEnum = 9
	ProductEnum_PRODUCT_MORTGAGE    ProductEnum = 10
	ProductEnum_PRODUCT_MUNICIPAL   ProductEnum = 11
	ProductEnum_PRODUCT_OTHER       ProductEnum = 12
	ProductEnum_PRODUCT_FINANCING   ProductEnum = 13
)

var ProductEnum_name = map[int32]string{
	0:  "PRODUCT_UNSPECIFIED",
	1:  "PRODUCT_AGENCY",
	2:  "PRODUCT_COMMODITY",
	3:  "PRODUCT_CORPORATE",
	4:  "PRODUCT_CURRENCY",
	5:  "PRODUCT_EQUITY",
	6:  "PRODUCT_GOVERNMENT",
	7:  "PRODUCT_INDEX",
	8:  "PRODUCT_LOAN",
	9:  "PRODUCT_MONEYMARKET",
	10: "PRODUCT_MORTGAGE",
	11: "PRODUCT_MUNICIPAL",
	12: "PRODUCT_OTHER",
	13: "PRODUCT_FINANCING",
}

var ProductEnum_value = map[string]int32{
	"PRODUCT_UNSPECIFIED": 0,
	"PRODUCT_AGENCY":      1,
	"PRODUCT_COMMODITY":   2,
	"PRODUCT_CORPORATE":   3,
	"PRODUCT_CURRENCY":    4,
	"PRODUCT_EQUITY":      5,
	"PRODUCT_GOVERNMENT":  6,
	"PRODUCT_INDEX":       7,
	"PRODUCT_LOAN":        8,
	"PRODUCT_MONEYMARKET": 9,
	"PRODUCT_MORTGAGE":    10,
	"PRODUCT_MUNICIPAL":   11,
	"PRODUCT_OTHER":       12,
	"PRODUCT_FINANCING":   13,
}

func (x ProductEnum) String() string {
	return proto.EnumName(ProductEnum_name, int32(x))
}

func (ProductEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}

type SecurityTypeEnum int32

const (
	SecurityTypeEnum_SECURITY_TYPE_UNSPECIFIED                                     SecurityTypeEnum = 0
	SecurityTypeEnum_SECURITY_TYPE_BANKERS_ACCEPTANCE                              SecurityTypeEnum = 1
	SecurityTypeEnum_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT                          SecurityTypeEnum = 2
	SecurityTypeEnum_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION              SecurityTypeEnum = 3
	SecurityTypeEnum_SECURITY_TYPE_COMMERCIAL_PAPER                                SecurityTypeEnum = 4
	SecurityTypeEnum_SECURITY_TYPE_COMMON_STOCK                                    SecurityTypeEnum = 5
	SecurityTypeEnum_SECURITY_TYPE_CORPORATE_BOND                                  SecurityTypeEnum = 6
	SecurityTypeEnum_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT                     SecurityTypeEnum = 7
	SecurityTypeEnum_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT                       SecurityTypeEnum = 8
	SecurityTypeEnum_SECURITY_TYPE_FUTURE                                          SecurityTypeEnum = 9
	SecurityTypeEnum_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH                      SecurityTypeEnum = 10
	SecurityTypeEnum_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY                          SecurityTypeEnum = 11
	SecurityTypeEnum_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY                         SecurityTypeEnum = 12
	SecurityTypeEnum_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT                      SecurityTypeEnum = 13
	SecurityTypeEnum_SECURITY_TYPE_MUTUAL_FUND                                     SecurityTypeEnum = 14
	SecurityTypeEnum_SECURITY_TYPE_NO_SECURITY_TYPE                                SecurityTypeEnum = 15
	SecurityTypeEnum_SECURITY_TYPE_OPTION                                          SecurityTypeEnum = 16
	SecurityTypeEnum_SECURITY_TYPE_PREFERRED_STOCK                                 SecurityTypeEnum = 17
	SecurityTypeEnum_SECURITY_TYPE_TIME_DEPOSIT                                    SecurityTypeEnum = 18
	SecurityTypeEnum_SECURITY_TYPE_US_TREASURY_BILL_OLD                            SecurityTypeEnum = 19
	SecurityTypeEnum_SECURITY_TYPE_WARRANT                                         SecurityTypeEnum = 20
	SecurityTypeEnum_SECURITY_TYPE_CONVERTIBLE_BOND                                SecurityTypeEnum = 21
	SecurityTypeEnum_SECURITY_TYPE_IOETTEMORTGAGE                                  SecurityTypeEnum = 22
	SecurityTypeEnum_SECURITY_TYPE_WILDCARD                                        SecurityTypeEnum = 23
	SecurityTypeEnum_SECURITY_TYPE_AMENDED                                         SecurityTypeEnum = 24
	SecurityTypeEnum_SECURITY_TYPE_ASSET_BACKED_SECURITIES                         SecurityTypeEnum = 25
	SecurityTypeEnum_SECURITY_TYPE_BANK_NOTES                                      SecurityTypeEnum = 26
	SecurityTypeEnum_SECURITY_TYPE_BILL_OF_EXCHANGES                               SecurityTypeEnum = 27
	SecurityTypeEnum_SECURITY_TYPE_BRADY_BOND                                      SecurityTypeEnum = 28
	SecurityTypeEnum_SECURITY_TYPE_BRIDGE_LOAN                                     SecurityTypeEnum = 29
	SecurityTypeEnum_SECURITY_TYPE_CALL_LOANS                                      SecurityTypeEnum = 30
	SecurityTypeEnum_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION                       SecurityTypeEnum = 31
	SecurityTypeEnum_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION                    SecurityTypeEnum = 32
	SecurityTypeEnum_SECURITY_TYPE_CORP                                            SecurityTypeEnum = 33
	SecurityTypeEnum_SECURITY_TYPE_DEBTOR_IN_POSSESSION                            SecurityTypeEnum = 34
	SecurityTypeEnum_SECURITY_TYPE_DEFAULTED                                       SecurityTypeEnum = 35
	SecurityTypeEnum_SECURITY_TYPE_DEPOSIT_NOTES                                   SecurityTypeEnum = 36
	SecurityTypeEnum_SECURITY_TYPE_DUAL_CURRENCY                                   SecurityTypeEnum = 37
	SecurityTypeEnum_SECURITY_TYPE_EXTENDED_COMM_NOTE                              SecurityTypeEnum = 38
	SecurityTypeEnum_SECURITY_TYPE_FEDERAL_AGENCY_COUPON                           SecurityTypeEnum = 39
	SecurityTypeEnum_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE                    SecurityTypeEnum = 40
	SecurityTypeEnum_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS                        SecurityTypeEnum = 41
	SecurityTypeEnum_SECURITY_TYPE_INDEXED_LINKED                                  SecurityTypeEnum = 42
	SecurityTypeEnum_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE            SecurityTypeEnum = 43
	SecurityTypeEnum_SECURITY_TYPE_LETTER_OF_CREDIT                                SecurityTypeEnum = 44
	SecurityTypeEnum_SECURITY_TYPE_LIQUIDITY_NOTE                                  SecurityTypeEnum = 45
	SecurityTypeEnum_SECURITY_TYPE_MANDATORY_TENDER                                SecurityTypeEnum = 46
	SecurityTypeEnum_SECURITY_TYPE_MATURED                                         SecurityTypeEnum = 47
	SecurityTypeEnum_SECURITY_TYPE_MEDIUM_TERM_NOTES                               SecurityTypeEnum = 48
	SecurityTypeEnum_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES                      SecurityTypeEnum = 49
	SecurityTypeEnum_SECURITY_TYPE_MULTILEG_INSTRUMENT                             SecurityTypeEnum = 50
	SecurityTypeEnum_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES                        SecurityTypeEnum = 51
	SecurityTypeEnum_SECURITY_TYPE_OVERNIGHT                                       SecurityTypeEnum = 52
	SecurityTypeEnum_SECURITY_TYPE_PLAZOS_FIJOS                                    SecurityTypeEnum = 53
	SecurityTypeEnum_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE SecurityTypeEnum = 54
	SecurityTypeEnum_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE       SecurityTypeEnum = 55
	SecurityTypeEnum_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING                          SecurityTypeEnum = 56
	SecurityTypeEnum_SECURITY_TYPE_PROMISSORY_NOTE                                 SecurityTypeEnum = 57
	SecurityTypeEnum_SECURITY_TYPE_REPLACED                                        SecurityTypeEnum = 58
	SecurityTypeEnum_SECURITY_TYPE_RETIRED                                         SecurityTypeEnum = 59
	SecurityTypeEnum_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE                       SecurityTypeEnum = 60
	SecurityTypeEnum_SECURITY_TYPE_REVENUE_BONDS                                   SecurityTypeEnum = 61
	SecurityTypeEnum_SECURITY_TYPE_REVOLVER                                        SecurityTypeEnum = 62
	SecurityTypeEnum_SECURITY_TYPE_REVOLVER_LOAN                                   SecurityTypeEnum = 63
	SecurityTypeEnum_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE                            SecurityTypeEnum = 64
	SecurityTypeEnum_SECURITY_TYPE_SPECIAL_ASSESSMENT                              SecurityTypeEnum = 65
	SecurityTypeEnum_SECURITY_TYPE_SPECIAL_OBLIGATION                              SecurityTypeEnum = 66
	SecurityTypeEnum_SECURITY_TYPE_SPECIAL_TAX                                     SecurityTypeEnum = 67
	SecurityTypeEnum_SECURITY_TYPE_STRUCTURED_NOTES                                SecurityTypeEnum = 68
	SecurityTypeEnum_SECURITY_TYPE_SWING_LINE_FACILITY                             SecurityTypeEnum = 69
	SecurityTypeEnum_SECURITY_TYPE_TAX_ALLOCATION                                  SecurityTypeEnum = 70
	SecurityTypeEnum_SECURITY_TYPE_TAX_ANTICIPATION_NOTE                           SecurityTypeEnum = 71
	SecurityTypeEnum_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER                     SecurityTypeEnum = 72
	SecurityTypeEnum_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE                   SecurityTypeEnum = 73
	SecurityTypeEnum_SECURITY_TYPE_TERM_LOAN                                       SecurityTypeEnum = 74
	SecurityTypeEnum_SECURITY_TYPE_TO_BE_ANNOUNCED                                 SecurityTypeEnum = 75
	SecurityTypeEnum_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES         SecurityTypeEnum = 76
	SecurityTypeEnum_SECURITY_TYPE_US_TREASURY_BOND                                SecurityTypeEnum = 77
	SecurityTypeEnum_SECURITY_TYPE_US_TREASURY_NOTE_OLD                            SecurityTypeEnum = 78
	SecurityTypeEnum_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE                       SecurityTypeEnum = 79
	SecurityTypeEnum_SECURITY_TYPE_WITHDRAWN                                       SecurityTypeEnum = 80
	SecurityTypeEnum_SECURITY_TYPE_YANKEE_CORPORATE_BOND                           SecurityTypeEnum = 81
	SecurityTypeEnum_SECURITY_TYPE_BUY_SELLBACK                                    SecurityTypeEnum = 82
	SecurityTypeEnum_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT                     SecurityTypeEnum = 83
	SecurityTypeEnum_SECURITY_TYPE_EURO_COMMERCIAL_PAPER                           SecurityTypeEnum = 84
	SecurityTypeEnum_SECURITY_TYPE_EURO_CORPORATE_BOND                             SecurityTypeEnum = 85
	SecurityTypeEnum_SECURITY_TYPE_EURO_SOVEREIGNS                                 SecurityTypeEnum = 86
	SecurityTypeEnum_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS                      SecurityTypeEnum = 87
	SecurityTypeEnum_SECURITY_TYPE_FORWARD                                         SecurityTypeEnum = 88
	SecurityTypeEnum_SECURITY_TYPE_PFANDBRIEFE                                     SecurityTypeEnum = 89
	SecurityTypeEnum_SECURITY_TYPE_REPURCHASE                                      SecurityTypeEnum = 90
	SecurityTypeEnum_SECURITY_TYPE_SECURITIES_LOAN                                 SecurityTypeEnum = 91
	SecurityTypeEnum_SECURITY_TYPE_SECURITIES_PLEDGE                               SecurityTypeEnum = 92
	SecurityTypeEnum_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS                       SecurityTypeEnum = 93
	SecurityTypeEnum_SECURITY_TYPE_US_TREASURY_BILL                                SecurityTypeEnum = 94
	SecurityTypeEnum_SECURITY_TYPE_US_TREASURY_NOTE                                SecurityTypeEnum = 95
	SecurityTypeEnum_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT                   SecurityTypeEnum = 96
	SecurityTypeEnum_SECURITY_TYPE_OPTIONS_ON_FUTURES                              SecurityTypeEnum = 97
	SecurityTypeEnum_SECURITY_TYPE_OPTIONS_ON_PHYSICAL                             SecurityTypeEnum = 98
	SecurityTypeEnum_SECURITY_TYPE_CASH                                            SecurityTypeEnum = 99
	SecurityTypeEnum_SECURITY_TYPE_OPTIONS_ON_COMBO                                SecurityTypeEnum = 100
	SecurityTypeEnum_SECURITY_TYPE_INTEREST_RATE_SWAP                              SecurityTypeEnum = 101
	SecurityTypeEnum_SECURITY_TYPE_BANK_DEPOSITORY_NOTE                            SecurityTypeEnum = 102
	SecurityTypeEnum_SECURITY_TYPE_CANADIAN_MONEY_MARKETS                          SecurityTypeEnum = 103
	SecurityTypeEnum_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS                         SecurityTypeEnum = 104
	SecurityTypeEnum_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS                       SecurityTypeEnum = 105
	SecurityTypeEnum_SECURITY_TYPE_CANADIAN_TREASURY_BILLS                         SecurityTypeEnum = 106
	SecurityTypeEnum_SECURITY_TYPE_CANADIAN_TREASURY_NOTES                         SecurityTypeEnum = 107
	SecurityTypeEnum_SECURITY_TYPE_CREDIT_DEFAULT_SWAP                             SecurityTypeEnum = 108
	SecurityTypeEnum_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES              SecurityTypeEnum = 109
	SecurityTypeEnum_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE                          SecurityTypeEnum = 110
	SecurityTypeEnum_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP                            SecurityTypeEnum = 111
	SecurityTypeEnum_SECURITY_TYPE_TERM_LIQUIDITY_NOTE                             SecurityTypeEnum = 112
	SecurityTypeEnum_SECURITY_TYPE_TREASURY_BILL                                   SecurityTypeEnum = 113
	SecurityTypeEnum_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES                SecurityTypeEnum = 114
	SecurityTypeEnum_SECURITY_TYPE_FX_FORWARD                                      SecurityTypeEnum = 115
	SecurityTypeEnum_SECURITY_TYPE_FX_SPOT                                         SecurityTypeEnum = 116
	SecurityTypeEnum_SECURITY_TYPE_FX_SWAP                                         SecurityTypeEnum = 117
	SecurityTypeEnum_SECURITY_TYPE_NON_DELIVERABLE_FORWARD                         SecurityTypeEnum = 118
)

var SecurityTypeEnum_name = map[int32]string{
	0:   "SECURITY_TYPE_UNSPECIFIED",
	1:   "SECURITY_TYPE_BANKERS_ACCEPTANCE",
	2:   "SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT",
	3:   "SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION",
	4:   "SECURITY_TYPE_COMMERCIAL_PAPER",
	5:   "SECURITY_TYPE_COMMON_STOCK",
	6:   "SECURITY_TYPE_CORPORATE_BOND",
	7:   "SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT",
	8:   "SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT",
	9:   "SECURITY_TYPE_FUTURE",
	10:  "SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH",
	11:  "SECURITY_TYPE_MORTGAGE_INTEREST_ONLY",
	12:  "SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY",
	13:  "SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT",
	14:  "SECURITY_TYPE_MUTUAL_FUND",
	15:  "SECURITY_TYPE_NO_SECURITY_TYPE",
	16:  "SECURITY_TYPE_OPTION",
	17:  "SECURITY_TYPE_PREFERRED_STOCK",
	18:  "SECURITY_TYPE_TIME_DEPOSIT",
	19:  "SECURITY_TYPE_US_TREASURY_BILL_OLD",
	20:  "SECURITY_TYPE_WARRANT",
	21:  "SECURITY_TYPE_CONVERTIBLE_BOND",
	22:  "SECURITY_TYPE_IOETTEMORTGAGE",
	23:  "SECURITY_TYPE_WILDCARD",
	24:  "SECURITY_TYPE_AMENDED",
	25:  "SECURITY_TYPE_ASSET_BACKED_SECURITIES",
	26:  "SECURITY_TYPE_BANK_NOTES",
	27:  "SECURITY_TYPE_BILL_OF_EXCHANGES",
	28:  "SECURITY_TYPE_BRADY_BOND",
	29:  "SECURITY_TYPE_BRIDGE_LOAN",
	30:  "SECURITY_TYPE_CALL_LOANS",
	31:  "SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION",
	32:  "SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION",
	33:  "SECURITY_TYPE_CORP",
	34:  "SECURITY_TYPE_DEBTOR_IN_POSSESSION",
	35:  "SECURITY_TYPE_DEFAULTED",
	36:  "SECURITY_TYPE_DEPOSIT_NOTES",
	37:  "SECURITY_TYPE_DUAL_CURRENCY",
	38:  "SECURITY_TYPE_EXTENDED_COMM_NOTE",
	39:  "SECURITY_TYPE_FEDERAL_AGENCY_COUPON",
	40:  "SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE",
	41:  "SECURITY_TYPE_GENERAL_OBLIGATION_BONDS",
	42:  "SECURITY_TYPE_INDEXED_LINKED",
	43:  "SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE",
	44:  "SECURITY_TYPE_LETTER_OF_CREDIT",
	45:  "SECURITY_TYPE_LIQUIDITY_NOTE",
	46:  "SECURITY_TYPE_MANDATORY_TENDER",
	47:  "SECURITY_TYPE_MATURED",
	48:  "SECURITY_TYPE_MEDIUM_TERM_NOTES",
	49:  "SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES",
	50:  "SECURITY_TYPE_MULTILEG_INSTRUMENT",
	51:  "SECURITY_TYPE_OTHER_ANTICIPATION_NOTES",
	52:  "SECURITY_TYPE_OVERNIGHT",
	53:  "SECURITY_TYPE_PLAZOS_FIJOS",
	54:  "SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE",
	55:  "SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE",
	56:  "SECURITY_TYPE_PRIVATE_EXPORT_FUNDING",
	57:  "SECURITY_TYPE_PROMISSORY_NOTE",
	58:  "SECURITY_TYPE_REPLACED",
	59:  "SECURITY_TYPE_RETIRED",
	60:  "SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE",
	61:  "SECURITY_TYPE_REVENUE_BONDS",
	62:  "SECURITY_TYPE_REVOLVER",
	63:  "SECURITY_TYPE_REVOLVER_LOAN",
	64:  "SECURITY_TYPE_SHORT_TERM_LOAN_NOTE",
	65:  "SECURITY_TYPE_SPECIAL_ASSESSMENT",
	66:  "SECURITY_TYPE_SPECIAL_OBLIGATION",
	67:  "SECURITY_TYPE_SPECIAL_TAX",
	68:  "SECURITY_TYPE_STRUCTURED_NOTES",
	69:  "SECURITY_TYPE_SWING_LINE_FACILITY",
	70:  "SECURITY_TYPE_TAX_ALLOCATION",
	71:  "SECURITY_TYPE_TAX_ANTICIPATION_NOTE",
	72:  "SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER",
	73:  "SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE",
	74:  "SECURITY_TYPE_TERM_LOAN",
	75:  "SECURITY_TYPE_TO_BE_ANNOUNCED",
	76:  "SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES",
	77:  "SECURITY_TYPE_US_TREASURY_BOND",
	78:  "SECURITY_TYPE_US_TREASURY_NOTE_OLD",
	79:  "SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE",
	80:  "SECURITY_TYPE_WITHDRAWN",
	81:  "SECURITY_TYPE_YANKEE_CORPORATE_BOND",
	82:  "SECURITY_TYPE_BUY_SELLBACK",
	83:  "SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT",
	84:  "SECURITY_TYPE_EURO_COMMERCIAL_PAPER",
	85:  "SECURITY_TYPE_EURO_CORPORATE_BOND",
	86:  "SECURITY_TYPE_EURO_SOVEREIGNS",
	87:  "SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS",
	88:  "SECURITY_TYPE_FORWARD",
	89:  "SECURITY_TYPE_PFANDBRIEFE",
	90:  "SECURITY_TYPE_REPURCHASE",
	91:  "SECURITY_TYPE_SECURITIES_LOAN",
	92:  "SECURITY_TYPE_SECURITIES_PLEDGE",
	93:  "SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS",
	94:  "SECURITY_TYPE_US_TREASURY_BILL",
	95:  "SECURITY_TYPE_US_TREASURY_NOTE",
	96:  "SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT",
	97:  "SECURITY_TYPE_OPTIONS_ON_FUTURES",
	98:  "SECURITY_TYPE_OPTIONS_ON_PHYSICAL",
	99:  "SECURITY_TYPE_CASH",
	100: "SECURITY_TYPE_OPTIONS_ON_COMBO",
	101: "SECURITY_TYPE_INTEREST_RATE_SWAP",
	102: "SECURITY_TYPE_BANK_DEPOSITORY_NOTE",
	103: "SECURITY_TYPE_CANADIAN_MONEY_MARKETS",
	104: "SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS",
	105: "SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS",
	106: "SECURITY_TYPE_CANADIAN_TREASURY_BILLS",
	107: "SECURITY_TYPE_CANADIAN_TREASURY_NOTES",
	108: "SECURITY_TYPE_CREDIT_DEFAULT_SWAP",
	109: "SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES",
	110: "SECURITY_TYPE_SECURED_LIQUIDITY_NOTE",
	111: "SECURITY_TYPE_TAXABLE_MUNICIPAL_CP",
	112: "SECURITY_TYPE_TERM_LIQUIDITY_NOTE",
	113: "SECURITY_TYPE_TREASURY_BILL",
	114: "SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES",
	115: "SECURITY_TYPE_FX_FORWARD",
	116: "SECURITY_TYPE_FX_SPOT",
	117: "SECURITY_TYPE_FX_SWAP",
	118: "SECURITY_TYPE_NON_DELIVERABLE_FORWARD",
}

var SecurityTypeEnum_value = map[string]int32{
	"SECURITY_TYPE_UNSPECIFIED":                                     0,
	"SECURITY_TYPE_BANKERS_ACCEPTANCE":                              1,
	"SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT":                          2,
	"SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION":              3,
	"SECURITY_TYPE_COMMERCIAL_PAPER":                                4,
	"SECURITY_TYPE_COMMON_STOCK":                                    5,
	"SECURITY_TYPE_CORPORATE_BOND":                                  6,
	"SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT":                     7,
	"SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT":                       8,
	"SECURITY_TYPE_FUTURE":                                          9,
	"SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH":                      10,
	"SECURITY_TYPE_MORTGAGE_INTEREST_ONLY":                          11,
	"SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY":                         12,
	"SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT":                      13,
	"SECURITY_TYPE_MUTUAL_FUND":                                     14,
	"SECURITY_TYPE_NO_SECURITY_TYPE":                                15,
	"SECURITY_TYPE_OPTION":                                          16,
	"SECURITY_TYPE_PREFERRED_STOCK":                                 17,
	"SECURITY_TYPE_TIME_DEPOSIT":                                    18,
	"SECURITY_TYPE_US_TREASURY_BILL_OLD":                            19,
	"SECURITY_TYPE_WARRANT":                                         20,
	"SECURITY_TYPE_CONVERTIBLE_BOND":                                21,
	"SECURITY_TYPE_IOETTEMORTGAGE":                                  22,
	"SECURITY_TYPE_WILDCARD":                                        23,
	"SECURITY_TYPE_AMENDED":                                         24,
	"SECURITY_TYPE_ASSET_BACKED_SECURITIES":                         25,
	"SECURITY_TYPE_BANK_NOTES":                                      26,
	"SECURITY_TYPE_BILL_OF_EXCHANGES":                               27,
	"SECURITY_TYPE_BRADY_BOND":                                      28,
	"SECURITY_TYPE_BRIDGE_LOAN":                                     29,
	"SECURITY_TYPE_CALL_LOANS":                                      30,
	"SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION":                       31,
	"SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION":                    32,
	"SECURITY_TYPE_CORP":                                            33,
	"SECURITY_TYPE_DEBTOR_IN_POSSESSION":                            34,
	"SECURITY_TYPE_DEFAULTED":                                       35,
	"SECURITY_TYPE_DEPOSIT_NOTES":                                   36,
	"SECURITY_TYPE_DUAL_CURRENCY":                                   37,
	"SECURITY_TYPE_EXTENDED_COMM_NOTE":                              38,
	"SECURITY_TYPE_FEDERAL_AGENCY_COUPON":                           39,
	"SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE":                    40,
	"SECURITY_TYPE_GENERAL_OBLIGATION_BONDS":                        41,
	"SECURITY_TYPE_INDEXED_LINKED":                                  42,
	"SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE":            43,
	"SECURITY_TYPE_LETTER_OF_CREDIT":                                44,
	"SECURITY_TYPE_LIQUIDITY_NOTE":                                  45,
	"SECURITY_TYPE_MANDATORY_TENDER":                                46,
	"SECURITY_TYPE_MATURED":                                         47,
	"SECURITY_TYPE_MEDIUM_TERM_NOTES":                               48,
	"SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES":                      49,
	"SECURITY_TYPE_MULTILEG_INSTRUMENT":                             50,
	"SECURITY_TYPE_OTHER_ANTICIPATION_NOTES":                        51,
	"SECURITY_TYPE_OVERNIGHT":                                       52,
	"SECURITY_TYPE_PLAZOS_FIJOS":                                    53,
	"SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE": 54,
	"SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE":       55,
	"SECURITY_TYPE_PRIVATE_EXPORT_FUNDING":                          56,
	"SECURITY_TYPE_PROMISSORY_NOTE":                                 57,
	"SECURITY_TYPE_REPLACED":                                        58,
	"SECURITY_TYPE_RETIRED":                                         59,
	"SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE":                       60,
	"SECURITY_TYPE_REVENUE_BONDS":                                   61,
	"SECURITY_TYPE_REVOLVER":                                        62,
	"SECURITY_TYPE_REVOLVER_LOAN":                                   63,
	"SECURITY_TYPE_SHORT_TERM_LOAN_NOTE":                            64,
	"SECURITY_TYPE_SPECIAL_ASSESSMENT":                              65,
	"SECURITY_TYPE_SPECIAL_OBLIGATION":                              66,
	"SECURITY_TYPE_SPECIAL_TAX":                                     67,
	"SECURITY_TYPE_STRUCTURED_NOTES":                                68,
	"SECURITY_TYPE_SWING_LINE_FACILITY":                             69,
	"SECURITY_TYPE_TAX_ALLOCATION":                                  70,
	"SECURITY_TYPE_TAX_ANTICIPATION_NOTE":                           71,
	"SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER":                     72,
	"SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE":                   73,
	"SECURITY_TYPE_TERM_LOAN":                                       74,
	"SECURITY_TYPE_TO_BE_ANNOUNCED":                                 75,
	"SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES":         76,
	"SECURITY_TYPE_US_TREASURY_BOND":                                77,
	"SECURITY_TYPE_US_TREASURY_NOTE_OLD":                            78,
	"SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE":                       79,
	"SECURITY_TYPE_WITHDRAWN":                                       80,
	"SECURITY_TYPE_YANKEE_CORPORATE_BOND":                           81,
	"SECURITY_TYPE_BUY_SELLBACK":                                    82,
	"SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT":                     83,
	"SECURITY_TYPE_EURO_COMMERCIAL_PAPER":                           84,
	"SECURITY_TYPE_EURO_CORPORATE_BOND":                             85,
	"SECURITY_TYPE_EURO_SOVEREIGNS":                                 86,
	"SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS":                      87,
	"SECURITY_TYPE_FORWARD":                                         88,
	"SECURITY_TYPE_PFANDBRIEFE":                                     89,
	"SECURITY_TYPE_REPURCHASE":                                      90,
	"SECURITY_TYPE_SECURITIES_LOAN":                                 91,
	"SECURITY_TYPE_SECURITIES_PLEDGE":                               92,
	"SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS":                       93,
	"SECURITY_TYPE_US_TREASURY_BILL":                                94,
	"SECURITY_TYPE_US_TREASURY_NOTE":                                95,
	"SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT":                   96,
	"SECURITY_TYPE_OPTIONS_ON_FUTURES":                              97,
	"SECURITY_TYPE_OPTIONS_ON_PHYSICAL":                             98,
	"SECURITY_TYPE_CASH":                                            99,
	"SECURITY_TYPE_OPTIONS_ON_COMBO":                                100,
	"SECURITY_TYPE_INTEREST_RATE_SWAP":                              101,
	"SECURITY_TYPE_BANK_DEPOSITORY_NOTE":                            102,
	"SECURITY_TYPE_CANADIAN_MONEY_MARKETS":                          103,
	"SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS":                         104,
	"SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS":                       105,
	"SECURITY_TYPE_CANADIAN_TREASURY_BILLS":                         106,
	"SECURITY_TYPE_CANADIAN_TREASURY_NOTES":                         107,
	"SECURITY_TYPE_CREDIT_DEFAULT_SWAP":                             108,
	"SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES":              109,
	"SECURITY_TYPE_SECURED_LIQUIDITY_NOTE":                          110,
	"SECURITY_TYPE_TAXABLE_MUNICIPAL_CP":                            111,
	"SECURITY_TYPE_TERM_LIQUIDITY_NOTE":                             112,
	"SECURITY_TYPE_TREASURY_BILL":                                   113,
	"SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES":                114,
	"SECURITY_TYPE_FX_FORWARD":                                      115,
	"SECURITY_TYPE_FX_SPOT":                                         116,
	"SECURITY_TYPE_FX_SWAP":                                         117,
	"SECURITY_TYPE_NON_DELIVERABLE_FORWARD":                         118,
}

func (x SecurityTypeEnum) String() string {
	return proto.EnumName(SecurityTypeEnum_name, int32(x))
}

func (SecurityTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}

type SecurityStatusEnum int32

const (
	SecurityStatusEnum_SECURITY_STATUS_UNSPECIFIED SecurityStatusEnum = 0
	SecurityStatusEnum_SECURITY_STATUS_ACTIVE      SecurityStatusEnum = 1
	SecurityStatusEnum_SECURITY_STATUS_INACTIVE    SecurityStatusEnum = 2
)

var SecurityStatusEnum_name = map[int32]string{
	0: "SECURITY_STATUS_UNSPECIFIED",
	1: "SECURITY_STATUS_ACTIVE",
	2: "SECURITY_STATUS_INACTIVE",
}

var SecurityStatusEnum_value = map[string]int32{
	"SECURITY_STATUS_UNSPECIFIED": 0,
	"SECURITY_STATUS_ACTIVE":      1,
	"SECURITY_STATUS_INACTIVE":    2,
}

func (x SecurityStatusEnum) String() string {
	return proto.EnumName(SecurityStatusEnum_name, int32(x))
}

func (SecurityStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}

type RestructuringTypeEnum int32

const (
	RestructuringTypeEnum_RESTRUCTURING_TYPE_UNSPECIFIED                RestructuringTypeEnum = 0
	RestructuringTypeEnum_RESTRUCTURING_TYPE_FULL_RESTRUCTURING         RestructuringTypeEnum = 1
	RestructuringTypeEnum_RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING RestructuringTypeEnum = 2
	RestructuringTypeEnum_RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING     RestructuringTypeEnum = 3
	RestructuringTypeEnum_RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED RestructuringTypeEnum = 4
)

var RestructuringTypeEnum_name = map[int32]string{
	0: "RESTRUCTURING_TYPE_UNSPECIFIED",
	1: "RESTRUCTURING_TYPE_FULL_RESTRUCTURING",
	2: "RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING",
	3: "RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING",
	4: "RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED",
}

var RestructuringTypeEnum_value = map[string]int32{
	"RESTRUCTURING_TYPE_UNSPECIFIED":                0,
	"RESTRUCTURING_TYPE_FULL_RESTRUCTURING":         1,
	"RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING": 2,
	"RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING":     3,
	"RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED": 4,
}

func (x RestructuringTypeEnum) String() string {
	return proto.EnumName(RestructuringTypeEnum_name, int32(x))
}

func (RestructuringTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}

type SeniorityEnum int32

const (
	SeniorityEnum_SENIORITY_UNSPECIFIED    SeniorityEnum = 0
	SeniorityEnum_SENIORITY_SENIOR         SeniorityEnum = 1
	SeniorityEnum_SENIORITY_SENIOR_SECURED SeniorityEnum = 2
	SeniorityEnum_SENIORITY_SUBORDINATED   SeniorityEnum = 3
)

var SeniorityEnum_name = map[int32]string{
	0: "SENIORITY_UNSPECIFIED",
	1: "SENIORITY_SENIOR",
	2: "SENIORITY_SENIOR_SECURED",
	3: "SENIORITY_SUBORDINATED",
}

var SeniorityEnum_value = map[string]int32{
	"SENIORITY_UNSPECIFIED":    0,
	"SENIORITY_SENIOR":         1,
	"SENIORITY_SENIOR_SECURED": 2,
	"SENIORITY_SUBORDINATED":   3,
}

func (x SeniorityEnum) String() string {
	return proto.EnumName(SeniorityEnum_name, int32(x))
}

func (SeniorityEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}

type StrikePriceDeterminationMethodEnum int32

const (
	StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_UNSPECIFIED                       StrikePriceDeterminationMethodEnum = 0
	StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_FIXED_STRIKE                      StrikePriceDeterminationMethodEnum = 1
	StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_AT_EXPIRATION          StrikePriceDeterminationMethodEnum = 2
	StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE StrikePriceDeterminationMethodEnum = 3
	StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_OPTIMAL_VALUE       StrikePriceDeterminationMethodEnum = 4
)

var StrikePriceDeterminationMethodEnum_name = map[int32]string{
	0: "STRIKE_PRICE_DETERMINATION_METHOD_UNSPECIFIED",
	1: "STRIKE_PRICE_DETERMINATION_METHOD_FIXED_STRIKE",
	2: "STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_AT_EXPIRATION",
	3: "STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE",
	4: "STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_OPTIMAL_VALUE",
}

var StrikePriceDeterminationMethodEnum_value = map[string]int32{
	"STRIKE_PRICE_DETERMINATION_METHOD_UNSPECIFIED":                       0,
	"STRIKE_PRICE_DETERMINATION_METHOD_FIXED_STRIKE":                      1,
	"STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_AT_EXPIRATION":          2,
	"STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE": 3,
	"STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_OPTIMAL_VALUE":       4,
}

func (x StrikePriceDeterminationMethodEnum) String() string {
	return proto.EnumName(StrikePriceDeterminationMethodEnum_name, int32(x))
}

func (StrikePriceDeterminationMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}

type StrikePriceBoundaryMethodEnum int32

const (
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_UNSPECIFIED           StrikePriceBoundaryMethodEnum = 0
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_EQUAL                 StrikePriceBoundaryMethodEnum = 1
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN          StrikePriceBoundaryMethodEnum = 2
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL StrikePriceBoundaryMethodEnum = 3
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN             StrikePriceBoundaryMethodEnum = 4
	StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL    StrikePriceBoundaryMethodEnum = 5
)

var StrikePriceBoundaryMethodEnum_name = map[int32]string{
	0: "STRIKE_PRICE_BOUNDARY_METHOD_UNSPECIFIED",
	1: "STRIKE_PRICE_BOUNDARY_METHOD_EQUAL",
	2: "STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN",
	3: "STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL",
	4: "STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN",
	5: "STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL",
}

var StrikePriceBoundaryMethodEnum_value = map[string]int32{
	"STRIKE_PRICE_BOUNDARY_METHOD_UNSPECIFIED":           0,
	"STRIKE_PRICE_BOUNDARY_METHOD_EQUAL":                 1,
	"STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN":          2,
	"STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL": 3,
	"STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN":             4,
	"STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL":    5,
}

func (x StrikePriceBoundaryMethodEnum) String() string {
	return proto.EnumName(StrikePriceBoundaryMethodEnum_name, int32(x))
}

func (StrikePriceBoundaryMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}

type UnderlyingPriceDeterminationMethodEnum int32

const (
	UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_UNSPECIFIED       UnderlyingPriceDeterminationMethodEnum = 0
	UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_AVERAGE_VALUE     UnderlyingPriceDeterminationMethodEnum = 1
	UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_OPTIMAL_VALUE     UnderlyingPriceDeterminationMethodEnum = 2
	UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_REGULAR           UnderlyingPriceDeterminationMethodEnum = 3
	UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_SPECIAL_REFERENCE UnderlyingPriceDeterminationMethodEnum = 4
)

var UnderlyingPriceDeterminationMethodEnum_name = map[int32]string{
	0: "UNDERLYING_PRICE_DETERMINATION_METHOD_UNSPECIFIED",
	1: "UNDERLYING_PRICE_DETERMINATION_METHOD_AVERAGE_VALUE",
	2: "UNDERLYING_PRICE_DETERMINATION_METHOD_OPTIMAL_VALUE",
	3: "UNDERLYING_PRICE_DETERMINATION_METHOD_REGULAR",
	4: "UNDERLYING_PRICE_DETERMINATION_METHOD_SPECIAL_REFERENCE",
}

var UnderlyingPriceDeterminationMethodEnum_value = map[string]int32{
	"UNDERLYING_PRICE_DETERMINATION_METHOD_UNSPECIFIED":       0,
	"UNDERLYING_PRICE_DETERMINATION_METHOD_AVERAGE_VALUE":     1,
	"UNDERLYING_PRICE_DETERMINATION_METHOD_OPTIMAL_VALUE":     2,
	"UNDERLYING_PRICE_DETERMINATION_METHOD_REGULAR":           3,
	"UNDERLYING_PRICE_DETERMINATION_METHOD_SPECIAL_REFERENCE": 4,
}

func (x UnderlyingPriceDeterminationMethodEnum) String() string {
	return proto.EnumName(UnderlyingPriceDeterminationMethodEnum_name, int32(x))
}

func (UnderlyingPriceDeterminationMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}

type ContractMultiplierUnitEnum int32

const (
	ContractMultiplierUnitEnum_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED ContractMultiplierUnitEnum = 0
	ContractMultiplierUnitEnum_CONTRACT_MULTIPLIER_UNIT_DAYS        ContractMultiplierUnitEnum = 1
	ContractMultiplierUnitEnum_CONTRACT_MULTIPLIER_UNIT_HOURS       ContractMultiplierUnitEnum = 2
	ContractMultiplierUnitEnum_CONTRACT_MULTIPLIER_UNIT_SHARES      ContractMultiplierUnitEnum = 3
)

var ContractMultiplierUnitEnum_name = map[int32]string{
	0: "CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED",
	1: "CONTRACT_MULTIPLIER_UNIT_DAYS",
	2: "CONTRACT_MULTIPLIER_UNIT_HOURS",
	3: "CONTRACT_MULTIPLIER_UNIT_SHARES",
}

var ContractMultiplierUnitEnum_value = map[string]int32{
	"CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED": 0,
	"CONTRACT_MULTIPLIER_UNIT_DAYS":        1,
	"CONTRACT_MULTIPLIER_UNIT_HOURS":       2,
	"CONTRACT_MULTIPLIER_UNIT_SHARES":      3,
}

func (x ContractMultiplierUnitEnum) String() string {
	return proto.EnumName(ContractMultiplierUnitEnum_name, int32(x))
}

func (ContractMultiplierUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}

type FlowScheduleTypeEnum int32

const (
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_UNSPECIFIED                     FlowScheduleTypeEnum = 0
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH FlowScheduleTypeEnum = 1
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK           FlowScheduleTypeEnum = 2
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK               FlowScheduleTypeEnum = 3
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK           FlowScheduleTypeEnum = 4
	FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK               FlowScheduleTypeEnum = 5
)

var FlowScheduleTypeEnum_name = map[int32]string{
	0: "FLOW_SCHEDULE_TYPE_UNSPECIFIED",
	1: "FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH",
	2: "FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK",
	3: "FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK",
	4: "FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK",
	5: "FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK",
}

var FlowScheduleTypeEnum_value = map[string]int32{
	"FLOW_SCHEDULE_TYPE_UNSPECIFIED":                     0,
	"FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH": 1,
	"FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK":           2,
	"FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK":               3,
	"FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK":           4,
	"FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK":               5,
}

func (x FlowScheduleTypeEnum) String() string {
	return proto.EnumName(FlowScheduleTypeEnum_name, int32(x))
}

func (FlowScheduleTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}

type UnitOfMeasureEnum int32

const (
	UnitOfMeasureEnum_UNIT_OF_MEASURE_UNSPECIFIED        UnitOfMeasureEnum = 0
	UnitOfMeasureEnum_UNIT_OF_MEASURE_BARRELS            UnitOfMeasureEnum = 1
	UnitOfMeasureEnum_UNIT_OF_MEASURE_BILLION_CUBIC_FEET UnitOfMeasureEnum = 2
	UnitOfMeasureEnum_UNIT_OF_MEASURE_BUSHELS            UnitOfMeasureEnum = 3
	UnitOfMeasureEnum_UNIT_OF_MEASURE_GALLONS            UnitOfMeasureEnum = 4
	UnitOfMeasureEnum_UNIT_OF_MEASURE_MEGAWATT_HOURS     UnitOfMeasureEnum = 5
	UnitOfMeasureEnum_UNIT_OF_MEASURE_METRIC_TONS        UnitOfMeasureEnum = 6
	UnitOfMeasureEnum_UNIT_OF_MEASURE_MILLION_BARRELS    UnitOfMeasureEnum = 7
	UnitOfMeasureEnum_UNIT_OF_MEASURE_ONE_MILLION_BTU    UnitOfMeasureEnum = 8
	UnitOfMeasureEnum_UNIT_OF_MEASURE_POUNDS             UnitOfMeasureEnum = 9
	UnitOfMeasureEnum_UNIT_OF_MEASURE_TONS               UnitOfMeasureEnum = 10
	UnitOfMeasureEnum_UNIT_OF_MEASURE_TROY_OUNCES        UnitOfMeasureEnum = 11
	UnitOfMeasureEnum_UNIT_OF_MEASURE_USDOLLARS          UnitOfMeasureEnum = 12
	UnitOfMeasureEnum_UNIT_OF_MEASURE_ALLOWANCES         UnitOfMeasureEnum = 13
)

var UnitOfMeasureEnum_name = map[int32]string{
	0:  "UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "UNIT_OF_MEASURE_BARRELS",
	2:  "UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "UNIT_OF_MEASURE_BUSHELS",
	4:  "UNIT_OF_MEASURE_GALLONS",
	5:  "UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "UNIT_OF_MEASURE_METRIC_TONS",
	7:  "UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "UNIT_OF_MEASURE_POUNDS",
	10: "UNIT_OF_MEASURE_TONS",
	11: "UNIT_OF_MEASURE_TROY_OUNCES",
	12: "UNIT_OF_MEASURE_USDOLLARS",
	13: "UNIT_OF_MEASURE_ALLOWANCES",
}

var UnitOfMeasureEnum_value = map[string]int32{
	"UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"UNIT_OF_MEASURE_BARRELS":            1,
	"UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"UNIT_OF_MEASURE_BUSHELS":            3,
	"UNIT_OF_MEASURE_GALLONS":            4,
	"UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"UNIT_OF_MEASURE_METRIC_TONS":        6,
	"UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"UNIT_OF_MEASURE_POUNDS":             9,
	"UNIT_OF_MEASURE_TONS":               10,
	"UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"UNIT_OF_MEASURE_USDOLLARS":          12,
	"UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x UnitOfMeasureEnum) String() string {
	return proto.EnumName(UnitOfMeasureEnum_name, int32(x))
}

func (UnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}

type PriceUnitOfMeasureEnum int32

const (
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_UNSPECIFIED        PriceUnitOfMeasureEnum = 0
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_BARRELS            PriceUnitOfMeasureEnum = 1
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET PriceUnitOfMeasureEnum = 2
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_BUSHELS            PriceUnitOfMeasureEnum = 3
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_GALLONS            PriceUnitOfMeasureEnum = 4
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS     PriceUnitOfMeasureEnum = 5
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_METRIC_TONS        PriceUnitOfMeasureEnum = 6
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS    PriceUnitOfMeasureEnum = 7
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU    PriceUnitOfMeasureEnum = 8
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_POUNDS             PriceUnitOfMeasureEnum = 9
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_TONS               PriceUnitOfMeasureEnum = 10
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_TROY_OUNCES        PriceUnitOfMeasureEnum = 11
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_USDOLLARS          PriceUnitOfMeasureEnum = 12
	PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_ALLOWANCES         PriceUnitOfMeasureEnum = 13
)

var PriceUnitOfMeasureEnum_name = map[int32]string{
	0:  "PRICE_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "PRICE_UNIT_OF_MEASURE_BARRELS",
	2:  "PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "PRICE_UNIT_OF_MEASURE_BUSHELS",
	4:  "PRICE_UNIT_OF_MEASURE_GALLONS",
	5:  "PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "PRICE_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "PRICE_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "PRICE_UNIT_OF_MEASURE_POUNDS",
	10: "PRICE_UNIT_OF_MEASURE_TONS",
	11: "PRICE_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "PRICE_UNIT_OF_MEASURE_USDOLLARS",
	13: "PRICE_UNIT_OF_MEASURE_ALLOWANCES",
}

var PriceUnitOfMeasureEnum_value = map[string]int32{
	"PRICE_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"PRICE_UNIT_OF_MEASURE_BARRELS":            1,
	"PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"PRICE_UNIT_OF_MEASURE_BUSHELS":            3,
	"PRICE_UNIT_OF_MEASURE_GALLONS":            4,
	"PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"PRICE_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"PRICE_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"PRICE_UNIT_OF_MEASURE_POUNDS":             9,
	"PRICE_UNIT_OF_MEASURE_TONS":               10,
	"PRICE_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"PRICE_UNIT_OF_MEASURE_USDOLLARS":          12,
	"PRICE_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x PriceUnitOfMeasureEnum) String() string {
	return proto.EnumName(PriceUnitOfMeasureEnum_name, int32(x))
}

func (PriceUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}

type SettlMethodEnum int32

const (
	SettlMethodEnum_SETTL_METHOD_UNSPECIFIED                  SettlMethodEnum = 0
	SettlMethodEnum_SETTL_METHOD_CASH_SETTLEMENT_REQUIRED     SettlMethodEnum = 1
	SettlMethodEnum_SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED SettlMethodEnum = 2
)

var SettlMethodEnum_name = map[int32]string{
	0: "SETTL_METHOD_UNSPECIFIED",
	1: "SETTL_METHOD_CASH_SETTLEMENT_REQUIRED",
	2: "SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED",
}

var SettlMethodEnum_value = map[string]int32{
	"SETTL_METHOD_UNSPECIFIED":                  0,
	"SETTL_METHOD_CASH_SETTLEMENT_REQUIRED":     1,
	"SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED": 2,
}

func (x SettlMethodEnum) String() string {
	return proto.EnumName(SettlMethodEnum_name, int32(x))
}

func (SettlMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}

type ExerciseStyleEnum int32

const (
	ExerciseStyleEnum_EXERCISE_STYLE_UNSPECIFIED ExerciseStyleEnum = 0
	ExerciseStyleEnum_EXERCISE_STYLE_AMERICAN    ExerciseStyleEnum = 1
	ExerciseStyleEnum_EXERCISE_STYLE_BERMUDA     ExerciseStyleEnum = 2
	ExerciseStyleEnum_EXERCISE_STYLE_EUROPEAN    ExerciseStyleEnum = 3
)

var ExerciseStyleEnum_name = map[int32]string{
	0: "EXERCISE_STYLE_UNSPECIFIED",
	1: "EXERCISE_STYLE_AMERICAN",
	2: "EXERCISE_STYLE_BERMUDA",
	3: "EXERCISE_STYLE_EUROPEAN",
}

var ExerciseStyleEnum_value = map[string]int32{
	"EXERCISE_STYLE_UNSPECIFIED": 0,
	"EXERCISE_STYLE_AMERICAN":    1,
	"EXERCISE_STYLE_BERMUDA":     2,
	"EXERCISE_STYLE_EUROPEAN":    3,
}

func (x ExerciseStyleEnum) String() string {
	return proto.EnumName(ExerciseStyleEnum_name, int32(x))
}

func (ExerciseStyleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}

type OptPayoutTypeEnum int32

const (
	OptPayoutTypeEnum_OPT_PAYOUT_TYPE_UNSPECIFIED OptPayoutTypeEnum = 0
	OptPayoutTypeEnum_OPT_PAYOUT_TYPE_BINARY      OptPayoutTypeEnum = 1
	OptPayoutTypeEnum_OPT_PAYOUT_TYPE_CAPPED      OptPayoutTypeEnum = 2
	OptPayoutTypeEnum_OPT_PAYOUT_TYPE_VANILLA     OptPayoutTypeEnum = 3
)

var OptPayoutTypeEnum_name = map[int32]string{
	0: "OPT_PAYOUT_TYPE_UNSPECIFIED",
	1: "OPT_PAYOUT_TYPE_BINARY",
	2: "OPT_PAYOUT_TYPE_CAPPED",
	3: "OPT_PAYOUT_TYPE_VANILLA",
}

var OptPayoutTypeEnum_value = map[string]int32{
	"OPT_PAYOUT_TYPE_UNSPECIFIED": 0,
	"OPT_PAYOUT_TYPE_BINARY":      1,
	"OPT_PAYOUT_TYPE_CAPPED":      2,
	"OPT_PAYOUT_TYPE_VANILLA":     3,
}

func (x OptPayoutTypeEnum) String() string {
	return proto.EnumName(OptPayoutTypeEnum_name, int32(x))
}

func (OptPayoutTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}

type PriceQuoteMethodEnum int32

const (
	PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_UNSPECIFIED         PriceQuoteMethodEnum = 0
	PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_INDEX               PriceQuoteMethodEnum = 1
	PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX PriceQuoteMethodEnum = 2
	PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_STANDARD            PriceQuoteMethodEnum = 3
	PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_PERCENT_OF_PAR      PriceQuoteMethodEnum = 4
)

var PriceQuoteMethodEnum_name = map[int32]string{
	0: "PRICE_QUOTE_METHOD_UNSPECIFIED",
	1: "PRICE_QUOTE_METHOD_INDEX",
	2: "PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX",
	3: "PRICE_QUOTE_METHOD_STANDARD",
	4: "PRICE_QUOTE_METHOD_PERCENT_OF_PAR",
}

var PriceQuoteMethodEnum_value = map[string]int32{
	"PRICE_QUOTE_METHOD_UNSPECIFIED":         0,
	"PRICE_QUOTE_METHOD_INDEX":               1,
	"PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX": 2,
	"PRICE_QUOTE_METHOD_STANDARD":            3,
	"PRICE_QUOTE_METHOD_PERCENT_OF_PAR":      4,
}

func (x PriceQuoteMethodEnum) String() string {
	return proto.EnumName(PriceQuoteMethodEnum_name, int32(x))
}

func (PriceQuoteMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{27}
}

type ValuationMethodEnum int32

const (
	ValuationMethodEnum_VALUATION_METHOD_UNSPECIFIED                                    ValuationMethodEnum = 0
	ValuationMethodEnum_VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET                   ValuationMethodEnum = 1
	ValuationMethodEnum_VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT ValuationMethodEnum = 2
	ValuationMethodEnum_VALUATION_METHOD_PREMIUM_STYLE                                  ValuationMethodEnum = 3
	ValuationMethodEnum_VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE ValuationMethodEnum = 4
	ValuationMethodEnum_VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION                    ValuationMethodEnum = 5
)

var ValuationMethodEnum_name = map[int32]string{
	0: "VALUATION_METHOD_UNSPECIFIED",
	1: "VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET",
	2: "VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT",
	3: "VALUATION_METHOD_PREMIUM_STYLE",
	4: "VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE",
	5: "VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION",
}

var ValuationMethodEnum_value = map[string]int32{
	"VALUATION_METHOD_UNSPECIFIED":                                    0,
	"VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET":                   1,
	"VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT": 2,
	"VALUATION_METHOD_PREMIUM_STYLE":                                  3,
	"VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE": 4,
	"VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION":                    5,
}

func (x ValuationMethodEnum) String() string {
	return proto.EnumName(ValuationMethodEnum_name, int32(x))
}

func (ValuationMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{28}
}

type ListMethodEnum int32

const (
	ListMethodEnum_LIST_METHOD_UNSPECIFIED     ListMethodEnum = 0
	ListMethodEnum_LIST_METHOD_PRE_LISTED_ONLY ListMethodEnum = 1
	ListMethodEnum_LIST_METHOD_USER_REQUESTED  ListMethodEnum = 2
)

var ListMethodEnum_name = map[int32]string{
	0: "LIST_METHOD_UNSPECIFIED",
	1: "LIST_METHOD_PRE_LISTED_ONLY",
	2: "LIST_METHOD_USER_REQUESTED",
}

var ListMethodEnum_value = map[string]int32{
	"LIST_METHOD_UNSPECIFIED":     0,
	"LIST_METHOD_PRE_LISTED_ONLY": 1,
	"LIST_METHOD_USER_REQUESTED":  2,
}

func (x ListMethodEnum) String() string {
	return proto.EnumName(ListMethodEnum_name, int32(x))
}

func (ListMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{29}
}

type PutOrCallEnum int32

const (
	PutOrCallEnum_PUT_OR_CALL_UNSPECIFIED PutOrCallEnum = 0
	PutOrCallEnum_PUT_OR_CALL_CALL        PutOrCallEnum = 1
	PutOrCallEnum_PUT_OR_CALL_PUT         PutOrCallEnum = 2
)

var PutOrCallEnum_name = map[int32]string{
	0: "PUT_OR_CALL_UNSPECIFIED",
	1: "PUT_OR_CALL_CALL",
	2: "PUT_OR_CALL_PUT",
}

var PutOrCallEnum_value = map[string]int32{
	"PUT_OR_CALL_UNSPECIFIED": 0,
	"PUT_OR_CALL_CALL":        1,
	"PUT_OR_CALL_PUT":         2,
}

func (x PutOrCallEnum) String() string {
	return proto.EnumName(PutOrCallEnum_name, int32(x))
}

func (PutOrCallEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{30}
}

type TimeUnitEnum int32

const (
	TimeUnitEnum_TIME_UNIT_UNSPECIFIED TimeUnitEnum = 0
	TimeUnitEnum_TIME_UNIT_DAY         TimeUnitEnum = 1
	TimeUnitEnum_TIME_UNIT_HOUR        TimeUnitEnum = 2
	TimeUnitEnum_TIME_UNIT_MINUTE      TimeUnitEnum = 3
	TimeUnitEnum_TIME_UNIT_MONTH       TimeUnitEnum = 4
	TimeUnitEnum_TIME_UNIT_SECOND      TimeUnitEnum = 5
	TimeUnitEnum_TIME_UNIT_WEEK        TimeUnitEnum = 6
	TimeUnitEnum_TIME_UNIT_YEAR        TimeUnitEnum = 7
)

var TimeUnitEnum_name = map[int32]string{
	0: "TIME_UNIT_UNSPECIFIED",
	1: "TIME_UNIT_DAY",
	2: "TIME_UNIT_HOUR",
	3: "TIME_UNIT_MINUTE",
	4: "TIME_UNIT_MONTH",
	5: "TIME_UNIT_SECOND",
	6: "TIME_UNIT_WEEK",
	7: "TIME_UNIT_YEAR",
}

var TimeUnitEnum_value = map[string]int32{
	"TIME_UNIT_UNSPECIFIED": 0,
	"TIME_UNIT_DAY":         1,
	"TIME_UNIT_HOUR":        2,
	"TIME_UNIT_MINUTE":      3,
	"TIME_UNIT_MONTH":       4,
	"TIME_UNIT_SECOND":      5,
	"TIME_UNIT_WEEK":        6,
	"TIME_UNIT_YEAR":        7,
}

func (x TimeUnitEnum) String() string {
	return proto.EnumName(TimeUnitEnum_name, int32(x))
}

func (TimeUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{31}
}

type CPProgramEnum int32

const (
	CPProgramEnum_CP_PROGRAM_UNSPECIFIED CPProgramEnum = 0
	CPProgramEnum_CP_PROGRAM_OTHER       CPProgramEnum = 1
	CPProgramEnum_CP_PROGRAM_PROGRAM3A3  CPProgramEnum = 2
	CPProgramEnum_CP_PROGRAM_PROGRAM42   CPProgramEnum = 3
)

var CPProgramEnum_name = map[int32]string{
	0: "CP_PROGRAM_UNSPECIFIED",
	1: "CP_PROGRAM_OTHER",
	2: "CP_PROGRAM_PROGRAM3A3",
	3: "CP_PROGRAM_PROGRAM42",
}

var CPProgramEnum_value = map[string]int32{
	"CP_PROGRAM_UNSPECIFIED": 0,
	"CP_PROGRAM_OTHER":       1,
	"CP_PROGRAM_PROGRAM3A3":  2,
	"CP_PROGRAM_PROGRAM42":   3,
}

func (x CPProgramEnum) String() string {
	return proto.EnumName(CPProgramEnum_name, int32(x))
}

func (CPProgramEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{32}
}

type DeliveryFormEnum int32

const (
	DeliveryFormEnum_DELIVERY_FORM_UNSPECIFIED DeliveryFormEnum = 0
	DeliveryFormEnum_DELIVERY_FORM_BEARER      DeliveryFormEnum = 1
	DeliveryFormEnum_DELIVERY_FORM_BOOK_ENTRY  DeliveryFormEnum = 2
)

var DeliveryFormEnum_name = map[int32]string{
	0: "DELIVERY_FORM_UNSPECIFIED",
	1: "DELIVERY_FORM_BEARER",
	2: "DELIVERY_FORM_BOOK_ENTRY",
}

var DeliveryFormEnum_value = map[string]int32{
	"DELIVERY_FORM_UNSPECIFIED": 0,
	"DELIVERY_FORM_BEARER":      1,
	"DELIVERY_FORM_BOOK_ENTRY":  2,
}

func (x DeliveryFormEnum) String() string {
	return proto.EnumName(DeliveryFormEnum_name, int32(x))
}

func (DeliveryFormEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{33}
}

type LegSymbolSfxEnum int32

const (
	LegSymbolSfxEnum_LEG_SYMBOL_SFX_UNSPECIFIED                 LegSymbolSfxEnum = 0
	LegSymbolSfxEnum_LEG_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST LegSymbolSfxEnum = 1
	LegSymbolSfxEnum_LEG_SYMBOL_SFX_WHEN_ISSUED                 LegSymbolSfxEnum = 2
)

var LegSymbolSfxEnum_name = map[int32]string{
	0: "LEG_SYMBOL_SFX_UNSPECIFIED",
	1: "LEG_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST",
	2: "LEG_SYMBOL_SFX_WHEN_ISSUED",
}

var LegSymbolSfxEnum_value = map[string]int32{
	"LEG_SYMBOL_SFX_UNSPECIFIED":                 0,
	"LEG_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST": 1,
	"LEG_SYMBOL_SFX_WHEN_ISSUED":                 2,
}

func (x LegSymbolSfxEnum) String() string {
	return proto.EnumName(LegSymbolSfxEnum_name, int32(x))
}

func (LegSymbolSfxEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{34}
}

type LegSecurityIDSourceEnum int32

const (
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_UNSPECIFIED                      LegSecurityIDSourceEnum = 0
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_CUSIP                            LegSecurityIDSourceEnum = 1
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_QUIK                             LegSecurityIDSourceEnum = 2
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_SEDOL                            LegSecurityIDSourceEnum = 3
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_ISIN_NUMBER                      LegSecurityIDSourceEnum = 4
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_RIC_CODE                         LegSecurityIDSourceEnum = 5
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 LegSecurityIDSourceEnum = 6
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                LegSecurityIDSourceEnum = 7
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    LegSecurityIDSourceEnum = 8
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  LegSecurityIDSourceEnum = 9
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_BELGIAN                          LegSecurityIDSourceEnum = 10
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 LegSecurityIDSourceEnum = 11
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_COMMON                           LegSecurityIDSourceEnum = 12
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_DUTCH                            LegSecurityIDSourceEnum = 13
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_SICOVAM                          LegSecurityIDSourceEnum = 14
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_VALOREN                          LegSecurityIDSourceEnum = 15
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_WERTPAPIER                       LegSecurityIDSourceEnum = 16
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_CLEARING_HOUSE                   LegSecurityIDSourceEnum = 17
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          LegSecurityIDSourceEnum = 18
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY LegSecurityIDSourceEnum = 19
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 LegSecurityIDSourceEnum = 20
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_ISDA_FPML_URL                    LegSecurityIDSourceEnum = 21
	LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  LegSecurityIDSourceEnum = 22
)

var LegSecurityIDSourceEnum_name = map[int32]string{
	0:  "LEG_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "LEG_SECURITY_ID_SOURCE_CUSIP",
	2:  "LEG_SECURITY_ID_SOURCE_QUIK",
	3:  "LEG_SECURITY_ID_SOURCE_SEDOL",
	4:  "LEG_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "LEG_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "LEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "LEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "LEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "LEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "LEG_SECURITY_ID_SOURCE_BELGIAN",
	11: "LEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "LEG_SECURITY_ID_SOURCE_COMMON",
	13: "LEG_SECURITY_ID_SOURCE_DUTCH",
	14: "LEG_SECURITY_ID_SOURCE_SICOVAM",
	15: "LEG_SECURITY_ID_SOURCE_VALOREN",
	16: "LEG_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "LEG_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "LEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "LEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "LEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "LEG_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "LEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var LegSecurityIDSourceEnum_value = map[string]int32{
	"LEG_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"LEG_SECURITY_ID_SOURCE_CUSIP":                            1,
	"LEG_SECURITY_ID_SOURCE_QUIK":                             2,
	"LEG_SECURITY_ID_SOURCE_SEDOL":                            3,
	"LEG_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"LEG_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"LEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"LEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"LEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"LEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"LEG_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"LEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"LEG_SECURITY_ID_SOURCE_COMMON":                           12,
	"LEG_SECURITY_ID_SOURCE_DUTCH":                            13,
	"LEG_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"LEG_SECURITY_ID_SOURCE_VALOREN":                          15,
	"LEG_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"LEG_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"LEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"LEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"LEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"LEG_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"LEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x LegSecurityIDSourceEnum) String() string {
	return proto.EnumName(LegSecurityIDSourceEnum_name, int32(x))
}

func (LegSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{35}
}

type LegProductEnum int32

const (
	LegProductEnum_LEG_PRODUCT_UNSPECIFIED LegProductEnum = 0
	LegProductEnum_LEG_PRODUCT_AGENCY      LegProductEnum = 1
	LegProductEnum_LEG_PRODUCT_COMMODITY   LegProductEnum = 2
	LegProductEnum_LEG_PRODUCT_CORPORATE   LegProductEnum = 3
	LegProductEnum_LEG_PRODUCT_CURRENCY    LegProductEnum = 4
	LegProductEnum_LEG_PRODUCT_EQUITY      LegProductEnum = 5
	LegProductEnum_LEG_PRODUCT_GOVERNMENT  LegProductEnum = 6
	LegProductEnum_LEG_PRODUCT_INDEX       LegProductEnum = 7
	LegProductEnum_LEG_PRODUCT_LOAN        LegProductEnum = 8
	LegProductEnum_LEG_PRODUCT_MONEYMARKET LegProductEnum = 9
	LegProductEnum_LEG_PRODUCT_MORTGAGE    LegProductEnum = 10
	LegProductEnum_LEG_PRODUCT_MUNICIPAL   LegProductEnum = 11
	LegProductEnum_LEG_PRODUCT_OTHER       LegProductEnum = 12
	LegProductEnum_LEG_PRODUCT_FINANCING   LegProductEnum = 13
)

var LegProductEnum_name = map[int32]string{
	0:  "LEG_PRODUCT_UNSPECIFIED",
	1:  "LEG_PRODUCT_AGENCY",
	2:  "LEG_PRODUCT_COMMODITY",
	3:  "LEG_PRODUCT_CORPORATE",
	4:  "LEG_PRODUCT_CURRENCY",
	5:  "LEG_PRODUCT_EQUITY",
	6:  "LEG_PRODUCT_GOVERNMENT",
	7:  "LEG_PRODUCT_INDEX",
	8:  "LEG_PRODUCT_LOAN",
	9:  "LEG_PRODUCT_MONEYMARKET",
	10: "LEG_PRODUCT_MORTGAGE",
	11: "LEG_PRODUCT_MUNICIPAL",
	12: "LEG_PRODUCT_OTHER",
	13: "LEG_PRODUCT_FINANCING",
}

var LegProductEnum_value = map[string]int32{
	"LEG_PRODUCT_UNSPECIFIED": 0,
	"LEG_PRODUCT_AGENCY":      1,
	"LEG_PRODUCT_COMMODITY":   2,
	"LEG_PRODUCT_CORPORATE":   3,
	"LEG_PRODUCT_CURRENCY":    4,
	"LEG_PRODUCT_EQUITY":      5,
	"LEG_PRODUCT_GOVERNMENT":  6,
	"LEG_PRODUCT_INDEX":       7,
	"LEG_PRODUCT_LOAN":        8,
	"LEG_PRODUCT_MONEYMARKET": 9,
	"LEG_PRODUCT_MORTGAGE":    10,
	"LEG_PRODUCT_MUNICIPAL":   11,
	"LEG_PRODUCT_OTHER":       12,
	"LEG_PRODUCT_FINANCING":   13,
}

func (x LegProductEnum) String() string {
	return proto.EnumName(LegProductEnum_name, int32(x))
}

func (LegProductEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{36}
}

type LegSecurityTypeEnum int32

const (
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_UNSPECIFIED                                     LegSecurityTypeEnum = 0
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BANKERS_ACCEPTANCE                              LegSecurityTypeEnum = 1
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT                          LegSecurityTypeEnum = 2
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION              LegSecurityTypeEnum = 3
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_COMMERCIAL_PAPER                                LegSecurityTypeEnum = 4
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_COMMON_STOCK                                    LegSecurityTypeEnum = 5
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CORPORATE_BOND                                  LegSecurityTypeEnum = 6
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT                     LegSecurityTypeEnum = 7
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT                       LegSecurityTypeEnum = 8
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FUTURE                                          LegSecurityTypeEnum = 9
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH                      LegSecurityTypeEnum = 10
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY                          LegSecurityTypeEnum = 11
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY                         LegSecurityTypeEnum = 12
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT                      LegSecurityTypeEnum = 13
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MUTUAL_FUND                                     LegSecurityTypeEnum = 14
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_NO_SECURITY_TYPE                                LegSecurityTypeEnum = 15
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OPTION                                          LegSecurityTypeEnum = 16
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PREFERRED_STOCK                                 LegSecurityTypeEnum = 17
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TIME_DEPOSIT                                    LegSecurityTypeEnum = 18
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_TREASURY_BILL_OLD                            LegSecurityTypeEnum = 19
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_WARRANT                                         LegSecurityTypeEnum = 20
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CONVERTIBLE_BOND                                LegSecurityTypeEnum = 21
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_IOETTEMORTGAGE                                  LegSecurityTypeEnum = 22
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_WILDCARD                                        LegSecurityTypeEnum = 23
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_AMENDED                                         LegSecurityTypeEnum = 24
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_ASSET_BACKED_SECURITIES                         LegSecurityTypeEnum = 25
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BANK_NOTES                                      LegSecurityTypeEnum = 26
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BILL_OF_EXCHANGES                               LegSecurityTypeEnum = 27
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BRADY_BOND                                      LegSecurityTypeEnum = 28
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BRIDGE_LOAN                                     LegSecurityTypeEnum = 29
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CALL_LOANS                                      LegSecurityTypeEnum = 30
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION                       LegSecurityTypeEnum = 31
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION                    LegSecurityTypeEnum = 32
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CORP                                            LegSecurityTypeEnum = 33
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_DEBTOR_IN_POSSESSION                            LegSecurityTypeEnum = 34
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_DEFAULTED                                       LegSecurityTypeEnum = 35
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_DEPOSIT_NOTES                                   LegSecurityTypeEnum = 36
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_DUAL_CURRENCY                                   LegSecurityTypeEnum = 37
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EXTENDED_COMM_NOTE                              LegSecurityTypeEnum = 38
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FEDERAL_AGENCY_COUPON                           LegSecurityTypeEnum = 39
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE                    LegSecurityTypeEnum = 40
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS                        LegSecurityTypeEnum = 41
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_INDEXED_LINKED                                  LegSecurityTypeEnum = 42
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE            LegSecurityTypeEnum = 43
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_LETTER_OF_CREDIT                                LegSecurityTypeEnum = 44
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_LIQUIDITY_NOTE                                  LegSecurityTypeEnum = 45
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MANDATORY_TENDER                                LegSecurityTypeEnum = 46
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MATURED                                         LegSecurityTypeEnum = 47
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MEDIUM_TERM_NOTES                               LegSecurityTypeEnum = 48
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES                      LegSecurityTypeEnum = 49
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_MULTILEG_INSTRUMENT                             LegSecurityTypeEnum = 50
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES                        LegSecurityTypeEnum = 51
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OVERNIGHT                                       LegSecurityTypeEnum = 52
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PLAZOS_FIJOS                                    LegSecurityTypeEnum = 53
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE LegSecurityTypeEnum = 54
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE       LegSecurityTypeEnum = 55
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING                          LegSecurityTypeEnum = 56
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PROMISSORY_NOTE                                 LegSecurityTypeEnum = 57
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REPLACED                                        LegSecurityTypeEnum = 58
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_RETIRED                                         LegSecurityTypeEnum = 59
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE                       LegSecurityTypeEnum = 60
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REVENUE_BONDS                                   LegSecurityTypeEnum = 61
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REVOLVER                                        LegSecurityTypeEnum = 62
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REVOLVER_LOAN                                   LegSecurityTypeEnum = 63
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE                            LegSecurityTypeEnum = 64
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SPECIAL_ASSESSMENT                              LegSecurityTypeEnum = 65
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SPECIAL_OBLIGATION                              LegSecurityTypeEnum = 66
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SPECIAL_TAX                                     LegSecurityTypeEnum = 67
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_STRUCTURED_NOTES                                LegSecurityTypeEnum = 68
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SWING_LINE_FACILITY                             LegSecurityTypeEnum = 69
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TAX_ALLOCATION                                  LegSecurityTypeEnum = 70
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TAX_ANTICIPATION_NOTE                           LegSecurityTypeEnum = 71
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER                     LegSecurityTypeEnum = 72
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE                   LegSecurityTypeEnum = 73
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TERM_LOAN                                       LegSecurityTypeEnum = 74
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TO_BE_ANNOUNCED                                 LegSecurityTypeEnum = 75
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES         LegSecurityTypeEnum = 76
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_TREASURY_BOND                                LegSecurityTypeEnum = 77
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_TREASURY_NOTE_OLD                            LegSecurityTypeEnum = 78
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE                       LegSecurityTypeEnum = 79
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_WITHDRAWN                                       LegSecurityTypeEnum = 80
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_YANKEE_CORPORATE_BOND                           LegSecurityTypeEnum = 81
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BUY_SELLBACK                                    LegSecurityTypeEnum = 82
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT                     LegSecurityTypeEnum = 83
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_COMMERCIAL_PAPER                           LegSecurityTypeEnum = 84
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_CORPORATE_BOND                             LegSecurityTypeEnum = 85
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_SOVEREIGNS                                 LegSecurityTypeEnum = 86
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS                      LegSecurityTypeEnum = 87
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FORWARD                                         LegSecurityTypeEnum = 88
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_PFANDBRIEFE                                     LegSecurityTypeEnum = 89
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_REPURCHASE                                      LegSecurityTypeEnum = 90
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SECURITIES_LOAN                                 LegSecurityTypeEnum = 91
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SECURITIES_PLEDGE                               LegSecurityTypeEnum = 92
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS                       LegSecurityTypeEnum = 93
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_TREASURY_BILL                                LegSecurityTypeEnum = 94
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_TREASURY_NOTE                                LegSecurityTypeEnum = 95
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT                   LegSecurityTypeEnum = 96
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OPTIONS_ON_FUTURES                              LegSecurityTypeEnum = 97
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OPTIONS_ON_PHYSICAL                             LegSecurityTypeEnum = 98
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CASH                                            LegSecurityTypeEnum = 99
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_OPTIONS_ON_COMBO                                LegSecurityTypeEnum = 100
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_INTEREST_RATE_SWAP                              LegSecurityTypeEnum = 101
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_BANK_DEPOSITORY_NOTE                            LegSecurityTypeEnum = 102
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CANADIAN_MONEY_MARKETS                          LegSecurityTypeEnum = 103
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS                         LegSecurityTypeEnum = 104
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS                       LegSecurityTypeEnum = 105
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CANADIAN_TREASURY_BILLS                         LegSecurityTypeEnum = 106
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CANADIAN_TREASURY_NOTES                         LegSecurityTypeEnum = 107
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_CREDIT_DEFAULT_SWAP                             LegSecurityTypeEnum = 108
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES              LegSecurityTypeEnum = 109
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE                          LegSecurityTypeEnum = 110
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP                            LegSecurityTypeEnum = 111
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TERM_LIQUIDITY_NOTE                             LegSecurityTypeEnum = 112
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_TREASURY_BILL                                   LegSecurityTypeEnum = 113
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES                LegSecurityTypeEnum = 114
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FX_FORWARD                                      LegSecurityTypeEnum = 115
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FX_SPOT                                         LegSecurityTypeEnum = 116
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_FX_SWAP                                         LegSecurityTypeEnum = 117
	LegSecurityTypeEnum_LEG_SECURITY_TYPE_NON_DELIVERABLE_FORWARD                         LegSecurityTypeEnum = 118
)

var LegSecurityTypeEnum_name = map[int32]string{
	0:   "LEG_SECURITY_TYPE_UNSPECIFIED",
	1:   "LEG_SECURITY_TYPE_BANKERS_ACCEPTANCE",
	2:   "LEG_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT",
	3:   "LEG_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION",
	4:   "LEG_SECURITY_TYPE_COMMERCIAL_PAPER",
	5:   "LEG_SECURITY_TYPE_COMMON_STOCK",
	6:   "LEG_SECURITY_TYPE_CORPORATE_BOND",
	7:   "LEG_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT",
	8:   "LEG_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT",
	9:   "LEG_SECURITY_TYPE_FUTURE",
	10:  "LEG_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH",
	11:  "LEG_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY",
	12:  "LEG_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY",
	13:  "LEG_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT",
	14:  "LEG_SECURITY_TYPE_MUTUAL_FUND",
	15:  "LEG_SECURITY_TYPE_NO_SECURITY_TYPE",
	16:  "LEG_SECURITY_TYPE_OPTION",
	17:  "LEG_SECURITY_TYPE_PREFERRED_STOCK",
	18:  "LEG_SECURITY_TYPE_TIME_DEPOSIT",
	19:  "LEG_SECURITY_TYPE_US_TREASURY_BILL_OLD",
	20:  "LEG_SECURITY_TYPE_WARRANT",
	21:  "LEG_SECURITY_TYPE_CONVERTIBLE_BOND",
	22:  "LEG_SECURITY_TYPE_IOETTEMORTGAGE",
	23:  "LEG_SECURITY_TYPE_WILDCARD",
	24:  "LEG_SECURITY_TYPE_AMENDED",
	25:  "LEG_SECURITY_TYPE_ASSET_BACKED_SECURITIES",
	26:  "LEG_SECURITY_TYPE_BANK_NOTES",
	27:  "LEG_SECURITY_TYPE_BILL_OF_EXCHANGES",
	28:  "LEG_SECURITY_TYPE_BRADY_BOND",
	29:  "LEG_SECURITY_TYPE_BRIDGE_LOAN",
	30:  "LEG_SECURITY_TYPE_CALL_LOANS",
	31:  "LEG_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION",
	32:  "LEG_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION",
	33:  "LEG_SECURITY_TYPE_CORP",
	34:  "LEG_SECURITY_TYPE_DEBTOR_IN_POSSESSION",
	35:  "LEG_SECURITY_TYPE_DEFAULTED",
	36:  "LEG_SECURITY_TYPE_DEPOSIT_NOTES",
	37:  "LEG_SECURITY_TYPE_DUAL_CURRENCY",
	38:  "LEG_SECURITY_TYPE_EXTENDED_COMM_NOTE",
	39:  "LEG_SECURITY_TYPE_FEDERAL_AGENCY_COUPON",
	40:  "LEG_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE",
	41:  "LEG_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS",
	42:  "LEG_SECURITY_TYPE_INDEXED_LINKED",
	43:  "LEG_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE",
	44:  "LEG_SECURITY_TYPE_LETTER_OF_CREDIT",
	45:  "LEG_SECURITY_TYPE_LIQUIDITY_NOTE",
	46:  "LEG_SECURITY_TYPE_MANDATORY_TENDER",
	47:  "LEG_SECURITY_TYPE_MATURED",
	48:  "LEG_SECURITY_TYPE_MEDIUM_TERM_NOTES",
	49:  "LEG_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES",
	50:  "LEG_SECURITY_TYPE_MULTILEG_INSTRUMENT",
	51:  "LEG_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES",
	52:  "LEG_SECURITY_TYPE_OVERNIGHT",
	53:  "LEG_SECURITY_TYPE_PLAZOS_FIJOS",
	54:  "LEG_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE",
	55:  "LEG_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE",
	56:  "LEG_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING",
	57:  "LEG_SECURITY_TYPE_PROMISSORY_NOTE",
	58:  "LEG_SECURITY_TYPE_REPLACED",
	59:  "LEG_SECURITY_TYPE_RETIRED",
	60:  "LEG_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE",
	61:  "LEG_SECURITY_TYPE_REVENUE_BONDS",
	62:  "LEG_SECURITY_TYPE_REVOLVER",
	63:  "LEG_SECURITY_TYPE_REVOLVER_LOAN",
	64:  "LEG_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE",
	65:  "LEG_SECURITY_TYPE_SPECIAL_ASSESSMENT",
	66:  "LEG_SECURITY_TYPE_SPECIAL_OBLIGATION",
	67:  "LEG_SECURITY_TYPE_SPECIAL_TAX",
	68:  "LEG_SECURITY_TYPE_STRUCTURED_NOTES",
	69:  "LEG_SECURITY_TYPE_SWING_LINE_FACILITY",
	70:  "LEG_SECURITY_TYPE_TAX_ALLOCATION",
	71:  "LEG_SECURITY_TYPE_TAX_ANTICIPATION_NOTE",
	72:  "LEG_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER",
	73:  "LEG_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE",
	74:  "LEG_SECURITY_TYPE_TERM_LOAN",
	75:  "LEG_SECURITY_TYPE_TO_BE_ANNOUNCED",
	76:  "LEG_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES",
	77:  "LEG_SECURITY_TYPE_US_TREASURY_BOND",
	78:  "LEG_SECURITY_TYPE_US_TREASURY_NOTE_OLD",
	79:  "LEG_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE",
	80:  "LEG_SECURITY_TYPE_WITHDRAWN",
	81:  "LEG_SECURITY_TYPE_YANKEE_CORPORATE_BOND",
	82:  "LEG_SECURITY_TYPE_BUY_SELLBACK",
	83:  "LEG_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT",
	84:  "LEG_SECURITY_TYPE_EURO_COMMERCIAL_PAPER",
	85:  "LEG_SECURITY_TYPE_EURO_CORPORATE_BOND",
	86:  "LEG_SECURITY_TYPE_EURO_SOVEREIGNS",
	87:  "LEG_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS",
	88:  "LEG_SECURITY_TYPE_FORWARD",
	89:  "LEG_SECURITY_TYPE_PFANDBRIEFE",
	90:  "LEG_SECURITY_TYPE_REPURCHASE",
	91:  "LEG_SECURITY_TYPE_SECURITIES_LOAN",
	92:  "LEG_SECURITY_TYPE_SECURITIES_PLEDGE",
	93:  "LEG_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS",
	94:  "LEG_SECURITY_TYPE_US_TREASURY_BILL",
	95:  "LEG_SECURITY_TYPE_US_TREASURY_NOTE",
	96:  "LEG_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT",
	97:  "LEG_SECURITY_TYPE_OPTIONS_ON_FUTURES",
	98:  "LEG_SECURITY_TYPE_OPTIONS_ON_PHYSICAL",
	99:  "LEG_SECURITY_TYPE_CASH",
	100: "LEG_SECURITY_TYPE_OPTIONS_ON_COMBO",
	101: "LEG_SECURITY_TYPE_INTEREST_RATE_SWAP",
	102: "LEG_SECURITY_TYPE_BANK_DEPOSITORY_NOTE",
	103: "LEG_SECURITY_TYPE_CANADIAN_MONEY_MARKETS",
	104: "LEG_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS",
	105: "LEG_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS",
	106: "LEG_SECURITY_TYPE_CANADIAN_TREASURY_BILLS",
	107: "LEG_SECURITY_TYPE_CANADIAN_TREASURY_NOTES",
	108: "LEG_SECURITY_TYPE_CREDIT_DEFAULT_SWAP",
	109: "LEG_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES",
	110: "LEG_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE",
	111: "LEG_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP",
	112: "LEG_SECURITY_TYPE_TERM_LIQUIDITY_NOTE",
	113: "LEG_SECURITY_TYPE_TREASURY_BILL",
	114: "LEG_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES",
	115: "LEG_SECURITY_TYPE_FX_FORWARD",
	116: "LEG_SECURITY_TYPE_FX_SPOT",
	117: "LEG_SECURITY_TYPE_FX_SWAP",
	118: "LEG_SECURITY_TYPE_NON_DELIVERABLE_FORWARD",
}

var LegSecurityTypeEnum_value = map[string]int32{
	"LEG_SECURITY_TYPE_UNSPECIFIED":                                     0,
	"LEG_SECURITY_TYPE_BANKERS_ACCEPTANCE":                              1,
	"LEG_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT":                          2,
	"LEG_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION":              3,
	"LEG_SECURITY_TYPE_COMMERCIAL_PAPER":                                4,
	"LEG_SECURITY_TYPE_COMMON_STOCK":                                    5,
	"LEG_SECURITY_TYPE_CORPORATE_BOND":                                  6,
	"LEG_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT":                     7,
	"LEG_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT":                       8,
	"LEG_SECURITY_TYPE_FUTURE":                                          9,
	"LEG_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH":                      10,
	"LEG_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY":                          11,
	"LEG_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY":                         12,
	"LEG_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT":                      13,
	"LEG_SECURITY_TYPE_MUTUAL_FUND":                                     14,
	"LEG_SECURITY_TYPE_NO_SECURITY_TYPE":                                15,
	"LEG_SECURITY_TYPE_OPTION":                                          16,
	"LEG_SECURITY_TYPE_PREFERRED_STOCK":                                 17,
	"LEG_SECURITY_TYPE_TIME_DEPOSIT":                                    18,
	"LEG_SECURITY_TYPE_US_TREASURY_BILL_OLD":                            19,
	"LEG_SECURITY_TYPE_WARRANT":                                         20,
	"LEG_SECURITY_TYPE_CONVERTIBLE_BOND":                                21,
	"LEG_SECURITY_TYPE_IOETTEMORTGAGE":                                  22,
	"LEG_SECURITY_TYPE_WILDCARD":                                        23,
	"LEG_SECURITY_TYPE_AMENDED":                                         24,
	"LEG_SECURITY_TYPE_ASSET_BACKED_SECURITIES":                         25,
	"LEG_SECURITY_TYPE_BANK_NOTES":                                      26,
	"LEG_SECURITY_TYPE_BILL_OF_EXCHANGES":                               27,
	"LEG_SECURITY_TYPE_BRADY_BOND":                                      28,
	"LEG_SECURITY_TYPE_BRIDGE_LOAN":                                     29,
	"LEG_SECURITY_TYPE_CALL_LOANS":                                      30,
	"LEG_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION":                       31,
	"LEG_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION":                    32,
	"LEG_SECURITY_TYPE_CORP":                                            33,
	"LEG_SECURITY_TYPE_DEBTOR_IN_POSSESSION":                            34,
	"LEG_SECURITY_TYPE_DEFAULTED":                                       35,
	"LEG_SECURITY_TYPE_DEPOSIT_NOTES":                                   36,
	"LEG_SECURITY_TYPE_DUAL_CURRENCY":                                   37,
	"LEG_SECURITY_TYPE_EXTENDED_COMM_NOTE":                              38,
	"LEG_SECURITY_TYPE_FEDERAL_AGENCY_COUPON":                           39,
	"LEG_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE":                    40,
	"LEG_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS":                        41,
	"LEG_SECURITY_TYPE_INDEXED_LINKED":                                  42,
	"LEG_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE":            43,
	"LEG_SECURITY_TYPE_LETTER_OF_CREDIT":                                44,
	"LEG_SECURITY_TYPE_LIQUIDITY_NOTE":                                  45,
	"LEG_SECURITY_TYPE_MANDATORY_TENDER":                                46,
	"LEG_SECURITY_TYPE_MATURED":                                         47,
	"LEG_SECURITY_TYPE_MEDIUM_TERM_NOTES":                               48,
	"LEG_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES":                      49,
	"LEG_SECURITY_TYPE_MULTILEG_INSTRUMENT":                             50,
	"LEG_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES":                        51,
	"LEG_SECURITY_TYPE_OVERNIGHT":                                       52,
	"LEG_SECURITY_TYPE_PLAZOS_FIJOS":                                    53,
	"LEG_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE": 54,
	"LEG_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE":       55,
	"LEG_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING":                          56,
	"LEG_SECURITY_TYPE_PROMISSORY_NOTE":                                 57,
	"LEG_SECURITY_TYPE_REPLACED":                                        58,
	"LEG_SECURITY_TYPE_RETIRED":                                         59,
	"LEG_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE":                       60,
	"LEG_SECURITY_TYPE_REVENUE_BONDS":                                   61,
	"LEG_SECURITY_TYPE_REVOLVER":                                        62,
	"LEG_SECURITY_TYPE_REVOLVER_LOAN":                                   63,
	"LEG_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE":                            64,
	"LEG_SECURITY_TYPE_SPECIAL_ASSESSMENT":                              65,
	"LEG_SECURITY_TYPE_SPECIAL_OBLIGATION":                              66,
	"LEG_SECURITY_TYPE_SPECIAL_TAX":                                     67,
	"LEG_SECURITY_TYPE_STRUCTURED_NOTES":                                68,
	"LEG_SECURITY_TYPE_SWING_LINE_FACILITY":                             69,
	"LEG_SECURITY_TYPE_TAX_ALLOCATION":                                  70,
	"LEG_SECURITY_TYPE_TAX_ANTICIPATION_NOTE":                           71,
	"LEG_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER":                     72,
	"LEG_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE":                   73,
	"LEG_SECURITY_TYPE_TERM_LOAN":                                       74,
	"LEG_SECURITY_TYPE_TO_BE_ANNOUNCED":                                 75,
	"LEG_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES":         76,
	"LEG_SECURITY_TYPE_US_TREASURY_BOND":                                77,
	"LEG_SECURITY_TYPE_US_TREASURY_NOTE_OLD":                            78,
	"LEG_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE":                       79,
	"LEG_SECURITY_TYPE_WITHDRAWN":                                       80,
	"LEG_SECURITY_TYPE_YANKEE_CORPORATE_BOND":                           81,
	"LEG_SECURITY_TYPE_BUY_SELLBACK":                                    82,
	"LEG_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT":                     83,
	"LEG_SECURITY_TYPE_EURO_COMMERCIAL_PAPER":                           84,
	"LEG_SECURITY_TYPE_EURO_CORPORATE_BOND":                             85,
	"LEG_SECURITY_TYPE_EURO_SOVEREIGNS":                                 86,
	"LEG_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS":                      87,
	"LEG_SECURITY_TYPE_FORWARD":                                         88,
	"LEG_SECURITY_TYPE_PFANDBRIEFE":                                     89,
	"LEG_SECURITY_TYPE_REPURCHASE":                                      90,
	"LEG_SECURITY_TYPE_SECURITIES_LOAN":                                 91,
	"LEG_SECURITY_TYPE_SECURITIES_PLEDGE":                               92,
	"LEG_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS":                       93,
	"LEG_SECURITY_TYPE_US_TREASURY_BILL":                                94,
	"LEG_SECURITY_TYPE_US_TREASURY_NOTE":                                95,
	"LEG_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT":                   96,
	"LEG_SECURITY_TYPE_OPTIONS_ON_FUTURES":                              97,
	"LEG_SECURITY_TYPE_OPTIONS_ON_PHYSICAL":                             98,
	"LEG_SECURITY_TYPE_CASH":                                            99,
	"LEG_SECURITY_TYPE_OPTIONS_ON_COMBO":                                100,
	"LEG_SECURITY_TYPE_INTEREST_RATE_SWAP":                              101,
	"LEG_SECURITY_TYPE_BANK_DEPOSITORY_NOTE":                            102,
	"LEG_SECURITY_TYPE_CANADIAN_MONEY_MARKETS":                          103,
	"LEG_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS":                         104,
	"LEG_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS":                       105,
	"LEG_SECURITY_TYPE_CANADIAN_TREASURY_BILLS":                         106,
	"LEG_SECURITY_TYPE_CANADIAN_TREASURY_NOTES":                         107,
	"LEG_SECURITY_TYPE_CREDIT_DEFAULT_SWAP":                             108,
	"LEG_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES":              109,
	"LEG_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE":                          110,
	"LEG_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP":                            111,
	"LEG_SECURITY_TYPE_TERM_LIQUIDITY_NOTE":                             112,
	"LEG_SECURITY_TYPE_TREASURY_BILL":                                   113,
	"LEG_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES":                114,
	"LEG_SECURITY_TYPE_FX_FORWARD":                                      115,
	"LEG_SECURITY_TYPE_FX_SPOT":                                         116,
	"LEG_SECURITY_TYPE_FX_SWAP":                                         117,
	"LEG_SECURITY_TYPE_NON_DELIVERABLE_FORWARD":                         118,
}

func (x LegSecurityTypeEnum) String() string {
	return proto.EnumName(LegSecurityTypeEnum_name, int32(x))
}

func (LegSecurityTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{37}
}

type LegContractMultiplierUnitEnum int32

const (
	LegContractMultiplierUnitEnum_LEG_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED LegContractMultiplierUnitEnum = 0
	LegContractMultiplierUnitEnum_LEG_CONTRACT_MULTIPLIER_UNIT_DAYS        LegContractMultiplierUnitEnum = 1
	LegContractMultiplierUnitEnum_LEG_CONTRACT_MULTIPLIER_UNIT_HOURS       LegContractMultiplierUnitEnum = 2
	LegContractMultiplierUnitEnum_LEG_CONTRACT_MULTIPLIER_UNIT_SHARES      LegContractMultiplierUnitEnum = 3
)

var LegContractMultiplierUnitEnum_name = map[int32]string{
	0: "LEG_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED",
	1: "LEG_CONTRACT_MULTIPLIER_UNIT_DAYS",
	2: "LEG_CONTRACT_MULTIPLIER_UNIT_HOURS",
	3: "LEG_CONTRACT_MULTIPLIER_UNIT_SHARES",
}

var LegContractMultiplierUnitEnum_value = map[string]int32{
	"LEG_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED": 0,
	"LEG_CONTRACT_MULTIPLIER_UNIT_DAYS":        1,
	"LEG_CONTRACT_MULTIPLIER_UNIT_HOURS":       2,
	"LEG_CONTRACT_MULTIPLIER_UNIT_SHARES":      3,
}

func (x LegContractMultiplierUnitEnum) String() string {
	return proto.EnumName(LegContractMultiplierUnitEnum_name, int32(x))
}

func (LegContractMultiplierUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{38}
}

type LegFlowScheduleTypeEnum int32

const (
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_UNSPECIFIED                     LegFlowScheduleTypeEnum = 0
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH LegFlowScheduleTypeEnum = 1
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK           LegFlowScheduleTypeEnum = 2
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK               LegFlowScheduleTypeEnum = 3
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK           LegFlowScheduleTypeEnum = 4
	LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK               LegFlowScheduleTypeEnum = 5
)

var LegFlowScheduleTypeEnum_name = map[int32]string{
	0: "LEG_FLOW_SCHEDULE_TYPE_UNSPECIFIED",
	1: "LEG_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH",
	2: "LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK",
	3: "LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK",
	4: "LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK",
	5: "LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK",
}

var LegFlowScheduleTypeEnum_value = map[string]int32{
	"LEG_FLOW_SCHEDULE_TYPE_UNSPECIFIED":                     0,
	"LEG_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH": 1,
	"LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK":           2,
	"LEG_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK":               3,
	"LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK":           4,
	"LEG_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK":               5,
}

func (x LegFlowScheduleTypeEnum) String() string {
	return proto.EnumName(LegFlowScheduleTypeEnum_name, int32(x))
}

func (LegFlowScheduleTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{39}
}

type LegUnitOfMeasureEnum int32

const (
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_UNSPECIFIED        LegUnitOfMeasureEnum = 0
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_BARRELS            LegUnitOfMeasureEnum = 1
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_BILLION_CUBIC_FEET LegUnitOfMeasureEnum = 2
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_BUSHELS            LegUnitOfMeasureEnum = 3
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_GALLONS            LegUnitOfMeasureEnum = 4
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_MEGAWATT_HOURS     LegUnitOfMeasureEnum = 5
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_METRIC_TONS        LegUnitOfMeasureEnum = 6
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_MILLION_BARRELS    LegUnitOfMeasureEnum = 7
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_ONE_MILLION_BTU    LegUnitOfMeasureEnum = 8
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_POUNDS             LegUnitOfMeasureEnum = 9
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_TONS               LegUnitOfMeasureEnum = 10
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_TROY_OUNCES        LegUnitOfMeasureEnum = 11
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_USDOLLARS          LegUnitOfMeasureEnum = 12
	LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_ALLOWANCES         LegUnitOfMeasureEnum = 13
)

var LegUnitOfMeasureEnum_name = map[int32]string{
	0:  "LEG_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "LEG_UNIT_OF_MEASURE_BARRELS",
	2:  "LEG_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "LEG_UNIT_OF_MEASURE_BUSHELS",
	4:  "LEG_UNIT_OF_MEASURE_GALLONS",
	5:  "LEG_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "LEG_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "LEG_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "LEG_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "LEG_UNIT_OF_MEASURE_POUNDS",
	10: "LEG_UNIT_OF_MEASURE_TONS",
	11: "LEG_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "LEG_UNIT_OF_MEASURE_USDOLLARS",
	13: "LEG_UNIT_OF_MEASURE_ALLOWANCES",
}

var LegUnitOfMeasureEnum_value = map[string]int32{
	"LEG_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"LEG_UNIT_OF_MEASURE_BARRELS":            1,
	"LEG_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"LEG_UNIT_OF_MEASURE_BUSHELS":            3,
	"LEG_UNIT_OF_MEASURE_GALLONS":            4,
	"LEG_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"LEG_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"LEG_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"LEG_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"LEG_UNIT_OF_MEASURE_POUNDS":             9,
	"LEG_UNIT_OF_MEASURE_TONS":               10,
	"LEG_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"LEG_UNIT_OF_MEASURE_USDOLLARS":          12,
	"LEG_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x LegUnitOfMeasureEnum) String() string {
	return proto.EnumName(LegUnitOfMeasureEnum_name, int32(x))
}

func (LegUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{40}
}

type LegPriceUnitOfMeasureEnum int32

const (
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_UNSPECIFIED        LegPriceUnitOfMeasureEnum = 0
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_BARRELS            LegPriceUnitOfMeasureEnum = 1
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET LegPriceUnitOfMeasureEnum = 2
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_BUSHELS            LegPriceUnitOfMeasureEnum = 3
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_GALLONS            LegPriceUnitOfMeasureEnum = 4
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS     LegPriceUnitOfMeasureEnum = 5
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_METRIC_TONS        LegPriceUnitOfMeasureEnum = 6
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS    LegPriceUnitOfMeasureEnum = 7
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU    LegPriceUnitOfMeasureEnum = 8
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_POUNDS             LegPriceUnitOfMeasureEnum = 9
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_TONS               LegPriceUnitOfMeasureEnum = 10
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_TROY_OUNCES        LegPriceUnitOfMeasureEnum = 11
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_USDOLLARS          LegPriceUnitOfMeasureEnum = 12
	LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_ALLOWANCES         LegPriceUnitOfMeasureEnum = 13
)

var LegPriceUnitOfMeasureEnum_name = map[int32]string{
	0:  "LEG_PRICE_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "LEG_PRICE_UNIT_OF_MEASURE_BARRELS",
	2:  "LEG_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "LEG_PRICE_UNIT_OF_MEASURE_BUSHELS",
	4:  "LEG_PRICE_UNIT_OF_MEASURE_GALLONS",
	5:  "LEG_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "LEG_PRICE_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "LEG_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "LEG_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "LEG_PRICE_UNIT_OF_MEASURE_POUNDS",
	10: "LEG_PRICE_UNIT_OF_MEASURE_TONS",
	11: "LEG_PRICE_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "LEG_PRICE_UNIT_OF_MEASURE_USDOLLARS",
	13: "LEG_PRICE_UNIT_OF_MEASURE_ALLOWANCES",
}

var LegPriceUnitOfMeasureEnum_value = map[string]int32{
	"LEG_PRICE_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"LEG_PRICE_UNIT_OF_MEASURE_BARRELS":            1,
	"LEG_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"LEG_PRICE_UNIT_OF_MEASURE_BUSHELS":            3,
	"LEG_PRICE_UNIT_OF_MEASURE_GALLONS":            4,
	"LEG_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"LEG_PRICE_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"LEG_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"LEG_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"LEG_PRICE_UNIT_OF_MEASURE_POUNDS":             9,
	"LEG_PRICE_UNIT_OF_MEASURE_TONS":               10,
	"LEG_PRICE_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"LEG_PRICE_UNIT_OF_MEASURE_USDOLLARS":          12,
	"LEG_PRICE_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x LegPriceUnitOfMeasureEnum) String() string {
	return proto.EnumName(LegPriceUnitOfMeasureEnum_name, int32(x))
}

func (LegPriceUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{41}
}

type LegTimeUnitEnum int32

const (
	LegTimeUnitEnum_LEG_TIME_UNIT_UNSPECIFIED LegTimeUnitEnum = 0
	LegTimeUnitEnum_LEG_TIME_UNIT_DAY         LegTimeUnitEnum = 1
	LegTimeUnitEnum_LEG_TIME_UNIT_HOUR        LegTimeUnitEnum = 2
	LegTimeUnitEnum_LEG_TIME_UNIT_MINUTE      LegTimeUnitEnum = 3
	LegTimeUnitEnum_LEG_TIME_UNIT_MONTH       LegTimeUnitEnum = 4
	LegTimeUnitEnum_LEG_TIME_UNIT_SECOND      LegTimeUnitEnum = 5
	LegTimeUnitEnum_LEG_TIME_UNIT_WEEK        LegTimeUnitEnum = 6
	LegTimeUnitEnum_LEG_TIME_UNIT_YEAR        LegTimeUnitEnum = 7
)

var LegTimeUnitEnum_name = map[int32]string{
	0: "LEG_TIME_UNIT_UNSPECIFIED",
	1: "LEG_TIME_UNIT_DAY",
	2: "LEG_TIME_UNIT_HOUR",
	3: "LEG_TIME_UNIT_MINUTE",
	4: "LEG_TIME_UNIT_MONTH",
	5: "LEG_TIME_UNIT_SECOND",
	6: "LEG_TIME_UNIT_WEEK",
	7: "LEG_TIME_UNIT_YEAR",
}

var LegTimeUnitEnum_value = map[string]int32{
	"LEG_TIME_UNIT_UNSPECIFIED": 0,
	"LEG_TIME_UNIT_DAY":         1,
	"LEG_TIME_UNIT_HOUR":        2,
	"LEG_TIME_UNIT_MINUTE":      3,
	"LEG_TIME_UNIT_MONTH":       4,
	"LEG_TIME_UNIT_SECOND":      5,
	"LEG_TIME_UNIT_WEEK":        6,
	"LEG_TIME_UNIT_YEAR":        7,
}

func (x LegTimeUnitEnum) String() string {
	return proto.EnumName(LegTimeUnitEnum_name, int32(x))
}

func (LegTimeUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{42}
}

type LegExerciseStyleEnum int32

const (
	LegExerciseStyleEnum_LEG_EXERCISE_STYLE_UNSPECIFIED LegExerciseStyleEnum = 0
	LegExerciseStyleEnum_LEG_EXERCISE_STYLE_AMERICAN    LegExerciseStyleEnum = 1
	LegExerciseStyleEnum_LEG_EXERCISE_STYLE_BERMUDA     LegExerciseStyleEnum = 2
	LegExerciseStyleEnum_LEG_EXERCISE_STYLE_EUROPEAN    LegExerciseStyleEnum = 3
)

var LegExerciseStyleEnum_name = map[int32]string{
	0: "LEG_EXERCISE_STYLE_UNSPECIFIED",
	1: "LEG_EXERCISE_STYLE_AMERICAN",
	2: "LEG_EXERCISE_STYLE_BERMUDA",
	3: "LEG_EXERCISE_STYLE_EUROPEAN",
}

var LegExerciseStyleEnum_value = map[string]int32{
	"LEG_EXERCISE_STYLE_UNSPECIFIED": 0,
	"LEG_EXERCISE_STYLE_AMERICAN":    1,
	"LEG_EXERCISE_STYLE_BERMUDA":     2,
	"LEG_EXERCISE_STYLE_EUROPEAN":    3,
}

func (x LegExerciseStyleEnum) String() string {
	return proto.EnumName(LegExerciseStyleEnum_name, int32(x))
}

func (LegExerciseStyleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{43}
}

type LegSideEnum int32

const (
	LegSideEnum_LEG_SIDE_UNSPECIFIED        LegSideEnum = 0
	LegSideEnum_LEG_SIDE_BUY                LegSideEnum = 1
	LegSideEnum_LEG_SIDE_BUY_MINUS          LegSideEnum = 2
	LegSideEnum_LEG_SIDE_SELL               LegSideEnum = 3
	LegSideEnum_LEG_SIDE_SELL_PLUS          LegSideEnum = 4
	LegSideEnum_LEG_SIDE_SELL_SHORT         LegSideEnum = 5
	LegSideEnum_LEG_SIDE_SELL_SHORT_EXEMPT  LegSideEnum = 6
	LegSideEnum_LEG_SIDE_CROSS              LegSideEnum = 7
	LegSideEnum_LEG_SIDE_UNDISCLOSED        LegSideEnum = 8
	LegSideEnum_LEG_SIDE_CROSS_SHORT        LegSideEnum = 9
	LegSideEnum_LEG_SIDE_AS_DEFINED         LegSideEnum = 10
	LegSideEnum_LEG_SIDE_CROSS_SHORT_EXEMPT LegSideEnum = 11
	LegSideEnum_LEG_SIDE_OPPOSITE           LegSideEnum = 12
	LegSideEnum_LEG_SIDE_BORROW             LegSideEnum = 13
	LegSideEnum_LEG_SIDE_LEND               LegSideEnum = 14
	LegSideEnum_LEG_SIDE_REDEEM             LegSideEnum = 15
	LegSideEnum_LEG_SIDE_SUBSCRIBE          LegSideEnum = 16
)

var LegSideEnum_name = map[int32]string{
	0:  "LEG_SIDE_UNSPECIFIED",
	1:  "LEG_SIDE_BUY",
	2:  "LEG_SIDE_BUY_MINUS",
	3:  "LEG_SIDE_SELL",
	4:  "LEG_SIDE_SELL_PLUS",
	5:  "LEG_SIDE_SELL_SHORT",
	6:  "LEG_SIDE_SELL_SHORT_EXEMPT",
	7:  "LEG_SIDE_CROSS",
	8:  "LEG_SIDE_UNDISCLOSED",
	9:  "LEG_SIDE_CROSS_SHORT",
	10: "LEG_SIDE_AS_DEFINED",
	11: "LEG_SIDE_CROSS_SHORT_EXEMPT",
	12: "LEG_SIDE_OPPOSITE",
	13: "LEG_SIDE_BORROW",
	14: "LEG_SIDE_LEND",
	15: "LEG_SIDE_REDEEM",
	16: "LEG_SIDE_SUBSCRIBE",
}

var LegSideEnum_value = map[string]int32{
	"LEG_SIDE_UNSPECIFIED":        0,
	"LEG_SIDE_BUY":                1,
	"LEG_SIDE_BUY_MINUS":          2,
	"LEG_SIDE_SELL":               3,
	"LEG_SIDE_SELL_PLUS":          4,
	"LEG_SIDE_SELL_SHORT":         5,
	"LEG_SIDE_SELL_SHORT_EXEMPT":  6,
	"LEG_SIDE_CROSS":              7,
	"LEG_SIDE_UNDISCLOSED":        8,
	"LEG_SIDE_CROSS_SHORT":        9,
	"LEG_SIDE_AS_DEFINED":         10,
	"LEG_SIDE_CROSS_SHORT_EXEMPT": 11,
	"LEG_SIDE_OPPOSITE":           12,
	"LEG_SIDE_BORROW":             13,
	"LEG_SIDE_LEND":               14,
	"LEG_SIDE_REDEEM":             15,
	"LEG_SIDE_SUBSCRIBE":          16,
}

func (x LegSideEnum) String() string {
	return proto.EnumName(LegSideEnum_name, int32(x))
}

func (LegSideEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{44}
}

type LegBenchmarkCurveNameEnum int32

const (
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_UNSPECIFIED LegBenchmarkCurveNameEnum = 0
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_EURIBOR     LegBenchmarkCurveNameEnum = 1
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_FUTURE_SWAP LegBenchmarkCurveNameEnum = 2
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_LIBID       LegBenchmarkCurveNameEnum = 3
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_LIBOR       LegBenchmarkCurveNameEnum = 4
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_MUNI_AAA    LegBenchmarkCurveNameEnum = 5
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_OTHER       LegBenchmarkCurveNameEnum = 6
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_PFANDBRIEFE LegBenchmarkCurveNameEnum = 7
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_SWAP        LegBenchmarkCurveNameEnum = 8
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_TREASURY    LegBenchmarkCurveNameEnum = 9
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_EONIA       LegBenchmarkCurveNameEnum = 10
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_EUREPO      LegBenchmarkCurveNameEnum = 11
	LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_SONIA       LegBenchmarkCurveNameEnum = 12
)

var LegBenchmarkCurveNameEnum_name = map[int32]string{
	0:  "LEG_BENCHMARK_CURVE_NAME_UNSPECIFIED",
	1:  "LEG_BENCHMARK_CURVE_NAME_EURIBOR",
	2:  "LEG_BENCHMARK_CURVE_NAME_FUTURE_SWAP",
	3:  "LEG_BENCHMARK_CURVE_NAME_LIBID",
	4:  "LEG_BENCHMARK_CURVE_NAME_LIBOR",
	5:  "LEG_BENCHMARK_CURVE_NAME_MUNI_AAA",
	6:  "LEG_BENCHMARK_CURVE_NAME_OTHER",
	7:  "LEG_BENCHMARK_CURVE_NAME_PFANDBRIEFE",
	8:  "LEG_BENCHMARK_CURVE_NAME_SWAP",
	9:  "LEG_BENCHMARK_CURVE_NAME_TREASURY",
	10: "LEG_BENCHMARK_CURVE_NAME_EONIA",
	11: "LEG_BENCHMARK_CURVE_NAME_EUREPO",
	12: "LEG_BENCHMARK_CURVE_NAME_SONIA",
}

var LegBenchmarkCurveNameEnum_value = map[string]int32{
	"LEG_BENCHMARK_CURVE_NAME_UNSPECIFIED": 0,
	"LEG_BENCHMARK_CURVE_NAME_EURIBOR":     1,
	"LEG_BENCHMARK_CURVE_NAME_FUTURE_SWAP": 2,
	"LEG_BENCHMARK_CURVE_NAME_LIBID":       3,
	"LEG_BENCHMARK_CURVE_NAME_LIBOR":       4,
	"LEG_BENCHMARK_CURVE_NAME_MUNI_AAA":    5,
	"LEG_BENCHMARK_CURVE_NAME_OTHER":       6,
	"LEG_BENCHMARK_CURVE_NAME_PFANDBRIEFE": 7,
	"LEG_BENCHMARK_CURVE_NAME_SWAP":        8,
	"LEG_BENCHMARK_CURVE_NAME_TREASURY":    9,
	"LEG_BENCHMARK_CURVE_NAME_EONIA":       10,
	"LEG_BENCHMARK_CURVE_NAME_EUREPO":      11,
	"LEG_BENCHMARK_CURVE_NAME_SONIA":       12,
}

func (x LegBenchmarkCurveNameEnum) String() string {
	return proto.EnumName(LegBenchmarkCurveNameEnum_name, int32(x))
}

func (LegBenchmarkCurveNameEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{45}
}

type LegStipulationTypeEnum int32

const (
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_UNSPECIFIED                                        LegStipulationTypeEnum = 0
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED                          LegStipulationTypeEnum = 1
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY                        LegStipulationTypeEnum = 2
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE                           LegStipulationTypeEnum = 3
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD                          LegStipulationTypeEnum = 4
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE          LegStipulationTypeEnum = 5
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_GEOGRAPHICS                                        LegStipulationTypeEnum = 6
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ISSUE_DATE                                         LegStipulationTypeEnum = 7
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_LOT_VARIANCE                                       LegStipulationTypeEnum = 8
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH                            LegStipulationTypeEnum = 9
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE                            LegStipulationTypeEnum = 10
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_NUMBER_OF_PIECES                                   LegStipulationTypeEnum = 11
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE                     LegStipulationTypeEnum = 12
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE   LegStipulationTypeEnum = 13
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE             LegStipulationTypeEnum = 14
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_POOLS_MAXIMUM                                      LegStipulationTypeEnum = 15
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_POOLS_PER_LOT                                      LegStipulationTypeEnum = 16
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_POOLS_PER_MILLION                                  LegStipulationTypeEnum = 17
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_POOLS_PER_TRADE                                    LegStipulationTypeEnum = 18
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PRODUCTION_YEAR                                    LegStipulationTypeEnum = 19
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY                           LegStipulationTypeEnum = 20
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_TRADE_VARIANCE                                     LegStipulationTypeEnum = 21
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON                            LegStipulationTypeEnum = 22
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON                       LegStipulationTypeEnum = 23
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE                          LegStipulationTypeEnum = 24
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY                          LegStipulationTypeEnum = 25
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX                            LegStipulationTypeEnum = 26
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_AUTO_REINVESTMENT                                  LegStipulationTypeEnum = 27
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_BANK_QUALIFIED                                     LegStipulationTypeEnum = 28
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_BARGAIN_CONDITIONS                                 LegStipulationTypeEnum = 29
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE                             LegStipulationTypeEnum = 30
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_CALL_PROTECTION                                    LegStipulationTypeEnum = 31
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_COUPON_RANGE                                       LegStipulationTypeEnum = 32
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_CUSTOM_START                                       LegStipulationTypeEnum = 33
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER                            LegStipulationTypeEnum = 34
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_FREEFORM_TEXT                                      LegStipulationTypeEnum = 35
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_INSURED                                            LegStipulationTypeEnum = 36
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ISO_CURRENCY_CODE                                  LegStipulationTypeEnum = 37
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ISSUER                                             LegStipulationTypeEnum = 38
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ISSUE_SIZE_RANGE                                   LegStipulationTypeEnum = 39
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_LOOKBACK_DAYS                                      LegStipulationTypeEnum = 40
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MARKET_SECTOR                                      LegStipulationTypeEnum = 41
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MATURITY_RANGE                                     LegStipulationTypeEnum = 42
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS                              LegStipulationTypeEnum = 43
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MINIMUM_DENOMINATION                               LegStipulationTypeEnum = 44
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MINIMUM_INCREMENT                                  LegStipulationTypeEnum = 45
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MINIMUM_QUANTITY                                   LegStipulationTypeEnum = 46
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PAYMENT_FREQUENCY                                  LegStipulationTypeEnum = 47
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PRICE_RANGE                                        LegStipulationTypeEnum = 48
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PRICING_FREQUENCY                                  LegStipulationTypeEnum = 49
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PURPOSE                                            LegStipulationTypeEnum = 50
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_RATING_SOURCE_AND_RANGE                            LegStipulationTypeEnum = 51
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_RESTRICTED                                         LegStipulationTypeEnum = 52
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED                 LegStipulationTypeEnum = 53
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_STRUCTURE                                          LegStipulationTypeEnum = 54
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY                            LegStipulationTypeEnum = 55
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_SUBSTITUTIONS_LEFT                                 LegStipulationTypeEnum = 56
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_TYPE_OF_REDEMPTION                                 LegStipulationTypeEnum = 57
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_VALUATION_DISCOUNT                                 LegStipulationTypeEnum = 58
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_WHOLE_POOL                                         LegStipulationTypeEnum = 59
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_YIELD_RANGE                                        LegStipulationTypeEnum = 60
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET LegStipulationTypeEnum = 61
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_AVERAGE_FICOSCORE                                  LegStipulationTypeEnum = 62
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_AVERAGE_LOAN_SIZE                                  LegStipulationTypeEnum = 63
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_BROKER_CREDIT                                      LegStipulationTypeEnum = 64
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE                       LegStipulationTypeEnum = 65
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_DISCOUNT_RATE                                      LegStipulationTypeEnum = 66
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE               LegStipulationTypeEnum = 67
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE                               LegStipulationTypeEnum = 68
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_MAXIMUM_ORDER_SIZE                                 LegStipulationTypeEnum = 69
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS        LegStipulationTypeEnum = 70
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS     LegStipulationTypeEnum = 71
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT                           LegStipulationTypeEnum = 72
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_POOL_IDENTIFIER                                    LegStipulationTypeEnum = 73
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR              LegStipulationTypeEnum = 74
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE              LegStipulationTypeEnum = 75
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE              LegStipulationTypeEnum = 76
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY                LegStipulationTypeEnum = 77
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_TRADER_CREDIT                                      LegStipulationTypeEnum = 78
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_TYPE_OF_ROLL_TRADE                                 LegStipulationTypeEnum = 79
	LegStipulationTypeEnum_LEG_STIPULATION_TYPE_YIELD_TO_MATURITY                                  LegStipulationTypeEnum = 80
)

var LegStipulationTypeEnum_name = map[int32]string{
	0:  "LEG_STIPULATION_TYPE_UNSPECIFIED",
	1:  "LEG_STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED",
	2:  "LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY",
	3:  "LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE",
	4:  "LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD",
	5:  "LEG_STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE",
	6:  "LEG_STIPULATION_TYPE_GEOGRAPHICS",
	7:  "LEG_STIPULATION_TYPE_ISSUE_DATE",
	8:  "LEG_STIPULATION_TYPE_LOT_VARIANCE",
	9:  "LEG_STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH",
	10: "LEG_STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE",
	11: "LEG_STIPULATION_TYPE_NUMBER_OF_PIECES",
	12: "LEG_STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE",
	13: "LEG_STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE",
	14: "LEG_STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE",
	15: "LEG_STIPULATION_TYPE_POOLS_MAXIMUM",
	16: "LEG_STIPULATION_TYPE_POOLS_PER_LOT",
	17: "LEG_STIPULATION_TYPE_POOLS_PER_MILLION",
	18: "LEG_STIPULATION_TYPE_POOLS_PER_TRADE",
	19: "LEG_STIPULATION_TYPE_PRODUCTION_YEAR",
	20: "LEG_STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY",
	21: "LEG_STIPULATION_TYPE_TRADE_VARIANCE",
	22: "LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON",
	23: "LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON",
	24: "LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE",
	25: "LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY",
	26: "LEG_STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX",
	27: "LEG_STIPULATION_TYPE_AUTO_REINVESTMENT",
	28: "LEG_STIPULATION_TYPE_BANK_QUALIFIED",
	29: "LEG_STIPULATION_TYPE_BARGAIN_CONDITIONS",
	30: "LEG_STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE",
	31: "LEG_STIPULATION_TYPE_CALL_PROTECTION",
	32: "LEG_STIPULATION_TYPE_COUPON_RANGE",
	33: "LEG_STIPULATION_TYPE_CUSTOM_START",
	34: "LEG_STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER",
	35: "LEG_STIPULATION_TYPE_FREEFORM_TEXT",
	36: "LEG_STIPULATION_TYPE_INSURED",
	37: "LEG_STIPULATION_TYPE_ISO_CURRENCY_CODE",
	38: "LEG_STIPULATION_TYPE_ISSUER",
	39: "LEG_STIPULATION_TYPE_ISSUE_SIZE_RANGE",
	40: "LEG_STIPULATION_TYPE_LOOKBACK_DAYS",
	41: "LEG_STIPULATION_TYPE_MARKET_SECTOR",
	42: "LEG_STIPULATION_TYPE_MATURITY_RANGE",
	43: "LEG_STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS",
	44: "LEG_STIPULATION_TYPE_MINIMUM_DENOMINATION",
	45: "LEG_STIPULATION_TYPE_MINIMUM_INCREMENT",
	46: "LEG_STIPULATION_TYPE_MINIMUM_QUANTITY",
	47: "LEG_STIPULATION_TYPE_PAYMENT_FREQUENCY",
	48: "LEG_STIPULATION_TYPE_PRICE_RANGE",
	49: "LEG_STIPULATION_TYPE_PRICING_FREQUENCY",
	50: "LEG_STIPULATION_TYPE_PURPOSE",
	51: "LEG_STIPULATION_TYPE_RATING_SOURCE_AND_RANGE",
	52: "LEG_STIPULATION_TYPE_RESTRICTED",
	53: "LEG_STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED",
	54: "LEG_STIPULATION_TYPE_STRUCTURE",
	55: "LEG_STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY",
	56: "LEG_STIPULATION_TYPE_SUBSTITUTIONS_LEFT",
	57: "LEG_STIPULATION_TYPE_TYPE_OF_REDEMPTION",
	58: "LEG_STIPULATION_TYPE_VALUATION_DISCOUNT",
	59: "LEG_STIPULATION_TYPE_WHOLE_POOL",
	60: "LEG_STIPULATION_TYPE_YIELD_RANGE",
	61: "LEG_STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET",
	62: "LEG_STIPULATION_TYPE_AVERAGE_FICOSCORE",
	63: "LEG_STIPULATION_TYPE_AVERAGE_LOAN_SIZE",
	64: "LEG_STIPULATION_TYPE_BROKER_CREDIT",
	65: "LEG_STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE",
	66: "LEG_STIPULATION_TYPE_DISCOUNT_RATE",
	67: "LEG_STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE",
	68: "LEG_STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE",
	69: "LEG_STIPULATION_TYPE_MAXIMUM_ORDER_SIZE",
	70: "LEG_STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	71: "LEG_STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	72: "LEG_STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT",
	73: "LEG_STIPULATION_TYPE_POOL_IDENTIFIER",
	74: "LEG_STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR",
	75: "LEG_STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE",
	76: "LEG_STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE",
	77: "LEG_STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY",
	78: "LEG_STIPULATION_TYPE_TRADER_CREDIT",
	79: "LEG_STIPULATION_TYPE_TYPE_OF_ROLL_TRADE",
	80: "LEG_STIPULATION_TYPE_YIELD_TO_MATURITY",
}

var LegStipulationTypeEnum_value = map[string]int32{
	"LEG_STIPULATION_TYPE_UNSPECIFIED":                                        0,
	"LEG_STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED":                          1,
	"LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY":                        2,
	"LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE":                           3,
	"LEG_STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD":                          4,
	"LEG_STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE":          5,
	"LEG_STIPULATION_TYPE_GEOGRAPHICS":                                        6,
	"LEG_STIPULATION_TYPE_ISSUE_DATE":                                         7,
	"LEG_STIPULATION_TYPE_LOT_VARIANCE":                                       8,
	"LEG_STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH":                            9,
	"LEG_STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE":                            10,
	"LEG_STIPULATION_TYPE_NUMBER_OF_PIECES":                                   11,
	"LEG_STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE":                     12,
	"LEG_STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE":   13,
	"LEG_STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE":             14,
	"LEG_STIPULATION_TYPE_POOLS_MAXIMUM":                                      15,
	"LEG_STIPULATION_TYPE_POOLS_PER_LOT":                                      16,
	"LEG_STIPULATION_TYPE_POOLS_PER_MILLION":                                  17,
	"LEG_STIPULATION_TYPE_POOLS_PER_TRADE":                                    18,
	"LEG_STIPULATION_TYPE_PRODUCTION_YEAR":                                    19,
	"LEG_STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY":                           20,
	"LEG_STIPULATION_TYPE_TRADE_VARIANCE":                                     21,
	"LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON":                            22,
	"LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON":                       23,
	"LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE":                          24,
	"LEG_STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY":                          25,
	"LEG_STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX":                            26,
	"LEG_STIPULATION_TYPE_AUTO_REINVESTMENT":                                  27,
	"LEG_STIPULATION_TYPE_BANK_QUALIFIED":                                     28,
	"LEG_STIPULATION_TYPE_BARGAIN_CONDITIONS":                                 29,
	"LEG_STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE":                             30,
	"LEG_STIPULATION_TYPE_CALL_PROTECTION":                                    31,
	"LEG_STIPULATION_TYPE_COUPON_RANGE":                                       32,
	"LEG_STIPULATION_TYPE_CUSTOM_START":                                       33,
	"LEG_STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER":                            34,
	"LEG_STIPULATION_TYPE_FREEFORM_TEXT":                                      35,
	"LEG_STIPULATION_TYPE_INSURED":                                            36,
	"LEG_STIPULATION_TYPE_ISO_CURRENCY_CODE":                                  37,
	"LEG_STIPULATION_TYPE_ISSUER":                                             38,
	"LEG_STIPULATION_TYPE_ISSUE_SIZE_RANGE":                                   39,
	"LEG_STIPULATION_TYPE_LOOKBACK_DAYS":                                      40,
	"LEG_STIPULATION_TYPE_MARKET_SECTOR":                                      41,
	"LEG_STIPULATION_TYPE_MATURITY_RANGE":                                     42,
	"LEG_STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS":                              43,
	"LEG_STIPULATION_TYPE_MINIMUM_DENOMINATION":                               44,
	"LEG_STIPULATION_TYPE_MINIMUM_INCREMENT":                                  45,
	"LEG_STIPULATION_TYPE_MINIMUM_QUANTITY":                                   46,
	"LEG_STIPULATION_TYPE_PAYMENT_FREQUENCY":                                  47,
	"LEG_STIPULATION_TYPE_PRICE_RANGE":                                        48,
	"LEG_STIPULATION_TYPE_PRICING_FREQUENCY":                                  49,
	"LEG_STIPULATION_TYPE_PURPOSE":                                            50,
	"LEG_STIPULATION_TYPE_RATING_SOURCE_AND_RANGE":                            51,
	"LEG_STIPULATION_TYPE_RESTRICTED":                                         52,
	"LEG_STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED":                 53,
	"LEG_STIPULATION_TYPE_STRUCTURE":                                          54,
	"LEG_STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY":                            55,
	"LEG_STIPULATION_TYPE_SUBSTITUTIONS_LEFT":                                 56,
	"LEG_STIPULATION_TYPE_TYPE_OF_REDEMPTION":                                 57,
	"LEG_STIPULATION_TYPE_VALUATION_DISCOUNT":                                 58,
	"LEG_STIPULATION_TYPE_WHOLE_POOL":                                         59,
	"LEG_STIPULATION_TYPE_YIELD_RANGE":                                        60,
	"LEG_STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET": 61,
	"LEG_STIPULATION_TYPE_AVERAGE_FICOSCORE":                                  62,
	"LEG_STIPULATION_TYPE_AVERAGE_LOAN_SIZE":                                  63,
	"LEG_STIPULATION_TYPE_BROKER_CREDIT":                                      64,
	"LEG_STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE":                       65,
	"LEG_STIPULATION_TYPE_DISCOUNT_RATE":                                      66,
	"LEG_STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE":               67,
	"LEG_STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE":                               68,
	"LEG_STIPULATION_TYPE_MAXIMUM_ORDER_SIZE":                                 69,
	"LEG_STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS":        70,
	"LEG_STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS":     71,
	"LEG_STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT":                           72,
	"LEG_STIPULATION_TYPE_POOL_IDENTIFIER":                                    73,
	"LEG_STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR":              74,
	"LEG_STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE":              75,
	"LEG_STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE":              76,
	"LEG_STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY":                77,
	"LEG_STIPULATION_TYPE_TRADER_CREDIT":                                      78,
	"LEG_STIPULATION_TYPE_TYPE_OF_ROLL_TRADE":                                 79,
	"LEG_STIPULATION_TYPE_YIELD_TO_MATURITY":                                  80,
}

func (x LegStipulationTypeEnum) String() string {
	return proto.EnumName(LegStipulationTypeEnum_name, int32(x))
}

func (LegStipulationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{46}
}

type NestedPartyIDSourceEnum int32

const (
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_UNSPECIFIED                             NestedPartyIDSourceEnum = 0
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              NestedPartyIDSourceEnum = 1
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              NestedPartyIDSourceEnum = 2
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_BIC                                     NestedPartyIDSourceEnum = 3
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     NestedPartyIDSourceEnum = 4
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      NestedPartyIDSourceEnum = 5
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        NestedPartyIDSourceEnum = 6
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      NestedPartyIDSourceEnum = 7
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            NestedPartyIDSourceEnum = 8
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_PROPRIETARY                             NestedPartyIDSourceEnum = 9
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              NestedPartyIDSourceEnum = 10
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           NestedPartyIDSourceEnum = 11
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  NestedPartyIDSourceEnum = 12
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER NestedPartyIDSourceEnum = 13
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            NestedPartyIDSourceEnum = 14
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               NestedPartyIDSourceEnum = 15
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_CSDPARTICIPANT                          NestedPartyIDSourceEnum = 16
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_ISITCACRONYM                            NestedPartyIDSourceEnum = 17
	NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_MIC                                     NestedPartyIDSourceEnum = 18
)

var NestedPartyIDSourceEnum_name = map[int32]string{
	0:  "NESTED_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "NESTED_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "NESTED_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "NESTED_PARTY_ID_SOURCE_BIC",
	4:  "NESTED_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "NESTED_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "NESTED_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "NESTED_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "NESTED_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "NESTED_PARTY_ID_SOURCE_PROPRIETARY",
	10: "NESTED_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "NESTED_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "NESTED_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "NESTED_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "NESTED_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "NESTED_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "NESTED_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "NESTED_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "NESTED_PARTY_ID_SOURCE_MIC",
}

var NestedPartyIDSourceEnum_value = map[string]int32{
	"NESTED_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"NESTED_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"NESTED_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"NESTED_PARTY_ID_SOURCE_BIC":                                     3,
	"NESTED_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"NESTED_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"NESTED_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"NESTED_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"NESTED_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"NESTED_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"NESTED_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"NESTED_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"NESTED_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"NESTED_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"NESTED_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"NESTED_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"NESTED_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"NESTED_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"NESTED_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x NestedPartyIDSourceEnum) String() string {
	return proto.EnumName(NestedPartyIDSourceEnum_name, int32(x))
}

func (NestedPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{47}
}

type NestedPartyRoleEnum int32

const (
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_UNSPECIFIED                           NestedPartyRoleEnum = 0
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_BROKER_OF_CREDIT                      NestedPartyRoleEnum = 1
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CLEARING_FIRM                         NestedPartyRoleEnum = 2
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CLIENT_ID                             NestedPartyRoleEnum = 3
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_CLEARING_FIRM                  NestedPartyRoleEnum = 4
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_FIRM                           NestedPartyRoleEnum = 5
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           NestedPartyRoleEnum = 6
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ENTERING_FIRM                         NestedPartyRoleEnum = 7
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXECUTING_FIRM                        NestedPartyRoleEnum = 8
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXECUTING_SYSTEM                      NestedPartyRoleEnum = 9
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXECUTING_TRADER                      NestedPartyRoleEnum = 10
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                NestedPartyRoleEnum = 11
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  NestedPartyRoleEnum = 12
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INTRODUCING_FIRM                      NestedPartyRoleEnum = 13
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INVESTOR_ID                           NestedPartyRoleEnum = 14
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_LOCATE                                NestedPartyRoleEnum = 15
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ORDER_ORIGINATION_FIRM                NestedPartyRoleEnum = 16
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ORDER_ORIGINATION_TRADER              NestedPartyRoleEnum = 17
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SETTLEMENT_LOCATION                   NestedPartyRoleEnum = 18
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SPONSORING_FIRM                       NestedPartyRoleEnum = 19
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                NestedPartyRoleEnum = 20
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_AGENT                                 NestedPartyRoleEnum = 21
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_BENEFICIARY                           NestedPartyRoleEnum = 22
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_BUYER                                 NestedPartyRoleEnum = 23
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CLEARING_ORGANIZATION                 NestedPartyRoleEnum = 24
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_INVESTOR_ID                    NestedPartyRoleEnum = 25
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_TRADER                         NestedPartyRoleEnum = 26
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CORRESPONDENT_BROKER                  NestedPartyRoleEnum = 27
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   NestedPartyRoleEnum = 28
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CUSTODIAN                             NestedPartyRoleEnum = 29
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CUSTOMER_ACCOUNT                      NestedPartyRoleEnum = 30
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ENTERING_TRADER                       NestedPartyRoleEnum = 31
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXCHANGE                              NestedPartyRoleEnum = 32
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INTERESTED_PARTY                      NestedPartyRoleEnum = 33
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INTERMEDIARY                          NestedPartyRoleEnum = 34
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_LIQUIDITY_PROVIDER                    NestedPartyRoleEnum = 35
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_POSITION_ACCOUNT                      NestedPartyRoleEnum = 36
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_REGULATORY_BODY                       NestedPartyRoleEnum = 37
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SUB_CUSTODIAN                         NestedPartyRoleEnum = 38
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_TRANSFER_TO_FIRM                      NestedPartyRoleEnum = 39
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INTRODUCING_BROKER                    NestedPartyRoleEnum = 40
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_EXCHANGE                       NestedPartyRoleEnum = 41
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               NestedPartyRoleEnum = 42
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                NestedPartyRoleEnum = 43
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               NestedPartyRoleEnum = 44
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              NestedPartyRoleEnum = 45
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ASSET_MANAGER                         NestedPartyRoleEnum = 46
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CLAIMING_ACCOUNT                      NestedPartyRoleEnum = 47
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_FOREIGN_FIRM                          NestedPartyRoleEnum = 48
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       NestedPartyRoleEnum = 49
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_PLEDGEE_ACCOUNT                       NestedPartyRoleEnum = 50
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_PLEDGOR_ACCOUNT                       NestedPartyRoleEnum = 51
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SENDER_LOCATION                       NestedPartyRoleEnum = 52
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SESSION_ID                            NestedPartyRoleEnum = 53
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           NestedPartyRoleEnum = 54
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_TRADER_MNEMONIC                       NestedPartyRoleEnum = 55
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               NestedPartyRoleEnum = 56
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ENTERING_UNIT                         NestedPartyRoleEnum = 57
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXECUTING_UNIT                        NestedPartyRoleEnum = 58
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             NestedPartyRoleEnum = 59
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         NestedPartyRoleEnum = 60
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE NestedPartyRoleEnum = 61
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_DESK_ID                               NestedPartyRoleEnum = 62
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_EXECUTION_VENUE                       NestedPartyRoleEnum = 63
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              NestedPartyRoleEnum = 64
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              NestedPartyRoleEnum = 65
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_INVESTMENT_FIRM                       NestedPartyRoleEnum = 66
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_LOCATION_ID                           NestedPartyRoleEnum = 67
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          NestedPartyRoleEnum = 68
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_MARKET_DATA_MARKET                    NestedPartyRoleEnum = 69
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_MARKET_MAKER                          NestedPartyRoleEnum = 70
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         NestedPartyRoleEnum = 71
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_QUOTE_ORIGINATOR                      NestedPartyRoleEnum = 72
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_REGULATED_MARKET                      NestedPartyRoleEnum = 73
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_REPORTING_INTERMEDIARY                NestedPartyRoleEnum = 74
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_REPORT_ORIGINATOR                     NestedPartyRoleEnum = 75
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_SYSTEMATIC_INTERNALISER               NestedPartyRoleEnum = 76
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ALLOCATION_ENTITY                     NestedPartyRoleEnum = 77
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_BROKER_CLEARING_ID                    NestedPartyRoleEnum = 78
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_PRIME_BROKER                          NestedPartyRoleEnum = 79
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_STEP_OUT_FIRM                         NestedPartyRoleEnum = 80
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       NestedPartyRoleEnum = 81
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      NestedPartyRoleEnum = 82
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_CLEARING_ACCOUNT                      NestedPartyRoleEnum = 83
	NestedPartyRoleEnum_NESTED_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    NestedPartyRoleEnum = 84
)

var NestedPartyRoleEnum_name = map[int32]string{
	0:  "NESTED_PARTY_ROLE_UNSPECIFIED",
	1:  "NESTED_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "NESTED_PARTY_ROLE_CLEARING_FIRM",
	3:  "NESTED_PARTY_ROLE_CLIENT_ID",
	4:  "NESTED_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "NESTED_PARTY_ROLE_CONTRA_FIRM",
	6:  "NESTED_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "NESTED_PARTY_ROLE_ENTERING_FIRM",
	8:  "NESTED_PARTY_ROLE_EXECUTING_FIRM",
	9:  "NESTED_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "NESTED_PARTY_ROLE_EXECUTING_TRADER",
	11: "NESTED_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "NESTED_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "NESTED_PARTY_ROLE_INTRODUCING_FIRM",
	14: "NESTED_PARTY_ROLE_INVESTOR_ID",
	15: "NESTED_PARTY_ROLE_LOCATE",
	16: "NESTED_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "NESTED_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "NESTED_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "NESTED_PARTY_ROLE_SPONSORING_FIRM",
	20: "NESTED_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "NESTED_PARTY_ROLE_AGENT",
	22: "NESTED_PARTY_ROLE_BENEFICIARY",
	23: "NESTED_PARTY_ROLE_BUYER",
	24: "NESTED_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "NESTED_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "NESTED_PARTY_ROLE_CONTRA_TRADER",
	27: "NESTED_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "NESTED_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "NESTED_PARTY_ROLE_CUSTODIAN",
	30: "NESTED_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "NESTED_PARTY_ROLE_ENTERING_TRADER",
	32: "NESTED_PARTY_ROLE_EXCHANGE",
	33: "NESTED_PARTY_ROLE_INTERESTED_PARTY",
	34: "NESTED_PARTY_ROLE_INTERMEDIARY",
	35: "NESTED_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "NESTED_PARTY_ROLE_POSITION_ACCOUNT",
	37: "NESTED_PARTY_ROLE_REGULATORY_BODY",
	38: "NESTED_PARTY_ROLE_SUB_CUSTODIAN",
	39: "NESTED_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "NESTED_PARTY_ROLE_INTRODUCING_BROKER",
	41: "NESTED_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "NESTED_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "NESTED_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "NESTED_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "NESTED_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "NESTED_PARTY_ROLE_ASSET_MANAGER",
	47: "NESTED_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "NESTED_PARTY_ROLE_FOREIGN_FIRM",
	49: "NESTED_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "NESTED_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "NESTED_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "NESTED_PARTY_ROLE_SENDER_LOCATION",
	53: "NESTED_PARTY_ROLE_SESSION_ID",
	54: "NESTED_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "NESTED_PARTY_ROLE_TRADER_MNEMONIC",
	56: "NESTED_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "NESTED_PARTY_ROLE_ENTERING_UNIT",
	58: "NESTED_PARTY_ROLE_EXECUTING_UNIT",
	59: "NESTED_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "NESTED_PARTY_ROLE_DESK_ID",
	63: "NESTED_PARTY_ROLE_EXECUTION_VENUE",
	64: "NESTED_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "NESTED_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "NESTED_PARTY_ROLE_INVESTMENT_FIRM",
	67: "NESTED_PARTY_ROLE_LOCATION_ID",
	68: "NESTED_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "NESTED_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "NESTED_PARTY_ROLE_MARKET_MAKER",
	71: "NESTED_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "NESTED_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "NESTED_PARTY_ROLE_REGULATED_MARKET",
	74: "NESTED_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "NESTED_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "NESTED_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "NESTED_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "NESTED_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "NESTED_PARTY_ROLE_PRIME_BROKER",
	80: "NESTED_PARTY_ROLE_STEP_OUT_FIRM",
	81: "NESTED_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "NESTED_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "NESTED_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "NESTED_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var NestedPartyRoleEnum_value = map[string]int32{
	"NESTED_PARTY_ROLE_UNSPECIFIED":                           0,
	"NESTED_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"NESTED_PARTY_ROLE_CLEARING_FIRM":                         2,
	"NESTED_PARTY_ROLE_CLIENT_ID":                             3,
	"NESTED_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"NESTED_PARTY_ROLE_CONTRA_FIRM":                           5,
	"NESTED_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"NESTED_PARTY_ROLE_ENTERING_FIRM":                         7,
	"NESTED_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"NESTED_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"NESTED_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"NESTED_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"NESTED_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"NESTED_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"NESTED_PARTY_ROLE_INVESTOR_ID":                           14,
	"NESTED_PARTY_ROLE_LOCATE":                                15,
	"NESTED_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"NESTED_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"NESTED_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"NESTED_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"NESTED_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"NESTED_PARTY_ROLE_AGENT":                                 21,
	"NESTED_PARTY_ROLE_BENEFICIARY":                           22,
	"NESTED_PARTY_ROLE_BUYER":                                 23,
	"NESTED_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"NESTED_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"NESTED_PARTY_ROLE_CONTRA_TRADER":                         26,
	"NESTED_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"NESTED_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"NESTED_PARTY_ROLE_CUSTODIAN":                             29,
	"NESTED_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"NESTED_PARTY_ROLE_ENTERING_TRADER":                       31,
	"NESTED_PARTY_ROLE_EXCHANGE":                              32,
	"NESTED_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"NESTED_PARTY_ROLE_INTERMEDIARY":                          34,
	"NESTED_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"NESTED_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"NESTED_PARTY_ROLE_REGULATORY_BODY":                       37,
	"NESTED_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"NESTED_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"NESTED_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"NESTED_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"NESTED_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"NESTED_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"NESTED_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"NESTED_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"NESTED_PARTY_ROLE_ASSET_MANAGER":                         46,
	"NESTED_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"NESTED_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"NESTED_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"NESTED_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"NESTED_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"NESTED_PARTY_ROLE_SENDER_LOCATION":                       52,
	"NESTED_PARTY_ROLE_SESSION_ID":                            53,
	"NESTED_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"NESTED_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"NESTED_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"NESTED_PARTY_ROLE_ENTERING_UNIT":                         57,
	"NESTED_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"NESTED_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"NESTED_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"NESTED_PARTY_ROLE_DESK_ID":                               62,
	"NESTED_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"NESTED_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"NESTED_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"NESTED_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"NESTED_PARTY_ROLE_LOCATION_ID":                           67,
	"NESTED_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"NESTED_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"NESTED_PARTY_ROLE_MARKET_MAKER":                          70,
	"NESTED_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"NESTED_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"NESTED_PARTY_ROLE_REGULATED_MARKET":                      73,
	"NESTED_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"NESTED_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"NESTED_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"NESTED_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"NESTED_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"NESTED_PARTY_ROLE_PRIME_BROKER":                          79,
	"NESTED_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"NESTED_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"NESTED_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"NESTED_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"NESTED_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x NestedPartyRoleEnum) String() string {
	return proto.EnumName(NestedPartyRoleEnum_name, int32(x))
}

func (NestedPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{48}
}

type RoundingDirectionEnum int32

const (
	RoundingDirectionEnum_ROUNDING_DIRECTION_UNSPECIFIED      RoundingDirectionEnum = 0
	RoundingDirectionEnum_ROUNDING_DIRECTION_ROUND_DOWN       RoundingDirectionEnum = 1
	RoundingDirectionEnum_ROUNDING_DIRECTION_ROUND_TO_NEAREST RoundingDirectionEnum = 2
	RoundingDirectionEnum_ROUNDING_DIRECTION_ROUND_UP         RoundingDirectionEnum = 3
)

var RoundingDirectionEnum_name = map[int32]string{
	0: "ROUNDING_DIRECTION_UNSPECIFIED",
	1: "ROUNDING_DIRECTION_ROUND_DOWN",
	2: "ROUNDING_DIRECTION_ROUND_TO_NEAREST",
	3: "ROUNDING_DIRECTION_ROUND_UP",
}

var RoundingDirectionEnum_value = map[string]int32{
	"ROUNDING_DIRECTION_UNSPECIFIED":      0,
	"ROUNDING_DIRECTION_ROUND_DOWN":       1,
	"ROUNDING_DIRECTION_ROUND_TO_NEAREST": 2,
	"ROUNDING_DIRECTION_ROUND_UP":         3,
}

func (x RoundingDirectionEnum) String() string {
	return proto.EnumName(RoundingDirectionEnum_name, int32(x))
}

func (RoundingDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{49}
}

type PartyIDSourceEnum int32

const (
	PartyIDSourceEnum_PARTY_ID_SOURCE_UNSPECIFIED                             PartyIDSourceEnum = 0
	PartyIDSourceEnum_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              PartyIDSourceEnum = 1
	PartyIDSourceEnum_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              PartyIDSourceEnum = 2
	PartyIDSourceEnum_PARTY_ID_SOURCE_BIC                                     PartyIDSourceEnum = 3
	PartyIDSourceEnum_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     PartyIDSourceEnum = 4
	PartyIDSourceEnum_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      PartyIDSourceEnum = 5
	PartyIDSourceEnum_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        PartyIDSourceEnum = 6
	PartyIDSourceEnum_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      PartyIDSourceEnum = 7
	PartyIDSourceEnum_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            PartyIDSourceEnum = 8
	PartyIDSourceEnum_PARTY_ID_SOURCE_PROPRIETARY                             PartyIDSourceEnum = 9
	PartyIDSourceEnum_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              PartyIDSourceEnum = 10
	PartyIDSourceEnum_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           PartyIDSourceEnum = 11
	PartyIDSourceEnum_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  PartyIDSourceEnum = 12
	PartyIDSourceEnum_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER PartyIDSourceEnum = 13
	PartyIDSourceEnum_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            PartyIDSourceEnum = 14
	PartyIDSourceEnum_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               PartyIDSourceEnum = 15
	PartyIDSourceEnum_PARTY_ID_SOURCE_CSDPARTICIPANT                          PartyIDSourceEnum = 16
	PartyIDSourceEnum_PARTY_ID_SOURCE_ISITCACRONYM                            PartyIDSourceEnum = 17
	PartyIDSourceEnum_PARTY_ID_SOURCE_MIC                                     PartyIDSourceEnum = 18
)

var PartyIDSourceEnum_name = map[int32]string{
	0:  "PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "PARTY_ID_SOURCE_BIC",
	4:  "PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "PARTY_ID_SOURCE_PROPRIETARY",
	10: "PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "PARTY_ID_SOURCE_ISITCACRONYM",
	18: "PARTY_ID_SOURCE_MIC",
}

var PartyIDSourceEnum_value = map[string]int32{
	"PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"PARTY_ID_SOURCE_BIC":                                     3,
	"PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"PARTY_ID_SOURCE_MIC":                                     18,
}

func (x PartyIDSourceEnum) String() string {
	return proto.EnumName(PartyIDSourceEnum_name, int32(x))
}

func (PartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{50}
}

type PartyRoleEnum int32

const (
	PartyRoleEnum_PARTY_ROLE_UNSPECIFIED                           PartyRoleEnum = 0
	PartyRoleEnum_PARTY_ROLE_BROKER_OF_CREDIT                      PartyRoleEnum = 1
	PartyRoleEnum_PARTY_ROLE_CLEARING_FIRM                         PartyRoleEnum = 2
	PartyRoleEnum_PARTY_ROLE_CLIENT_ID                             PartyRoleEnum = 3
	PartyRoleEnum_PARTY_ROLE_CONTRA_CLEARING_FIRM                  PartyRoleEnum = 4
	PartyRoleEnum_PARTY_ROLE_CONTRA_FIRM                           PartyRoleEnum = 5
	PartyRoleEnum_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           PartyRoleEnum = 6
	PartyRoleEnum_PARTY_ROLE_ENTERING_FIRM                         PartyRoleEnum = 7
	PartyRoleEnum_PARTY_ROLE_EXECUTING_FIRM                        PartyRoleEnum = 8
	PartyRoleEnum_PARTY_ROLE_EXECUTING_SYSTEM                      PartyRoleEnum = 9
	PartyRoleEnum_PARTY_ROLE_EXECUTING_TRADER                      PartyRoleEnum = 10
	PartyRoleEnum_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                PartyRoleEnum = 11
	PartyRoleEnum_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  PartyRoleEnum = 12
	PartyRoleEnum_PARTY_ROLE_INTRODUCING_FIRM                      PartyRoleEnum = 13
	PartyRoleEnum_PARTY_ROLE_INVESTOR_ID                           PartyRoleEnum = 14
	PartyRoleEnum_PARTY_ROLE_LOCATE                                PartyRoleEnum = 15
	PartyRoleEnum_PARTY_ROLE_ORDER_ORIGINATION_FIRM                PartyRoleEnum = 16
	PartyRoleEnum_PARTY_ROLE_ORDER_ORIGINATION_TRADER              PartyRoleEnum = 17
	PartyRoleEnum_PARTY_ROLE_SETTLEMENT_LOCATION                   PartyRoleEnum = 18
	PartyRoleEnum_PARTY_ROLE_SPONSORING_FIRM                       PartyRoleEnum = 19
	PartyRoleEnum_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                PartyRoleEnum = 20
	PartyRoleEnum_PARTY_ROLE_AGENT                                 PartyRoleEnum = 21
	PartyRoleEnum_PARTY_ROLE_BENEFICIARY                           PartyRoleEnum = 22
	PartyRoleEnum_PARTY_ROLE_BUYER                                 PartyRoleEnum = 23
	PartyRoleEnum_PARTY_ROLE_CLEARING_ORGANIZATION                 PartyRoleEnum = 24
	PartyRoleEnum_PARTY_ROLE_CONTRA_INVESTOR_ID                    PartyRoleEnum = 25
	PartyRoleEnum_PARTY_ROLE_CONTRA_TRADER                         PartyRoleEnum = 26
	PartyRoleEnum_PARTY_ROLE_CORRESPONDENT_BROKER                  PartyRoleEnum = 27
	PartyRoleEnum_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   PartyRoleEnum = 28
	PartyRoleEnum_PARTY_ROLE_CUSTODIAN                             PartyRoleEnum = 29
	PartyRoleEnum_PARTY_ROLE_CUSTOMER_ACCOUNT                      PartyRoleEnum = 30
	PartyRoleEnum_PARTY_ROLE_ENTERING_TRADER                       PartyRoleEnum = 31
	PartyRoleEnum_PARTY_ROLE_EXCHANGE                              PartyRoleEnum = 32
	PartyRoleEnum_PARTY_ROLE_INTERESTED_PARTY                      PartyRoleEnum = 33
	PartyRoleEnum_PARTY_ROLE_INTERMEDIARY                          PartyRoleEnum = 34
	PartyRoleEnum_PARTY_ROLE_LIQUIDITY_PROVIDER                    PartyRoleEnum = 35
	PartyRoleEnum_PARTY_ROLE_POSITION_ACCOUNT                      PartyRoleEnum = 36
	PartyRoleEnum_PARTY_ROLE_REGULATORY_BODY                       PartyRoleEnum = 37
	PartyRoleEnum_PARTY_ROLE_SUB_CUSTODIAN                         PartyRoleEnum = 38
	PartyRoleEnum_PARTY_ROLE_TRANSFER_TO_FIRM                      PartyRoleEnum = 39
	PartyRoleEnum_PARTY_ROLE_INTRODUCING_BROKER                    PartyRoleEnum = 40
	PartyRoleEnum_PARTY_ROLE_CONTRA_EXCHANGE                       PartyRoleEnum = 41
	PartyRoleEnum_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               PartyRoleEnum = 42
	PartyRoleEnum_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                PartyRoleEnum = 43
	PartyRoleEnum_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               PartyRoleEnum = 44
	PartyRoleEnum_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              PartyRoleEnum = 45
	PartyRoleEnum_PARTY_ROLE_ASSET_MANAGER                         PartyRoleEnum = 46
	PartyRoleEnum_PARTY_ROLE_CLAIMING_ACCOUNT                      PartyRoleEnum = 47
	PartyRoleEnum_PARTY_ROLE_FOREIGN_FIRM                          PartyRoleEnum = 48
	PartyRoleEnum_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       PartyRoleEnum = 49
	PartyRoleEnum_PARTY_ROLE_PLEDGEE_ACCOUNT                       PartyRoleEnum = 50
	PartyRoleEnum_PARTY_ROLE_PLEDGOR_ACCOUNT                       PartyRoleEnum = 51
	PartyRoleEnum_PARTY_ROLE_SENDER_LOCATION                       PartyRoleEnum = 52
	PartyRoleEnum_PARTY_ROLE_SESSION_ID                            PartyRoleEnum = 53
	PartyRoleEnum_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           PartyRoleEnum = 54
	PartyRoleEnum_PARTY_ROLE_TRADER_MNEMONIC                       PartyRoleEnum = 55
	PartyRoleEnum_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               PartyRoleEnum = 56
	PartyRoleEnum_PARTY_ROLE_ENTERING_UNIT                         PartyRoleEnum = 57
	PartyRoleEnum_PARTY_ROLE_EXECUTING_UNIT                        PartyRoleEnum = 58
	PartyRoleEnum_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             PartyRoleEnum = 59
	PartyRoleEnum_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         PartyRoleEnum = 60
	PartyRoleEnum_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE PartyRoleEnum = 61
	PartyRoleEnum_PARTY_ROLE_DESK_ID                               PartyRoleEnum = 62
	PartyRoleEnum_PARTY_ROLE_EXECUTION_VENUE                       PartyRoleEnum = 63
	PartyRoleEnum_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              PartyRoleEnum = 64
	PartyRoleEnum_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              PartyRoleEnum = 65
	PartyRoleEnum_PARTY_ROLE_INVESTMENT_FIRM                       PartyRoleEnum = 66
	PartyRoleEnum_PARTY_ROLE_LOCATION_ID                           PartyRoleEnum = 67
	PartyRoleEnum_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          PartyRoleEnum = 68
	PartyRoleEnum_PARTY_ROLE_MARKET_DATA_MARKET                    PartyRoleEnum = 69
	PartyRoleEnum_PARTY_ROLE_MARKET_MAKER                          PartyRoleEnum = 70
	PartyRoleEnum_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         PartyRoleEnum = 71
	PartyRoleEnum_PARTY_ROLE_QUOTE_ORIGINATOR                      PartyRoleEnum = 72
	PartyRoleEnum_PARTY_ROLE_REGULATED_MARKET                      PartyRoleEnum = 73
	PartyRoleEnum_PARTY_ROLE_REPORTING_INTERMEDIARY                PartyRoleEnum = 74
	PartyRoleEnum_PARTY_ROLE_REPORT_ORIGINATOR                     PartyRoleEnum = 75
	PartyRoleEnum_PARTY_ROLE_SYSTEMATIC_INTERNALISER               PartyRoleEnum = 76
	PartyRoleEnum_PARTY_ROLE_ALLOCATION_ENTITY                     PartyRoleEnum = 77
	PartyRoleEnum_PARTY_ROLE_BROKER_CLEARING_ID                    PartyRoleEnum = 78
	PartyRoleEnum_PARTY_ROLE_PRIME_BROKER                          PartyRoleEnum = 79
	PartyRoleEnum_PARTY_ROLE_STEP_OUT_FIRM                         PartyRoleEnum = 80
	PartyRoleEnum_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       PartyRoleEnum = 81
	PartyRoleEnum_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      PartyRoleEnum = 82
	PartyRoleEnum_PARTY_ROLE_CLEARING_ACCOUNT                      PartyRoleEnum = 83
	PartyRoleEnum_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    PartyRoleEnum = 84
)

var PartyRoleEnum_name = map[int32]string{
	0:  "PARTY_ROLE_UNSPECIFIED",
	1:  "PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "PARTY_ROLE_CLEARING_FIRM",
	3:  "PARTY_ROLE_CLIENT_ID",
	4:  "PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "PARTY_ROLE_CONTRA_FIRM",
	6:  "PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "PARTY_ROLE_ENTERING_FIRM",
	8:  "PARTY_ROLE_EXECUTING_FIRM",
	9:  "PARTY_ROLE_EXECUTING_SYSTEM",
	10: "PARTY_ROLE_EXECUTING_TRADER",
	11: "PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "PARTY_ROLE_INTRODUCING_FIRM",
	14: "PARTY_ROLE_INVESTOR_ID",
	15: "PARTY_ROLE_LOCATE",
	16: "PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "PARTY_ROLE_SPONSORING_FIRM",
	20: "PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "PARTY_ROLE_AGENT",
	22: "PARTY_ROLE_BENEFICIARY",
	23: "PARTY_ROLE_BUYER",
	24: "PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "PARTY_ROLE_CONTRA_TRADER",
	27: "PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "PARTY_ROLE_CUSTODIAN",
	30: "PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "PARTY_ROLE_ENTERING_TRADER",
	32: "PARTY_ROLE_EXCHANGE",
	33: "PARTY_ROLE_INTERESTED_PARTY",
	34: "PARTY_ROLE_INTERMEDIARY",
	35: "PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "PARTY_ROLE_POSITION_ACCOUNT",
	37: "PARTY_ROLE_REGULATORY_BODY",
	38: "PARTY_ROLE_SUB_CUSTODIAN",
	39: "PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "PARTY_ROLE_INTRODUCING_BROKER",
	41: "PARTY_ROLE_CONTRA_EXCHANGE",
	42: "PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "PARTY_ROLE_ASSET_MANAGER",
	47: "PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "PARTY_ROLE_FOREIGN_FIRM",
	49: "PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "PARTY_ROLE_SENDER_LOCATION",
	53: "PARTY_ROLE_SESSION_ID",
	54: "PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "PARTY_ROLE_TRADER_MNEMONIC",
	56: "PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "PARTY_ROLE_ENTERING_UNIT",
	58: "PARTY_ROLE_EXECUTING_UNIT",
	59: "PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "PARTY_ROLE_DESK_ID",
	63: "PARTY_ROLE_EXECUTION_VENUE",
	64: "PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "PARTY_ROLE_INVESTMENT_FIRM",
	67: "PARTY_ROLE_LOCATION_ID",
	68: "PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "PARTY_ROLE_MARKET_DATA_MARKET",
	70: "PARTY_ROLE_MARKET_MAKER",
	71: "PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "PARTY_ROLE_REGULATED_MARKET",
	74: "PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "PARTY_ROLE_REPORT_ORIGINATOR",
	76: "PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "PARTY_ROLE_ALLOCATION_ENTITY",
	78: "PARTY_ROLE_BROKER_CLEARING_ID",
	79: "PARTY_ROLE_PRIME_BROKER",
	80: "PARTY_ROLE_STEP_OUT_FIRM",
	81: "PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "PARTY_ROLE_CLEARING_ACCOUNT",
	84: "PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var PartyRoleEnum_value = map[string]int32{
	"PARTY_ROLE_UNSPECIFIED":                           0,
	"PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"PARTY_ROLE_CLEARING_FIRM":                         2,
	"PARTY_ROLE_CLIENT_ID":                             3,
	"PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"PARTY_ROLE_CONTRA_FIRM":                           5,
	"PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"PARTY_ROLE_ENTERING_FIRM":                         7,
	"PARTY_ROLE_EXECUTING_FIRM":                        8,
	"PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"PARTY_ROLE_EXECUTING_TRADER":                      10,
	"PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"PARTY_ROLE_INVESTOR_ID":                           14,
	"PARTY_ROLE_LOCATE":                                15,
	"PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"PARTY_ROLE_SPONSORING_FIRM":                       19,
	"PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"PARTY_ROLE_AGENT":                                 21,
	"PARTY_ROLE_BENEFICIARY":                           22,
	"PARTY_ROLE_BUYER":                                 23,
	"PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"PARTY_ROLE_CONTRA_TRADER":                         26,
	"PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"PARTY_ROLE_CUSTODIAN":                             29,
	"PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"PARTY_ROLE_ENTERING_TRADER":                       31,
	"PARTY_ROLE_EXCHANGE":                              32,
	"PARTY_ROLE_INTERESTED_PARTY":                      33,
	"PARTY_ROLE_INTERMEDIARY":                          34,
	"PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"PARTY_ROLE_REGULATORY_BODY":                       37,
	"PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"PARTY_ROLE_ASSET_MANAGER":                         46,
	"PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"PARTY_ROLE_FOREIGN_FIRM":                          48,
	"PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"PARTY_ROLE_SENDER_LOCATION":                       52,
	"PARTY_ROLE_SESSION_ID":                            53,
	"PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"PARTY_ROLE_ENTERING_UNIT":                         57,
	"PARTY_ROLE_EXECUTING_UNIT":                        58,
	"PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"PARTY_ROLE_DESK_ID":                               62,
	"PARTY_ROLE_EXECUTION_VENUE":                       63,
	"PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"PARTY_ROLE_LOCATION_ID":                           67,
	"PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"PARTY_ROLE_MARKET_MAKER":                          70,
	"PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"PARTY_ROLE_REGULATED_MARKET":                      73,
	"PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"PARTY_ROLE_PRIME_BROKER":                          79,
	"PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x PartyRoleEnum) String() string {
	return proto.EnumName(PartyRoleEnum_name, int32(x))
}

func (PartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{51}
}

type PegPriceTypeEnum int32

const (
	PegPriceTypeEnum_PEG_PRICE_TYPE_UNSPECIFIED        PegPriceTypeEnum = 0
	PegPriceTypeEnum_PEG_PRICE_TYPE_LAST_PEG           PegPriceTypeEnum = 1
	PegPriceTypeEnum_PEG_PRICE_TYPE_MARKET_PEG         PegPriceTypeEnum = 2
	PegPriceTypeEnum_PEG_PRICE_TYPE_MID_PRICE_PEG      PegPriceTypeEnum = 3
	PegPriceTypeEnum_PEG_PRICE_TYPE_OPENING_PEG        PegPriceTypeEnum = 4
	PegPriceTypeEnum_PEG_PRICE_TYPE_PEG_TO_LIMIT_PRICE PegPriceTypeEnum = 5
	PegPriceTypeEnum_PEG_PRICE_TYPE_PEG_TO_VWAP        PegPriceTypeEnum = 6
	PegPriceTypeEnum_PEG_PRICE_TYPE_PRIMARY_PEG        PegPriceTypeEnum = 7
	PegPriceTypeEnum_PEG_PRICE_TYPE_TRAILING_STOP_PEG  PegPriceTypeEnum = 8
)

var PegPriceTypeEnum_name = map[int32]string{
	0: "PEG_PRICE_TYPE_UNSPECIFIED",
	1: "PEG_PRICE_TYPE_LAST_PEG",
	2: "PEG_PRICE_TYPE_MARKET_PEG",
	3: "PEG_PRICE_TYPE_MID_PRICE_PEG",
	4: "PEG_PRICE_TYPE_OPENING_PEG",
	5: "PEG_PRICE_TYPE_PEG_TO_LIMIT_PRICE",
	6: "PEG_PRICE_TYPE_PEG_TO_VWAP",
	7: "PEG_PRICE_TYPE_PRIMARY_PEG",
	8: "PEG_PRICE_TYPE_TRAILING_STOP_PEG",
}

var PegPriceTypeEnum_value = map[string]int32{
	"PEG_PRICE_TYPE_UNSPECIFIED":        0,
	"PEG_PRICE_TYPE_LAST_PEG":           1,
	"PEG_PRICE_TYPE_MARKET_PEG":         2,
	"PEG_PRICE_TYPE_MID_PRICE_PEG":      3,
	"PEG_PRICE_TYPE_OPENING_PEG":        4,
	"PEG_PRICE_TYPE_PEG_TO_LIMIT_PRICE": 5,
	"PEG_PRICE_TYPE_PEG_TO_VWAP":        6,
	"PEG_PRICE_TYPE_PRIMARY_PEG":        7,
	"PEG_PRICE_TYPE_TRAILING_STOP_PEG":  8,
}

func (x PegPriceTypeEnum) String() string {
	return proto.EnumName(PegPriceTypeEnum_name, int32(x))
}

func (PegPriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{52}
}

type PegMoveTypeEnum int32

const (
	PegMoveTypeEnum_PEG_MOVE_TYPE_UNSPECIFIED PegMoveTypeEnum = 0
	PegMoveTypeEnum_PEG_MOVE_TYPE_FIXED       PegMoveTypeEnum = 1
	PegMoveTypeEnum_PEG_MOVE_TYPE_FLOATING    PegMoveTypeEnum = 2
)

var PegMoveTypeEnum_name = map[int32]string{
	0: "PEG_MOVE_TYPE_UNSPECIFIED",
	1: "PEG_MOVE_TYPE_FIXED",
	2: "PEG_MOVE_TYPE_FLOATING",
}

var PegMoveTypeEnum_value = map[string]int32{
	"PEG_MOVE_TYPE_UNSPECIFIED": 0,
	"PEG_MOVE_TYPE_FIXED":       1,
	"PEG_MOVE_TYPE_FLOATING":    2,
}

func (x PegMoveTypeEnum) String() string {
	return proto.EnumName(PegMoveTypeEnum_name, int32(x))
}

func (PegMoveTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{53}
}

type PegOffsetTypeEnum int32

const (
	PegOffsetTypeEnum_PEG_OFFSET_TYPE_UNSPECIFIED  PegOffsetTypeEnum = 0
	PegOffsetTypeEnum_PEG_OFFSET_TYPE_BASIS_POINTS PegOffsetTypeEnum = 1
	PegOffsetTypeEnum_PEG_OFFSET_TYPE_PRICE        PegOffsetTypeEnum = 2
	PegOffsetTypeEnum_PEG_OFFSET_TYPE_PRICE_TIER   PegOffsetTypeEnum = 3
	PegOffsetTypeEnum_PEG_OFFSET_TYPE_TICKS        PegOffsetTypeEnum = 4
)

var PegOffsetTypeEnum_name = map[int32]string{
	0: "PEG_OFFSET_TYPE_UNSPECIFIED",
	1: "PEG_OFFSET_TYPE_BASIS_POINTS",
	2: "PEG_OFFSET_TYPE_PRICE",
	3: "PEG_OFFSET_TYPE_PRICE_TIER",
	4: "PEG_OFFSET_TYPE_TICKS",
}

var PegOffsetTypeEnum_value = map[string]int32{
	"PEG_OFFSET_TYPE_UNSPECIFIED":  0,
	"PEG_OFFSET_TYPE_BASIS_POINTS": 1,
	"PEG_OFFSET_TYPE_PRICE":        2,
	"PEG_OFFSET_TYPE_PRICE_TIER":   3,
	"PEG_OFFSET_TYPE_TICKS":        4,
}

func (x PegOffsetTypeEnum) String() string {
	return proto.EnumName(PegOffsetTypeEnum_name, int32(x))
}

func (PegOffsetTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{54}
}

type PegLimitTypeEnum int32

const (
	PegLimitTypeEnum_PEG_LIMIT_TYPE_UNSPECIFIED PegLimitTypeEnum = 0
	PegLimitTypeEnum_PEG_LIMIT_TYPE_OR_BETTER   PegLimitTypeEnum = 1
	PegLimitTypeEnum_PEG_LIMIT_TYPE_OR_WORSE    PegLimitTypeEnum = 2
	PegLimitTypeEnum_PEG_LIMIT_TYPE_STRICT      PegLimitTypeEnum = 3
)

var PegLimitTypeEnum_name = map[int32]string{
	0: "PEG_LIMIT_TYPE_UNSPECIFIED",
	1: "PEG_LIMIT_TYPE_OR_BETTER",
	2: "PEG_LIMIT_TYPE_OR_WORSE",
	3: "PEG_LIMIT_TYPE_STRICT",
}

var PegLimitTypeEnum_value = map[string]int32{
	"PEG_LIMIT_TYPE_UNSPECIFIED": 0,
	"PEG_LIMIT_TYPE_OR_BETTER":   1,
	"PEG_LIMIT_TYPE_OR_WORSE":    2,
	"PEG_LIMIT_TYPE_STRICT":      3,
}

func (x PegLimitTypeEnum) String() string {
	return proto.EnumName(PegLimitTypeEnum_name, int32(x))
}

func (PegLimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{55}
}

type PegRoundDirectionEnum int32

const (
	PegRoundDirectionEnum_PEG_ROUND_DIRECTION_UNSPECIFIED     PegRoundDirectionEnum = 0
	PegRoundDirectionEnum_PEG_ROUND_DIRECTION_MORE_AGGRESSIVE PegRoundDirectionEnum = 1
	PegRoundDirectionEnum_PEG_ROUND_DIRECTION_MORE_PASSIVE    PegRoundDirectionEnum = 2
)

var PegRoundDirectionEnum_name = map[int32]string{
	0: "PEG_ROUND_DIRECTION_UNSPECIFIED",
	1: "PEG_ROUND_DIRECTION_MORE_AGGRESSIVE",
	2: "PEG_ROUND_DIRECTION_MORE_PASSIVE",
}

var PegRoundDirectionEnum_value = map[string]int32{
	"PEG_ROUND_DIRECTION_UNSPECIFIED":     0,
	"PEG_ROUND_DIRECTION_MORE_AGGRESSIVE": 1,
	"PEG_ROUND_DIRECTION_MORE_PASSIVE":    2,
}

func (x PegRoundDirectionEnum) String() string {
	return proto.EnumName(PegRoundDirectionEnum_name, int32(x))
}

func (PegRoundDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{56}
}

type PegScopeEnum int32

const (
	PegScopeEnum_PEG_SCOPE_UNSPECIFIED              PegScopeEnum = 0
	PegScopeEnum_PEG_SCOPE_GLOBAL                   PegScopeEnum = 1
	PegScopeEnum_PEG_SCOPE_LOCAL                    PegScopeEnum = 2
	PegScopeEnum_PEG_SCOPE_NATIONAL                 PegScopeEnum = 3
	PegScopeEnum_PEG_SCOPE_NATIONAL_EXCLUDING_LOCAL PegScopeEnum = 4
)

var PegScopeEnum_name = map[int32]string{
	0: "PEG_SCOPE_UNSPECIFIED",
	1: "PEG_SCOPE_GLOBAL",
	2: "PEG_SCOPE_LOCAL",
	3: "PEG_SCOPE_NATIONAL",
	4: "PEG_SCOPE_NATIONAL_EXCLUDING_LOCAL",
}

var PegScopeEnum_value = map[string]int32{
	"PEG_SCOPE_UNSPECIFIED":              0,
	"PEG_SCOPE_GLOBAL":                   1,
	"PEG_SCOPE_LOCAL":                    2,
	"PEG_SCOPE_NATIONAL":                 3,
	"PEG_SCOPE_NATIONAL_EXCLUDING_LOCAL": 4,
}

func (x PegScopeEnum) String() string {
	return proto.EnumName(PegScopeEnum_name, int32(x))
}

func (PegScopeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{57}
}

type PegSecurityIDSourceEnum int32

const (
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_UNSPECIFIED                      PegSecurityIDSourceEnum = 0
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_CUSIP                            PegSecurityIDSourceEnum = 1
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_QUIK                             PegSecurityIDSourceEnum = 2
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_SEDOL                            PegSecurityIDSourceEnum = 3
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_ISIN_NUMBER                      PegSecurityIDSourceEnum = 4
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_RIC_CODE                         PegSecurityIDSourceEnum = 5
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 PegSecurityIDSourceEnum = 6
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                PegSecurityIDSourceEnum = 7
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    PegSecurityIDSourceEnum = 8
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  PegSecurityIDSourceEnum = 9
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_BELGIAN                          PegSecurityIDSourceEnum = 10
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 PegSecurityIDSourceEnum = 11
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_COMMON                           PegSecurityIDSourceEnum = 12
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_DUTCH                            PegSecurityIDSourceEnum = 13
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_SICOVAM                          PegSecurityIDSourceEnum = 14
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_VALOREN                          PegSecurityIDSourceEnum = 15
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_WERTPAPIER                       PegSecurityIDSourceEnum = 16
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_CLEARING_HOUSE                   PegSecurityIDSourceEnum = 17
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          PegSecurityIDSourceEnum = 18
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY PegSecurityIDSourceEnum = 19
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 PegSecurityIDSourceEnum = 20
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_ISDA_FPML_URL                    PegSecurityIDSourceEnum = 21
	PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  PegSecurityIDSourceEnum = 22
)

var PegSecurityIDSourceEnum_name = map[int32]string{
	0:  "PEG_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "PEG_SECURITY_ID_SOURCE_CUSIP",
	2:  "PEG_SECURITY_ID_SOURCE_QUIK",
	3:  "PEG_SECURITY_ID_SOURCE_SEDOL",
	4:  "PEG_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "PEG_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "PEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "PEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "PEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "PEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "PEG_SECURITY_ID_SOURCE_BELGIAN",
	11: "PEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "PEG_SECURITY_ID_SOURCE_COMMON",
	13: "PEG_SECURITY_ID_SOURCE_DUTCH",
	14: "PEG_SECURITY_ID_SOURCE_SICOVAM",
	15: "PEG_SECURITY_ID_SOURCE_VALOREN",
	16: "PEG_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "PEG_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "PEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "PEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "PEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "PEG_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "PEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var PegSecurityIDSourceEnum_value = map[string]int32{
	"PEG_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"PEG_SECURITY_ID_SOURCE_CUSIP":                            1,
	"PEG_SECURITY_ID_SOURCE_QUIK":                             2,
	"PEG_SECURITY_ID_SOURCE_SEDOL":                            3,
	"PEG_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"PEG_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"PEG_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"PEG_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"PEG_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"PEG_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"PEG_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"PEG_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"PEG_SECURITY_ID_SOURCE_COMMON":                           12,
	"PEG_SECURITY_ID_SOURCE_DUTCH":                            13,
	"PEG_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"PEG_SECURITY_ID_SOURCE_VALOREN":                          15,
	"PEG_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"PEG_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"PEG_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"PEG_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"PEG_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"PEG_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"PEG_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x PegSecurityIDSourceEnum) String() string {
	return proto.EnumName(PegSecurityIDSourceEnum_name, int32(x))
}

func (PegSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{58}
}

type PosAmtTypeEnum int32

const (
	PosAmtTypeEnum_POS_AMT_TYPE_UNSPECIFIED                               PosAmtTypeEnum = 0
	PosAmtTypeEnum_POS_AMT_TYPE_CASH_AMOUNT                               PosAmtTypeEnum = 1
	PosAmtTypeEnum_POS_AMT_TYPE_CASH_RESIDUAL_AMOUNT                      PosAmtTypeEnum = 2
	PosAmtTypeEnum_POS_AMT_TYPE_FINAL_MARK_TO_MARKET_AMOUNT               PosAmtTypeEnum = 3
	PosAmtTypeEnum_POS_AMT_TYPE_INCREMENTAL_MARK_TO_MARKET_AMOUNT         PosAmtTypeEnum = 4
	PosAmtTypeEnum_POS_AMT_TYPE_PREMIUM_AMOUNT                            PosAmtTypeEnum = 5
	PosAmtTypeEnum_POS_AMT_TYPE_START_OF_DAY_MARK_TO_MARKET_AMOUNT        PosAmtTypeEnum = 6
	PosAmtTypeEnum_POS_AMT_TYPE_TRADE_VARIATION_AMOUNT                    PosAmtTypeEnum = 7
	PosAmtTypeEnum_POS_AMT_TYPE_VALUE_ADJUSTED_AMOUNT                     PosAmtTypeEnum = 8
	PosAmtTypeEnum_POS_AMT_TYPE_SETTLEMENT_VALUE                          PosAmtTypeEnum = 9
	PosAmtTypeEnum_POS_AMT_TYPE_ACCRUED_COUPON_AMOUNT                     PosAmtTypeEnum = 10
	PosAmtTypeEnum_POS_AMT_TYPE_COLLATERALIZED_MARK_TO_MARKET             PosAmtTypeEnum = 11
	PosAmtTypeEnum_POS_AMT_TYPE_COMPENSATION_AMOUNT                       PosAmtTypeEnum = 12
	PosAmtTypeEnum_POS_AMT_TYPE_COUPON_AMOUNT                             PosAmtTypeEnum = 13
	PosAmtTypeEnum_POS_AMT_TYPE_INCREMENTAL_ACCRUED_COUPON                PosAmtTypeEnum = 14
	PosAmtTypeEnum_POS_AMT_TYPE_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET PosAmtTypeEnum = 15
	PosAmtTypeEnum_POS_AMT_TYPE_INITIAL_TRADE_COUPON_AMOUNT               PosAmtTypeEnum = 16
	PosAmtTypeEnum_POS_AMT_TYPE_TOTAL_BANKED_AMOUNT                       PosAmtTypeEnum = 17
	PosAmtTypeEnum_POS_AMT_TYPE_TOTAL_COLLATERALIZED_AMOUNT               PosAmtTypeEnum = 18
)

var PosAmtTypeEnum_name = map[int32]string{
	0:  "POS_AMT_TYPE_UNSPECIFIED",
	1:  "POS_AMT_TYPE_CASH_AMOUNT",
	2:  "POS_AMT_TYPE_CASH_RESIDUAL_AMOUNT",
	3:  "POS_AMT_TYPE_FINAL_MARK_TO_MARKET_AMOUNT",
	4:  "POS_AMT_TYPE_INCREMENTAL_MARK_TO_MARKET_AMOUNT",
	5:  "POS_AMT_TYPE_PREMIUM_AMOUNT",
	6:  "POS_AMT_TYPE_START_OF_DAY_MARK_TO_MARKET_AMOUNT",
	7:  "POS_AMT_TYPE_TRADE_VARIATION_AMOUNT",
	8:  "POS_AMT_TYPE_VALUE_ADJUSTED_AMOUNT",
	9:  "POS_AMT_TYPE_SETTLEMENT_VALUE",
	10: "POS_AMT_TYPE_ACCRUED_COUPON_AMOUNT",
	11: "POS_AMT_TYPE_COLLATERALIZED_MARK_TO_MARKET",
	12: "POS_AMT_TYPE_COMPENSATION_AMOUNT",
	13: "POS_AMT_TYPE_COUPON_AMOUNT",
	14: "POS_AMT_TYPE_INCREMENTAL_ACCRUED_COUPON",
	15: "POS_AMT_TYPE_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET",
	16: "POS_AMT_TYPE_INITIAL_TRADE_COUPON_AMOUNT",
	17: "POS_AMT_TYPE_TOTAL_BANKED_AMOUNT",
	18: "POS_AMT_TYPE_TOTAL_COLLATERALIZED_AMOUNT",
}

var PosAmtTypeEnum_value = map[string]int32{
	"POS_AMT_TYPE_UNSPECIFIED":                               0,
	"POS_AMT_TYPE_CASH_AMOUNT":                               1,
	"POS_AMT_TYPE_CASH_RESIDUAL_AMOUNT":                      2,
	"POS_AMT_TYPE_FINAL_MARK_TO_MARKET_AMOUNT":               3,
	"POS_AMT_TYPE_INCREMENTAL_MARK_TO_MARKET_AMOUNT":         4,
	"POS_AMT_TYPE_PREMIUM_AMOUNT":                            5,
	"POS_AMT_TYPE_START_OF_DAY_MARK_TO_MARKET_AMOUNT":        6,
	"POS_AMT_TYPE_TRADE_VARIATION_AMOUNT":                    7,
	"POS_AMT_TYPE_VALUE_ADJUSTED_AMOUNT":                     8,
	"POS_AMT_TYPE_SETTLEMENT_VALUE":                          9,
	"POS_AMT_TYPE_ACCRUED_COUPON_AMOUNT":                     10,
	"POS_AMT_TYPE_COLLATERALIZED_MARK_TO_MARKET":             11,
	"POS_AMT_TYPE_COMPENSATION_AMOUNT":                       12,
	"POS_AMT_TYPE_COUPON_AMOUNT":                             13,
	"POS_AMT_TYPE_INCREMENTAL_ACCRUED_COUPON":                14,
	"POS_AMT_TYPE_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET": 15,
	"POS_AMT_TYPE_INITIAL_TRADE_COUPON_AMOUNT":               16,
	"POS_AMT_TYPE_TOTAL_BANKED_AMOUNT":                       17,
	"POS_AMT_TYPE_TOTAL_COLLATERALIZED_AMOUNT":               18,
}

func (x PosAmtTypeEnum) String() string {
	return proto.EnumName(PosAmtTypeEnum_name, int32(x))
}

func (PosAmtTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{59}
}

type PosTypeEnum int32

const (
	PosTypeEnum_POS_TYPE_UNSPECIFIED                    PosTypeEnum = 0
	PosTypeEnum_POS_TYPE_ADJUSTMENT_QTY                 PosTypeEnum = 1
	PosTypeEnum_POS_TYPE_ALLOCATION_TRADE_QTY           PosTypeEnum = 2
	PosTypeEnum_POS_TYPE_AS_OF_TRADE_QTY                PosTypeEnum = 3
	PosTypeEnum_POS_TYPE_CROSS_MARGIN_QTY               PosTypeEnum = 4
	PosTypeEnum_POS_TYPE_DELIVERY_QTY                   PosTypeEnum = 5
	PosTypeEnum_POS_TYPE_ELECTRONIC_TRADE_QTY           PosTypeEnum = 6
	PosTypeEnum_POS_TYPE_END_OF_DAY_QTY                 PosTypeEnum = 7
	PosTypeEnum_POS_TYPE_INTEGRAL_SPLIT                 PosTypeEnum = 8
	PosTypeEnum_POS_TYPE_INTER_SPREAD_QTY               PosTypeEnum = 9
	PosTypeEnum_POS_TYPE_INTRA_SPREAD_QTY               PosTypeEnum = 10
	PosTypeEnum_POS_TYPE_OPTION_ASSIGNMENT              PosTypeEnum = 11
	PosTypeEnum_POS_TYPE_OPTION_EXERCISE_QTY            PosTypeEnum = 12
	PosTypeEnum_POS_TYPE_PIT_TRADE_QTY                  PosTypeEnum = 13
	PosTypeEnum_POS_TYPE_START_OF_DAY_QTY               PosTypeEnum = 14
	PosTypeEnum_POS_TYPE_TOTAL_TRANSACTION_QTY          PosTypeEnum = 15
	PosTypeEnum_POS_TYPE_TRANSACTION_FROM_ASSIGNMENT    PosTypeEnum = 16
	PosTypeEnum_POS_TYPE_TRANSACTION_FROM_EXERCISE      PosTypeEnum = 17
	PosTypeEnum_POS_TYPE_TRANSACTION_QUANTITY           PosTypeEnum = 18
	PosTypeEnum_POS_TYPE_TRANSFER_TRADE_QTY             PosTypeEnum = 19
	PosTypeEnum_POS_TYPE_CORPORATE_ACTION_ADJUSTMENT    PosTypeEnum = 20
	PosTypeEnum_POS_TYPE_RECEIVE_QUANTITY               PosTypeEnum = 21
	PosTypeEnum_POS_TYPE_DELIVERY_NOTICE_QTY            PosTypeEnum = 22
	PosTypeEnum_POS_TYPE_EXCHANGE_FOR_PHYSICAL_QTY      PosTypeEnum = 23
	PosTypeEnum_POS_TYPE_PRIVATELY_NEGOTIATED_TRADE_QTY PosTypeEnum = 24
	PosTypeEnum_POS_TYPE_NET_DELTA_QTY                  PosTypeEnum = 25
	PosTypeEnum_POS_TYPE_CREDIT_EVENT_ADJUSTMENT        PosTypeEnum = 26
	PosTypeEnum_POS_TYPE_SUCCESSION_EVENT_ADJUSTMENT    PosTypeEnum = 27
)

var PosTypeEnum_name = map[int32]string{
	0:  "POS_TYPE_UNSPECIFIED",
	1:  "POS_TYPE_ADJUSTMENT_QTY",
	2:  "POS_TYPE_ALLOCATION_TRADE_QTY",
	3:  "POS_TYPE_AS_OF_TRADE_QTY",
	4:  "POS_TYPE_CROSS_MARGIN_QTY",
	5:  "POS_TYPE_DELIVERY_QTY",
	6:  "POS_TYPE_ELECTRONIC_TRADE_QTY",
	7:  "POS_TYPE_END_OF_DAY_QTY",
	8:  "POS_TYPE_INTEGRAL_SPLIT",
	9:  "POS_TYPE_INTER_SPREAD_QTY",
	10: "POS_TYPE_INTRA_SPREAD_QTY",
	11: "POS_TYPE_OPTION_ASSIGNMENT",
	12: "POS_TYPE_OPTION_EXERCISE_QTY",
	13: "POS_TYPE_PIT_TRADE_QTY",
	14: "POS_TYPE_START_OF_DAY_QTY",
	15: "POS_TYPE_TOTAL_TRANSACTION_QTY",
	16: "POS_TYPE_TRANSACTION_FROM_ASSIGNMENT",
	17: "POS_TYPE_TRANSACTION_FROM_EXERCISE",
	18: "POS_TYPE_TRANSACTION_QUANTITY",
	19: "POS_TYPE_TRANSFER_TRADE_QTY",
	20: "POS_TYPE_CORPORATE_ACTION_ADJUSTMENT",
	21: "POS_TYPE_RECEIVE_QUANTITY",
	22: "POS_TYPE_DELIVERY_NOTICE_QTY",
	23: "POS_TYPE_EXCHANGE_FOR_PHYSICAL_QTY",
	24: "POS_TYPE_PRIVATELY_NEGOTIATED_TRADE_QTY",
	25: "POS_TYPE_NET_DELTA_QTY",
	26: "POS_TYPE_CREDIT_EVENT_ADJUSTMENT",
	27: "POS_TYPE_SUCCESSION_EVENT_ADJUSTMENT",
}

var PosTypeEnum_value = map[string]int32{
	"POS_TYPE_UNSPECIFIED":                    0,
	"POS_TYPE_ADJUSTMENT_QTY":                 1,
	"POS_TYPE_ALLOCATION_TRADE_QTY":           2,
	"POS_TYPE_AS_OF_TRADE_QTY":                3,
	"POS_TYPE_CROSS_MARGIN_QTY":               4,
	"POS_TYPE_DELIVERY_QTY":                   5,
	"POS_TYPE_ELECTRONIC_TRADE_QTY":           6,
	"POS_TYPE_END_OF_DAY_QTY":                 7,
	"POS_TYPE_INTEGRAL_SPLIT":                 8,
	"POS_TYPE_INTER_SPREAD_QTY":               9,
	"POS_TYPE_INTRA_SPREAD_QTY":               10,
	"POS_TYPE_OPTION_ASSIGNMENT":              11,
	"POS_TYPE_OPTION_EXERCISE_QTY":            12,
	"POS_TYPE_PIT_TRADE_QTY":                  13,
	"POS_TYPE_START_OF_DAY_QTY":               14,
	"POS_TYPE_TOTAL_TRANSACTION_QTY":          15,
	"POS_TYPE_TRANSACTION_FROM_ASSIGNMENT":    16,
	"POS_TYPE_TRANSACTION_FROM_EXERCISE":      17,
	"POS_TYPE_TRANSACTION_QUANTITY":           18,
	"POS_TYPE_TRANSFER_TRADE_QTY":             19,
	"POS_TYPE_CORPORATE_ACTION_ADJUSTMENT":    20,
	"POS_TYPE_RECEIVE_QUANTITY":               21,
	"POS_TYPE_DELIVERY_NOTICE_QTY":            22,
	"POS_TYPE_EXCHANGE_FOR_PHYSICAL_QTY":      23,
	"POS_TYPE_PRIVATELY_NEGOTIATED_TRADE_QTY": 24,
	"POS_TYPE_NET_DELTA_QTY":                  25,
	"POS_TYPE_CREDIT_EVENT_ADJUSTMENT":        26,
	"POS_TYPE_SUCCESSION_EVENT_ADJUSTMENT":    27,
}

func (x PosTypeEnum) String() string {
	return proto.EnumName(PosTypeEnum_name, int32(x))
}

func (PosTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{60}
}

type PosQtyStatusEnum int32

const (
	PosQtyStatusEnum_POS_QTY_STATUS_UNSPECIFIED PosQtyStatusEnum = 0
	PosQtyStatusEnum_POS_QTY_STATUS_ACCEPTED    PosQtyStatusEnum = 1
	PosQtyStatusEnum_POS_QTY_STATUS_REJECTED    PosQtyStatusEnum = 2
	PosQtyStatusEnum_POS_QTY_STATUS_SUBMITTED   PosQtyStatusEnum = 3
)

var PosQtyStatusEnum_name = map[int32]string{
	0: "POS_QTY_STATUS_UNSPECIFIED",
	1: "POS_QTY_STATUS_ACCEPTED",
	2: "POS_QTY_STATUS_REJECTED",
	3: "POS_QTY_STATUS_SUBMITTED",
}

var PosQtyStatusEnum_value = map[string]int32{
	"POS_QTY_STATUS_UNSPECIFIED": 0,
	"POS_QTY_STATUS_ACCEPTED":    1,
	"POS_QTY_STATUS_REJECTED":    2,
	"POS_QTY_STATUS_SUBMITTED":   3,
}

func (x PosQtyStatusEnum) String() string {
	return proto.EnumName(PosQtyStatusEnum_name, int32(x))
}

func (PosQtyStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{61}
}

type SettlDeliveryTypeEnum int32

const (
	SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_UNSPECIFIED     SettlDeliveryTypeEnum = 0
	SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_FREE            SettlDeliveryTypeEnum = 1
	SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_HOLD_IN_CUSTODY SettlDeliveryTypeEnum = 2
	SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_TRI_PARTY       SettlDeliveryTypeEnum = 3
	SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_VERSUS          SettlDeliveryTypeEnum = 4
)

var SettlDeliveryTypeEnum_name = map[int32]string{
	0: "SETTL_DELIVERY_TYPE_UNSPECIFIED",
	1: "SETTL_DELIVERY_TYPE_FREE",
	2: "SETTL_DELIVERY_TYPE_HOLD_IN_CUSTODY",
	3: "SETTL_DELIVERY_TYPE_TRI_PARTY",
	4: "SETTL_DELIVERY_TYPE_VERSUS",
}

var SettlDeliveryTypeEnum_value = map[string]int32{
	"SETTL_DELIVERY_TYPE_UNSPECIFIED":     0,
	"SETTL_DELIVERY_TYPE_FREE":            1,
	"SETTL_DELIVERY_TYPE_HOLD_IN_CUSTODY": 2,
	"SETTL_DELIVERY_TYPE_TRI_PARTY":       3,
	"SETTL_DELIVERY_TYPE_VERSUS":          4,
}

func (x SettlDeliveryTypeEnum) String() string {
	return proto.EnumName(SettlDeliveryTypeEnum_name, int32(x))
}

func (SettlDeliveryTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{62}
}

type StandInstDbTypeEnum int32

const (
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_UNSPECIFIED       StandInstDbTypeEnum = 0
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_AGLOBAL_CUSTODIAN StandInstDbTypeEnum = 1
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_DTCSID            StandInstDbTypeEnum = 2
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_OTHER             StandInstDbTypeEnum = 3
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_THOMSON_ALERT     StandInstDbTypeEnum = 4
	StandInstDbTypeEnum_STAND_INST_DB_TYPE_ACCOUNT_NET       StandInstDbTypeEnum = 5
)

var StandInstDbTypeEnum_name = map[int32]string{
	0: "STAND_INST_DB_TYPE_UNSPECIFIED",
	1: "STAND_INST_DB_TYPE_AGLOBAL_CUSTODIAN",
	2: "STAND_INST_DB_TYPE_DTCSID",
	3: "STAND_INST_DB_TYPE_OTHER",
	4: "STAND_INST_DB_TYPE_THOMSON_ALERT",
	5: "STAND_INST_DB_TYPE_ACCOUNT_NET",
}

var StandInstDbTypeEnum_value = map[string]int32{
	"STAND_INST_DB_TYPE_UNSPECIFIED":       0,
	"STAND_INST_DB_TYPE_AGLOBAL_CUSTODIAN": 1,
	"STAND_INST_DB_TYPE_DTCSID":            2,
	"STAND_INST_DB_TYPE_OTHER":             3,
	"STAND_INST_DB_TYPE_THOMSON_ALERT":     4,
	"STAND_INST_DB_TYPE_ACCOUNT_NET":       5,
}

func (x StandInstDbTypeEnum) String() string {
	return proto.EnumName(StandInstDbTypeEnum_name, int32(x))
}

func (StandInstDbTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{63}
}

type SettlPartyIDSourceEnum int32

const (
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_UNSPECIFIED                             SettlPartyIDSourceEnum = 0
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              SettlPartyIDSourceEnum = 1
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              SettlPartyIDSourceEnum = 2
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_BIC                                     SettlPartyIDSourceEnum = 3
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     SettlPartyIDSourceEnum = 4
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      SettlPartyIDSourceEnum = 5
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        SettlPartyIDSourceEnum = 6
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      SettlPartyIDSourceEnum = 7
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            SettlPartyIDSourceEnum = 8
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_PROPRIETARY                             SettlPartyIDSourceEnum = 9
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              SettlPartyIDSourceEnum = 10
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           SettlPartyIDSourceEnum = 11
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  SettlPartyIDSourceEnum = 12
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER SettlPartyIDSourceEnum = 13
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            SettlPartyIDSourceEnum = 14
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               SettlPartyIDSourceEnum = 15
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_CSDPARTICIPANT                          SettlPartyIDSourceEnum = 16
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_ISITCACRONYM                            SettlPartyIDSourceEnum = 17
	SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_MIC                                     SettlPartyIDSourceEnum = 18
)

var SettlPartyIDSourceEnum_name = map[int32]string{
	0:  "SETTL_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "SETTL_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "SETTL_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "SETTL_PARTY_ID_SOURCE_BIC",
	4:  "SETTL_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "SETTL_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "SETTL_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "SETTL_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "SETTL_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "SETTL_PARTY_ID_SOURCE_PROPRIETARY",
	10: "SETTL_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "SETTL_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "SETTL_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "SETTL_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "SETTL_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "SETTL_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "SETTL_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "SETTL_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "SETTL_PARTY_ID_SOURCE_MIC",
}

var SettlPartyIDSourceEnum_value = map[string]int32{
	"SETTL_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"SETTL_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"SETTL_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"SETTL_PARTY_ID_SOURCE_BIC":                                     3,
	"SETTL_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"SETTL_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"SETTL_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"SETTL_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"SETTL_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"SETTL_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"SETTL_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"SETTL_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"SETTL_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"SETTL_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"SETTL_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"SETTL_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"SETTL_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"SETTL_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"SETTL_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x SettlPartyIDSourceEnum) String() string {
	return proto.EnumName(SettlPartyIDSourceEnum_name, int32(x))
}

func (SettlPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{64}
}

type SettlPartyRoleEnum int32

const (
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_UNSPECIFIED                           SettlPartyRoleEnum = 0
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_BROKER_OF_CREDIT                      SettlPartyRoleEnum = 1
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CLEARING_FIRM                         SettlPartyRoleEnum = 2
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CLIENT_ID                             SettlPartyRoleEnum = 3
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_CLEARING_FIRM                  SettlPartyRoleEnum = 4
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_FIRM                           SettlPartyRoleEnum = 5
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           SettlPartyRoleEnum = 6
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ENTERING_FIRM                         SettlPartyRoleEnum = 7
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXECUTING_FIRM                        SettlPartyRoleEnum = 8
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXECUTING_SYSTEM                      SettlPartyRoleEnum = 9
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXECUTING_TRADER                      SettlPartyRoleEnum = 10
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                SettlPartyRoleEnum = 11
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  SettlPartyRoleEnum = 12
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INTRODUCING_FIRM                      SettlPartyRoleEnum = 13
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INVESTOR_ID                           SettlPartyRoleEnum = 14
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_LOCATE                                SettlPartyRoleEnum = 15
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ORDER_ORIGINATION_FIRM                SettlPartyRoleEnum = 16
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ORDER_ORIGINATION_TRADER              SettlPartyRoleEnum = 17
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SETTLEMENT_LOCATION                   SettlPartyRoleEnum = 18
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SPONSORING_FIRM                       SettlPartyRoleEnum = 19
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                SettlPartyRoleEnum = 20
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_AGENT                                 SettlPartyRoleEnum = 21
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_BENEFICIARY                           SettlPartyRoleEnum = 22
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_BUYER                                 SettlPartyRoleEnum = 23
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CLEARING_ORGANIZATION                 SettlPartyRoleEnum = 24
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_INVESTOR_ID                    SettlPartyRoleEnum = 25
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_TRADER                         SettlPartyRoleEnum = 26
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CORRESPONDENT_BROKER                  SettlPartyRoleEnum = 27
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   SettlPartyRoleEnum = 28
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CUSTODIAN                             SettlPartyRoleEnum = 29
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CUSTOMER_ACCOUNT                      SettlPartyRoleEnum = 30
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ENTERING_TRADER                       SettlPartyRoleEnum = 31
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXCHANGE                              SettlPartyRoleEnum = 32
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INTERESTED_PARTY                      SettlPartyRoleEnum = 33
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INTERMEDIARY                          SettlPartyRoleEnum = 34
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_LIQUIDITY_PROVIDER                    SettlPartyRoleEnum = 35
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_POSITION_ACCOUNT                      SettlPartyRoleEnum = 36
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_REGULATORY_BODY                       SettlPartyRoleEnum = 37
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SUB_CUSTODIAN                         SettlPartyRoleEnum = 38
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_TRANSFER_TO_FIRM                      SettlPartyRoleEnum = 39
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INTRODUCING_BROKER                    SettlPartyRoleEnum = 40
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_EXCHANGE                       SettlPartyRoleEnum = 41
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               SettlPartyRoleEnum = 42
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                SettlPartyRoleEnum = 43
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               SettlPartyRoleEnum = 44
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              SettlPartyRoleEnum = 45
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ASSET_MANAGER                         SettlPartyRoleEnum = 46
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CLAIMING_ACCOUNT                      SettlPartyRoleEnum = 47
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_FOREIGN_FIRM                          SettlPartyRoleEnum = 48
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       SettlPartyRoleEnum = 49
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_PLEDGEE_ACCOUNT                       SettlPartyRoleEnum = 50
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_PLEDGOR_ACCOUNT                       SettlPartyRoleEnum = 51
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SENDER_LOCATION                       SettlPartyRoleEnum = 52
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SESSION_ID                            SettlPartyRoleEnum = 53
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           SettlPartyRoleEnum = 54
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_TRADER_MNEMONIC                       SettlPartyRoleEnum = 55
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               SettlPartyRoleEnum = 56
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ENTERING_UNIT                         SettlPartyRoleEnum = 57
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXECUTING_UNIT                        SettlPartyRoleEnum = 58
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             SettlPartyRoleEnum = 59
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         SettlPartyRoleEnum = 60
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE SettlPartyRoleEnum = 61
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_DESK_ID                               SettlPartyRoleEnum = 62
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_EXECUTION_VENUE                       SettlPartyRoleEnum = 63
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              SettlPartyRoleEnum = 64
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              SettlPartyRoleEnum = 65
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_INVESTMENT_FIRM                       SettlPartyRoleEnum = 66
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_LOCATION_ID                           SettlPartyRoleEnum = 67
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          SettlPartyRoleEnum = 68
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_MARKET_DATA_MARKET                    SettlPartyRoleEnum = 69
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_MARKET_MAKER                          SettlPartyRoleEnum = 70
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         SettlPartyRoleEnum = 71
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_QUOTE_ORIGINATOR                      SettlPartyRoleEnum = 72
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_REGULATED_MARKET                      SettlPartyRoleEnum = 73
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_REPORTING_INTERMEDIARY                SettlPartyRoleEnum = 74
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_REPORT_ORIGINATOR                     SettlPartyRoleEnum = 75
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_SYSTEMATIC_INTERNALISER               SettlPartyRoleEnum = 76
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ALLOCATION_ENTITY                     SettlPartyRoleEnum = 77
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_BROKER_CLEARING_ID                    SettlPartyRoleEnum = 78
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_PRIME_BROKER                          SettlPartyRoleEnum = 79
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_STEP_OUT_FIRM                         SettlPartyRoleEnum = 80
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       SettlPartyRoleEnum = 81
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      SettlPartyRoleEnum = 82
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_CLEARING_ACCOUNT                      SettlPartyRoleEnum = 83
	SettlPartyRoleEnum_SETTL_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    SettlPartyRoleEnum = 84
)

var SettlPartyRoleEnum_name = map[int32]string{
	0:  "SETTL_PARTY_ROLE_UNSPECIFIED",
	1:  "SETTL_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "SETTL_PARTY_ROLE_CLEARING_FIRM",
	3:  "SETTL_PARTY_ROLE_CLIENT_ID",
	4:  "SETTL_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "SETTL_PARTY_ROLE_CONTRA_FIRM",
	6:  "SETTL_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "SETTL_PARTY_ROLE_ENTERING_FIRM",
	8:  "SETTL_PARTY_ROLE_EXECUTING_FIRM",
	9:  "SETTL_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "SETTL_PARTY_ROLE_EXECUTING_TRADER",
	11: "SETTL_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "SETTL_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "SETTL_PARTY_ROLE_INTRODUCING_FIRM",
	14: "SETTL_PARTY_ROLE_INVESTOR_ID",
	15: "SETTL_PARTY_ROLE_LOCATE",
	16: "SETTL_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "SETTL_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "SETTL_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "SETTL_PARTY_ROLE_SPONSORING_FIRM",
	20: "SETTL_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "SETTL_PARTY_ROLE_AGENT",
	22: "SETTL_PARTY_ROLE_BENEFICIARY",
	23: "SETTL_PARTY_ROLE_BUYER",
	24: "SETTL_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "SETTL_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "SETTL_PARTY_ROLE_CONTRA_TRADER",
	27: "SETTL_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "SETTL_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "SETTL_PARTY_ROLE_CUSTODIAN",
	30: "SETTL_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "SETTL_PARTY_ROLE_ENTERING_TRADER",
	32: "SETTL_PARTY_ROLE_EXCHANGE",
	33: "SETTL_PARTY_ROLE_INTERESTED_PARTY",
	34: "SETTL_PARTY_ROLE_INTERMEDIARY",
	35: "SETTL_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "SETTL_PARTY_ROLE_POSITION_ACCOUNT",
	37: "SETTL_PARTY_ROLE_REGULATORY_BODY",
	38: "SETTL_PARTY_ROLE_SUB_CUSTODIAN",
	39: "SETTL_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "SETTL_PARTY_ROLE_INTRODUCING_BROKER",
	41: "SETTL_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "SETTL_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "SETTL_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "SETTL_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "SETTL_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "SETTL_PARTY_ROLE_ASSET_MANAGER",
	47: "SETTL_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "SETTL_PARTY_ROLE_FOREIGN_FIRM",
	49: "SETTL_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "SETTL_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "SETTL_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "SETTL_PARTY_ROLE_SENDER_LOCATION",
	53: "SETTL_PARTY_ROLE_SESSION_ID",
	54: "SETTL_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "SETTL_PARTY_ROLE_TRADER_MNEMONIC",
	56: "SETTL_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "SETTL_PARTY_ROLE_ENTERING_UNIT",
	58: "SETTL_PARTY_ROLE_EXECUTING_UNIT",
	59: "SETTL_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "SETTL_PARTY_ROLE_DESK_ID",
	63: "SETTL_PARTY_ROLE_EXECUTION_VENUE",
	64: "SETTL_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "SETTL_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "SETTL_PARTY_ROLE_INVESTMENT_FIRM",
	67: "SETTL_PARTY_ROLE_LOCATION_ID",
	68: "SETTL_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "SETTL_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "SETTL_PARTY_ROLE_MARKET_MAKER",
	71: "SETTL_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "SETTL_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "SETTL_PARTY_ROLE_REGULATED_MARKET",
	74: "SETTL_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "SETTL_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "SETTL_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "SETTL_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "SETTL_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "SETTL_PARTY_ROLE_PRIME_BROKER",
	80: "SETTL_PARTY_ROLE_STEP_OUT_FIRM",
	81: "SETTL_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "SETTL_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "SETTL_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "SETTL_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var SettlPartyRoleEnum_value = map[string]int32{
	"SETTL_PARTY_ROLE_UNSPECIFIED":                           0,
	"SETTL_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"SETTL_PARTY_ROLE_CLEARING_FIRM":                         2,
	"SETTL_PARTY_ROLE_CLIENT_ID":                             3,
	"SETTL_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"SETTL_PARTY_ROLE_CONTRA_FIRM":                           5,
	"SETTL_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"SETTL_PARTY_ROLE_ENTERING_FIRM":                         7,
	"SETTL_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"SETTL_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"SETTL_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"SETTL_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"SETTL_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"SETTL_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"SETTL_PARTY_ROLE_INVESTOR_ID":                           14,
	"SETTL_PARTY_ROLE_LOCATE":                                15,
	"SETTL_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"SETTL_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"SETTL_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"SETTL_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"SETTL_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"SETTL_PARTY_ROLE_AGENT":                                 21,
	"SETTL_PARTY_ROLE_BENEFICIARY":                           22,
	"SETTL_PARTY_ROLE_BUYER":                                 23,
	"SETTL_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"SETTL_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"SETTL_PARTY_ROLE_CONTRA_TRADER":                         26,
	"SETTL_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"SETTL_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"SETTL_PARTY_ROLE_CUSTODIAN":                             29,
	"SETTL_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"SETTL_PARTY_ROLE_ENTERING_TRADER":                       31,
	"SETTL_PARTY_ROLE_EXCHANGE":                              32,
	"SETTL_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"SETTL_PARTY_ROLE_INTERMEDIARY":                          34,
	"SETTL_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"SETTL_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"SETTL_PARTY_ROLE_REGULATORY_BODY":                       37,
	"SETTL_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"SETTL_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"SETTL_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"SETTL_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"SETTL_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"SETTL_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"SETTL_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"SETTL_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"SETTL_PARTY_ROLE_ASSET_MANAGER":                         46,
	"SETTL_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"SETTL_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"SETTL_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"SETTL_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"SETTL_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"SETTL_PARTY_ROLE_SENDER_LOCATION":                       52,
	"SETTL_PARTY_ROLE_SESSION_ID":                            53,
	"SETTL_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"SETTL_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"SETTL_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"SETTL_PARTY_ROLE_ENTERING_UNIT":                         57,
	"SETTL_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"SETTL_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"SETTL_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"SETTL_PARTY_ROLE_DESK_ID":                               62,
	"SETTL_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"SETTL_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"SETTL_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"SETTL_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"SETTL_PARTY_ROLE_LOCATION_ID":                           67,
	"SETTL_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"SETTL_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"SETTL_PARTY_ROLE_MARKET_MAKER":                          70,
	"SETTL_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"SETTL_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"SETTL_PARTY_ROLE_REGULATED_MARKET":                      73,
	"SETTL_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"SETTL_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"SETTL_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"SETTL_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"SETTL_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"SETTL_PARTY_ROLE_PRIME_BROKER":                          79,
	"SETTL_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"SETTL_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"SETTL_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"SETTL_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"SETTL_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x SettlPartyRoleEnum) String() string {
	return proto.EnumName(SettlPartyRoleEnum_name, int32(x))
}

func (SettlPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{65}
}

type BenchmarkCurveNameEnum int32

const (
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_UNSPECIFIED BenchmarkCurveNameEnum = 0
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_EURIBOR     BenchmarkCurveNameEnum = 1
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_FUTURE_SWAP BenchmarkCurveNameEnum = 2
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_LIBID       BenchmarkCurveNameEnum = 3
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_LIBOR       BenchmarkCurveNameEnum = 4
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_MUNI_AAA    BenchmarkCurveNameEnum = 5
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_OTHER       BenchmarkCurveNameEnum = 6
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_PFANDBRIEFE BenchmarkCurveNameEnum = 7
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_SWAP        BenchmarkCurveNameEnum = 8
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_TREASURY    BenchmarkCurveNameEnum = 9
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_EONIA       BenchmarkCurveNameEnum = 10
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_EUREPO      BenchmarkCurveNameEnum = 11
	BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_SONIA       BenchmarkCurveNameEnum = 12
)

var BenchmarkCurveNameEnum_name = map[int32]string{
	0:  "BENCHMARK_CURVE_NAME_UNSPECIFIED",
	1:  "BENCHMARK_CURVE_NAME_EURIBOR",
	2:  "BENCHMARK_CURVE_NAME_FUTURE_SWAP",
	3:  "BENCHMARK_CURVE_NAME_LIBID",
	4:  "BENCHMARK_CURVE_NAME_LIBOR",
	5:  "BENCHMARK_CURVE_NAME_MUNI_AAA",
	6:  "BENCHMARK_CURVE_NAME_OTHER",
	7:  "BENCHMARK_CURVE_NAME_PFANDBRIEFE",
	8:  "BENCHMARK_CURVE_NAME_SWAP",
	9:  "BENCHMARK_CURVE_NAME_TREASURY",
	10: "BENCHMARK_CURVE_NAME_EONIA",
	11: "BENCHMARK_CURVE_NAME_EUREPO",
	12: "BENCHMARK_CURVE_NAME_SONIA",
}

var BenchmarkCurveNameEnum_value = map[string]int32{
	"BENCHMARK_CURVE_NAME_UNSPECIFIED": 0,
	"BENCHMARK_CURVE_NAME_EURIBOR":     1,
	"BENCHMARK_CURVE_NAME_FUTURE_SWAP": 2,
	"BENCHMARK_CURVE_NAME_LIBID":       3,
	"BENCHMARK_CURVE_NAME_LIBOR":       4,
	"BENCHMARK_CURVE_NAME_MUNI_AAA":    5,
	"BENCHMARK_CURVE_NAME_OTHER":       6,
	"BENCHMARK_CURVE_NAME_PFANDBRIEFE": 7,
	"BENCHMARK_CURVE_NAME_SWAP":        8,
	"BENCHMARK_CURVE_NAME_TREASURY":    9,
	"BENCHMARK_CURVE_NAME_EONIA":       10,
	"BENCHMARK_CURVE_NAME_EUREPO":      11,
	"BENCHMARK_CURVE_NAME_SONIA":       12,
}

func (x BenchmarkCurveNameEnum) String() string {
	return proto.EnumName(BenchmarkCurveNameEnum_name, int32(x))
}

func (BenchmarkCurveNameEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{66}
}

type BenchmarkPriceTypeEnum int32

const (
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_UNSPECIFIED                        BenchmarkPriceTypeEnum = 0
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_FIXED_AMOUNT                       BenchmarkPriceTypeEnum = 1
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PERCENTAGE                         BenchmarkPriceTypeEnum = 2
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PER_UNIT                           BenchmarkPriceTypeEnum = 3
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_DISCOUNT                           BenchmarkPriceTypeEnum = 4
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PREMIUM                            BenchmarkPriceTypeEnum = 5
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_SPREAD                             BenchmarkPriceTypeEnum = 6
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_TEDPRICE                           BenchmarkPriceTypeEnum = 7
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_TEDYIELD                           BenchmarkPriceTypeEnum = 8
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE          BenchmarkPriceTypeEnum = 9
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE       BenchmarkPriceTypeEnum = 10
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_YIELD                              BenchmarkPriceTypeEnum = 11
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS            BenchmarkPriceTypeEnum = 12
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS           BenchmarkPriceTypeEnum = 13
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS             BenchmarkPriceTypeEnum = 14
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS BenchmarkPriceTypeEnum = 15
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS        BenchmarkPriceTypeEnum = 16
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS      BenchmarkPriceTypeEnum = 17
	BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS    BenchmarkPriceTypeEnum = 18
)

var BenchmarkPriceTypeEnum_name = map[int32]string{
	0:  "BENCHMARK_PRICE_TYPE_UNSPECIFIED",
	1:  "BENCHMARK_PRICE_TYPE_FIXED_AMOUNT",
	2:  "BENCHMARK_PRICE_TYPE_PERCENTAGE",
	3:  "BENCHMARK_PRICE_TYPE_PER_UNIT",
	4:  "BENCHMARK_PRICE_TYPE_DISCOUNT",
	5:  "BENCHMARK_PRICE_TYPE_PREMIUM",
	6:  "BENCHMARK_PRICE_TYPE_SPREAD",
	7:  "BENCHMARK_PRICE_TYPE_TEDPRICE",
	8:  "BENCHMARK_PRICE_TYPE_TEDYIELD",
	9:  "BENCHMARK_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE",
	10: "BENCHMARK_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE",
	11: "BENCHMARK_PRICE_TYPE_YIELD",
	12: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS",
	13: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS",
	14: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS",
	15: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS",
	16: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS",
	17: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS",
	18: "BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS",
}

var BenchmarkPriceTypeEnum_value = map[string]int32{
	"BENCHMARK_PRICE_TYPE_UNSPECIFIED":                        0,
	"BENCHMARK_PRICE_TYPE_FIXED_AMOUNT":                       1,
	"BENCHMARK_PRICE_TYPE_PERCENTAGE":                         2,
	"BENCHMARK_PRICE_TYPE_PER_UNIT":                           3,
	"BENCHMARK_PRICE_TYPE_DISCOUNT":                           4,
	"BENCHMARK_PRICE_TYPE_PREMIUM":                            5,
	"BENCHMARK_PRICE_TYPE_SPREAD":                             6,
	"BENCHMARK_PRICE_TYPE_TEDPRICE":                           7,
	"BENCHMARK_PRICE_TYPE_TEDYIELD":                           8,
	"BENCHMARK_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE":          9,
	"BENCHMARK_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE":       10,
	"BENCHMARK_PRICE_TYPE_YIELD":                              11,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS":            12,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS":           13,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS":             14,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS": 15,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS":        16,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS":      17,
	"BENCHMARK_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS":    18,
}

func (x BenchmarkPriceTypeEnum) String() string {
	return proto.EnumName(BenchmarkPriceTypeEnum_name, int32(x))
}

func (BenchmarkPriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{67}
}

type BenchmarkSecurityIDSourceEnum int32

const (
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_UNSPECIFIED                      BenchmarkSecurityIDSourceEnum = 0
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_CUSIP                            BenchmarkSecurityIDSourceEnum = 1
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_QUIK                             BenchmarkSecurityIDSourceEnum = 2
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_SEDOL                            BenchmarkSecurityIDSourceEnum = 3
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_ISIN_NUMBER                      BenchmarkSecurityIDSourceEnum = 4
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_RIC_CODE                         BenchmarkSecurityIDSourceEnum = 5
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 BenchmarkSecurityIDSourceEnum = 6
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                BenchmarkSecurityIDSourceEnum = 7
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    BenchmarkSecurityIDSourceEnum = 8
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  BenchmarkSecurityIDSourceEnum = 9
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_BELGIAN                          BenchmarkSecurityIDSourceEnum = 10
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 BenchmarkSecurityIDSourceEnum = 11
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_COMMON                           BenchmarkSecurityIDSourceEnum = 12
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_DUTCH                            BenchmarkSecurityIDSourceEnum = 13
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_SICOVAM                          BenchmarkSecurityIDSourceEnum = 14
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_VALOREN                          BenchmarkSecurityIDSourceEnum = 15
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_WERTPAPIER                       BenchmarkSecurityIDSourceEnum = 16
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_CLEARING_HOUSE                   BenchmarkSecurityIDSourceEnum = 17
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          BenchmarkSecurityIDSourceEnum = 18
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY BenchmarkSecurityIDSourceEnum = 19
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 BenchmarkSecurityIDSourceEnum = 20
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_URL                    BenchmarkSecurityIDSourceEnum = 21
	BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  BenchmarkSecurityIDSourceEnum = 22
)

var BenchmarkSecurityIDSourceEnum_name = map[int32]string{
	0:  "BENCHMARK_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "BENCHMARK_SECURITY_ID_SOURCE_CUSIP",
	2:  "BENCHMARK_SECURITY_ID_SOURCE_QUIK",
	3:  "BENCHMARK_SECURITY_ID_SOURCE_SEDOL",
	4:  "BENCHMARK_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "BENCHMARK_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "BENCHMARK_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "BENCHMARK_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "BENCHMARK_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "BENCHMARK_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "BENCHMARK_SECURITY_ID_SOURCE_BELGIAN",
	11: "BENCHMARK_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "BENCHMARK_SECURITY_ID_SOURCE_COMMON",
	13: "BENCHMARK_SECURITY_ID_SOURCE_DUTCH",
	14: "BENCHMARK_SECURITY_ID_SOURCE_SICOVAM",
	15: "BENCHMARK_SECURITY_ID_SOURCE_VALOREN",
	16: "BENCHMARK_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "BENCHMARK_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "BENCHMARK_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "BENCHMARK_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "BENCHMARK_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var BenchmarkSecurityIDSourceEnum_value = map[string]int32{
	"BENCHMARK_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"BENCHMARK_SECURITY_ID_SOURCE_CUSIP":                            1,
	"BENCHMARK_SECURITY_ID_SOURCE_QUIK":                             2,
	"BENCHMARK_SECURITY_ID_SOURCE_SEDOL":                            3,
	"BENCHMARK_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"BENCHMARK_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"BENCHMARK_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"BENCHMARK_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"BENCHMARK_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"BENCHMARK_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"BENCHMARK_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"BENCHMARK_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"BENCHMARK_SECURITY_ID_SOURCE_COMMON":                           12,
	"BENCHMARK_SECURITY_ID_SOURCE_DUTCH":                            13,
	"BENCHMARK_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"BENCHMARK_SECURITY_ID_SOURCE_VALOREN":                          15,
	"BENCHMARK_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"BENCHMARK_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"BENCHMARK_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"BENCHMARK_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"BENCHMARK_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"BENCHMARK_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x BenchmarkSecurityIDSourceEnum) String() string {
	return proto.EnumName(BenchmarkSecurityIDSourceEnum_name, int32(x))
}

func (BenchmarkSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{68}
}

type StipulationTypeEnum int32

const (
	StipulationTypeEnum_STIPULATION_TYPE_UNSPECIFIED                                        StipulationTypeEnum = 0
	StipulationTypeEnum_STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED                          StipulationTypeEnum = 1
	StipulationTypeEnum_STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY                        StipulationTypeEnum = 2
	StipulationTypeEnum_STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE                           StipulationTypeEnum = 3
	StipulationTypeEnum_STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD                          StipulationTypeEnum = 4
	StipulationTypeEnum_STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE          StipulationTypeEnum = 5
	StipulationTypeEnum_STIPULATION_TYPE_GEOGRAPHICS                                        StipulationTypeEnum = 6
	StipulationTypeEnum_STIPULATION_TYPE_ISSUE_DATE                                         StipulationTypeEnum = 7
	StipulationTypeEnum_STIPULATION_TYPE_LOT_VARIANCE                                       StipulationTypeEnum = 8
	StipulationTypeEnum_STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH                            StipulationTypeEnum = 9
	StipulationTypeEnum_STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE                            StipulationTypeEnum = 10
	StipulationTypeEnum_STIPULATION_TYPE_NUMBER_OF_PIECES                                   StipulationTypeEnum = 11
	StipulationTypeEnum_STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE                     StipulationTypeEnum = 12
	StipulationTypeEnum_STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE   StipulationTypeEnum = 13
	StipulationTypeEnum_STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE             StipulationTypeEnum = 14
	StipulationTypeEnum_STIPULATION_TYPE_POOLS_MAXIMUM                                      StipulationTypeEnum = 15
	StipulationTypeEnum_STIPULATION_TYPE_POOLS_PER_LOT                                      StipulationTypeEnum = 16
	StipulationTypeEnum_STIPULATION_TYPE_POOLS_PER_MILLION                                  StipulationTypeEnum = 17
	StipulationTypeEnum_STIPULATION_TYPE_POOLS_PER_TRADE                                    StipulationTypeEnum = 18
	StipulationTypeEnum_STIPULATION_TYPE_PRODUCTION_YEAR                                    StipulationTypeEnum = 19
	StipulationTypeEnum_STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY                           StipulationTypeEnum = 20
	StipulationTypeEnum_STIPULATION_TYPE_TRADE_VARIANCE                                     StipulationTypeEnum = 21
	StipulationTypeEnum_STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON                            StipulationTypeEnum = 22
	StipulationTypeEnum_STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON                       StipulationTypeEnum = 23
	StipulationTypeEnum_STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE                          StipulationTypeEnum = 24
	StipulationTypeEnum_STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY                          StipulationTypeEnum = 25
	StipulationTypeEnum_STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX                            StipulationTypeEnum = 26
	StipulationTypeEnum_STIPULATION_TYPE_AUTO_REINVESTMENT                                  StipulationTypeEnum = 27
	StipulationTypeEnum_STIPULATION_TYPE_BANK_QUALIFIED                                     StipulationTypeEnum = 28
	StipulationTypeEnum_STIPULATION_TYPE_BARGAIN_CONDITIONS                                 StipulationTypeEnum = 29
	StipulationTypeEnum_STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE                             StipulationTypeEnum = 30
	StipulationTypeEnum_STIPULATION_TYPE_CALL_PROTECTION                                    StipulationTypeEnum = 31
	StipulationTypeEnum_STIPULATION_TYPE_COUPON_RANGE                                       StipulationTypeEnum = 32
	StipulationTypeEnum_STIPULATION_TYPE_CUSTOM_START                                       StipulationTypeEnum = 33
	StipulationTypeEnum_STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER                            StipulationTypeEnum = 34
	StipulationTypeEnum_STIPULATION_TYPE_FREEFORM_TEXT                                      StipulationTypeEnum = 35
	StipulationTypeEnum_STIPULATION_TYPE_INSURED                                            StipulationTypeEnum = 36
	StipulationTypeEnum_STIPULATION_TYPE_ISO_CURRENCY_CODE                                  StipulationTypeEnum = 37
	StipulationTypeEnum_STIPULATION_TYPE_ISSUER                                             StipulationTypeEnum = 38
	StipulationTypeEnum_STIPULATION_TYPE_ISSUE_SIZE_RANGE                                   StipulationTypeEnum = 39
	StipulationTypeEnum_STIPULATION_TYPE_LOOKBACK_DAYS                                      StipulationTypeEnum = 40
	StipulationTypeEnum_STIPULATION_TYPE_MARKET_SECTOR                                      StipulationTypeEnum = 41
	StipulationTypeEnum_STIPULATION_TYPE_MATURITY_RANGE                                     StipulationTypeEnum = 42
	StipulationTypeEnum_STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS                              StipulationTypeEnum = 43
	StipulationTypeEnum_STIPULATION_TYPE_MINIMUM_DENOMINATION                               StipulationTypeEnum = 44
	StipulationTypeEnum_STIPULATION_TYPE_MINIMUM_INCREMENT                                  StipulationTypeEnum = 45
	StipulationTypeEnum_STIPULATION_TYPE_MINIMUM_QUANTITY                                   StipulationTypeEnum = 46
	StipulationTypeEnum_STIPULATION_TYPE_PAYMENT_FREQUENCY                                  StipulationTypeEnum = 47
	StipulationTypeEnum_STIPULATION_TYPE_PRICE_RANGE                                        StipulationTypeEnum = 48
	StipulationTypeEnum_STIPULATION_TYPE_PRICING_FREQUENCY                                  StipulationTypeEnum = 49
	StipulationTypeEnum_STIPULATION_TYPE_PURPOSE                                            StipulationTypeEnum = 50
	StipulationTypeEnum_STIPULATION_TYPE_RATING_SOURCE_AND_RANGE                            StipulationTypeEnum = 51
	StipulationTypeEnum_STIPULATION_TYPE_RESTRICTED                                         StipulationTypeEnum = 52
	StipulationTypeEnum_STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED                 StipulationTypeEnum = 53
	StipulationTypeEnum_STIPULATION_TYPE_STRUCTURE                                          StipulationTypeEnum = 54
	StipulationTypeEnum_STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY                            StipulationTypeEnum = 55
	StipulationTypeEnum_STIPULATION_TYPE_SUBSTITUTIONS_LEFT                                 StipulationTypeEnum = 56
	StipulationTypeEnum_STIPULATION_TYPE_TYPE_OF_REDEMPTION                                 StipulationTypeEnum = 57
	StipulationTypeEnum_STIPULATION_TYPE_VALUATION_DISCOUNT                                 StipulationTypeEnum = 58
	StipulationTypeEnum_STIPULATION_TYPE_WHOLE_POOL                                         StipulationTypeEnum = 59
	StipulationTypeEnum_STIPULATION_TYPE_YIELD_RANGE                                        StipulationTypeEnum = 60
	StipulationTypeEnum_STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET StipulationTypeEnum = 61
	StipulationTypeEnum_STIPULATION_TYPE_AVERAGE_FICOSCORE                                  StipulationTypeEnum = 62
	StipulationTypeEnum_STIPULATION_TYPE_AVERAGE_LOAN_SIZE                                  StipulationTypeEnum = 63
	StipulationTypeEnum_STIPULATION_TYPE_BROKER_CREDIT                                      StipulationTypeEnum = 64
	StipulationTypeEnum_STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE                       StipulationTypeEnum = 65
	StipulationTypeEnum_STIPULATION_TYPE_DISCOUNT_RATE                                      StipulationTypeEnum = 66
	StipulationTypeEnum_STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE               StipulationTypeEnum = 67
	StipulationTypeEnum_STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE                               StipulationTypeEnum = 68
	StipulationTypeEnum_STIPULATION_TYPE_MAXIMUM_ORDER_SIZE                                 StipulationTypeEnum = 69
	StipulationTypeEnum_STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS        StipulationTypeEnum = 70
	StipulationTypeEnum_STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS     StipulationTypeEnum = 71
	StipulationTypeEnum_STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT                           StipulationTypeEnum = 72
	StipulationTypeEnum_STIPULATION_TYPE_POOL_IDENTIFIER                                    StipulationTypeEnum = 73
	StipulationTypeEnum_STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR              StipulationTypeEnum = 74
	StipulationTypeEnum_STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE              StipulationTypeEnum = 75
	StipulationTypeEnum_STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE              StipulationTypeEnum = 76
	StipulationTypeEnum_STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY                StipulationTypeEnum = 77
	StipulationTypeEnum_STIPULATION_TYPE_TRADER_CREDIT                                      StipulationTypeEnum = 78
	StipulationTypeEnum_STIPULATION_TYPE_TYPE_OF_ROLL_TRADE                                 StipulationTypeEnum = 79
	StipulationTypeEnum_STIPULATION_TYPE_YIELD_TO_MATURITY                                  StipulationTypeEnum = 80
)

var StipulationTypeEnum_name = map[int32]string{
	0:  "STIPULATION_TYPE_UNSPECIFIED",
	1:  "STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED",
	2:  "STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY",
	3:  "STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE",
	4:  "STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD",
	5:  "STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE",
	6:  "STIPULATION_TYPE_GEOGRAPHICS",
	7:  "STIPULATION_TYPE_ISSUE_DATE",
	8:  "STIPULATION_TYPE_LOT_VARIANCE",
	9:  "STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH",
	10: "STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE",
	11: "STIPULATION_TYPE_NUMBER_OF_PIECES",
	12: "STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE",
	13: "STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE",
	14: "STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE",
	15: "STIPULATION_TYPE_POOLS_MAXIMUM",
	16: "STIPULATION_TYPE_POOLS_PER_LOT",
	17: "STIPULATION_TYPE_POOLS_PER_MILLION",
	18: "STIPULATION_TYPE_POOLS_PER_TRADE",
	19: "STIPULATION_TYPE_PRODUCTION_YEAR",
	20: "STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY",
	21: "STIPULATION_TYPE_TRADE_VARIANCE",
	22: "STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON",
	23: "STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON",
	24: "STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE",
	25: "STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY",
	26: "STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX",
	27: "STIPULATION_TYPE_AUTO_REINVESTMENT",
	28: "STIPULATION_TYPE_BANK_QUALIFIED",
	29: "STIPULATION_TYPE_BARGAIN_CONDITIONS",
	30: "STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE",
	31: "STIPULATION_TYPE_CALL_PROTECTION",
	32: "STIPULATION_TYPE_COUPON_RANGE",
	33: "STIPULATION_TYPE_CUSTOM_START",
	34: "STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER",
	35: "STIPULATION_TYPE_FREEFORM_TEXT",
	36: "STIPULATION_TYPE_INSURED",
	37: "STIPULATION_TYPE_ISO_CURRENCY_CODE",
	38: "STIPULATION_TYPE_ISSUER",
	39: "STIPULATION_TYPE_ISSUE_SIZE_RANGE",
	40: "STIPULATION_TYPE_LOOKBACK_DAYS",
	41: "STIPULATION_TYPE_MARKET_SECTOR",
	42: "STIPULATION_TYPE_MATURITY_RANGE",
	43: "STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS",
	44: "STIPULATION_TYPE_MINIMUM_DENOMINATION",
	45: "STIPULATION_TYPE_MINIMUM_INCREMENT",
	46: "STIPULATION_TYPE_MINIMUM_QUANTITY",
	47: "STIPULATION_TYPE_PAYMENT_FREQUENCY",
	48: "STIPULATION_TYPE_PRICE_RANGE",
	49: "STIPULATION_TYPE_PRICING_FREQUENCY",
	50: "STIPULATION_TYPE_PURPOSE",
	51: "STIPULATION_TYPE_RATING_SOURCE_AND_RANGE",
	52: "STIPULATION_TYPE_RESTRICTED",
	53: "STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED",
	54: "STIPULATION_TYPE_STRUCTURE",
	55: "STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY",
	56: "STIPULATION_TYPE_SUBSTITUTIONS_LEFT",
	57: "STIPULATION_TYPE_TYPE_OF_REDEMPTION",
	58: "STIPULATION_TYPE_VALUATION_DISCOUNT",
	59: "STIPULATION_TYPE_WHOLE_POOL",
	60: "STIPULATION_TYPE_YIELD_RANGE",
	61: "STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET",
	62: "STIPULATION_TYPE_AVERAGE_FICOSCORE",
	63: "STIPULATION_TYPE_AVERAGE_LOAN_SIZE",
	64: "STIPULATION_TYPE_BROKER_CREDIT",
	65: "STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE",
	66: "STIPULATION_TYPE_DISCOUNT_RATE",
	67: "STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE",
	68: "STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE",
	69: "STIPULATION_TYPE_MAXIMUM_ORDER_SIZE",
	70: "STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	71: "STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	72: "STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT",
	73: "STIPULATION_TYPE_POOL_IDENTIFIER",
	74: "STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR",
	75: "STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE",
	76: "STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE",
	77: "STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY",
	78: "STIPULATION_TYPE_TRADER_CREDIT",
	79: "STIPULATION_TYPE_TYPE_OF_ROLL_TRADE",
	80: "STIPULATION_TYPE_YIELD_TO_MATURITY",
}

var StipulationTypeEnum_value = map[string]int32{
	"STIPULATION_TYPE_UNSPECIFIED":                                        0,
	"STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED":                          1,
	"STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY":                        2,
	"STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE":                           3,
	"STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD":                          4,
	"STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE":          5,
	"STIPULATION_TYPE_GEOGRAPHICS":                                        6,
	"STIPULATION_TYPE_ISSUE_DATE":                                         7,
	"STIPULATION_TYPE_LOT_VARIANCE":                                       8,
	"STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH":                            9,
	"STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE":                            10,
	"STIPULATION_TYPE_NUMBER_OF_PIECES":                                   11,
	"STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE":                     12,
	"STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE":   13,
	"STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE":             14,
	"STIPULATION_TYPE_POOLS_MAXIMUM":                                      15,
	"STIPULATION_TYPE_POOLS_PER_LOT":                                      16,
	"STIPULATION_TYPE_POOLS_PER_MILLION":                                  17,
	"STIPULATION_TYPE_POOLS_PER_TRADE":                                    18,
	"STIPULATION_TYPE_PRODUCTION_YEAR":                                    19,
	"STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY":                           20,
	"STIPULATION_TYPE_TRADE_VARIANCE":                                     21,
	"STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON":                            22,
	"STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON":                       23,
	"STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE":                          24,
	"STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY":                          25,
	"STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX":                            26,
	"STIPULATION_TYPE_AUTO_REINVESTMENT":                                  27,
	"STIPULATION_TYPE_BANK_QUALIFIED":                                     28,
	"STIPULATION_TYPE_BARGAIN_CONDITIONS":                                 29,
	"STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE":                             30,
	"STIPULATION_TYPE_CALL_PROTECTION":                                    31,
	"STIPULATION_TYPE_COUPON_RANGE":                                       32,
	"STIPULATION_TYPE_CUSTOM_START":                                       33,
	"STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER":                            34,
	"STIPULATION_TYPE_FREEFORM_TEXT":                                      35,
	"STIPULATION_TYPE_INSURED":                                            36,
	"STIPULATION_TYPE_ISO_CURRENCY_CODE":                                  37,
	"STIPULATION_TYPE_ISSUER":                                             38,
	"STIPULATION_TYPE_ISSUE_SIZE_RANGE":                                   39,
	"STIPULATION_TYPE_LOOKBACK_DAYS":                                      40,
	"STIPULATION_TYPE_MARKET_SECTOR":                                      41,
	"STIPULATION_TYPE_MATURITY_RANGE":                                     42,
	"STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS":                              43,
	"STIPULATION_TYPE_MINIMUM_DENOMINATION":                               44,
	"STIPULATION_TYPE_MINIMUM_INCREMENT":                                  45,
	"STIPULATION_TYPE_MINIMUM_QUANTITY":                                   46,
	"STIPULATION_TYPE_PAYMENT_FREQUENCY":                                  47,
	"STIPULATION_TYPE_PRICE_RANGE":                                        48,
	"STIPULATION_TYPE_PRICING_FREQUENCY":                                  49,
	"STIPULATION_TYPE_PURPOSE":                                            50,
	"STIPULATION_TYPE_RATING_SOURCE_AND_RANGE":                            51,
	"STIPULATION_TYPE_RESTRICTED":                                         52,
	"STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED":                 53,
	"STIPULATION_TYPE_STRUCTURE":                                          54,
	"STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY":                            55,
	"STIPULATION_TYPE_SUBSTITUTIONS_LEFT":                                 56,
	"STIPULATION_TYPE_TYPE_OF_REDEMPTION":                                 57,
	"STIPULATION_TYPE_VALUATION_DISCOUNT":                                 58,
	"STIPULATION_TYPE_WHOLE_POOL":                                         59,
	"STIPULATION_TYPE_YIELD_RANGE":                                        60,
	"STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET": 61,
	"STIPULATION_TYPE_AVERAGE_FICOSCORE":                                  62,
	"STIPULATION_TYPE_AVERAGE_LOAN_SIZE":                                  63,
	"STIPULATION_TYPE_BROKER_CREDIT":                                      64,
	"STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE":                       65,
	"STIPULATION_TYPE_DISCOUNT_RATE":                                      66,
	"STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE":               67,
	"STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE":                               68,
	"STIPULATION_TYPE_MAXIMUM_ORDER_SIZE":                                 69,
	"STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS":        70,
	"STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS":     71,
	"STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT":                           72,
	"STIPULATION_TYPE_POOL_IDENTIFIER":                                    73,
	"STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR":              74,
	"STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE":              75,
	"STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE":              76,
	"STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY":                77,
	"STIPULATION_TYPE_TRADER_CREDIT":                                      78,
	"STIPULATION_TYPE_TYPE_OF_ROLL_TRADE":                                 79,
	"STIPULATION_TYPE_YIELD_TO_MATURITY":                                  80,
}

func (x StipulationTypeEnum) String() string {
	return proto.EnumName(StipulationTypeEnum_name, int32(x))
}

func (StipulationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{69}
}

type TrdRegTimestampTypeEnum int32

const (
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_UNSPECIFIED            TrdRegTimestampTypeEnum = 0
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_BROKER_EXECUTION       TrdRegTimestampTypeEnum = 1
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_BROKER_RECEIPT         TrdRegTimestampTypeEnum = 2
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_EXECUTION_TIME         TrdRegTimestampTypeEnum = 3
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_TIME_IN                TrdRegTimestampTypeEnum = 4
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_TIME_OUT               TrdRegTimestampTypeEnum = 5
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_DESK_RECEIPT           TrdRegTimestampTypeEnum = 6
	TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_SUBMISSION_TO_CLEARING TrdRegTimestampTypeEnum = 7
)

var TrdRegTimestampTypeEnum_name = map[int32]string{
	0: "TRD_REG_TIMESTAMP_TYPE_UNSPECIFIED",
	1: "TRD_REG_TIMESTAMP_TYPE_BROKER_EXECUTION",
	2: "TRD_REG_TIMESTAMP_TYPE_BROKER_RECEIPT",
	3: "TRD_REG_TIMESTAMP_TYPE_EXECUTION_TIME",
	4: "TRD_REG_TIMESTAMP_TYPE_TIME_IN",
	5: "TRD_REG_TIMESTAMP_TYPE_TIME_OUT",
	6: "TRD_REG_TIMESTAMP_TYPE_DESK_RECEIPT",
	7: "TRD_REG_TIMESTAMP_TYPE_SUBMISSION_TO_CLEARING",
}

var TrdRegTimestampTypeEnum_value = map[string]int32{
	"TRD_REG_TIMESTAMP_TYPE_UNSPECIFIED":            0,
	"TRD_REG_TIMESTAMP_TYPE_BROKER_EXECUTION":       1,
	"TRD_REG_TIMESTAMP_TYPE_BROKER_RECEIPT":         2,
	"TRD_REG_TIMESTAMP_TYPE_EXECUTION_TIME":         3,
	"TRD_REG_TIMESTAMP_TYPE_TIME_IN":                4,
	"TRD_REG_TIMESTAMP_TYPE_TIME_OUT":               5,
	"TRD_REG_TIMESTAMP_TYPE_DESK_RECEIPT":           6,
	"TRD_REG_TIMESTAMP_TYPE_SUBMISSION_TO_CLEARING": 7,
}

func (x TrdRegTimestampTypeEnum) String() string {
	return proto.EnumName(TrdRegTimestampTypeEnum_name, int32(x))
}

func (TrdRegTimestampTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{70}
}

type DeskTypeEnum int32

const (
	DeskTypeEnum_DESK_TYPE_UNSPECIFIED       DeskTypeEnum = 0
	DeskTypeEnum_DESK_TYPE_AGENCY            DeskTypeEnum = 1
	DeskTypeEnum_DESK_TYPE_ARBITRAGE         DeskTypeEnum = 2
	DeskTypeEnum_DESK_TYPE_DERIVATIVES       DeskTypeEnum = 3
	DeskTypeEnum_DESK_TYPE_INSTITUTIONAL     DeskTypeEnum = 4
	DeskTypeEnum_DESK_TYPE_INTERNATIONAL     DeskTypeEnum = 5
	DeskTypeEnum_DESK_TYPE_OTHER             DeskTypeEnum = 6
	DeskTypeEnum_DESK_TYPE_PREFERRED_TRADING DeskTypeEnum = 7
	DeskTypeEnum_DESK_TYPE_PROGRAM_TRADING   DeskTypeEnum = 8
	DeskTypeEnum_DESK_TYPE_PROPRIETARY       DeskTypeEnum = 9
	DeskTypeEnum_DESK_TYPE_SALES             DeskTypeEnum = 10
	DeskTypeEnum_DESK_TYPE_TRADING           DeskTypeEnum = 11
)

var DeskTypeEnum_name = map[int32]string{
	0:  "DESK_TYPE_UNSPECIFIED",
	1:  "DESK_TYPE_AGENCY",
	2:  "DESK_TYPE_ARBITRAGE",
	3:  "DESK_TYPE_DERIVATIVES",
	4:  "DESK_TYPE_INSTITUTIONAL",
	5:  "DESK_TYPE_INTERNATIONAL",
	6:  "DESK_TYPE_OTHER",
	7:  "DESK_TYPE_PREFERRED_TRADING",
	8:  "DESK_TYPE_PROGRAM_TRADING",
	9:  "DESK_TYPE_PROPRIETARY",
	10: "DESK_TYPE_SALES",
	11: "DESK_TYPE_TRADING",
}

var DeskTypeEnum_value = map[string]int32{
	"DESK_TYPE_UNSPECIFIED":       0,
	"DESK_TYPE_AGENCY":            1,
	"DESK_TYPE_ARBITRAGE":         2,
	"DESK_TYPE_DERIVATIVES":       3,
	"DESK_TYPE_INSTITUTIONAL":     4,
	"DESK_TYPE_INTERNATIONAL":     5,
	"DESK_TYPE_OTHER":             6,
	"DESK_TYPE_PREFERRED_TRADING": 7,
	"DESK_TYPE_PROGRAM_TRADING":   8,
	"DESK_TYPE_PROPRIETARY":       9,
	"DESK_TYPE_SALES":             10,
	"DESK_TYPE_TRADING":           11,
}

func (x DeskTypeEnum) String() string {
	return proto.EnumName(DeskTypeEnum_name, int32(x))
}

func (DeskTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{71}
}

type DeskTypeSourceEnum int32

const (
	DeskTypeSourceEnum_DESK_TYPE_SOURCE_UNSPECIFIED DeskTypeSourceEnum = 0
	DeskTypeSourceEnum_DESK_TYPE_SOURCE_NASDOATS    DeskTypeSourceEnum = 1
)

var DeskTypeSourceEnum_name = map[int32]string{
	0: "DESK_TYPE_SOURCE_UNSPECIFIED",
	1: "DESK_TYPE_SOURCE_NASDOATS",
}

var DeskTypeSourceEnum_value = map[string]int32{
	"DESK_TYPE_SOURCE_UNSPECIFIED": 0,
	"DESK_TYPE_SOURCE_NASDOATS":    1,
}

func (x DeskTypeSourceEnum) String() string {
	return proto.EnumName(DeskTypeSourceEnum_name, int32(x))
}

func (DeskTypeSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{72}
}

type DeskOrderHandlingInstEnum int32

const (
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_UNSPECIFIED                       DeskOrderHandlingInstEnum = 0
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_ADD_ON_ORDER                      DeskOrderHandlingInstEnum = 1
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_ALL_OR_NONE                       DeskOrderHandlingInstEnum = 2
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_CASH_NOT_HELD                     DeskOrderHandlingInstEnum = 3
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_DIRECTED_ORDER                    DeskOrderHandlingInstEnum = 4
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_EXCHANGE_FOR_PHYSICAL_TRANSACTION DeskOrderHandlingInstEnum = 5
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_FILL_OR_KILL                      DeskOrderHandlingInstEnum = 6
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_IMBALANCE_ONLY                    DeskOrderHandlingInstEnum = 7
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_IMMEDIATE_OR_CANCEL               DeskOrderHandlingInstEnum = 8
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_LIMIT_ON_CLOSE                    DeskOrderHandlingInstEnum = 9
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_LIMIT_ON_OPEN                     DeskOrderHandlingInstEnum = 10
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_MARKET_AT_CLOSE                   DeskOrderHandlingInstEnum = 11
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_MARKET_AT_OPEN                    DeskOrderHandlingInstEnum = 12
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_MARKET_ON_CLOSE                   DeskOrderHandlingInstEnum = 13
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_MARKET_ON_OPEN                    DeskOrderHandlingInstEnum = 14
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_MINIMUM_QUANTITY                  DeskOrderHandlingInstEnum = 15
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_NOT_HELD                          DeskOrderHandlingInstEnum = 16
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_OVER_THE_DAY                      DeskOrderHandlingInstEnum = 17
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_PEGGED                            DeskOrderHandlingInstEnum = 18
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_RESERVE_SIZE_ORDER                DeskOrderHandlingInstEnum = 19
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_SCALE                             DeskOrderHandlingInstEnum = 20
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_STOP_STOCK_TRANSACTION            DeskOrderHandlingInstEnum = 21
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_TIME_ORDER                        DeskOrderHandlingInstEnum = 22
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_TRAILING_STOP                     DeskOrderHandlingInstEnum = 23
	DeskOrderHandlingInstEnum_DESK_ORDER_HANDLING_INST_WORK                              DeskOrderHandlingInstEnum = 24
)

var DeskOrderHandlingInstEnum_name = map[int32]string{
	0:  "DESK_ORDER_HANDLING_INST_UNSPECIFIED",
	1:  "DESK_ORDER_HANDLING_INST_ADD_ON_ORDER",
	2:  "DESK_ORDER_HANDLING_INST_ALL_OR_NONE",
	3:  "DESK_ORDER_HANDLING_INST_CASH_NOT_HELD",
	4:  "DESK_ORDER_HANDLING_INST_DIRECTED_ORDER",
	5:  "DESK_ORDER_HANDLING_INST_EXCHANGE_FOR_PHYSICAL_TRANSACTION",
	6:  "DESK_ORDER_HANDLING_INST_FILL_OR_KILL",
	7:  "DESK_ORDER_HANDLING_INST_IMBALANCE_ONLY",
	8:  "DESK_ORDER_HANDLING_INST_IMMEDIATE_OR_CANCEL",
	9:  "DESK_ORDER_HANDLING_INST_LIMIT_ON_CLOSE",
	10: "DESK_ORDER_HANDLING_INST_LIMIT_ON_OPEN",
	11: "DESK_ORDER_HANDLING_INST_MARKET_AT_CLOSE",
	12: "DESK_ORDER_HANDLING_INST_MARKET_AT_OPEN",
	13: "DESK_ORDER_HANDLING_INST_MARKET_ON_CLOSE",
	14: "DESK_ORDER_HANDLING_INST_MARKET_ON_OPEN",
	15: "DESK_ORDER_HANDLING_INST_MINIMUM_QUANTITY",
	16: "DESK_ORDER_HANDLING_INST_NOT_HELD",
	17: "DESK_ORDER_HANDLING_INST_OVER_THE_DAY",
	18: "DESK_ORDER_HANDLING_INST_PEGGED",
	19: "DESK_ORDER_HANDLING_INST_RESERVE_SIZE_ORDER",
	20: "DESK_ORDER_HANDLING_INST_SCALE",
	21: "DESK_ORDER_HANDLING_INST_STOP_STOCK_TRANSACTION",
	22: "DESK_ORDER_HANDLING_INST_TIME_ORDER",
	23: "DESK_ORDER_HANDLING_INST_TRAILING_STOP",
	24: "DESK_ORDER_HANDLING_INST_WORK",
}

var DeskOrderHandlingInstEnum_value = map[string]int32{
	"DESK_ORDER_HANDLING_INST_UNSPECIFIED":                       0,
	"DESK_ORDER_HANDLING_INST_ADD_ON_ORDER":                      1,
	"DESK_ORDER_HANDLING_INST_ALL_OR_NONE":                       2,
	"DESK_ORDER_HANDLING_INST_CASH_NOT_HELD":                     3,
	"DESK_ORDER_HANDLING_INST_DIRECTED_ORDER":                    4,
	"DESK_ORDER_HANDLING_INST_EXCHANGE_FOR_PHYSICAL_TRANSACTION": 5,
	"DESK_ORDER_HANDLING_INST_FILL_OR_KILL":                      6,
	"DESK_ORDER_HANDLING_INST_IMBALANCE_ONLY":                    7,
	"DESK_ORDER_HANDLING_INST_IMMEDIATE_OR_CANCEL":               8,
	"DESK_ORDER_HANDLING_INST_LIMIT_ON_CLOSE":                    9,
	"DESK_ORDER_HANDLING_INST_LIMIT_ON_OPEN":                     10,
	"DESK_ORDER_HANDLING_INST_MARKET_AT_CLOSE":                   11,
	"DESK_ORDER_HANDLING_INST_MARKET_AT_OPEN":                    12,
	"DESK_ORDER_HANDLING_INST_MARKET_ON_CLOSE":                   13,
	"DESK_ORDER_HANDLING_INST_MARKET_ON_OPEN":                    14,
	"DESK_ORDER_HANDLING_INST_MINIMUM_QUANTITY":                  15,
	"DESK_ORDER_HANDLING_INST_NOT_HELD":                          16,
	"DESK_ORDER_HANDLING_INST_OVER_THE_DAY":                      17,
	"DESK_ORDER_HANDLING_INST_PEGGED":                            18,
	"DESK_ORDER_HANDLING_INST_RESERVE_SIZE_ORDER":                19,
	"DESK_ORDER_HANDLING_INST_SCALE":                             20,
	"DESK_ORDER_HANDLING_INST_STOP_STOCK_TRANSACTION":            21,
	"DESK_ORDER_HANDLING_INST_TIME_ORDER":                        22,
	"DESK_ORDER_HANDLING_INST_TRAILING_STOP":                     23,
	"DESK_ORDER_HANDLING_INST_WORK":                              24,
}

func (x DeskOrderHandlingInstEnum) String() string {
	return proto.EnumName(DeskOrderHandlingInstEnum_name, int32(x))
}

func (DeskOrderHandlingInstEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{73}
}

type UnderlyingSymbolSfxEnum int32

const (
	UnderlyingSymbolSfxEnum_UNDERLYING_SYMBOL_SFX_UNSPECIFIED                 UnderlyingSymbolSfxEnum = 0
	UnderlyingSymbolSfxEnum_UNDERLYING_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST UnderlyingSymbolSfxEnum = 1
	UnderlyingSymbolSfxEnum_UNDERLYING_SYMBOL_SFX_WHEN_ISSUED                 UnderlyingSymbolSfxEnum = 2
)

var UnderlyingSymbolSfxEnum_name = map[int32]string{
	0: "UNDERLYING_SYMBOL_SFX_UNSPECIFIED",
	1: "UNDERLYING_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST",
	2: "UNDERLYING_SYMBOL_SFX_WHEN_ISSUED",
}

var UnderlyingSymbolSfxEnum_value = map[string]int32{
	"UNDERLYING_SYMBOL_SFX_UNSPECIFIED":                 0,
	"UNDERLYING_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST": 1,
	"UNDERLYING_SYMBOL_SFX_WHEN_ISSUED":                 2,
}

func (x UnderlyingSymbolSfxEnum) String() string {
	return proto.EnumName(UnderlyingSymbolSfxEnum_name, int32(x))
}

func (UnderlyingSymbolSfxEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{74}
}

type UnderlyingSecurityIDSourceEnum int32

const (
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_UNSPECIFIED                      UnderlyingSecurityIDSourceEnum = 0
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_CUSIP                            UnderlyingSecurityIDSourceEnum = 1
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_QUIK                             UnderlyingSecurityIDSourceEnum = 2
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_SEDOL                            UnderlyingSecurityIDSourceEnum = 3
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_ISIN_NUMBER                      UnderlyingSecurityIDSourceEnum = 4
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_RIC_CODE                         UnderlyingSecurityIDSourceEnum = 5
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 UnderlyingSecurityIDSourceEnum = 6
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                UnderlyingSecurityIDSourceEnum = 7
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    UnderlyingSecurityIDSourceEnum = 8
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  UnderlyingSecurityIDSourceEnum = 9
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_BELGIAN                          UnderlyingSecurityIDSourceEnum = 10
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 UnderlyingSecurityIDSourceEnum = 11
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_COMMON                           UnderlyingSecurityIDSourceEnum = 12
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_DUTCH                            UnderlyingSecurityIDSourceEnum = 13
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_SICOVAM                          UnderlyingSecurityIDSourceEnum = 14
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_VALOREN                          UnderlyingSecurityIDSourceEnum = 15
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_WERTPAPIER                       UnderlyingSecurityIDSourceEnum = 16
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_CLEARING_HOUSE                   UnderlyingSecurityIDSourceEnum = 17
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          UnderlyingSecurityIDSourceEnum = 18
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY UnderlyingSecurityIDSourceEnum = 19
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 UnderlyingSecurityIDSourceEnum = 20
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_URL                    UnderlyingSecurityIDSourceEnum = 21
	UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  UnderlyingSecurityIDSourceEnum = 22
)

var UnderlyingSecurityIDSourceEnum_name = map[int32]string{
	0:  "UNDERLYING_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "UNDERLYING_SECURITY_ID_SOURCE_CUSIP",
	2:  "UNDERLYING_SECURITY_ID_SOURCE_QUIK",
	3:  "UNDERLYING_SECURITY_ID_SOURCE_SEDOL",
	4:  "UNDERLYING_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "UNDERLYING_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "UNDERLYING_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "UNDERLYING_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "UNDERLYING_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "UNDERLYING_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "UNDERLYING_SECURITY_ID_SOURCE_BELGIAN",
	11: "UNDERLYING_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "UNDERLYING_SECURITY_ID_SOURCE_COMMON",
	13: "UNDERLYING_SECURITY_ID_SOURCE_DUTCH",
	14: "UNDERLYING_SECURITY_ID_SOURCE_SICOVAM",
	15: "UNDERLYING_SECURITY_ID_SOURCE_VALOREN",
	16: "UNDERLYING_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "UNDERLYING_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "UNDERLYING_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "UNDERLYING_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "UNDERLYING_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var UnderlyingSecurityIDSourceEnum_value = map[string]int32{
	"UNDERLYING_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"UNDERLYING_SECURITY_ID_SOURCE_CUSIP":                            1,
	"UNDERLYING_SECURITY_ID_SOURCE_QUIK":                             2,
	"UNDERLYING_SECURITY_ID_SOURCE_SEDOL":                            3,
	"UNDERLYING_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"UNDERLYING_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"UNDERLYING_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"UNDERLYING_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"UNDERLYING_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"UNDERLYING_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"UNDERLYING_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"UNDERLYING_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"UNDERLYING_SECURITY_ID_SOURCE_COMMON":                           12,
	"UNDERLYING_SECURITY_ID_SOURCE_DUTCH":                            13,
	"UNDERLYING_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"UNDERLYING_SECURITY_ID_SOURCE_VALOREN":                          15,
	"UNDERLYING_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"UNDERLYING_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"UNDERLYING_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"UNDERLYING_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"UNDERLYING_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"UNDERLYING_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x UnderlyingSecurityIDSourceEnum) String() string {
	return proto.EnumName(UnderlyingSecurityIDSourceEnum_name, int32(x))
}

func (UnderlyingSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{75}
}

type UnderlyingProductEnum int32

const (
	UnderlyingProductEnum_UNDERLYING_PRODUCT_UNSPECIFIED UnderlyingProductEnum = 0
	UnderlyingProductEnum_UNDERLYING_PRODUCT_AGENCY      UnderlyingProductEnum = 1
	UnderlyingProductEnum_UNDERLYING_PRODUCT_COMMODITY   UnderlyingProductEnum = 2
	UnderlyingProductEnum_UNDERLYING_PRODUCT_CORPORATE   UnderlyingProductEnum = 3
	UnderlyingProductEnum_UNDERLYING_PRODUCT_CURRENCY    UnderlyingProductEnum = 4
	UnderlyingProductEnum_UNDERLYING_PRODUCT_EQUITY      UnderlyingProductEnum = 5
	UnderlyingProductEnum_UNDERLYING_PRODUCT_GOVERNMENT  UnderlyingProductEnum = 6
	UnderlyingProductEnum_UNDERLYING_PRODUCT_INDEX       UnderlyingProductEnum = 7
	UnderlyingProductEnum_UNDERLYING_PRODUCT_LOAN        UnderlyingProductEnum = 8
	UnderlyingProductEnum_UNDERLYING_PRODUCT_MONEYMARKET UnderlyingProductEnum = 9
	UnderlyingProductEnum_UNDERLYING_PRODUCT_MORTGAGE    UnderlyingProductEnum = 10
	UnderlyingProductEnum_UNDERLYING_PRODUCT_MUNICIPAL   UnderlyingProductEnum = 11
	UnderlyingProductEnum_UNDERLYING_PRODUCT_OTHER       UnderlyingProductEnum = 12
	UnderlyingProductEnum_UNDERLYING_PRODUCT_FINANCING   UnderlyingProductEnum = 13
)

var UnderlyingProductEnum_name = map[int32]string{
	0:  "UNDERLYING_PRODUCT_UNSPECIFIED",
	1:  "UNDERLYING_PRODUCT_AGENCY",
	2:  "UNDERLYING_PRODUCT_COMMODITY",
	3:  "UNDERLYING_PRODUCT_CORPORATE",
	4:  "UNDERLYING_PRODUCT_CURRENCY",
	5:  "UNDERLYING_PRODUCT_EQUITY",
	6:  "UNDERLYING_PRODUCT_GOVERNMENT",
	7:  "UNDERLYING_PRODUCT_INDEX",
	8:  "UNDERLYING_PRODUCT_LOAN",
	9:  "UNDERLYING_PRODUCT_MONEYMARKET",
	10: "UNDERLYING_PRODUCT_MORTGAGE",
	11: "UNDERLYING_PRODUCT_MUNICIPAL",
	12: "UNDERLYING_PRODUCT_OTHER",
	13: "UNDERLYING_PRODUCT_FINANCING",
}

var UnderlyingProductEnum_value = map[string]int32{
	"UNDERLYING_PRODUCT_UNSPECIFIED": 0,
	"UNDERLYING_PRODUCT_AGENCY":      1,
	"UNDERLYING_PRODUCT_COMMODITY":   2,
	"UNDERLYING_PRODUCT_CORPORATE":   3,
	"UNDERLYING_PRODUCT_CURRENCY":    4,
	"UNDERLYING_PRODUCT_EQUITY":      5,
	"UNDERLYING_PRODUCT_GOVERNMENT":  6,
	"UNDERLYING_PRODUCT_INDEX":       7,
	"UNDERLYING_PRODUCT_LOAN":        8,
	"UNDERLYING_PRODUCT_MONEYMARKET": 9,
	"UNDERLYING_PRODUCT_MORTGAGE":    10,
	"UNDERLYING_PRODUCT_MUNICIPAL":   11,
	"UNDERLYING_PRODUCT_OTHER":       12,
	"UNDERLYING_PRODUCT_FINANCING":   13,
}

func (x UnderlyingProductEnum) String() string {
	return proto.EnumName(UnderlyingProductEnum_name, int32(x))
}

func (UnderlyingProductEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{76}
}

type UnderlyingSecurityTypeEnum int32

const (
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_UNSPECIFIED                                     UnderlyingSecurityTypeEnum = 0
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BANKERS_ACCEPTANCE                              UnderlyingSecurityTypeEnum = 1
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT                          UnderlyingSecurityTypeEnum = 2
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION              UnderlyingSecurityTypeEnum = 3
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_COMMERCIAL_PAPER                                UnderlyingSecurityTypeEnum = 4
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_COMMON_STOCK                                    UnderlyingSecurityTypeEnum = 5
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CORPORATE_BOND                                  UnderlyingSecurityTypeEnum = 6
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT                     UnderlyingSecurityTypeEnum = 7
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT                       UnderlyingSecurityTypeEnum = 8
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FUTURE                                          UnderlyingSecurityTypeEnum = 9
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH                      UnderlyingSecurityTypeEnum = 10
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY                          UnderlyingSecurityTypeEnum = 11
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY                         UnderlyingSecurityTypeEnum = 12
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT                      UnderlyingSecurityTypeEnum = 13
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MUTUAL_FUND                                     UnderlyingSecurityTypeEnum = 14
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_NO_SECURITY_TYPE                                UnderlyingSecurityTypeEnum = 15
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OPTION                                          UnderlyingSecurityTypeEnum = 16
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PREFERRED_STOCK                                 UnderlyingSecurityTypeEnum = 17
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TIME_DEPOSIT                                    UnderlyingSecurityTypeEnum = 18
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL_OLD                            UnderlyingSecurityTypeEnum = 19
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_WARRANT                                         UnderlyingSecurityTypeEnum = 20
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CONVERTIBLE_BOND                                UnderlyingSecurityTypeEnum = 21
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_IOETTEMORTGAGE                                  UnderlyingSecurityTypeEnum = 22
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_WILDCARD                                        UnderlyingSecurityTypeEnum = 23
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_AMENDED                                         UnderlyingSecurityTypeEnum = 24
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_ASSET_BACKED_SECURITIES                         UnderlyingSecurityTypeEnum = 25
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BANK_NOTES                                      UnderlyingSecurityTypeEnum = 26
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BILL_OF_EXCHANGES                               UnderlyingSecurityTypeEnum = 27
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BRADY_BOND                                      UnderlyingSecurityTypeEnum = 28
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BRIDGE_LOAN                                     UnderlyingSecurityTypeEnum = 29
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CALL_LOANS                                      UnderlyingSecurityTypeEnum = 30
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION                       UnderlyingSecurityTypeEnum = 31
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION                    UnderlyingSecurityTypeEnum = 32
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CORP                                            UnderlyingSecurityTypeEnum = 33
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_DEBTOR_IN_POSSESSION                            UnderlyingSecurityTypeEnum = 34
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_DEFAULTED                                       UnderlyingSecurityTypeEnum = 35
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_DEPOSIT_NOTES                                   UnderlyingSecurityTypeEnum = 36
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_DUAL_CURRENCY                                   UnderlyingSecurityTypeEnum = 37
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EXTENDED_COMM_NOTE                              UnderlyingSecurityTypeEnum = 38
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_COUPON                           UnderlyingSecurityTypeEnum = 39
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE                    UnderlyingSecurityTypeEnum = 40
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS                        UnderlyingSecurityTypeEnum = 41
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_INDEXED_LINKED                                  UnderlyingSecurityTypeEnum = 42
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE            UnderlyingSecurityTypeEnum = 43
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_LETTER_OF_CREDIT                                UnderlyingSecurityTypeEnum = 44
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_LIQUIDITY_NOTE                                  UnderlyingSecurityTypeEnum = 45
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MANDATORY_TENDER                                UnderlyingSecurityTypeEnum = 46
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MATURED                                         UnderlyingSecurityTypeEnum = 47
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MEDIUM_TERM_NOTES                               UnderlyingSecurityTypeEnum = 48
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES                      UnderlyingSecurityTypeEnum = 49
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_MULTILEG_INSTRUMENT                             UnderlyingSecurityTypeEnum = 50
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES                        UnderlyingSecurityTypeEnum = 51
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OVERNIGHT                                       UnderlyingSecurityTypeEnum = 52
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PLAZOS_FIJOS                                    UnderlyingSecurityTypeEnum = 53
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE UnderlyingSecurityTypeEnum = 54
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE       UnderlyingSecurityTypeEnum = 55
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING                          UnderlyingSecurityTypeEnum = 56
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PROMISSORY_NOTE                                 UnderlyingSecurityTypeEnum = 57
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REPLACED                                        UnderlyingSecurityTypeEnum = 58
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_RETIRED                                         UnderlyingSecurityTypeEnum = 59
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE                       UnderlyingSecurityTypeEnum = 60
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REVENUE_BONDS                                   UnderlyingSecurityTypeEnum = 61
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REVOLVER                                        UnderlyingSecurityTypeEnum = 62
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REVOLVER_LOAN                                   UnderlyingSecurityTypeEnum = 63
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE                            UnderlyingSecurityTypeEnum = 64
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SPECIAL_ASSESSMENT                              UnderlyingSecurityTypeEnum = 65
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SPECIAL_OBLIGATION                              UnderlyingSecurityTypeEnum = 66
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SPECIAL_TAX                                     UnderlyingSecurityTypeEnum = 67
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_STRUCTURED_NOTES                                UnderlyingSecurityTypeEnum = 68
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SWING_LINE_FACILITY                             UnderlyingSecurityTypeEnum = 69
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TAX_ALLOCATION                                  UnderlyingSecurityTypeEnum = 70
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TAX_ANTICIPATION_NOTE                           UnderlyingSecurityTypeEnum = 71
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER                     UnderlyingSecurityTypeEnum = 72
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE                   UnderlyingSecurityTypeEnum = 73
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TERM_LOAN                                       UnderlyingSecurityTypeEnum = 74
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TO_BE_ANNOUNCED                                 UnderlyingSecurityTypeEnum = 75
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES         UnderlyingSecurityTypeEnum = 76
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_TREASURY_BOND                                UnderlyingSecurityTypeEnum = 77
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE_OLD                            UnderlyingSecurityTypeEnum = 78
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE                       UnderlyingSecurityTypeEnum = 79
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_WITHDRAWN                                       UnderlyingSecurityTypeEnum = 80
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_YANKEE_CORPORATE_BOND                           UnderlyingSecurityTypeEnum = 81
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BUY_SELLBACK                                    UnderlyingSecurityTypeEnum = 82
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT                     UnderlyingSecurityTypeEnum = 83
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_COMMERCIAL_PAPER                           UnderlyingSecurityTypeEnum = 84
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_BOND                             UnderlyingSecurityTypeEnum = 85
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_SOVEREIGNS                                 UnderlyingSecurityTypeEnum = 86
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS                      UnderlyingSecurityTypeEnum = 87
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FORWARD                                         UnderlyingSecurityTypeEnum = 88
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_PFANDBRIEFE                                     UnderlyingSecurityTypeEnum = 89
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_REPURCHASE                                      UnderlyingSecurityTypeEnum = 90
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SECURITIES_LOAN                                 UnderlyingSecurityTypeEnum = 91
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SECURITIES_PLEDGE                               UnderlyingSecurityTypeEnum = 92
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS                       UnderlyingSecurityTypeEnum = 93
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL                                UnderlyingSecurityTypeEnum = 94
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE                                UnderlyingSecurityTypeEnum = 95
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT                   UnderlyingSecurityTypeEnum = 96
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OPTIONS_ON_FUTURES                              UnderlyingSecurityTypeEnum = 97
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OPTIONS_ON_PHYSICAL                             UnderlyingSecurityTypeEnum = 98
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CASH                                            UnderlyingSecurityTypeEnum = 99
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_OPTIONS_ON_COMBO                                UnderlyingSecurityTypeEnum = 100
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_INTEREST_RATE_SWAP                              UnderlyingSecurityTypeEnum = 101
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_BANK_DEPOSITORY_NOTE                            UnderlyingSecurityTypeEnum = 102
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CANADIAN_MONEY_MARKETS                          UnderlyingSecurityTypeEnum = 103
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS                         UnderlyingSecurityTypeEnum = 104
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS                       UnderlyingSecurityTypeEnum = 105
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_BILLS                         UnderlyingSecurityTypeEnum = 106
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_NOTES                         UnderlyingSecurityTypeEnum = 107
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_CREDIT_DEFAULT_SWAP                             UnderlyingSecurityTypeEnum = 108
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES              UnderlyingSecurityTypeEnum = 109
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE                          UnderlyingSecurityTypeEnum = 110
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP                            UnderlyingSecurityTypeEnum = 111
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TERM_LIQUIDITY_NOTE                             UnderlyingSecurityTypeEnum = 112
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_TREASURY_BILL                                   UnderlyingSecurityTypeEnum = 113
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES                UnderlyingSecurityTypeEnum = 114
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FX_FORWARD                                      UnderlyingSecurityTypeEnum = 115
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FX_SPOT                                         UnderlyingSecurityTypeEnum = 116
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_FX_SWAP                                         UnderlyingSecurityTypeEnum = 117
	UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_NON_DELIVERABLE_FORWARD                         UnderlyingSecurityTypeEnum = 118
)

var UnderlyingSecurityTypeEnum_name = map[int32]string{
	0:   "UNDERLYING_SECURITY_TYPE_UNSPECIFIED",
	1:   "UNDERLYING_SECURITY_TYPE_BANKERS_ACCEPTANCE",
	2:   "UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT",
	3:   "UNDERLYING_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION",
	4:   "UNDERLYING_SECURITY_TYPE_COMMERCIAL_PAPER",
	5:   "UNDERLYING_SECURITY_TYPE_COMMON_STOCK",
	6:   "UNDERLYING_SECURITY_TYPE_CORPORATE_BOND",
	7:   "UNDERLYING_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT",
	8:   "UNDERLYING_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT",
	9:   "UNDERLYING_SECURITY_TYPE_FUTURE",
	10:  "UNDERLYING_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH",
	11:  "UNDERLYING_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY",
	12:  "UNDERLYING_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY",
	13:  "UNDERLYING_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT",
	14:  "UNDERLYING_SECURITY_TYPE_MUTUAL_FUND",
	15:  "UNDERLYING_SECURITY_TYPE_NO_SECURITY_TYPE",
	16:  "UNDERLYING_SECURITY_TYPE_OPTION",
	17:  "UNDERLYING_SECURITY_TYPE_PREFERRED_STOCK",
	18:  "UNDERLYING_SECURITY_TYPE_TIME_DEPOSIT",
	19:  "UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL_OLD",
	20:  "UNDERLYING_SECURITY_TYPE_WARRANT",
	21:  "UNDERLYING_SECURITY_TYPE_CONVERTIBLE_BOND",
	22:  "UNDERLYING_SECURITY_TYPE_IOETTEMORTGAGE",
	23:  "UNDERLYING_SECURITY_TYPE_WILDCARD",
	24:  "UNDERLYING_SECURITY_TYPE_AMENDED",
	25:  "UNDERLYING_SECURITY_TYPE_ASSET_BACKED_SECURITIES",
	26:  "UNDERLYING_SECURITY_TYPE_BANK_NOTES",
	27:  "UNDERLYING_SECURITY_TYPE_BILL_OF_EXCHANGES",
	28:  "UNDERLYING_SECURITY_TYPE_BRADY_BOND",
	29:  "UNDERLYING_SECURITY_TYPE_BRIDGE_LOAN",
	30:  "UNDERLYING_SECURITY_TYPE_CALL_LOANS",
	31:  "UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION",
	32:  "UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION",
	33:  "UNDERLYING_SECURITY_TYPE_CORP",
	34:  "UNDERLYING_SECURITY_TYPE_DEBTOR_IN_POSSESSION",
	35:  "UNDERLYING_SECURITY_TYPE_DEFAULTED",
	36:  "UNDERLYING_SECURITY_TYPE_DEPOSIT_NOTES",
	37:  "UNDERLYING_SECURITY_TYPE_DUAL_CURRENCY",
	38:  "UNDERLYING_SECURITY_TYPE_EXTENDED_COMM_NOTE",
	39:  "UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_COUPON",
	40:  "UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE",
	41:  "UNDERLYING_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS",
	42:  "UNDERLYING_SECURITY_TYPE_INDEXED_LINKED",
	43:  "UNDERLYING_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE",
	44:  "UNDERLYING_SECURITY_TYPE_LETTER_OF_CREDIT",
	45:  "UNDERLYING_SECURITY_TYPE_LIQUIDITY_NOTE",
	46:  "UNDERLYING_SECURITY_TYPE_MANDATORY_TENDER",
	47:  "UNDERLYING_SECURITY_TYPE_MATURED",
	48:  "UNDERLYING_SECURITY_TYPE_MEDIUM_TERM_NOTES",
	49:  "UNDERLYING_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES",
	50:  "UNDERLYING_SECURITY_TYPE_MULTILEG_INSTRUMENT",
	51:  "UNDERLYING_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES",
	52:  "UNDERLYING_SECURITY_TYPE_OVERNIGHT",
	53:  "UNDERLYING_SECURITY_TYPE_PLAZOS_FIJOS",
	54:  "UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE",
	55:  "UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE",
	56:  "UNDERLYING_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING",
	57:  "UNDERLYING_SECURITY_TYPE_PROMISSORY_NOTE",
	58:  "UNDERLYING_SECURITY_TYPE_REPLACED",
	59:  "UNDERLYING_SECURITY_TYPE_RETIRED",
	60:  "UNDERLYING_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE",
	61:  "UNDERLYING_SECURITY_TYPE_REVENUE_BONDS",
	62:  "UNDERLYING_SECURITY_TYPE_REVOLVER",
	63:  "UNDERLYING_SECURITY_TYPE_REVOLVER_LOAN",
	64:  "UNDERLYING_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE",
	65:  "UNDERLYING_SECURITY_TYPE_SPECIAL_ASSESSMENT",
	66:  "UNDERLYING_SECURITY_TYPE_SPECIAL_OBLIGATION",
	67:  "UNDERLYING_SECURITY_TYPE_SPECIAL_TAX",
	68:  "UNDERLYING_SECURITY_TYPE_STRUCTURED_NOTES",
	69:  "UNDERLYING_SECURITY_TYPE_SWING_LINE_FACILITY",
	70:  "UNDERLYING_SECURITY_TYPE_TAX_ALLOCATION",
	71:  "UNDERLYING_SECURITY_TYPE_TAX_ANTICIPATION_NOTE",
	72:  "UNDERLYING_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER",
	73:  "UNDERLYING_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE",
	74:  "UNDERLYING_SECURITY_TYPE_TERM_LOAN",
	75:  "UNDERLYING_SECURITY_TYPE_TO_BE_ANNOUNCED",
	76:  "UNDERLYING_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES",
	77:  "UNDERLYING_SECURITY_TYPE_US_TREASURY_BOND",
	78:  "UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE_OLD",
	79:  "UNDERLYING_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE",
	80:  "UNDERLYING_SECURITY_TYPE_WITHDRAWN",
	81:  "UNDERLYING_SECURITY_TYPE_YANKEE_CORPORATE_BOND",
	82:  "UNDERLYING_SECURITY_TYPE_BUY_SELLBACK",
	83:  "UNDERLYING_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT",
	84:  "UNDERLYING_SECURITY_TYPE_EURO_COMMERCIAL_PAPER",
	85:  "UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_BOND",
	86:  "UNDERLYING_SECURITY_TYPE_EURO_SOVEREIGNS",
	87:  "UNDERLYING_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS",
	88:  "UNDERLYING_SECURITY_TYPE_FORWARD",
	89:  "UNDERLYING_SECURITY_TYPE_PFANDBRIEFE",
	90:  "UNDERLYING_SECURITY_TYPE_REPURCHASE",
	91:  "UNDERLYING_SECURITY_TYPE_SECURITIES_LOAN",
	92:  "UNDERLYING_SECURITY_TYPE_SECURITIES_PLEDGE",
	93:  "UNDERLYING_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS",
	94:  "UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL",
	95:  "UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE",
	96:  "UNDERLYING_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT",
	97:  "UNDERLYING_SECURITY_TYPE_OPTIONS_ON_FUTURES",
	98:  "UNDERLYING_SECURITY_TYPE_OPTIONS_ON_PHYSICAL",
	99:  "UNDERLYING_SECURITY_TYPE_CASH",
	100: "UNDERLYING_SECURITY_TYPE_OPTIONS_ON_COMBO",
	101: "UNDERLYING_SECURITY_TYPE_INTEREST_RATE_SWAP",
	102: "UNDERLYING_SECURITY_TYPE_BANK_DEPOSITORY_NOTE",
	103: "UNDERLYING_SECURITY_TYPE_CANADIAN_MONEY_MARKETS",
	104: "UNDERLYING_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS",
	105: "UNDERLYING_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS",
	106: "UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_BILLS",
	107: "UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_NOTES",
	108: "UNDERLYING_SECURITY_TYPE_CREDIT_DEFAULT_SWAP",
	109: "UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES",
	110: "UNDERLYING_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE",
	111: "UNDERLYING_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP",
	112: "UNDERLYING_SECURITY_TYPE_TERM_LIQUIDITY_NOTE",
	113: "UNDERLYING_SECURITY_TYPE_TREASURY_BILL",
	114: "UNDERLYING_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES",
	115: "UNDERLYING_SECURITY_TYPE_FX_FORWARD",
	116: "UNDERLYING_SECURITY_TYPE_FX_SPOT",
	117: "UNDERLYING_SECURITY_TYPE_FX_SWAP",
	118: "UNDERLYING_SECURITY_TYPE_NON_DELIVERABLE_FORWARD",
}

var UnderlyingSecurityTypeEnum_value = map[string]int32{
	"UNDERLYING_SECURITY_TYPE_UNSPECIFIED":                                     0,
	"UNDERLYING_SECURITY_TYPE_BANKERS_ACCEPTANCE":                              1,
	"UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT":                          2,
	"UNDERLYING_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION":              3,
	"UNDERLYING_SECURITY_TYPE_COMMERCIAL_PAPER":                                4,
	"UNDERLYING_SECURITY_TYPE_COMMON_STOCK":                                    5,
	"UNDERLYING_SECURITY_TYPE_CORPORATE_BOND":                                  6,
	"UNDERLYING_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT":                     7,
	"UNDERLYING_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT":                       8,
	"UNDERLYING_SECURITY_TYPE_FUTURE":                                          9,
	"UNDERLYING_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH":                      10,
	"UNDERLYING_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY":                          11,
	"UNDERLYING_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY":                         12,
	"UNDERLYING_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT":                      13,
	"UNDERLYING_SECURITY_TYPE_MUTUAL_FUND":                                     14,
	"UNDERLYING_SECURITY_TYPE_NO_SECURITY_TYPE":                                15,
	"UNDERLYING_SECURITY_TYPE_OPTION":                                          16,
	"UNDERLYING_SECURITY_TYPE_PREFERRED_STOCK":                                 17,
	"UNDERLYING_SECURITY_TYPE_TIME_DEPOSIT":                                    18,
	"UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL_OLD":                            19,
	"UNDERLYING_SECURITY_TYPE_WARRANT":                                         20,
	"UNDERLYING_SECURITY_TYPE_CONVERTIBLE_BOND":                                21,
	"UNDERLYING_SECURITY_TYPE_IOETTEMORTGAGE":                                  22,
	"UNDERLYING_SECURITY_TYPE_WILDCARD":                                        23,
	"UNDERLYING_SECURITY_TYPE_AMENDED":                                         24,
	"UNDERLYING_SECURITY_TYPE_ASSET_BACKED_SECURITIES":                         25,
	"UNDERLYING_SECURITY_TYPE_BANK_NOTES":                                      26,
	"UNDERLYING_SECURITY_TYPE_BILL_OF_EXCHANGES":                               27,
	"UNDERLYING_SECURITY_TYPE_BRADY_BOND":                                      28,
	"UNDERLYING_SECURITY_TYPE_BRIDGE_LOAN":                                     29,
	"UNDERLYING_SECURITY_TYPE_CALL_LOANS":                                      30,
	"UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION":                       31,
	"UNDERLYING_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION":                    32,
	"UNDERLYING_SECURITY_TYPE_CORP":                                            33,
	"UNDERLYING_SECURITY_TYPE_DEBTOR_IN_POSSESSION":                            34,
	"UNDERLYING_SECURITY_TYPE_DEFAULTED":                                       35,
	"UNDERLYING_SECURITY_TYPE_DEPOSIT_NOTES":                                   36,
	"UNDERLYING_SECURITY_TYPE_DUAL_CURRENCY":                                   37,
	"UNDERLYING_SECURITY_TYPE_EXTENDED_COMM_NOTE":                              38,
	"UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_COUPON":                           39,
	"UNDERLYING_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE":                    40,
	"UNDERLYING_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS":                        41,
	"UNDERLYING_SECURITY_TYPE_INDEXED_LINKED":                                  42,
	"UNDERLYING_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE":            43,
	"UNDERLYING_SECURITY_TYPE_LETTER_OF_CREDIT":                                44,
	"UNDERLYING_SECURITY_TYPE_LIQUIDITY_NOTE":                                  45,
	"UNDERLYING_SECURITY_TYPE_MANDATORY_TENDER":                                46,
	"UNDERLYING_SECURITY_TYPE_MATURED":                                         47,
	"UNDERLYING_SECURITY_TYPE_MEDIUM_TERM_NOTES":                               48,
	"UNDERLYING_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES":                      49,
	"UNDERLYING_SECURITY_TYPE_MULTILEG_INSTRUMENT":                             50,
	"UNDERLYING_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES":                        51,
	"UNDERLYING_SECURITY_TYPE_OVERNIGHT":                                       52,
	"UNDERLYING_SECURITY_TYPE_PLAZOS_FIJOS":                                    53,
	"UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE": 54,
	"UNDERLYING_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE":       55,
	"UNDERLYING_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING":                          56,
	"UNDERLYING_SECURITY_TYPE_PROMISSORY_NOTE":                                 57,
	"UNDERLYING_SECURITY_TYPE_REPLACED":                                        58,
	"UNDERLYING_SECURITY_TYPE_RETIRED":                                         59,
	"UNDERLYING_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE":                       60,
	"UNDERLYING_SECURITY_TYPE_REVENUE_BONDS":                                   61,
	"UNDERLYING_SECURITY_TYPE_REVOLVER":                                        62,
	"UNDERLYING_SECURITY_TYPE_REVOLVER_LOAN":                                   63,
	"UNDERLYING_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE":                            64,
	"UNDERLYING_SECURITY_TYPE_SPECIAL_ASSESSMENT":                              65,
	"UNDERLYING_SECURITY_TYPE_SPECIAL_OBLIGATION":                              66,
	"UNDERLYING_SECURITY_TYPE_SPECIAL_TAX":                                     67,
	"UNDERLYING_SECURITY_TYPE_STRUCTURED_NOTES":                                68,
	"UNDERLYING_SECURITY_TYPE_SWING_LINE_FACILITY":                             69,
	"UNDERLYING_SECURITY_TYPE_TAX_ALLOCATION":                                  70,
	"UNDERLYING_SECURITY_TYPE_TAX_ANTICIPATION_NOTE":                           71,
	"UNDERLYING_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER":                     72,
	"UNDERLYING_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE":                   73,
	"UNDERLYING_SECURITY_TYPE_TERM_LOAN":                                       74,
	"UNDERLYING_SECURITY_TYPE_TO_BE_ANNOUNCED":                                 75,
	"UNDERLYING_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES":         76,
	"UNDERLYING_SECURITY_TYPE_US_TREASURY_BOND":                                77,
	"UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE_OLD":                            78,
	"UNDERLYING_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE":                       79,
	"UNDERLYING_SECURITY_TYPE_WITHDRAWN":                                       80,
	"UNDERLYING_SECURITY_TYPE_YANKEE_CORPORATE_BOND":                           81,
	"UNDERLYING_SECURITY_TYPE_BUY_SELLBACK":                                    82,
	"UNDERLYING_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT":                     83,
	"UNDERLYING_SECURITY_TYPE_EURO_COMMERCIAL_PAPER":                           84,
	"UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_BOND":                             85,
	"UNDERLYING_SECURITY_TYPE_EURO_SOVEREIGNS":                                 86,
	"UNDERLYING_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS":                      87,
	"UNDERLYING_SECURITY_TYPE_FORWARD":                                         88,
	"UNDERLYING_SECURITY_TYPE_PFANDBRIEFE":                                     89,
	"UNDERLYING_SECURITY_TYPE_REPURCHASE":                                      90,
	"UNDERLYING_SECURITY_TYPE_SECURITIES_LOAN":                                 91,
	"UNDERLYING_SECURITY_TYPE_SECURITIES_PLEDGE":                               92,
	"UNDERLYING_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS":                       93,
	"UNDERLYING_SECURITY_TYPE_US_TREASURY_BILL":                                94,
	"UNDERLYING_SECURITY_TYPE_US_TREASURY_NOTE":                                95,
	"UNDERLYING_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT":                   96,
	"UNDERLYING_SECURITY_TYPE_OPTIONS_ON_FUTURES":                              97,
	"UNDERLYING_SECURITY_TYPE_OPTIONS_ON_PHYSICAL":                             98,
	"UNDERLYING_SECURITY_TYPE_CASH":                                            99,
	"UNDERLYING_SECURITY_TYPE_OPTIONS_ON_COMBO":                                100,
	"UNDERLYING_SECURITY_TYPE_INTEREST_RATE_SWAP":                              101,
	"UNDERLYING_SECURITY_TYPE_BANK_DEPOSITORY_NOTE":                            102,
	"UNDERLYING_SECURITY_TYPE_CANADIAN_MONEY_MARKETS":                          103,
	"UNDERLYING_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS":                         104,
	"UNDERLYING_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS":                       105,
	"UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_BILLS":                         106,
	"UNDERLYING_SECURITY_TYPE_CANADIAN_TREASURY_NOTES":                         107,
	"UNDERLYING_SECURITY_TYPE_CREDIT_DEFAULT_SWAP":                             108,
	"UNDERLYING_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES":              109,
	"UNDERLYING_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE":                          110,
	"UNDERLYING_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP":                            111,
	"UNDERLYING_SECURITY_TYPE_TERM_LIQUIDITY_NOTE":                             112,
	"UNDERLYING_SECURITY_TYPE_TREASURY_BILL":                                   113,
	"UNDERLYING_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES":                114,
	"UNDERLYING_SECURITY_TYPE_FX_FORWARD":                                      115,
	"UNDERLYING_SECURITY_TYPE_FX_SPOT":                                         116,
	"UNDERLYING_SECURITY_TYPE_FX_SWAP":                                         117,
	"UNDERLYING_SECURITY_TYPE_NON_DELIVERABLE_FORWARD":                         118,
}

func (x UnderlyingSecurityTypeEnum) String() string {
	return proto.EnumName(UnderlyingSecurityTypeEnum_name, int32(x))
}

func (UnderlyingSecurityTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{77}
}

type UnderlyingRestructuringTypeEnum int32

const (
	UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_UNSPECIFIED                UnderlyingRestructuringTypeEnum = 0
	UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_FULL_RESTRUCTURING         UnderlyingRestructuringTypeEnum = 1
	UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING UnderlyingRestructuringTypeEnum = 2
	UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING     UnderlyingRestructuringTypeEnum = 3
	UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED UnderlyingRestructuringTypeEnum = 4
)

var UnderlyingRestructuringTypeEnum_name = map[int32]string{
	0: "UNDERLYING_RESTRUCTURING_TYPE_UNSPECIFIED",
	1: "UNDERLYING_RESTRUCTURING_TYPE_FULL_RESTRUCTURING",
	2: "UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING",
	3: "UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING",
	4: "UNDERLYING_RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED",
}

var UnderlyingRestructuringTypeEnum_value = map[string]int32{
	"UNDERLYING_RESTRUCTURING_TYPE_UNSPECIFIED":                0,
	"UNDERLYING_RESTRUCTURING_TYPE_FULL_RESTRUCTURING":         1,
	"UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING": 2,
	"UNDERLYING_RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING":     3,
	"UNDERLYING_RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED": 4,
}

func (x UnderlyingRestructuringTypeEnum) String() string {
	return proto.EnumName(UnderlyingRestructuringTypeEnum_name, int32(x))
}

func (UnderlyingRestructuringTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{78}
}

type UnderlyingSeniorityEnum int32

const (
	UnderlyingSeniorityEnum_UNDERLYING_SENIORITY_UNSPECIFIED    UnderlyingSeniorityEnum = 0
	UnderlyingSeniorityEnum_UNDERLYING_SENIORITY_SENIOR         UnderlyingSeniorityEnum = 1
	UnderlyingSeniorityEnum_UNDERLYING_SENIORITY_SENIOR_SECURED UnderlyingSeniorityEnum = 2
	UnderlyingSeniorityEnum_UNDERLYING_SENIORITY_SUBORDINATED   UnderlyingSeniorityEnum = 3
)

var UnderlyingSeniorityEnum_name = map[int32]string{
	0: "UNDERLYING_SENIORITY_UNSPECIFIED",
	1: "UNDERLYING_SENIORITY_SENIOR",
	2: "UNDERLYING_SENIORITY_SENIOR_SECURED",
	3: "UNDERLYING_SENIORITY_SUBORDINATED",
}

var UnderlyingSeniorityEnum_value = map[string]int32{
	"UNDERLYING_SENIORITY_UNSPECIFIED":    0,
	"UNDERLYING_SENIORITY_SENIOR":         1,
	"UNDERLYING_SENIORITY_SENIOR_SECURED": 2,
	"UNDERLYING_SENIORITY_SUBORDINATED":   3,
}

func (x UnderlyingSeniorityEnum) String() string {
	return proto.EnumName(UnderlyingSeniorityEnum_name, int32(x))
}

func (UnderlyingSeniorityEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{79}
}

type UnderlyingContractMultiplierUnitEnum int32

const (
	UnderlyingContractMultiplierUnitEnum_UNDERLYING_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED UnderlyingContractMultiplierUnitEnum = 0
	UnderlyingContractMultiplierUnitEnum_UNDERLYING_CONTRACT_MULTIPLIER_UNIT_DAYS        UnderlyingContractMultiplierUnitEnum = 1
	UnderlyingContractMultiplierUnitEnum_UNDERLYING_CONTRACT_MULTIPLIER_UNIT_HOURS       UnderlyingContractMultiplierUnitEnum = 2
	UnderlyingContractMultiplierUnitEnum_UNDERLYING_CONTRACT_MULTIPLIER_UNIT_SHARES      UnderlyingContractMultiplierUnitEnum = 3
)

var UnderlyingContractMultiplierUnitEnum_name = map[int32]string{
	0: "UNDERLYING_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED",
	1: "UNDERLYING_CONTRACT_MULTIPLIER_UNIT_DAYS",
	2: "UNDERLYING_CONTRACT_MULTIPLIER_UNIT_HOURS",
	3: "UNDERLYING_CONTRACT_MULTIPLIER_UNIT_SHARES",
}

var UnderlyingContractMultiplierUnitEnum_value = map[string]int32{
	"UNDERLYING_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED": 0,
	"UNDERLYING_CONTRACT_MULTIPLIER_UNIT_DAYS":        1,
	"UNDERLYING_CONTRACT_MULTIPLIER_UNIT_HOURS":       2,
	"UNDERLYING_CONTRACT_MULTIPLIER_UNIT_SHARES":      3,
}

func (x UnderlyingContractMultiplierUnitEnum) String() string {
	return proto.EnumName(UnderlyingContractMultiplierUnitEnum_name, int32(x))
}

func (UnderlyingContractMultiplierUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{80}
}

type UnderlyingFlowScheduleTypeEnum int32

const (
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_UNSPECIFIED                     UnderlyingFlowScheduleTypeEnum = 0
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH UnderlyingFlowScheduleTypeEnum = 1
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK           UnderlyingFlowScheduleTypeEnum = 2
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK               UnderlyingFlowScheduleTypeEnum = 3
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK           UnderlyingFlowScheduleTypeEnum = 4
	UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK               UnderlyingFlowScheduleTypeEnum = 5
)

var UnderlyingFlowScheduleTypeEnum_name = map[int32]string{
	0: "UNDERLYING_FLOW_SCHEDULE_TYPE_UNSPECIFIED",
	1: "UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH",
	2: "UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK",
	3: "UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK",
	4: "UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK",
	5: "UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK",
}

var UnderlyingFlowScheduleTypeEnum_value = map[string]int32{
	"UNDERLYING_FLOW_SCHEDULE_TYPE_UNSPECIFIED":                     0,
	"UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH": 1,
	"UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK":           2,
	"UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK":               3,
	"UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK":           4,
	"UNDERLYING_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK":               5,
}

func (x UnderlyingFlowScheduleTypeEnum) String() string {
	return proto.EnumName(UnderlyingFlowScheduleTypeEnum_name, int32(x))
}

func (UnderlyingFlowScheduleTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{81}
}

type UnderlyingUnitOfMeasureEnum int32

const (
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_UNSPECIFIED        UnderlyingUnitOfMeasureEnum = 0
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_BARRELS            UnderlyingUnitOfMeasureEnum = 1
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_BILLION_CUBIC_FEET UnderlyingUnitOfMeasureEnum = 2
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_BUSHELS            UnderlyingUnitOfMeasureEnum = 3
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_GALLONS            UnderlyingUnitOfMeasureEnum = 4
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_MEGAWATT_HOURS     UnderlyingUnitOfMeasureEnum = 5
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_METRIC_TONS        UnderlyingUnitOfMeasureEnum = 6
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_MILLION_BARRELS    UnderlyingUnitOfMeasureEnum = 7
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_ONE_MILLION_BTU    UnderlyingUnitOfMeasureEnum = 8
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_POUNDS             UnderlyingUnitOfMeasureEnum = 9
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_TONS               UnderlyingUnitOfMeasureEnum = 10
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_TROY_OUNCES        UnderlyingUnitOfMeasureEnum = 11
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_USDOLLARS          UnderlyingUnitOfMeasureEnum = 12
	UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_ALLOWANCES         UnderlyingUnitOfMeasureEnum = 13
)

var UnderlyingUnitOfMeasureEnum_name = map[int32]string{
	0:  "UNDERLYING_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "UNDERLYING_UNIT_OF_MEASURE_BARRELS",
	2:  "UNDERLYING_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "UNDERLYING_UNIT_OF_MEASURE_BUSHELS",
	4:  "UNDERLYING_UNIT_OF_MEASURE_GALLONS",
	5:  "UNDERLYING_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "UNDERLYING_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "UNDERLYING_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "UNDERLYING_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "UNDERLYING_UNIT_OF_MEASURE_POUNDS",
	10: "UNDERLYING_UNIT_OF_MEASURE_TONS",
	11: "UNDERLYING_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "UNDERLYING_UNIT_OF_MEASURE_USDOLLARS",
	13: "UNDERLYING_UNIT_OF_MEASURE_ALLOWANCES",
}

var UnderlyingUnitOfMeasureEnum_value = map[string]int32{
	"UNDERLYING_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"UNDERLYING_UNIT_OF_MEASURE_BARRELS":            1,
	"UNDERLYING_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"UNDERLYING_UNIT_OF_MEASURE_BUSHELS":            3,
	"UNDERLYING_UNIT_OF_MEASURE_GALLONS":            4,
	"UNDERLYING_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"UNDERLYING_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"UNDERLYING_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"UNDERLYING_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"UNDERLYING_UNIT_OF_MEASURE_POUNDS":             9,
	"UNDERLYING_UNIT_OF_MEASURE_TONS":               10,
	"UNDERLYING_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"UNDERLYING_UNIT_OF_MEASURE_USDOLLARS":          12,
	"UNDERLYING_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x UnderlyingUnitOfMeasureEnum) String() string {
	return proto.EnumName(UnderlyingUnitOfMeasureEnum_name, int32(x))
}

func (UnderlyingUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{82}
}

type UnderlyingPriceUnitOfMeasureEnum int32

const (
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_UNSPECIFIED        UnderlyingPriceUnitOfMeasureEnum = 0
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_BARRELS            UnderlyingPriceUnitOfMeasureEnum = 1
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET UnderlyingPriceUnitOfMeasureEnum = 2
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_BUSHELS            UnderlyingPriceUnitOfMeasureEnum = 3
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_GALLONS            UnderlyingPriceUnitOfMeasureEnum = 4
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS     UnderlyingPriceUnitOfMeasureEnum = 5
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_METRIC_TONS        UnderlyingPriceUnitOfMeasureEnum = 6
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS    UnderlyingPriceUnitOfMeasureEnum = 7
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU    UnderlyingPriceUnitOfMeasureEnum = 8
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_POUNDS             UnderlyingPriceUnitOfMeasureEnum = 9
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_TONS               UnderlyingPriceUnitOfMeasureEnum = 10
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_TROY_OUNCES        UnderlyingPriceUnitOfMeasureEnum = 11
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_USDOLLARS          UnderlyingPriceUnitOfMeasureEnum = 12
	UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_ALLOWANCES         UnderlyingPriceUnitOfMeasureEnum = 13
)

var UnderlyingPriceUnitOfMeasureEnum_name = map[int32]string{
	0:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_BARRELS",
	2:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_BUSHELS",
	4:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_GALLONS",
	5:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "UNDERLYING_PRICE_UNIT_OF_MEASURE_POUNDS",
	10: "UNDERLYING_PRICE_UNIT_OF_MEASURE_TONS",
	11: "UNDERLYING_PRICE_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "UNDERLYING_PRICE_UNIT_OF_MEASURE_USDOLLARS",
	13: "UNDERLYING_PRICE_UNIT_OF_MEASURE_ALLOWANCES",
}

var UnderlyingPriceUnitOfMeasureEnum_value = map[string]int32{
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_BARRELS":            1,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_BUSHELS":            3,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_GALLONS":            4,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_POUNDS":             9,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_TONS":               10,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_USDOLLARS":          12,
	"UNDERLYING_PRICE_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x UnderlyingPriceUnitOfMeasureEnum) String() string {
	return proto.EnumName(UnderlyingPriceUnitOfMeasureEnum_name, int32(x))
}

func (UnderlyingPriceUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{83}
}

type UnderlyingTimeUnitEnum int32

const (
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_UNSPECIFIED UnderlyingTimeUnitEnum = 0
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_DAY         UnderlyingTimeUnitEnum = 1
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_HOUR        UnderlyingTimeUnitEnum = 2
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_MINUTE      UnderlyingTimeUnitEnum = 3
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_MONTH       UnderlyingTimeUnitEnum = 4
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_SECOND      UnderlyingTimeUnitEnum = 5
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_WEEK        UnderlyingTimeUnitEnum = 6
	UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_YEAR        UnderlyingTimeUnitEnum = 7
)

var UnderlyingTimeUnitEnum_name = map[int32]string{
	0: "UNDERLYING_TIME_UNIT_UNSPECIFIED",
	1: "UNDERLYING_TIME_UNIT_DAY",
	2: "UNDERLYING_TIME_UNIT_HOUR",
	3: "UNDERLYING_TIME_UNIT_MINUTE",
	4: "UNDERLYING_TIME_UNIT_MONTH",
	5: "UNDERLYING_TIME_UNIT_SECOND",
	6: "UNDERLYING_TIME_UNIT_WEEK",
	7: "UNDERLYING_TIME_UNIT_YEAR",
}

var UnderlyingTimeUnitEnum_value = map[string]int32{
	"UNDERLYING_TIME_UNIT_UNSPECIFIED": 0,
	"UNDERLYING_TIME_UNIT_DAY":         1,
	"UNDERLYING_TIME_UNIT_HOUR":        2,
	"UNDERLYING_TIME_UNIT_MINUTE":      3,
	"UNDERLYING_TIME_UNIT_MONTH":       4,
	"UNDERLYING_TIME_UNIT_SECOND":      5,
	"UNDERLYING_TIME_UNIT_WEEK":        6,
	"UNDERLYING_TIME_UNIT_YEAR":        7,
}

func (x UnderlyingTimeUnitEnum) String() string {
	return proto.EnumName(UnderlyingTimeUnitEnum_name, int32(x))
}

func (UnderlyingTimeUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{84}
}

type UnderlyingExerciseStyleEnum int32

const (
	UnderlyingExerciseStyleEnum_UNDERLYING_EXERCISE_STYLE_UNSPECIFIED UnderlyingExerciseStyleEnum = 0
	UnderlyingExerciseStyleEnum_UNDERLYING_EXERCISE_STYLE_AMERICAN    UnderlyingExerciseStyleEnum = 1
	UnderlyingExerciseStyleEnum_UNDERLYING_EXERCISE_STYLE_BERMUDA     UnderlyingExerciseStyleEnum = 2
	UnderlyingExerciseStyleEnum_UNDERLYING_EXERCISE_STYLE_EUROPEAN    UnderlyingExerciseStyleEnum = 3
)

var UnderlyingExerciseStyleEnum_name = map[int32]string{
	0: "UNDERLYING_EXERCISE_STYLE_UNSPECIFIED",
	1: "UNDERLYING_EXERCISE_STYLE_AMERICAN",
	2: "UNDERLYING_EXERCISE_STYLE_BERMUDA",
	3: "UNDERLYING_EXERCISE_STYLE_EUROPEAN",
}

var UnderlyingExerciseStyleEnum_value = map[string]int32{
	"UNDERLYING_EXERCISE_STYLE_UNSPECIFIED": 0,
	"UNDERLYING_EXERCISE_STYLE_AMERICAN":    1,
	"UNDERLYING_EXERCISE_STYLE_BERMUDA":     2,
	"UNDERLYING_EXERCISE_STYLE_EUROPEAN":    3,
}

func (x UnderlyingExerciseStyleEnum) String() string {
	return proto.EnumName(UnderlyingExerciseStyleEnum_name, int32(x))
}

func (UnderlyingExerciseStyleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{85}
}

type UnderlyingSettlementTypeEnum int32

const (
	UnderlyingSettlementTypeEnum_UNDERLYING_SETTLEMENT_TYPE_UNSPECIFIED UnderlyingSettlementTypeEnum = 0
	UnderlyingSettlementTypeEnum_UNDERLYING_SETTLEMENT_TYPE_TPLUS1      UnderlyingSettlementTypeEnum = 1
	UnderlyingSettlementTypeEnum_UNDERLYING_SETTLEMENT_TYPE_TPLUS3      UnderlyingSettlementTypeEnum = 2
	UnderlyingSettlementTypeEnum_UNDERLYING_SETTLEMENT_TYPE_TPLUS4      UnderlyingSettlementTypeEnum = 3
)

var UnderlyingSettlementTypeEnum_name = map[int32]string{
	0: "UNDERLYING_SETTLEMENT_TYPE_UNSPECIFIED",
	1: "UNDERLYING_SETTLEMENT_TYPE_TPLUS1",
	2: "UNDERLYING_SETTLEMENT_TYPE_TPLUS3",
	3: "UNDERLYING_SETTLEMENT_TYPE_TPLUS4",
}

var UnderlyingSettlementTypeEnum_value = map[string]int32{
	"UNDERLYING_SETTLEMENT_TYPE_UNSPECIFIED": 0,
	"UNDERLYING_SETTLEMENT_TYPE_TPLUS1":      1,
	"UNDERLYING_SETTLEMENT_TYPE_TPLUS3":      2,
	"UNDERLYING_SETTLEMENT_TYPE_TPLUS4":      3,
}

func (x UnderlyingSettlementTypeEnum) String() string {
	return proto.EnumName(UnderlyingSettlementTypeEnum_name, int32(x))
}

func (UnderlyingSettlementTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{86}
}

type UnderlyingCashTypeEnum int32

const (
	UnderlyingCashTypeEnum_UNDERLYING_CASH_TYPE_UNSPECIFIED UnderlyingCashTypeEnum = 0
	UnderlyingCashTypeEnum_UNDERLYING_CASH_TYPE_DIFF        UnderlyingCashTypeEnum = 1
	UnderlyingCashTypeEnum_UNDERLYING_CASH_TYPE_FIXED       UnderlyingCashTypeEnum = 2
)

var UnderlyingCashTypeEnum_name = map[int32]string{
	0: "UNDERLYING_CASH_TYPE_UNSPECIFIED",
	1: "UNDERLYING_CASH_TYPE_DIFF",
	2: "UNDERLYING_CASH_TYPE_FIXED",
}

var UnderlyingCashTypeEnum_value = map[string]int32{
	"UNDERLYING_CASH_TYPE_UNSPECIFIED": 0,
	"UNDERLYING_CASH_TYPE_DIFF":        1,
	"UNDERLYING_CASH_TYPE_FIXED":       2,
}

func (x UnderlyingCashTypeEnum) String() string {
	return proto.EnumName(UnderlyingCashTypeEnum_name, int32(x))
}

func (UnderlyingCashTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{87}
}

type UnderlyingFXRateCalcEnum int32

const (
	UnderlyingFXRateCalcEnum_UNDERLYING_FX_RATE_CALC_UNSPECIFIED UnderlyingFXRateCalcEnum = 0
	UnderlyingFXRateCalcEnum_UNDERLYING_FX_RATE_CALC_DIVIDE      UnderlyingFXRateCalcEnum = 1
	UnderlyingFXRateCalcEnum_UNDERLYING_FX_RATE_CALC_MULTIPLY    UnderlyingFXRateCalcEnum = 2
)

var UnderlyingFXRateCalcEnum_name = map[int32]string{
	0: "UNDERLYING_FX_RATE_CALC_UNSPECIFIED",
	1: "UNDERLYING_FX_RATE_CALC_DIVIDE",
	2: "UNDERLYING_FX_RATE_CALC_MULTIPLY",
}

var UnderlyingFXRateCalcEnum_value = map[string]int32{
	"UNDERLYING_FX_RATE_CALC_UNSPECIFIED": 0,
	"UNDERLYING_FX_RATE_CALC_DIVIDE":      1,
	"UNDERLYING_FX_RATE_CALC_MULTIPLY":    2,
}

func (x UnderlyingFXRateCalcEnum) String() string {
	return proto.EnumName(UnderlyingFXRateCalcEnum_name, int32(x))
}

func (UnderlyingFXRateCalcEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{88}
}

type YieldTypeEnum int32

const (
	YieldTypeEnum_YIELD_TYPE_UNSPECIFIED                       YieldTypeEnum = 0
	YieldTypeEnum_YIELD_TYPE_AFTER_TAX_YIELD                   YieldTypeEnum = 1
	YieldTypeEnum_YIELD_TYPE_ANNUAL_YIELD                      YieldTypeEnum = 2
	YieldTypeEnum_YIELD_TYPE_BOOK_YIELD                        YieldTypeEnum = 3
	YieldTypeEnum_YIELD_TYPE_CLOSING_YIELD                     YieldTypeEnum = 4
	YieldTypeEnum_YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_MONTH   YieldTypeEnum = 5
	YieldTypeEnum_YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_QUARTER YieldTypeEnum = 6
	YieldTypeEnum_YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_YEAR    YieldTypeEnum = 7
	YieldTypeEnum_YIELD_TYPE_COMPOUND_YIELD                    YieldTypeEnum = 8
	YieldTypeEnum_YIELD_TYPE_CURRENT_YIELD                     YieldTypeEnum = 9
	YieldTypeEnum_YIELD_TYPE_GVNT_EQUIVALENT_YIELD             YieldTypeEnum = 10
	YieldTypeEnum_YIELD_TYPE_INVERSE_FLOATER_BOND_YIELD        YieldTypeEnum = 11
	YieldTypeEnum_YIELD_TYPE_MARK_TO_MARKET_YIELD              YieldTypeEnum = 12
	YieldTypeEnum_YIELD_TYPE_MOST_RECENT_CLOSING_YIELD         YieldTypeEnum = 13
	YieldTypeEnum_YIELD_TYPE_OPEN_AVERAGE_YIELD                YieldTypeEnum = 14
	YieldTypeEnum_YIELD_TYPE_PREVIOUS_CLOSE_YIELD              YieldTypeEnum = 15
	YieldTypeEnum_YIELD_TYPE_PROCEEDS_YIELD                    YieldTypeEnum = 16
	YieldTypeEnum_YIELD_TYPE_SEMI_ANNUAL_YIELD                 YieldTypeEnum = 17
	YieldTypeEnum_YIELD_TYPE_SIMPLE_YIELD                      YieldTypeEnum = 18
	YieldTypeEnum_YIELD_TYPE_TAX_EQUIVALENT_YIELD              YieldTypeEnum = 19
	YieldTypeEnum_YIELD_TYPE_TRUE_GROSS_YIELD                  YieldTypeEnum = 20
	YieldTypeEnum_YIELD_TYPE_TRUE_YIELD                        YieldTypeEnum = 21
	YieldTypeEnum_YIELD_TYPE_YIELD_AT_ISSUE                    YieldTypeEnum = 22
	YieldTypeEnum_YIELD_TYPE_YIELD_CHANGE_SINCE_CLOSE          YieldTypeEnum = 23
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_AVERAGE_MATURITY         YieldTypeEnum = 24
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_LONGEST_AVERAGE_LIFE     YieldTypeEnum = 25
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_MATURITY                 YieldTypeEnum = 26
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_NEXT_CALL                YieldTypeEnum = 27
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_NEXT_PUT                 YieldTypeEnum = 28
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_NEXT_REFUND              YieldTypeEnum = 29
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_SHORTEST_AVERAGE_LIFE    YieldTypeEnum = 30
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_TENDER_DATE              YieldTypeEnum = 31
	YieldTypeEnum_YIELD_TYPE_YIELD_TO_WORST                    YieldTypeEnum = 32
	YieldTypeEnum_YIELD_TYPE_YIELD_WITH_INFLATION_ASSUMPTION   YieldTypeEnum = 33
	YieldTypeEnum_YIELD_TYPE_YIELD_VALUE_OF32NDS               YieldTypeEnum = 34
)

var YieldTypeEnum_name = map[int32]string{
	0:  "YIELD_TYPE_UNSPECIFIED",
	1:  "YIELD_TYPE_AFTER_TAX_YIELD",
	2:  "YIELD_TYPE_ANNUAL_YIELD",
	3:  "YIELD_TYPE_BOOK_YIELD",
	4:  "YIELD_TYPE_CLOSING_YIELD",
	5:  "YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_MONTH",
	6:  "YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_QUARTER",
	7:  "YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_YEAR",
	8:  "YIELD_TYPE_COMPOUND_YIELD",
	9:  "YIELD_TYPE_CURRENT_YIELD",
	10: "YIELD_TYPE_GVNT_EQUIVALENT_YIELD",
	11: "YIELD_TYPE_INVERSE_FLOATER_BOND_YIELD",
	12: "YIELD_TYPE_MARK_TO_MARKET_YIELD",
	13: "YIELD_TYPE_MOST_RECENT_CLOSING_YIELD",
	14: "YIELD_TYPE_OPEN_AVERAGE_YIELD",
	15: "YIELD_TYPE_PREVIOUS_CLOSE_YIELD",
	16: "YIELD_TYPE_PROCEEDS_YIELD",
	17: "YIELD_TYPE_SEMI_ANNUAL_YIELD",
	18: "YIELD_TYPE_SIMPLE_YIELD",
	19: "YIELD_TYPE_TAX_EQUIVALENT_YIELD",
	20: "YIELD_TYPE_TRUE_GROSS_YIELD",
	21: "YIELD_TYPE_TRUE_YIELD",
	22: "YIELD_TYPE_YIELD_AT_ISSUE",
	23: "YIELD_TYPE_YIELD_CHANGE_SINCE_CLOSE",
	24: "YIELD_TYPE_YIELD_TO_AVERAGE_MATURITY",
	25: "YIELD_TYPE_YIELD_TO_LONGEST_AVERAGE_LIFE",
	26: "YIELD_TYPE_YIELD_TO_MATURITY",
	27: "YIELD_TYPE_YIELD_TO_NEXT_CALL",
	28: "YIELD_TYPE_YIELD_TO_NEXT_PUT",
	29: "YIELD_TYPE_YIELD_TO_NEXT_REFUND",
	30: "YIELD_TYPE_YIELD_TO_SHORTEST_AVERAGE_LIFE",
	31: "YIELD_TYPE_YIELD_TO_TENDER_DATE",
	32: "YIELD_TYPE_YIELD_TO_WORST",
	33: "YIELD_TYPE_YIELD_WITH_INFLATION_ASSUMPTION",
	34: "YIELD_TYPE_YIELD_VALUE_OF32NDS",
}

var YieldTypeEnum_value = map[string]int32{
	"YIELD_TYPE_UNSPECIFIED":                       0,
	"YIELD_TYPE_AFTER_TAX_YIELD":                   1,
	"YIELD_TYPE_ANNUAL_YIELD":                      2,
	"YIELD_TYPE_BOOK_YIELD":                        3,
	"YIELD_TYPE_CLOSING_YIELD":                     4,
	"YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_MONTH":   5,
	"YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_QUARTER": 6,
	"YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_YEAR":    7,
	"YIELD_TYPE_COMPOUND_YIELD":                    8,
	"YIELD_TYPE_CURRENT_YIELD":                     9,
	"YIELD_TYPE_GVNT_EQUIVALENT_YIELD":             10,
	"YIELD_TYPE_INVERSE_FLOATER_BOND_YIELD":        11,
	"YIELD_TYPE_MARK_TO_MARKET_YIELD":              12,
	"YIELD_TYPE_MOST_RECENT_CLOSING_YIELD":         13,
	"YIELD_TYPE_OPEN_AVERAGE_YIELD":                14,
	"YIELD_TYPE_PREVIOUS_CLOSE_YIELD":              15,
	"YIELD_TYPE_PROCEEDS_YIELD":                    16,
	"YIELD_TYPE_SEMI_ANNUAL_YIELD":                 17,
	"YIELD_TYPE_SIMPLE_YIELD":                      18,
	"YIELD_TYPE_TAX_EQUIVALENT_YIELD":              19,
	"YIELD_TYPE_TRUE_GROSS_YIELD":                  20,
	"YIELD_TYPE_TRUE_YIELD":                        21,
	"YIELD_TYPE_YIELD_AT_ISSUE":                    22,
	"YIELD_TYPE_YIELD_CHANGE_SINCE_CLOSE":          23,
	"YIELD_TYPE_YIELD_TO_AVERAGE_MATURITY":         24,
	"YIELD_TYPE_YIELD_TO_LONGEST_AVERAGE_LIFE":     25,
	"YIELD_TYPE_YIELD_TO_MATURITY":                 26,
	"YIELD_TYPE_YIELD_TO_NEXT_CALL":                27,
	"YIELD_TYPE_YIELD_TO_NEXT_PUT":                 28,
	"YIELD_TYPE_YIELD_TO_NEXT_REFUND":              29,
	"YIELD_TYPE_YIELD_TO_SHORTEST_AVERAGE_LIFE":    30,
	"YIELD_TYPE_YIELD_TO_TENDER_DATE":              31,
	"YIELD_TYPE_YIELD_TO_WORST":                    32,
	"YIELD_TYPE_YIELD_WITH_INFLATION_ASSUMPTION":   33,
	"YIELD_TYPE_YIELD_VALUE_OF32NDS":               34,
}

func (x YieldTypeEnum) String() string {
	return proto.EnumName(YieldTypeEnum_name, int32(x))
}

func (YieldTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{89}
}

type YieldRedemptionPriceTypeEnum int32

const (
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_UNSPECIFIED                        YieldRedemptionPriceTypeEnum = 0
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_FIXED_AMOUNT                       YieldRedemptionPriceTypeEnum = 1
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PERCENTAGE                         YieldRedemptionPriceTypeEnum = 2
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PER_UNIT                           YieldRedemptionPriceTypeEnum = 3
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_DISCOUNT                           YieldRedemptionPriceTypeEnum = 4
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PREMIUM                            YieldRedemptionPriceTypeEnum = 5
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_SPREAD                             YieldRedemptionPriceTypeEnum = 6
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_TEDPRICE                           YieldRedemptionPriceTypeEnum = 7
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_TEDYIELD                           YieldRedemptionPriceTypeEnum = 8
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE          YieldRedemptionPriceTypeEnum = 9
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE       YieldRedemptionPriceTypeEnum = 10
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_YIELD                              YieldRedemptionPriceTypeEnum = 11
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS            YieldRedemptionPriceTypeEnum = 12
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS           YieldRedemptionPriceTypeEnum = 13
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS             YieldRedemptionPriceTypeEnum = 14
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS YieldRedemptionPriceTypeEnum = 15
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS        YieldRedemptionPriceTypeEnum = 16
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS      YieldRedemptionPriceTypeEnum = 17
	YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS    YieldRedemptionPriceTypeEnum = 18
)

var YieldRedemptionPriceTypeEnum_name = map[int32]string{
	0:  "YIELD_REDEMPTION_PRICE_TYPE_UNSPECIFIED",
	1:  "YIELD_REDEMPTION_PRICE_TYPE_FIXED_AMOUNT",
	2:  "YIELD_REDEMPTION_PRICE_TYPE_PERCENTAGE",
	3:  "YIELD_REDEMPTION_PRICE_TYPE_PER_UNIT",
	4:  "YIELD_REDEMPTION_PRICE_TYPE_DISCOUNT",
	5:  "YIELD_REDEMPTION_PRICE_TYPE_PREMIUM",
	6:  "YIELD_REDEMPTION_PRICE_TYPE_SPREAD",
	7:  "YIELD_REDEMPTION_PRICE_TYPE_TEDPRICE",
	8:  "YIELD_REDEMPTION_PRICE_TYPE_TEDYIELD",
	9:  "YIELD_REDEMPTION_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE",
	10: "YIELD_REDEMPTION_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE",
	11: "YIELD_REDEMPTION_PRICE_TYPE_YIELD",
	12: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS",
	13: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS",
	14: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS",
	15: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS",
	16: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS",
	17: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS",
	18: "YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS",
}

var YieldRedemptionPriceTypeEnum_value = map[string]int32{
	"YIELD_REDEMPTION_PRICE_TYPE_UNSPECIFIED":                        0,
	"YIELD_REDEMPTION_PRICE_TYPE_FIXED_AMOUNT":                       1,
	"YIELD_REDEMPTION_PRICE_TYPE_PERCENTAGE":                         2,
	"YIELD_REDEMPTION_PRICE_TYPE_PER_UNIT":                           3,
	"YIELD_REDEMPTION_PRICE_TYPE_DISCOUNT":                           4,
	"YIELD_REDEMPTION_PRICE_TYPE_PREMIUM":                            5,
	"YIELD_REDEMPTION_PRICE_TYPE_SPREAD":                             6,
	"YIELD_REDEMPTION_PRICE_TYPE_TEDPRICE":                           7,
	"YIELD_REDEMPTION_PRICE_TYPE_TEDYIELD":                           8,
	"YIELD_REDEMPTION_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE":          9,
	"YIELD_REDEMPTION_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE":       10,
	"YIELD_REDEMPTION_PRICE_TYPE_YIELD":                              11,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS":            12,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS":           13,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS":             14,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS": 15,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS":        16,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS":      17,
	"YIELD_REDEMPTION_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS":    18,
}

func (x YieldRedemptionPriceTypeEnum) String() string {
	return proto.EnumName(YieldRedemptionPriceTypeEnum_name, int32(x))
}

func (YieldRedemptionPriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{90}
}

type UnderlyingStipTypeEnum int32

const (
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_UNSPECIFIED                                        UnderlyingStipTypeEnum = 0
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ABSOLUTE_PREPAYMENT_SPEED                          UnderlyingStipTypeEnum = 1
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_PENALTY                        UnderlyingStipTypeEnum = 2
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_RATE                           UnderlyingStipTypeEnum = 3
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_YIELD                          UnderlyingStipTypeEnum = 4
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE          UnderlyingStipTypeEnum = 5
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_GEOGRAPHICS                                        UnderlyingStipTypeEnum = 6
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ISSUE_DATE                                         UnderlyingStipTypeEnum = 7
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_LOT_VARIANCE                                       UnderlyingStipTypeEnum = 8
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MATURITY_YEAR_AND_MONTH                            UnderlyingStipTypeEnum = 9
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MONTHLY_PREPAYMENT_RATE                            UnderlyingStipTypeEnum = 10
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_NUMBER_OF_PIECES                                   UnderlyingStipTypeEnum = 11
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE                     UnderlyingStipTypeEnum = 12
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE   UnderlyingStipTypeEnum = 13
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE             UnderlyingStipTypeEnum = 14
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_POOLS_MAXIMUM                                      UnderlyingStipTypeEnum = 15
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_POOLS_PER_LOT                                      UnderlyingStipTypeEnum = 16
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_POOLS_PER_MILLION                                  UnderlyingStipTypeEnum = 17
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_POOLS_PER_TRADE                                    UnderlyingStipTypeEnum = 18
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PRODUCTION_YEAR                                    UnderlyingStipTypeEnum = 19
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_SINGLE_MONTHLY_MORTALITY                           UnderlyingStipTypeEnum = 20
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_TRADE_VARIANCE                                     UnderlyingStipTypeEnum = 21
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_COUPON                            UnderlyingStipTypeEnum = 22
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON                       UnderlyingStipTypeEnum = 23
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LOAN_AGE                          UnderlyingStipTypeEnum = 24
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_MATURITY                          UnderlyingStipTypeEnum = 25
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ALTERNATIVE_MINIMUM_TAX                            UnderlyingStipTypeEnum = 26
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_AUTO_REINVESTMENT                                  UnderlyingStipTypeEnum = 27
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_BANK_QUALIFIED                                     UnderlyingStipTypeEnum = 28
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_BARGAIN_CONDITIONS                                 UnderlyingStipTypeEnum = 29
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_BENCHMARK_PRICE_SOURCE                             UnderlyingStipTypeEnum = 30
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_CALL_PROTECTION                                    UnderlyingStipTypeEnum = 31
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_COUPON_RANGE                                       UnderlyingStipTypeEnum = 32
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_CUSTOM_START                                       UnderlyingStipTypeEnum = 33
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_EXPLICIT_LOT_IDENTIFIER                            UnderlyingStipTypeEnum = 34
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_FREEFORM_TEXT                                      UnderlyingStipTypeEnum = 35
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_INSURED                                            UnderlyingStipTypeEnum = 36
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ISO_CURRENCY_CODE                                  UnderlyingStipTypeEnum = 37
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ISSUER                                             UnderlyingStipTypeEnum = 38
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ISSUE_SIZE_RANGE                                   UnderlyingStipTypeEnum = 39
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_LOOKBACK_DAYS                                      UnderlyingStipTypeEnum = 40
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MARKET_SECTOR                                      UnderlyingStipTypeEnum = 41
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MATURITY_RANGE                                     UnderlyingStipTypeEnum = 42
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MAXIMUM_SUBSTITUTIONS                              UnderlyingStipTypeEnum = 43
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MINIMUM_DENOMINATION                               UnderlyingStipTypeEnum = 44
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MINIMUM_INCREMENT                                  UnderlyingStipTypeEnum = 45
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MINIMUM_QUANTITY                                   UnderlyingStipTypeEnum = 46
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PAYMENT_FREQUENCY                                  UnderlyingStipTypeEnum = 47
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PRICE_RANGE                                        UnderlyingStipTypeEnum = 48
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PRICING_FREQUENCY                                  UnderlyingStipTypeEnum = 49
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PURPOSE                                            UnderlyingStipTypeEnum = 50
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_RATING_SOURCE_AND_RANGE                            UnderlyingStipTypeEnum = 51
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_RESTRICTED                                         UnderlyingStipTypeEnum = 52
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED                 UnderlyingStipTypeEnum = 53
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_STRUCTURE                                          UnderlyingStipTypeEnum = 54
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_SUBSTITUTIONS_FREQUENCY                            UnderlyingStipTypeEnum = 55
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_SUBSTITUTIONS_LEFT                                 UnderlyingStipTypeEnum = 56
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_TYPE_OF_REDEMPTION                                 UnderlyingStipTypeEnum = 57
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_VALUATION_DISCOUNT                                 UnderlyingStipTypeEnum = 58
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_WHOLE_POOL                                         UnderlyingStipTypeEnum = 59
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_YIELD_RANGE                                        UnderlyingStipTypeEnum = 60
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET UnderlyingStipTypeEnum = 61
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_AVERAGE_FICOSCORE                                  UnderlyingStipTypeEnum = 62
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_AVERAGE_LOAN_SIZE                                  UnderlyingStipTypeEnum = 63
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_BROKER_CREDIT                                      UnderlyingStipTypeEnum = 64
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_BROKER_SALES_CREDIT_OVERRIDE                       UnderlyingStipTypeEnum = 65
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_DISCOUNT_RATE                                      UnderlyingStipTypeEnum = 66
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE               UnderlyingStipTypeEnum = 67
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MAXIMUM_LOAN_BALANCE                               UnderlyingStipTypeEnum = 68
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_MAXIMUM_ORDER_SIZE                                 UnderlyingStipTypeEnum = 69
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS        UnderlyingStipTypeEnum = 70
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS     UnderlyingStipTypeEnum = 71
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_ORDER_QUANTITY_INCREMENT                           UnderlyingStipTypeEnum = 72
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_POOL_IDENTIFIER                                    UnderlyingStipTypeEnum = 73
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR              UnderlyingStipTypeEnum = 74
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE              UnderlyingStipTypeEnum = 75
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE              UnderlyingStipTypeEnum = 76
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY                UnderlyingStipTypeEnum = 77
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_TRADER_CREDIT                                      UnderlyingStipTypeEnum = 78
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_TYPE_OF_ROLL_TRADE                                 UnderlyingStipTypeEnum = 79
	UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_YIELD_TO_MATURITY                                  UnderlyingStipTypeEnum = 80
)

var UnderlyingStipTypeEnum_name = map[int32]string{
	0:  "UNDERLYING_STIP_TYPE_UNSPECIFIED",
	1:  "UNDERLYING_STIP_TYPE_ABSOLUTE_PREPAYMENT_SPEED",
	2:  "UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_PENALTY",
	3:  "UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_RATE",
	4:  "UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_YIELD",
	5:  "UNDERLYING_STIP_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE",
	6:  "UNDERLYING_STIP_TYPE_GEOGRAPHICS",
	7:  "UNDERLYING_STIP_TYPE_ISSUE_DATE",
	8:  "UNDERLYING_STIP_TYPE_LOT_VARIANCE",
	9:  "UNDERLYING_STIP_TYPE_MATURITY_YEAR_AND_MONTH",
	10: "UNDERLYING_STIP_TYPE_MONTHLY_PREPAYMENT_RATE",
	11: "UNDERLYING_STIP_TYPE_NUMBER_OF_PIECES",
	12: "UNDERLYING_STIP_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE",
	13: "UNDERLYING_STIP_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE",
	14: "UNDERLYING_STIP_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE",
	15: "UNDERLYING_STIP_TYPE_POOLS_MAXIMUM",
	16: "UNDERLYING_STIP_TYPE_POOLS_PER_LOT",
	17: "UNDERLYING_STIP_TYPE_POOLS_PER_MILLION",
	18: "UNDERLYING_STIP_TYPE_POOLS_PER_TRADE",
	19: "UNDERLYING_STIP_TYPE_PRODUCTION_YEAR",
	20: "UNDERLYING_STIP_TYPE_SINGLE_MONTHLY_MORTALITY",
	21: "UNDERLYING_STIP_TYPE_TRADE_VARIANCE",
	22: "UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_COUPON",
	23: "UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON",
	24: "UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LOAN_AGE",
	25: "UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_MATURITY",
	26: "UNDERLYING_STIP_TYPE_ALTERNATIVE_MINIMUM_TAX",
	27: "UNDERLYING_STIP_TYPE_AUTO_REINVESTMENT",
	28: "UNDERLYING_STIP_TYPE_BANK_QUALIFIED",
	29: "UNDERLYING_STIP_TYPE_BARGAIN_CONDITIONS",
	30: "UNDERLYING_STIP_TYPE_BENCHMARK_PRICE_SOURCE",
	31: "UNDERLYING_STIP_TYPE_CALL_PROTECTION",
	32: "UNDERLYING_STIP_TYPE_COUPON_RANGE",
	33: "UNDERLYING_STIP_TYPE_CUSTOM_START",
	34: "UNDERLYING_STIP_TYPE_EXPLICIT_LOT_IDENTIFIER",
	35: "UNDERLYING_STIP_TYPE_FREEFORM_TEXT",
	36: "UNDERLYING_STIP_TYPE_INSURED",
	37: "UNDERLYING_STIP_TYPE_ISO_CURRENCY_CODE",
	38: "UNDERLYING_STIP_TYPE_ISSUER",
	39: "UNDERLYING_STIP_TYPE_ISSUE_SIZE_RANGE",
	40: "UNDERLYING_STIP_TYPE_LOOKBACK_DAYS",
	41: "UNDERLYING_STIP_TYPE_MARKET_SECTOR",
	42: "UNDERLYING_STIP_TYPE_MATURITY_RANGE",
	43: "UNDERLYING_STIP_TYPE_MAXIMUM_SUBSTITUTIONS",
	44: "UNDERLYING_STIP_TYPE_MINIMUM_DENOMINATION",
	45: "UNDERLYING_STIP_TYPE_MINIMUM_INCREMENT",
	46: "UNDERLYING_STIP_TYPE_MINIMUM_QUANTITY",
	47: "UNDERLYING_STIP_TYPE_PAYMENT_FREQUENCY",
	48: "UNDERLYING_STIP_TYPE_PRICE_RANGE",
	49: "UNDERLYING_STIP_TYPE_PRICING_FREQUENCY",
	50: "UNDERLYING_STIP_TYPE_PURPOSE",
	51: "UNDERLYING_STIP_TYPE_RATING_SOURCE_AND_RANGE",
	52: "UNDERLYING_STIP_TYPE_RESTRICTED",
	53: "UNDERLYING_STIP_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED",
	54: "UNDERLYING_STIP_TYPE_STRUCTURE",
	55: "UNDERLYING_STIP_TYPE_SUBSTITUTIONS_FREQUENCY",
	56: "UNDERLYING_STIP_TYPE_SUBSTITUTIONS_LEFT",
	57: "UNDERLYING_STIP_TYPE_TYPE_OF_REDEMPTION",
	58: "UNDERLYING_STIP_TYPE_VALUATION_DISCOUNT",
	59: "UNDERLYING_STIP_TYPE_WHOLE_POOL",
	60: "UNDERLYING_STIP_TYPE_YIELD_RANGE",
	61: "UNDERLYING_STIP_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET",
	62: "UNDERLYING_STIP_TYPE_AVERAGE_FICOSCORE",
	63: "UNDERLYING_STIP_TYPE_AVERAGE_LOAN_SIZE",
	64: "UNDERLYING_STIP_TYPE_BROKER_CREDIT",
	65: "UNDERLYING_STIP_TYPE_BROKER_SALES_CREDIT_OVERRIDE",
	66: "UNDERLYING_STIP_TYPE_DISCOUNT_RATE",
	67: "UNDERLYING_STIP_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE",
	68: "UNDERLYING_STIP_TYPE_MAXIMUM_LOAN_BALANCE",
	69: "UNDERLYING_STIP_TYPE_MAXIMUM_ORDER_SIZE",
	70: "UNDERLYING_STIP_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	71: "UNDERLYING_STIP_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS",
	72: "UNDERLYING_STIP_TYPE_ORDER_QUANTITY_INCREMENT",
	73: "UNDERLYING_STIP_TYPE_POOL_IDENTIFIER",
	74: "UNDERLYING_STIP_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR",
	75: "UNDERLYING_STIP_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE",
	76: "UNDERLYING_STIP_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE",
	77: "UNDERLYING_STIP_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY",
	78: "UNDERLYING_STIP_TYPE_TRADER_CREDIT",
	79: "UNDERLYING_STIP_TYPE_TYPE_OF_ROLL_TRADE",
	80: "UNDERLYING_STIP_TYPE_YIELD_TO_MATURITY",
}

var UnderlyingStipTypeEnum_value = map[string]int32{
	"UNDERLYING_STIP_TYPE_UNSPECIFIED":                                        0,
	"UNDERLYING_STIP_TYPE_ABSOLUTE_PREPAYMENT_SPEED":                          1,
	"UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_PENALTY":                        2,
	"UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_RATE":                           3,
	"UNDERLYING_STIP_TYPE_CONSTANT_PREPAYMENT_YIELD":                          4,
	"UNDERLYING_STIP_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE":          5,
	"UNDERLYING_STIP_TYPE_GEOGRAPHICS":                                        6,
	"UNDERLYING_STIP_TYPE_ISSUE_DATE":                                         7,
	"UNDERLYING_STIP_TYPE_LOT_VARIANCE":                                       8,
	"UNDERLYING_STIP_TYPE_MATURITY_YEAR_AND_MONTH":                            9,
	"UNDERLYING_STIP_TYPE_MONTHLY_PREPAYMENT_RATE":                            10,
	"UNDERLYING_STIP_TYPE_NUMBER_OF_PIECES":                                   11,
	"UNDERLYING_STIP_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE":                     12,
	"UNDERLYING_STIP_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE":   13,
	"UNDERLYING_STIP_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE":             14,
	"UNDERLYING_STIP_TYPE_POOLS_MAXIMUM":                                      15,
	"UNDERLYING_STIP_TYPE_POOLS_PER_LOT":                                      16,
	"UNDERLYING_STIP_TYPE_POOLS_PER_MILLION":                                  17,
	"UNDERLYING_STIP_TYPE_POOLS_PER_TRADE":                                    18,
	"UNDERLYING_STIP_TYPE_PRODUCTION_YEAR":                                    19,
	"UNDERLYING_STIP_TYPE_SINGLE_MONTHLY_MORTALITY":                           20,
	"UNDERLYING_STIP_TYPE_TRADE_VARIANCE":                                     21,
	"UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_COUPON":                            22,
	"UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON":                       23,
	"UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_LOAN_AGE":                          24,
	"UNDERLYING_STIP_TYPE_WEIGHTED_AVERAGE_MATURITY":                          25,
	"UNDERLYING_STIP_TYPE_ALTERNATIVE_MINIMUM_TAX":                            26,
	"UNDERLYING_STIP_TYPE_AUTO_REINVESTMENT":                                  27,
	"UNDERLYING_STIP_TYPE_BANK_QUALIFIED":                                     28,
	"UNDERLYING_STIP_TYPE_BARGAIN_CONDITIONS":                                 29,
	"UNDERLYING_STIP_TYPE_BENCHMARK_PRICE_SOURCE":                             30,
	"UNDERLYING_STIP_TYPE_CALL_PROTECTION":                                    31,
	"UNDERLYING_STIP_TYPE_COUPON_RANGE":                                       32,
	"UNDERLYING_STIP_TYPE_CUSTOM_START":                                       33,
	"UNDERLYING_STIP_TYPE_EXPLICIT_LOT_IDENTIFIER":                            34,
	"UNDERLYING_STIP_TYPE_FREEFORM_TEXT":                                      35,
	"UNDERLYING_STIP_TYPE_INSURED":                                            36,
	"UNDERLYING_STIP_TYPE_ISO_CURRENCY_CODE":                                  37,
	"UNDERLYING_STIP_TYPE_ISSUER":                                             38,
	"UNDERLYING_STIP_TYPE_ISSUE_SIZE_RANGE":                                   39,
	"UNDERLYING_STIP_TYPE_LOOKBACK_DAYS":                                      40,
	"UNDERLYING_STIP_TYPE_MARKET_SECTOR":                                      41,
	"UNDERLYING_STIP_TYPE_MATURITY_RANGE":                                     42,
	"UNDERLYING_STIP_TYPE_MAXIMUM_SUBSTITUTIONS":                              43,
	"UNDERLYING_STIP_TYPE_MINIMUM_DENOMINATION":                               44,
	"UNDERLYING_STIP_TYPE_MINIMUM_INCREMENT":                                  45,
	"UNDERLYING_STIP_TYPE_MINIMUM_QUANTITY":                                   46,
	"UNDERLYING_STIP_TYPE_PAYMENT_FREQUENCY":                                  47,
	"UNDERLYING_STIP_TYPE_PRICE_RANGE":                                        48,
	"UNDERLYING_STIP_TYPE_PRICING_FREQUENCY":                                  49,
	"UNDERLYING_STIP_TYPE_PURPOSE":                                            50,
	"UNDERLYING_STIP_TYPE_RATING_SOURCE_AND_RANGE":                            51,
	"UNDERLYING_STIP_TYPE_RESTRICTED":                                         52,
	"UNDERLYING_STIP_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED":                 53,
	"UNDERLYING_STIP_TYPE_STRUCTURE":                                          54,
	"UNDERLYING_STIP_TYPE_SUBSTITUTIONS_FREQUENCY":                            55,
	"UNDERLYING_STIP_TYPE_SUBSTITUTIONS_LEFT":                                 56,
	"UNDERLYING_STIP_TYPE_TYPE_OF_REDEMPTION":                                 57,
	"UNDERLYING_STIP_TYPE_VALUATION_DISCOUNT":                                 58,
	"UNDERLYING_STIP_TYPE_WHOLE_POOL":                                         59,
	"UNDERLYING_STIP_TYPE_YIELD_RANGE":                                        60,
	"UNDERLYING_STIP_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET": 61,
	"UNDERLYING_STIP_TYPE_AVERAGE_FICOSCORE":                                  62,
	"UNDERLYING_STIP_TYPE_AVERAGE_LOAN_SIZE":                                  63,
	"UNDERLYING_STIP_TYPE_BROKER_CREDIT":                                      64,
	"UNDERLYING_STIP_TYPE_BROKER_SALES_CREDIT_OVERRIDE":                       65,
	"UNDERLYING_STIP_TYPE_DISCOUNT_RATE":                                      66,
	"UNDERLYING_STIP_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE":               67,
	"UNDERLYING_STIP_TYPE_MAXIMUM_LOAN_BALANCE":                               68,
	"UNDERLYING_STIP_TYPE_MAXIMUM_ORDER_SIZE":                                 69,
	"UNDERLYING_STIP_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS":        70,
	"UNDERLYING_STIP_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS":     71,
	"UNDERLYING_STIP_TYPE_ORDER_QUANTITY_INCREMENT":                           72,
	"UNDERLYING_STIP_TYPE_POOL_IDENTIFIER":                                    73,
	"UNDERLYING_STIP_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR":              74,
	"UNDERLYING_STIP_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE":              75,
	"UNDERLYING_STIP_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE":              76,
	"UNDERLYING_STIP_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY":                77,
	"UNDERLYING_STIP_TYPE_TRADER_CREDIT":                                      78,
	"UNDERLYING_STIP_TYPE_TYPE_OF_ROLL_TRADE":                                 79,
	"UNDERLYING_STIP_TYPE_YIELD_TO_MATURITY":                                  80,
}

func (x UnderlyingStipTypeEnum) String() string {
	return proto.EnumName(UnderlyingStipTypeEnum_name, int32(x))
}

func (UnderlyingStipTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{91}
}

type Nested2PartyIDSourceEnum int32

const (
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_UNSPECIFIED                             Nested2PartyIDSourceEnum = 0
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              Nested2PartyIDSourceEnum = 1
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              Nested2PartyIDSourceEnum = 2
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_BIC                                     Nested2PartyIDSourceEnum = 3
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     Nested2PartyIDSourceEnum = 4
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      Nested2PartyIDSourceEnum = 5
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        Nested2PartyIDSourceEnum = 6
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      Nested2PartyIDSourceEnum = 7
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            Nested2PartyIDSourceEnum = 8
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_PROPRIETARY                             Nested2PartyIDSourceEnum = 9
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              Nested2PartyIDSourceEnum = 10
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           Nested2PartyIDSourceEnum = 11
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  Nested2PartyIDSourceEnum = 12
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER Nested2PartyIDSourceEnum = 13
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            Nested2PartyIDSourceEnum = 14
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               Nested2PartyIDSourceEnum = 15
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_CSDPARTICIPANT                          Nested2PartyIDSourceEnum = 16
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_ISITCACRONYM                            Nested2PartyIDSourceEnum = 17
	Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_MIC                                     Nested2PartyIDSourceEnum = 18
)

var Nested2PartyIDSourceEnum_name = map[int32]string{
	0:  "NESTED2PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "NESTED2PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "NESTED2PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "NESTED2PARTY_ID_SOURCE_BIC",
	4:  "NESTED2PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "NESTED2PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "NESTED2PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "NESTED2PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "NESTED2PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "NESTED2PARTY_ID_SOURCE_PROPRIETARY",
	10: "NESTED2PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "NESTED2PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "NESTED2PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "NESTED2PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "NESTED2PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "NESTED2PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "NESTED2PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "NESTED2PARTY_ID_SOURCE_ISITCACRONYM",
	18: "NESTED2PARTY_ID_SOURCE_MIC",
}

var Nested2PartyIDSourceEnum_value = map[string]int32{
	"NESTED2PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"NESTED2PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"NESTED2PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"NESTED2PARTY_ID_SOURCE_BIC":                                     3,
	"NESTED2PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"NESTED2PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"NESTED2PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"NESTED2PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"NESTED2PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"NESTED2PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"NESTED2PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"NESTED2PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"NESTED2PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"NESTED2PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"NESTED2PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"NESTED2PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"NESTED2PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"NESTED2PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"NESTED2PARTY_ID_SOURCE_MIC":                                     18,
}

func (x Nested2PartyIDSourceEnum) String() string {
	return proto.EnumName(Nested2PartyIDSourceEnum_name, int32(x))
}

func (Nested2PartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{92}
}

type Nested2PartyRoleEnum int32

const (
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_UNSPECIFIED                           Nested2PartyRoleEnum = 0
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_BROKER_OF_CREDIT                      Nested2PartyRoleEnum = 1
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CLEARING_FIRM                         Nested2PartyRoleEnum = 2
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CLIENT_ID                             Nested2PartyRoleEnum = 3
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_CLEARING_FIRM                  Nested2PartyRoleEnum = 4
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_FIRM                           Nested2PartyRoleEnum = 5
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           Nested2PartyRoleEnum = 6
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ENTERING_FIRM                         Nested2PartyRoleEnum = 7
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXECUTING_FIRM                        Nested2PartyRoleEnum = 8
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXECUTING_SYSTEM                      Nested2PartyRoleEnum = 9
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXECUTING_TRADER                      Nested2PartyRoleEnum = 10
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_FUND_MANAGER_CLIENT_ID                Nested2PartyRoleEnum = 11
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_GIVEUP_CLEARING_FIRM                  Nested2PartyRoleEnum = 12
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INTRODUCING_FIRM                      Nested2PartyRoleEnum = 13
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INVESTOR_ID                           Nested2PartyRoleEnum = 14
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_LOCATE                                Nested2PartyRoleEnum = 15
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ORDER_ORIGINATION_FIRM                Nested2PartyRoleEnum = 16
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ORDER_ORIGINATION_TRADER              Nested2PartyRoleEnum = 17
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SETTLEMENT_LOCATION                   Nested2PartyRoleEnum = 18
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SPONSORING_FIRM                       Nested2PartyRoleEnum = 19
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_UNDERLYING_CONTRA_FIRM                Nested2PartyRoleEnum = 20
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_AGENT                                 Nested2PartyRoleEnum = 21
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_BENEFICIARY                           Nested2PartyRoleEnum = 22
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_BUYER                                 Nested2PartyRoleEnum = 23
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CLEARING_ORGANIZATION                 Nested2PartyRoleEnum = 24
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_INVESTOR_ID                    Nested2PartyRoleEnum = 25
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_TRADER                         Nested2PartyRoleEnum = 26
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CORRESPONDENT_BROKER                  Nested2PartyRoleEnum = 27
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   Nested2PartyRoleEnum = 28
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CUSTODIAN                             Nested2PartyRoleEnum = 29
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CUSTOMER_ACCOUNT                      Nested2PartyRoleEnum = 30
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ENTERING_TRADER                       Nested2PartyRoleEnum = 31
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXCHANGE                              Nested2PartyRoleEnum = 32
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INTERESTED_PARTY                      Nested2PartyRoleEnum = 33
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INTERMEDIARY                          Nested2PartyRoleEnum = 34
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_LIQUIDITY_PROVIDER                    Nested2PartyRoleEnum = 35
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_POSITION_ACCOUNT                      Nested2PartyRoleEnum = 36
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_REGULATORY_BODY                       Nested2PartyRoleEnum = 37
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SUB_CUSTODIAN                         Nested2PartyRoleEnum = 38
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_TRANSFER_TO_FIRM                      Nested2PartyRoleEnum = 39
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INTRODUCING_BROKER                    Nested2PartyRoleEnum = 40
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_EXCHANGE                       Nested2PartyRoleEnum = 41
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CONTRA_POSITION_ACCOUNT               Nested2PartyRoleEnum = 42
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                Nested2PartyRoleEnum = 43
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               Nested2PartyRoleEnum = 44
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              Nested2PartyRoleEnum = 45
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ASSET_MANAGER                         Nested2PartyRoleEnum = 46
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CLAIMING_ACCOUNT                      Nested2PartyRoleEnum = 47
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_FOREIGN_FIRM                          Nested2PartyRoleEnum = 48
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       Nested2PartyRoleEnum = 49
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_PLEDGEE_ACCOUNT                       Nested2PartyRoleEnum = 50
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_PLEDGOR_ACCOUNT                       Nested2PartyRoleEnum = 51
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SENDER_LOCATION                       Nested2PartyRoleEnum = 52
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SESSION_ID                            Nested2PartyRoleEnum = 53
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           Nested2PartyRoleEnum = 54
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_TRADER_MNEMONIC                       Nested2PartyRoleEnum = 55
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               Nested2PartyRoleEnum = 56
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ENTERING_UNIT                         Nested2PartyRoleEnum = 57
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXECUTING_UNIT                        Nested2PartyRoleEnum = 58
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             Nested2PartyRoleEnum = 59
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         Nested2PartyRoleEnum = 60
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE Nested2PartyRoleEnum = 61
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_DESK_ID                               Nested2PartyRoleEnum = 62
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_EXECUTION_VENUE                       Nested2PartyRoleEnum = 63
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_HOME_COMPETENT_AUTHORITY              Nested2PartyRoleEnum = 64
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_HOST_COMPETENT_AUTHORITY              Nested2PartyRoleEnum = 65
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_INVESTMENT_FIRM                       Nested2PartyRoleEnum = 66
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_LOCATION_ID                           Nested2PartyRoleEnum = 67
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          Nested2PartyRoleEnum = 68
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_MARKET_DATA_MARKET                    Nested2PartyRoleEnum = 69
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_MARKET_MAKER                          Nested2PartyRoleEnum = 70
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         Nested2PartyRoleEnum = 71
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_QUOTE_ORIGINATOR                      Nested2PartyRoleEnum = 72
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_REGULATED_MARKET                      Nested2PartyRoleEnum = 73
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_REPORTING_INTERMEDIARY                Nested2PartyRoleEnum = 74
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_REPORT_ORIGINATOR                     Nested2PartyRoleEnum = 75
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_SYSTEMATIC_INTERNALISER               Nested2PartyRoleEnum = 76
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ALLOCATION_ENTITY                     Nested2PartyRoleEnum = 77
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_BROKER_CLEARING_ID                    Nested2PartyRoleEnum = 78
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_PRIME_BROKER                          Nested2PartyRoleEnum = 79
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_STEP_OUT_FIRM                         Nested2PartyRoleEnum = 80
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       Nested2PartyRoleEnum = 81
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      Nested2PartyRoleEnum = 82
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_CLEARING_ACCOUNT                      Nested2PartyRoleEnum = 83
	Nested2PartyRoleEnum_NESTED2PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    Nested2PartyRoleEnum = 84
)

var Nested2PartyRoleEnum_name = map[int32]string{
	0:  "NESTED2PARTY_ROLE_UNSPECIFIED",
	1:  "NESTED2PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "NESTED2PARTY_ROLE_CLEARING_FIRM",
	3:  "NESTED2PARTY_ROLE_CLIENT_ID",
	4:  "NESTED2PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "NESTED2PARTY_ROLE_CONTRA_FIRM",
	6:  "NESTED2PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "NESTED2PARTY_ROLE_ENTERING_FIRM",
	8:  "NESTED2PARTY_ROLE_EXECUTING_FIRM",
	9:  "NESTED2PARTY_ROLE_EXECUTING_SYSTEM",
	10: "NESTED2PARTY_ROLE_EXECUTING_TRADER",
	11: "NESTED2PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "NESTED2PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "NESTED2PARTY_ROLE_INTRODUCING_FIRM",
	14: "NESTED2PARTY_ROLE_INVESTOR_ID",
	15: "NESTED2PARTY_ROLE_LOCATE",
	16: "NESTED2PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "NESTED2PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "NESTED2PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "NESTED2PARTY_ROLE_SPONSORING_FIRM",
	20: "NESTED2PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "NESTED2PARTY_ROLE_AGENT",
	22: "NESTED2PARTY_ROLE_BENEFICIARY",
	23: "NESTED2PARTY_ROLE_BUYER",
	24: "NESTED2PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "NESTED2PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "NESTED2PARTY_ROLE_CONTRA_TRADER",
	27: "NESTED2PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "NESTED2PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "NESTED2PARTY_ROLE_CUSTODIAN",
	30: "NESTED2PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "NESTED2PARTY_ROLE_ENTERING_TRADER",
	32: "NESTED2PARTY_ROLE_EXCHANGE",
	33: "NESTED2PARTY_ROLE_INTERESTED_PARTY",
	34: "NESTED2PARTY_ROLE_INTERMEDIARY",
	35: "NESTED2PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "NESTED2PARTY_ROLE_POSITION_ACCOUNT",
	37: "NESTED2PARTY_ROLE_REGULATORY_BODY",
	38: "NESTED2PARTY_ROLE_SUB_CUSTODIAN",
	39: "NESTED2PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "NESTED2PARTY_ROLE_INTRODUCING_BROKER",
	41: "NESTED2PARTY_ROLE_CONTRA_EXCHANGE",
	42: "NESTED2PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "NESTED2PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "NESTED2PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "NESTED2PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "NESTED2PARTY_ROLE_ASSET_MANAGER",
	47: "NESTED2PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "NESTED2PARTY_ROLE_FOREIGN_FIRM",
	49: "NESTED2PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "NESTED2PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "NESTED2PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "NESTED2PARTY_ROLE_SENDER_LOCATION",
	53: "NESTED2PARTY_ROLE_SESSION_ID",
	54: "NESTED2PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "NESTED2PARTY_ROLE_TRADER_MNEMONIC",
	56: "NESTED2PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "NESTED2PARTY_ROLE_ENTERING_UNIT",
	58: "NESTED2PARTY_ROLE_EXECUTING_UNIT",
	59: "NESTED2PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "NESTED2PARTY_ROLE_DESK_ID",
	63: "NESTED2PARTY_ROLE_EXECUTION_VENUE",
	64: "NESTED2PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "NESTED2PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "NESTED2PARTY_ROLE_INVESTMENT_FIRM",
	67: "NESTED2PARTY_ROLE_LOCATION_ID",
	68: "NESTED2PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "NESTED2PARTY_ROLE_MARKET_DATA_MARKET",
	70: "NESTED2PARTY_ROLE_MARKET_MAKER",
	71: "NESTED2PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "NESTED2PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "NESTED2PARTY_ROLE_REGULATED_MARKET",
	74: "NESTED2PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "NESTED2PARTY_ROLE_REPORT_ORIGINATOR",
	76: "NESTED2PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "NESTED2PARTY_ROLE_ALLOCATION_ENTITY",
	78: "NESTED2PARTY_ROLE_BROKER_CLEARING_ID",
	79: "NESTED2PARTY_ROLE_PRIME_BROKER",
	80: "NESTED2PARTY_ROLE_STEP_OUT_FIRM",
	81: "NESTED2PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "NESTED2PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "NESTED2PARTY_ROLE_CLEARING_ACCOUNT",
	84: "NESTED2PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var Nested2PartyRoleEnum_value = map[string]int32{
	"NESTED2PARTY_ROLE_UNSPECIFIED":                           0,
	"NESTED2PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"NESTED2PARTY_ROLE_CLEARING_FIRM":                         2,
	"NESTED2PARTY_ROLE_CLIENT_ID":                             3,
	"NESTED2PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"NESTED2PARTY_ROLE_CONTRA_FIRM":                           5,
	"NESTED2PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"NESTED2PARTY_ROLE_ENTERING_FIRM":                         7,
	"NESTED2PARTY_ROLE_EXECUTING_FIRM":                        8,
	"NESTED2PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"NESTED2PARTY_ROLE_EXECUTING_TRADER":                      10,
	"NESTED2PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"NESTED2PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"NESTED2PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"NESTED2PARTY_ROLE_INVESTOR_ID":                           14,
	"NESTED2PARTY_ROLE_LOCATE":                                15,
	"NESTED2PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"NESTED2PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"NESTED2PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"NESTED2PARTY_ROLE_SPONSORING_FIRM":                       19,
	"NESTED2PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"NESTED2PARTY_ROLE_AGENT":                                 21,
	"NESTED2PARTY_ROLE_BENEFICIARY":                           22,
	"NESTED2PARTY_ROLE_BUYER":                                 23,
	"NESTED2PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"NESTED2PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"NESTED2PARTY_ROLE_CONTRA_TRADER":                         26,
	"NESTED2PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"NESTED2PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"NESTED2PARTY_ROLE_CUSTODIAN":                             29,
	"NESTED2PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"NESTED2PARTY_ROLE_ENTERING_TRADER":                       31,
	"NESTED2PARTY_ROLE_EXCHANGE":                              32,
	"NESTED2PARTY_ROLE_INTERESTED_PARTY":                      33,
	"NESTED2PARTY_ROLE_INTERMEDIARY":                          34,
	"NESTED2PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"NESTED2PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"NESTED2PARTY_ROLE_REGULATORY_BODY":                       37,
	"NESTED2PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"NESTED2PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"NESTED2PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"NESTED2PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"NESTED2PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"NESTED2PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"NESTED2PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"NESTED2PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"NESTED2PARTY_ROLE_ASSET_MANAGER":                         46,
	"NESTED2PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"NESTED2PARTY_ROLE_FOREIGN_FIRM":                          48,
	"NESTED2PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"NESTED2PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"NESTED2PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"NESTED2PARTY_ROLE_SENDER_LOCATION":                       52,
	"NESTED2PARTY_ROLE_SESSION_ID":                            53,
	"NESTED2PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"NESTED2PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"NESTED2PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"NESTED2PARTY_ROLE_ENTERING_UNIT":                         57,
	"NESTED2PARTY_ROLE_EXECUTING_UNIT":                        58,
	"NESTED2PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"NESTED2PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"NESTED2PARTY_ROLE_DESK_ID":                               62,
	"NESTED2PARTY_ROLE_EXECUTION_VENUE":                       63,
	"NESTED2PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"NESTED2PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"NESTED2PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"NESTED2PARTY_ROLE_LOCATION_ID":                           67,
	"NESTED2PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"NESTED2PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"NESTED2PARTY_ROLE_MARKET_MAKER":                          70,
	"NESTED2PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"NESTED2PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"NESTED2PARTY_ROLE_REGULATED_MARKET":                      73,
	"NESTED2PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"NESTED2PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"NESTED2PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"NESTED2PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"NESTED2PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"NESTED2PARTY_ROLE_PRIME_BROKER":                          79,
	"NESTED2PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"NESTED2PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"NESTED2PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"NESTED2PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"NESTED2PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x Nested2PartyRoleEnum) String() string {
	return proto.EnumName(Nested2PartyRoleEnum_name, int32(x))
}

func (Nested2PartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{93}
}

type Nested3PartyIDSourceEnum int32

const (
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_UNSPECIFIED                             Nested3PartyIDSourceEnum = 0
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              Nested3PartyIDSourceEnum = 1
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              Nested3PartyIDSourceEnum = 2
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_BIC                                     Nested3PartyIDSourceEnum = 3
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     Nested3PartyIDSourceEnum = 4
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      Nested3PartyIDSourceEnum = 5
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        Nested3PartyIDSourceEnum = 6
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      Nested3PartyIDSourceEnum = 7
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            Nested3PartyIDSourceEnum = 8
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_PROPRIETARY                             Nested3PartyIDSourceEnum = 9
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              Nested3PartyIDSourceEnum = 10
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           Nested3PartyIDSourceEnum = 11
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  Nested3PartyIDSourceEnum = 12
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER Nested3PartyIDSourceEnum = 13
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            Nested3PartyIDSourceEnum = 14
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               Nested3PartyIDSourceEnum = 15
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_CSDPARTICIPANT                          Nested3PartyIDSourceEnum = 16
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_ISITCACRONYM                            Nested3PartyIDSourceEnum = 17
	Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_MIC                                     Nested3PartyIDSourceEnum = 18
)

var Nested3PartyIDSourceEnum_name = map[int32]string{
	0:  "NESTED3PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "NESTED3PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "NESTED3PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "NESTED3PARTY_ID_SOURCE_BIC",
	4:  "NESTED3PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "NESTED3PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "NESTED3PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "NESTED3PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "NESTED3PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "NESTED3PARTY_ID_SOURCE_PROPRIETARY",
	10: "NESTED3PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "NESTED3PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "NESTED3PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "NESTED3PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "NESTED3PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "NESTED3PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "NESTED3PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "NESTED3PARTY_ID_SOURCE_ISITCACRONYM",
	18: "NESTED3PARTY_ID_SOURCE_MIC",
}

var Nested3PartyIDSourceEnum_value = map[string]int32{
	"NESTED3PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"NESTED3PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"NESTED3PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"NESTED3PARTY_ID_SOURCE_BIC":                                     3,
	"NESTED3PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"NESTED3PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"NESTED3PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"NESTED3PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"NESTED3PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"NESTED3PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"NESTED3PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"NESTED3PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"NESTED3PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"NESTED3PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"NESTED3PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"NESTED3PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"NESTED3PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"NESTED3PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"NESTED3PARTY_ID_SOURCE_MIC":                                     18,
}

func (x Nested3PartyIDSourceEnum) String() string {
	return proto.EnumName(Nested3PartyIDSourceEnum_name, int32(x))
}

func (Nested3PartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{94}
}

type Nested3PartyRoleEnum int32

const (
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_UNSPECIFIED                           Nested3PartyRoleEnum = 0
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_BROKER_OF_CREDIT                      Nested3PartyRoleEnum = 1
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CLEARING_FIRM                         Nested3PartyRoleEnum = 2
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CLIENT_ID                             Nested3PartyRoleEnum = 3
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_CLEARING_FIRM                  Nested3PartyRoleEnum = 4
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_FIRM                           Nested3PartyRoleEnum = 5
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           Nested3PartyRoleEnum = 6
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ENTERING_FIRM                         Nested3PartyRoleEnum = 7
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXECUTING_FIRM                        Nested3PartyRoleEnum = 8
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXECUTING_SYSTEM                      Nested3PartyRoleEnum = 9
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXECUTING_TRADER                      Nested3PartyRoleEnum = 10
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_FUND_MANAGER_CLIENT_ID                Nested3PartyRoleEnum = 11
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_GIVEUP_CLEARING_FIRM                  Nested3PartyRoleEnum = 12
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INTRODUCING_FIRM                      Nested3PartyRoleEnum = 13
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INVESTOR_ID                           Nested3PartyRoleEnum = 14
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_LOCATE                                Nested3PartyRoleEnum = 15
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ORDER_ORIGINATION_FIRM                Nested3PartyRoleEnum = 16
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ORDER_ORIGINATION_TRADER              Nested3PartyRoleEnum = 17
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SETTLEMENT_LOCATION                   Nested3PartyRoleEnum = 18
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SPONSORING_FIRM                       Nested3PartyRoleEnum = 19
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_UNDERLYING_CONTRA_FIRM                Nested3PartyRoleEnum = 20
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_AGENT                                 Nested3PartyRoleEnum = 21
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_BENEFICIARY                           Nested3PartyRoleEnum = 22
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_BUYER                                 Nested3PartyRoleEnum = 23
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CLEARING_ORGANIZATION                 Nested3PartyRoleEnum = 24
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_INVESTOR_ID                    Nested3PartyRoleEnum = 25
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_TRADER                         Nested3PartyRoleEnum = 26
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CORRESPONDENT_BROKER                  Nested3PartyRoleEnum = 27
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   Nested3PartyRoleEnum = 28
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CUSTODIAN                             Nested3PartyRoleEnum = 29
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CUSTOMER_ACCOUNT                      Nested3PartyRoleEnum = 30
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ENTERING_TRADER                       Nested3PartyRoleEnum = 31
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXCHANGE                              Nested3PartyRoleEnum = 32
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INTERESTED_PARTY                      Nested3PartyRoleEnum = 33
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INTERMEDIARY                          Nested3PartyRoleEnum = 34
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_LIQUIDITY_PROVIDER                    Nested3PartyRoleEnum = 35
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_POSITION_ACCOUNT                      Nested3PartyRoleEnum = 36
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_REGULATORY_BODY                       Nested3PartyRoleEnum = 37
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SUB_CUSTODIAN                         Nested3PartyRoleEnum = 38
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_TRANSFER_TO_FIRM                      Nested3PartyRoleEnum = 39
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INTRODUCING_BROKER                    Nested3PartyRoleEnum = 40
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_EXCHANGE                       Nested3PartyRoleEnum = 41
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CONTRA_POSITION_ACCOUNT               Nested3PartyRoleEnum = 42
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                Nested3PartyRoleEnum = 43
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               Nested3PartyRoleEnum = 44
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              Nested3PartyRoleEnum = 45
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ASSET_MANAGER                         Nested3PartyRoleEnum = 46
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CLAIMING_ACCOUNT                      Nested3PartyRoleEnum = 47
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_FOREIGN_FIRM                          Nested3PartyRoleEnum = 48
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       Nested3PartyRoleEnum = 49
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_PLEDGEE_ACCOUNT                       Nested3PartyRoleEnum = 50
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_PLEDGOR_ACCOUNT                       Nested3PartyRoleEnum = 51
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SENDER_LOCATION                       Nested3PartyRoleEnum = 52
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SESSION_ID                            Nested3PartyRoleEnum = 53
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           Nested3PartyRoleEnum = 54
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_TRADER_MNEMONIC                       Nested3PartyRoleEnum = 55
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               Nested3PartyRoleEnum = 56
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ENTERING_UNIT                         Nested3PartyRoleEnum = 57
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXECUTING_UNIT                        Nested3PartyRoleEnum = 58
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             Nested3PartyRoleEnum = 59
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         Nested3PartyRoleEnum = 60
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE Nested3PartyRoleEnum = 61
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_DESK_ID                               Nested3PartyRoleEnum = 62
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_EXECUTION_VENUE                       Nested3PartyRoleEnum = 63
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_HOME_COMPETENT_AUTHORITY              Nested3PartyRoleEnum = 64
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_HOST_COMPETENT_AUTHORITY              Nested3PartyRoleEnum = 65
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_INVESTMENT_FIRM                       Nested3PartyRoleEnum = 66
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_LOCATION_ID                           Nested3PartyRoleEnum = 67
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          Nested3PartyRoleEnum = 68
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_MARKET_DATA_MARKET                    Nested3PartyRoleEnum = 69
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_MARKET_MAKER                          Nested3PartyRoleEnum = 70
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         Nested3PartyRoleEnum = 71
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_QUOTE_ORIGINATOR                      Nested3PartyRoleEnum = 72
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_REGULATED_MARKET                      Nested3PartyRoleEnum = 73
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_REPORTING_INTERMEDIARY                Nested3PartyRoleEnum = 74
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_REPORT_ORIGINATOR                     Nested3PartyRoleEnum = 75
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_SYSTEMATIC_INTERNALISER               Nested3PartyRoleEnum = 76
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ALLOCATION_ENTITY                     Nested3PartyRoleEnum = 77
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_BROKER_CLEARING_ID                    Nested3PartyRoleEnum = 78
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_PRIME_BROKER                          Nested3PartyRoleEnum = 79
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_STEP_OUT_FIRM                         Nested3PartyRoleEnum = 80
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       Nested3PartyRoleEnum = 81
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      Nested3PartyRoleEnum = 82
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_CLEARING_ACCOUNT                      Nested3PartyRoleEnum = 83
	Nested3PartyRoleEnum_NESTED3PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    Nested3PartyRoleEnum = 84
)

var Nested3PartyRoleEnum_name = map[int32]string{
	0:  "NESTED3PARTY_ROLE_UNSPECIFIED",
	1:  "NESTED3PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "NESTED3PARTY_ROLE_CLEARING_FIRM",
	3:  "NESTED3PARTY_ROLE_CLIENT_ID",
	4:  "NESTED3PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "NESTED3PARTY_ROLE_CONTRA_FIRM",
	6:  "NESTED3PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "NESTED3PARTY_ROLE_ENTERING_FIRM",
	8:  "NESTED3PARTY_ROLE_EXECUTING_FIRM",
	9:  "NESTED3PARTY_ROLE_EXECUTING_SYSTEM",
	10: "NESTED3PARTY_ROLE_EXECUTING_TRADER",
	11: "NESTED3PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "NESTED3PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "NESTED3PARTY_ROLE_INTRODUCING_FIRM",
	14: "NESTED3PARTY_ROLE_INVESTOR_ID",
	15: "NESTED3PARTY_ROLE_LOCATE",
	16: "NESTED3PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "NESTED3PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "NESTED3PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "NESTED3PARTY_ROLE_SPONSORING_FIRM",
	20: "NESTED3PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "NESTED3PARTY_ROLE_AGENT",
	22: "NESTED3PARTY_ROLE_BENEFICIARY",
	23: "NESTED3PARTY_ROLE_BUYER",
	24: "NESTED3PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "NESTED3PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "NESTED3PARTY_ROLE_CONTRA_TRADER",
	27: "NESTED3PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "NESTED3PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "NESTED3PARTY_ROLE_CUSTODIAN",
	30: "NESTED3PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "NESTED3PARTY_ROLE_ENTERING_TRADER",
	32: "NESTED3PARTY_ROLE_EXCHANGE",
	33: "NESTED3PARTY_ROLE_INTERESTED_PARTY",
	34: "NESTED3PARTY_ROLE_INTERMEDIARY",
	35: "NESTED3PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "NESTED3PARTY_ROLE_POSITION_ACCOUNT",
	37: "NESTED3PARTY_ROLE_REGULATORY_BODY",
	38: "NESTED3PARTY_ROLE_SUB_CUSTODIAN",
	39: "NESTED3PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "NESTED3PARTY_ROLE_INTRODUCING_BROKER",
	41: "NESTED3PARTY_ROLE_CONTRA_EXCHANGE",
	42: "NESTED3PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "NESTED3PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "NESTED3PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "NESTED3PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "NESTED3PARTY_ROLE_ASSET_MANAGER",
	47: "NESTED3PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "NESTED3PARTY_ROLE_FOREIGN_FIRM",
	49: "NESTED3PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "NESTED3PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "NESTED3PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "NESTED3PARTY_ROLE_SENDER_LOCATION",
	53: "NESTED3PARTY_ROLE_SESSION_ID",
	54: "NESTED3PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "NESTED3PARTY_ROLE_TRADER_MNEMONIC",
	56: "NESTED3PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "NESTED3PARTY_ROLE_ENTERING_UNIT",
	58: "NESTED3PARTY_ROLE_EXECUTING_UNIT",
	59: "NESTED3PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "NESTED3PARTY_ROLE_DESK_ID",
	63: "NESTED3PARTY_ROLE_EXECUTION_VENUE",
	64: "NESTED3PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "NESTED3PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "NESTED3PARTY_ROLE_INVESTMENT_FIRM",
	67: "NESTED3PARTY_ROLE_LOCATION_ID",
	68: "NESTED3PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "NESTED3PARTY_ROLE_MARKET_DATA_MARKET",
	70: "NESTED3PARTY_ROLE_MARKET_MAKER",
	71: "NESTED3PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "NESTED3PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "NESTED3PARTY_ROLE_REGULATED_MARKET",
	74: "NESTED3PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "NESTED3PARTY_ROLE_REPORT_ORIGINATOR",
	76: "NESTED3PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "NESTED3PARTY_ROLE_ALLOCATION_ENTITY",
	78: "NESTED3PARTY_ROLE_BROKER_CLEARING_ID",
	79: "NESTED3PARTY_ROLE_PRIME_BROKER",
	80: "NESTED3PARTY_ROLE_STEP_OUT_FIRM",
	81: "NESTED3PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "NESTED3PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "NESTED3PARTY_ROLE_CLEARING_ACCOUNT",
	84: "NESTED3PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var Nested3PartyRoleEnum_value = map[string]int32{
	"NESTED3PARTY_ROLE_UNSPECIFIED":                           0,
	"NESTED3PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"NESTED3PARTY_ROLE_CLEARING_FIRM":                         2,
	"NESTED3PARTY_ROLE_CLIENT_ID":                             3,
	"NESTED3PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"NESTED3PARTY_ROLE_CONTRA_FIRM":                           5,
	"NESTED3PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"NESTED3PARTY_ROLE_ENTERING_FIRM":                         7,
	"NESTED3PARTY_ROLE_EXECUTING_FIRM":                        8,
	"NESTED3PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"NESTED3PARTY_ROLE_EXECUTING_TRADER":                      10,
	"NESTED3PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"NESTED3PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"NESTED3PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"NESTED3PARTY_ROLE_INVESTOR_ID":                           14,
	"NESTED3PARTY_ROLE_LOCATE":                                15,
	"NESTED3PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"NESTED3PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"NESTED3PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"NESTED3PARTY_ROLE_SPONSORING_FIRM":                       19,
	"NESTED3PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"NESTED3PARTY_ROLE_AGENT":                                 21,
	"NESTED3PARTY_ROLE_BENEFICIARY":                           22,
	"NESTED3PARTY_ROLE_BUYER":                                 23,
	"NESTED3PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"NESTED3PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"NESTED3PARTY_ROLE_CONTRA_TRADER":                         26,
	"NESTED3PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"NESTED3PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"NESTED3PARTY_ROLE_CUSTODIAN":                             29,
	"NESTED3PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"NESTED3PARTY_ROLE_ENTERING_TRADER":                       31,
	"NESTED3PARTY_ROLE_EXCHANGE":                              32,
	"NESTED3PARTY_ROLE_INTERESTED_PARTY":                      33,
	"NESTED3PARTY_ROLE_INTERMEDIARY":                          34,
	"NESTED3PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"NESTED3PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"NESTED3PARTY_ROLE_REGULATORY_BODY":                       37,
	"NESTED3PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"NESTED3PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"NESTED3PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"NESTED3PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"NESTED3PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"NESTED3PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"NESTED3PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"NESTED3PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"NESTED3PARTY_ROLE_ASSET_MANAGER":                         46,
	"NESTED3PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"NESTED3PARTY_ROLE_FOREIGN_FIRM":                          48,
	"NESTED3PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"NESTED3PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"NESTED3PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"NESTED3PARTY_ROLE_SENDER_LOCATION":                       52,
	"NESTED3PARTY_ROLE_SESSION_ID":                            53,
	"NESTED3PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"NESTED3PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"NESTED3PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"NESTED3PARTY_ROLE_ENTERING_UNIT":                         57,
	"NESTED3PARTY_ROLE_EXECUTING_UNIT":                        58,
	"NESTED3PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"NESTED3PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"NESTED3PARTY_ROLE_DESK_ID":                               62,
	"NESTED3PARTY_ROLE_EXECUTION_VENUE":                       63,
	"NESTED3PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"NESTED3PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"NESTED3PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"NESTED3PARTY_ROLE_LOCATION_ID":                           67,
	"NESTED3PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"NESTED3PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"NESTED3PARTY_ROLE_MARKET_MAKER":                          70,
	"NESTED3PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"NESTED3PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"NESTED3PARTY_ROLE_REGULATED_MARKET":                      73,
	"NESTED3PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"NESTED3PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"NESTED3PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"NESTED3PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"NESTED3PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"NESTED3PARTY_ROLE_PRIME_BROKER":                          79,
	"NESTED3PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"NESTED3PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"NESTED3PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"NESTED3PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"NESTED3PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x Nested3PartyRoleEnum) String() string {
	return proto.EnumName(Nested3PartyRoleEnum_name, int32(x))
}

func (Nested3PartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{95}
}

type ClearingInstructionEnum int32

const (
	ClearingInstructionEnum_CLEARING_INSTRUCTION_UNSPECIFIED                          ClearingInstructionEnum = 0
	ClearingInstructionEnum_CLEARING_INSTRUCTION_AUTOMATIC_GIVE_UP_MODE               ClearingInstructionEnum = 1
	ClearingInstructionEnum_CLEARING_INSTRUCTION_AUTOMATIC_POSTING_MODE               ClearingInstructionEnum = 2
	ClearingInstructionEnum_CLEARING_INSTRUCTION_BILATERAL_NETTING_ONLY               ClearingInstructionEnum = 3
	ClearingInstructionEnum_CLEARING_INSTRUCTION_CLEAR_AGAINST_CENTRAL_COUNTERPARTY   ClearingInstructionEnum = 4
	ClearingInstructionEnum_CLEARING_INSTRUCTION_EXCLUDE_FROM_ALL_NETTING             ClearingInstructionEnum = 5
	ClearingInstructionEnum_CLEARING_INSTRUCTION_EXCLUDE_FROM_CENTRAL_COUNTERPARTY    ClearingInstructionEnum = 6
	ClearingInstructionEnum_CLEARING_INSTRUCTION_EX_CLEARING                          ClearingInstructionEnum = 7
	ClearingInstructionEnum_CLEARING_INSTRUCTION_MANUAL_MODE                          ClearingInstructionEnum = 8
	ClearingInstructionEnum_CLEARING_INSTRUCTION_MULTILATERAL_NETTING                 ClearingInstructionEnum = 9
	ClearingInstructionEnum_CLEARING_INSTRUCTION_PROCESS_NORMALLY                     ClearingInstructionEnum = 10
	ClearingInstructionEnum_CLEARING_INSTRUCTION_SPECIAL_TRADE                        ClearingInstructionEnum = 11
	ClearingInstructionEnum_CLEARING_INSTRUCTION_CUSTOMER_TRADE                       ClearingInstructionEnum = 12
	ClearingInstructionEnum_CLEARING_INSTRUCTION_QUALIFIED_SERVICE_REPRESENTATIVE_QSR ClearingInstructionEnum = 13
	ClearingInstructionEnum_CLEARING_INSTRUCTION_SELF_CLEARING                        ClearingInstructionEnum = 14
)

var ClearingInstructionEnum_name = map[int32]string{
	0:  "CLEARING_INSTRUCTION_UNSPECIFIED",
	1:  "CLEARING_INSTRUCTION_AUTOMATIC_GIVE_UP_MODE",
	2:  "CLEARING_INSTRUCTION_AUTOMATIC_POSTING_MODE",
	3:  "CLEARING_INSTRUCTION_BILATERAL_NETTING_ONLY",
	4:  "CLEARING_INSTRUCTION_CLEAR_AGAINST_CENTRAL_COUNTERPARTY",
	5:  "CLEARING_INSTRUCTION_EXCLUDE_FROM_ALL_NETTING",
	6:  "CLEARING_INSTRUCTION_EXCLUDE_FROM_CENTRAL_COUNTERPARTY",
	7:  "CLEARING_INSTRUCTION_EX_CLEARING",
	8:  "CLEARING_INSTRUCTION_MANUAL_MODE",
	9:  "CLEARING_INSTRUCTION_MULTILATERAL_NETTING",
	10: "CLEARING_INSTRUCTION_PROCESS_NORMALLY",
	11: "CLEARING_INSTRUCTION_SPECIAL_TRADE",
	12: "CLEARING_INSTRUCTION_CUSTOMER_TRADE",
	13: "CLEARING_INSTRUCTION_QUALIFIED_SERVICE_REPRESENTATIVE_QSR",
	14: "CLEARING_INSTRUCTION_SELF_CLEARING",
}

var ClearingInstructionEnum_value = map[string]int32{
	"CLEARING_INSTRUCTION_UNSPECIFIED":                          0,
	"CLEARING_INSTRUCTION_AUTOMATIC_GIVE_UP_MODE":               1,
	"CLEARING_INSTRUCTION_AUTOMATIC_POSTING_MODE":               2,
	"CLEARING_INSTRUCTION_BILATERAL_NETTING_ONLY":               3,
	"CLEARING_INSTRUCTION_CLEAR_AGAINST_CENTRAL_COUNTERPARTY":   4,
	"CLEARING_INSTRUCTION_EXCLUDE_FROM_ALL_NETTING":             5,
	"CLEARING_INSTRUCTION_EXCLUDE_FROM_CENTRAL_COUNTERPARTY":    6,
	"CLEARING_INSTRUCTION_EX_CLEARING":                          7,
	"CLEARING_INSTRUCTION_MANUAL_MODE":                          8,
	"CLEARING_INSTRUCTION_MULTILATERAL_NETTING":                 9,
	"CLEARING_INSTRUCTION_PROCESS_NORMALLY":                     10,
	"CLEARING_INSTRUCTION_SPECIAL_TRADE":                        11,
	"CLEARING_INSTRUCTION_CUSTOMER_TRADE":                       12,
	"CLEARING_INSTRUCTION_QUALIFIED_SERVICE_REPRESENTATIVE_QSR": 13,
	"CLEARING_INSTRUCTION_SELF_CLEARING":                        14,
}

func (x ClearingInstructionEnum) String() string {
	return proto.EnumName(ClearingInstructionEnum_name, int32(x))
}

func (ClearingInstructionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{96}
}

type StatusValueEnum int32

const (
	StatusValueEnum_STATUS_VALUE_UNSPECIFIED              StatusValueEnum = 0
	StatusValueEnum_STATUS_VALUE_CONNECTED                StatusValueEnum = 1
	StatusValueEnum_STATUS_VALUE_IN_PROCESS               StatusValueEnum = 2
	StatusValueEnum_STATUS_VALUE_NOT_CONNECTED_EXPECTED   StatusValueEnum = 3
	StatusValueEnum_STATUS_VALUE_NOT_CONNECTED_UNEXPECTED StatusValueEnum = 4
)

var StatusValueEnum_name = map[int32]string{
	0: "STATUS_VALUE_UNSPECIFIED",
	1: "STATUS_VALUE_CONNECTED",
	2: "STATUS_VALUE_IN_PROCESS",
	3: "STATUS_VALUE_NOT_CONNECTED_EXPECTED",
	4: "STATUS_VALUE_NOT_CONNECTED_UNEXPECTED",
}

var StatusValueEnum_value = map[string]int32{
	"STATUS_VALUE_UNSPECIFIED":              0,
	"STATUS_VALUE_CONNECTED":                1,
	"STATUS_VALUE_IN_PROCESS":               2,
	"STATUS_VALUE_NOT_CONNECTED_EXPECTED":   3,
	"STATUS_VALUE_NOT_CONNECTED_UNEXPECTED": 4,
}

func (x StatusValueEnum) String() string {
	return proto.EnumName(StatusValueEnum_name, int32(x))
}

func (StatusValueEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{97}
}

type ContAmtTypeEnum int32

const (
	ContAmtTypeEnum_CONT_AMT_TYPE_UNSPECIFIED                            ContAmtTypeEnum = 0
	ContAmtTypeEnum_CONT_AMT_TYPE_COMMISSION_AMOUNT                      ContAmtTypeEnum = 1
	ContAmtTypeEnum_CONT_AMT_TYPE_COMMISSION_PERCENT                     ContAmtTypeEnum = 2
	ContAmtTypeEnum_CONT_AMT_TYPE_DILUTION_LEVY_AMOUNT                   ContAmtTypeEnum = 3
	ContAmtTypeEnum_CONT_AMT_TYPE_DILUTION_LEVY_PERCENT                  ContAmtTypeEnum = 4
	ContAmtTypeEnum_CONT_AMT_TYPE_DISCOUNT_AMOUNT                        ContAmtTypeEnum = 5
	ContAmtTypeEnum_CONT_AMT_TYPE_DISCOUNT_PERCENT                       ContAmtTypeEnum = 6
	ContAmtTypeEnum_CONT_AMT_TYPE_EXIT_CHARGE_AMOUNT                     ContAmtTypeEnum = 7
	ContAmtTypeEnum_CONT_AMT_TYPE_EXIT_CHARGE_PERCENT                    ContAmtTypeEnum = 8
	ContAmtTypeEnum_CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_FUND  ContAmtTypeEnum = 9
	ContAmtTypeEnum_CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER ContAmtTypeEnum = 10
	ContAmtTypeEnum_CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_PERCENT  ContAmtTypeEnum = 11
	ContAmtTypeEnum_CONT_AMT_TYPE_INITIAL_CHARGE_AMOUNT                  ContAmtTypeEnum = 12
	ContAmtTypeEnum_CONT_AMT_TYPE_INITIAL_CHARGE_PERCENT                 ContAmtTypeEnum = 13
	ContAmtTypeEnum_CONT_AMT_TYPE_NET_SETTLEMENT_AMOUNT                  ContAmtTypeEnum = 14
	ContAmtTypeEnum_CONT_AMT_TYPE_PROJECTED_FUND_VALUE                   ContAmtTypeEnum = 15
)

var ContAmtTypeEnum_name = map[int32]string{
	0:  "CONT_AMT_TYPE_UNSPECIFIED",
	1:  "CONT_AMT_TYPE_COMMISSION_AMOUNT",
	2:  "CONT_AMT_TYPE_COMMISSION_PERCENT",
	3:  "CONT_AMT_TYPE_DILUTION_LEVY_AMOUNT",
	4:  "CONT_AMT_TYPE_DILUTION_LEVY_PERCENT",
	5:  "CONT_AMT_TYPE_DISCOUNT_AMOUNT",
	6:  "CONT_AMT_TYPE_DISCOUNT_PERCENT",
	7:  "CONT_AMT_TYPE_EXIT_CHARGE_AMOUNT",
	8:  "CONT_AMT_TYPE_EXIT_CHARGE_PERCENT",
	9:  "CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_FUND",
	10: "CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER",
	11: "CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_PERCENT",
	12: "CONT_AMT_TYPE_INITIAL_CHARGE_AMOUNT",
	13: "CONT_AMT_TYPE_INITIAL_CHARGE_PERCENT",
	14: "CONT_AMT_TYPE_NET_SETTLEMENT_AMOUNT",
	15: "CONT_AMT_TYPE_PROJECTED_FUND_VALUE",
}

var ContAmtTypeEnum_value = map[string]int32{
	"CONT_AMT_TYPE_UNSPECIFIED":                            0,
	"CONT_AMT_TYPE_COMMISSION_AMOUNT":                      1,
	"CONT_AMT_TYPE_COMMISSION_PERCENT":                     2,
	"CONT_AMT_TYPE_DILUTION_LEVY_AMOUNT":                   3,
	"CONT_AMT_TYPE_DILUTION_LEVY_PERCENT":                  4,
	"CONT_AMT_TYPE_DISCOUNT_AMOUNT":                        5,
	"CONT_AMT_TYPE_DISCOUNT_PERCENT":                       6,
	"CONT_AMT_TYPE_EXIT_CHARGE_AMOUNT":                     7,
	"CONT_AMT_TYPE_EXIT_CHARGE_PERCENT":                    8,
	"CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_FUND":  9,
	"CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER": 10,
	"CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_PERCENT":  11,
	"CONT_AMT_TYPE_INITIAL_CHARGE_AMOUNT":                  12,
	"CONT_AMT_TYPE_INITIAL_CHARGE_PERCENT":                 13,
	"CONT_AMT_TYPE_NET_SETTLEMENT_AMOUNT":                  14,
	"CONT_AMT_TYPE_PROJECTED_FUND_VALUE":                   15,
}

func (x ContAmtTypeEnum) String() string {
	return proto.EnumName(ContAmtTypeEnum_name, int32(x))
}

func (ContAmtTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{98}
}

type LegSwapTypeEnum int32

const (
	LegSwapTypeEnum_LEG_SWAP_TYPE_UNSPECIFIED       LegSwapTypeEnum = 0
	LegSwapTypeEnum_LEG_SWAP_TYPE_MODIFIED_DURATION LegSwapTypeEnum = 1
	LegSwapTypeEnum_LEG_SWAP_TYPE_PAR_FOR_PAR       LegSwapTypeEnum = 2
	LegSwapTypeEnum_LEG_SWAP_TYPE_PROCEEDS          LegSwapTypeEnum = 3
	LegSwapTypeEnum_LEG_SWAP_TYPE_RISK              LegSwapTypeEnum = 4
)

var LegSwapTypeEnum_name = map[int32]string{
	0: "LEG_SWAP_TYPE_UNSPECIFIED",
	1: "LEG_SWAP_TYPE_MODIFIED_DURATION",
	2: "LEG_SWAP_TYPE_PAR_FOR_PAR",
	3: "LEG_SWAP_TYPE_PROCEEDS",
	4: "LEG_SWAP_TYPE_RISK",
}

var LegSwapTypeEnum_value = map[string]int32{
	"LEG_SWAP_TYPE_UNSPECIFIED":       0,
	"LEG_SWAP_TYPE_MODIFIED_DURATION": 1,
	"LEG_SWAP_TYPE_PAR_FOR_PAR":       2,
	"LEG_SWAP_TYPE_PROCEEDS":          3,
	"LEG_SWAP_TYPE_RISK":              4,
}

func (x LegSwapTypeEnum) String() string {
	return proto.EnumName(LegSwapTypeEnum_name, int32(x))
}

func (LegSwapTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{99}
}

type LegPositionEffectEnum int32

const (
	LegPositionEffectEnum_LEG_POSITION_EFFECT_UNSPECIFIED              LegPositionEffectEnum = 0
	LegPositionEffectEnum_LEG_POSITION_EFFECT_CLOSE                    LegPositionEffectEnum = 1
	LegPositionEffectEnum_LEG_POSITION_EFFECT_OPEN                     LegPositionEffectEnum = 2
	LegPositionEffectEnum_LEG_POSITION_EFFECT_FIFO                     LegPositionEffectEnum = 3
	LegPositionEffectEnum_LEG_POSITION_EFFECT_ROLLED                   LegPositionEffectEnum = 4
	LegPositionEffectEnum_LEG_POSITION_EFFECT_CLOSE_BUT_NOTIFY_ON_OPEN LegPositionEffectEnum = 5
	LegPositionEffectEnum_LEG_POSITION_EFFECT_DEFAULT                  LegPositionEffectEnum = 6
)

var LegPositionEffectEnum_name = map[int32]string{
	0: "LEG_POSITION_EFFECT_UNSPECIFIED",
	1: "LEG_POSITION_EFFECT_CLOSE",
	2: "LEG_POSITION_EFFECT_OPEN",
	3: "LEG_POSITION_EFFECT_FIFO",
	4: "LEG_POSITION_EFFECT_ROLLED",
	5: "LEG_POSITION_EFFECT_CLOSE_BUT_NOTIFY_ON_OPEN",
	6: "LEG_POSITION_EFFECT_DEFAULT",
}

var LegPositionEffectEnum_value = map[string]int32{
	"LEG_POSITION_EFFECT_UNSPECIFIED":              0,
	"LEG_POSITION_EFFECT_CLOSE":                    1,
	"LEG_POSITION_EFFECT_OPEN":                     2,
	"LEG_POSITION_EFFECT_FIFO":                     3,
	"LEG_POSITION_EFFECT_ROLLED":                   4,
	"LEG_POSITION_EFFECT_CLOSE_BUT_NOTIFY_ON_OPEN": 5,
	"LEG_POSITION_EFFECT_DEFAULT":                  6,
}

func (x LegPositionEffectEnum) String() string {
	return proto.EnumName(LegPositionEffectEnum_name, int32(x))
}

func (LegPositionEffectEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{100}
}

type LegCoveredOrUncoveredEnum int32

const (
	LegCoveredOrUncoveredEnum_LEG_COVERED_OR_UNCOVERED_UNSPECIFIED LegCoveredOrUncoveredEnum = 0
	LegCoveredOrUncoveredEnum_LEG_COVERED_OR_UNCOVERED_COVERED     LegCoveredOrUncoveredEnum = 1
	LegCoveredOrUncoveredEnum_LEG_COVERED_OR_UNCOVERED_UNCOVERED   LegCoveredOrUncoveredEnum = 2
)

var LegCoveredOrUncoveredEnum_name = map[int32]string{
	0: "LEG_COVERED_OR_UNCOVERED_UNSPECIFIED",
	1: "LEG_COVERED_OR_UNCOVERED_COVERED",
	2: "LEG_COVERED_OR_UNCOVERED_UNCOVERED",
}

var LegCoveredOrUncoveredEnum_value = map[string]int32{
	"LEG_COVERED_OR_UNCOVERED_UNSPECIFIED": 0,
	"LEG_COVERED_OR_UNCOVERED_COVERED":     1,
	"LEG_COVERED_OR_UNCOVERED_UNCOVERED":   2,
}

func (x LegCoveredOrUncoveredEnum) String() string {
	return proto.EnumName(LegCoveredOrUncoveredEnum_name, int32(x))
}

func (LegCoveredOrUncoveredEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{101}
}

type LegSettlTypeEnum int32

const (
	LegSettlTypeEnum_LEG_SETTL_TYPE_UNSPECIFIED             LegSettlTypeEnum = 0
	LegSettlTypeEnum_LEG_SETTL_TYPE_CASH                    LegSettlTypeEnum = 1
	LegSettlTypeEnum_LEG_SETTL_TYPE_FUTURE                  LegSettlTypeEnum = 2
	LegSettlTypeEnum_LEG_SETTL_TYPE_NEXT_DAY                LegSettlTypeEnum = 3
	LegSettlTypeEnum_LEG_SETTL_TYPE_REGULAR                 LegSettlTypeEnum = 4
	LegSettlTypeEnum_LEG_SETTL_TYPE_SELLERS_OPTION          LegSettlTypeEnum = 5
	LegSettlTypeEnum_LEG_SETTL_TYPE_TPLUS2                  LegSettlTypeEnum = 6
	LegSettlTypeEnum_LEG_SETTL_TYPE_TPLUS3                  LegSettlTypeEnum = 7
	LegSettlTypeEnum_LEG_SETTL_TYPE_TPLUS4                  LegSettlTypeEnum = 8
	LegSettlTypeEnum_LEG_SETTL_TYPE_WHEN_AND_IF_ISSUED      LegSettlTypeEnum = 9
	LegSettlTypeEnum_LEG_SETTL_TYPE_TPLUS5                  LegSettlTypeEnum = 10
	LegSettlTypeEnum_LEG_SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT LegSettlTypeEnum = 11
	LegSettlTypeEnum_LEG_SETTL_TYPE_BROKEN_DATE             LegSettlTypeEnum = 12
)

var LegSettlTypeEnum_name = map[int32]string{
	0:  "LEG_SETTL_TYPE_UNSPECIFIED",
	1:  "LEG_SETTL_TYPE_CASH",
	2:  "LEG_SETTL_TYPE_FUTURE",
	3:  "LEG_SETTL_TYPE_NEXT_DAY",
	4:  "LEG_SETTL_TYPE_REGULAR",
	5:  "LEG_SETTL_TYPE_SELLERS_OPTION",
	6:  "LEG_SETTL_TYPE_TPLUS2",
	7:  "LEG_SETTL_TYPE_TPLUS3",
	8:  "LEG_SETTL_TYPE_TPLUS4",
	9:  "LEG_SETTL_TYPE_WHEN_AND_IF_ISSUED",
	10: "LEG_SETTL_TYPE_TPLUS5",
	11: "LEG_SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT",
	12: "LEG_SETTL_TYPE_BROKEN_DATE",
}

var LegSettlTypeEnum_value = map[string]int32{
	"LEG_SETTL_TYPE_UNSPECIFIED":             0,
	"LEG_SETTL_TYPE_CASH":                    1,
	"LEG_SETTL_TYPE_FUTURE":                  2,
	"LEG_SETTL_TYPE_NEXT_DAY":                3,
	"LEG_SETTL_TYPE_REGULAR":                 4,
	"LEG_SETTL_TYPE_SELLERS_OPTION":          5,
	"LEG_SETTL_TYPE_TPLUS2":                  6,
	"LEG_SETTL_TYPE_TPLUS3":                  7,
	"LEG_SETTL_TYPE_TPLUS4":                  8,
	"LEG_SETTL_TYPE_WHEN_AND_IF_ISSUED":      9,
	"LEG_SETTL_TYPE_TPLUS5":                  10,
	"LEG_SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT": 11,
	"LEG_SETTL_TYPE_BROKEN_DATE":             12,
}

func (x LegSettlTypeEnum) String() string {
	return proto.EnumName(LegSettlTypeEnum_name, int32(x))
}

func (LegSettlTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{102}
}

type LegExecInstEnum int32

const (
	LegExecInstEnum_LEG_EXEC_INST_UNSPECIFIED                                           LegExecInstEnum = 0
	LegExecInstEnum_LEG_EXEC_INST_ALL_OR_NONE                                           LegExecInstEnum = 1
	LegExecInstEnum_LEG_EXEC_INST_CALL_FIRST                                            LegExecInstEnum = 2
	LegExecInstEnum_LEG_EXEC_INST_DO_NOT_INCREASE                                       LegExecInstEnum = 3
	LegExecInstEnum_LEG_EXEC_INST_DO_NOT_REDUCE                                         LegExecInstEnum = 4
	LegExecInstEnum_LEG_EXEC_INST_GO_ALONG                                              LegExecInstEnum = 5
	LegExecInstEnum_LEG_EXEC_INST_HELD                                                  LegExecInstEnum = 6
	LegExecInstEnum_LEG_EXEC_INST_NOT_HELD                                              LegExecInstEnum = 7
	LegExecInstEnum_LEG_EXEC_INST_NO_CROSS                                              LegExecInstEnum = 8
	LegExecInstEnum_LEG_EXEC_INST_OKTO_CROSS                                            LegExecInstEnum = 9
	LegExecInstEnum_LEG_EXEC_INST_OVER_THE_DAY                                          LegExecInstEnum = 10
	LegExecInstEnum_LEG_EXEC_INST_PARTICIPATE_DO_NOT_INITIATE                           LegExecInstEnum = 11
	LegExecInstEnum_LEG_EXEC_INST_PERCENT_OF_VOLUME                                     LegExecInstEnum = 12
	LegExecInstEnum_LEG_EXEC_INST_STAY_ON_BID_SIDE                                      LegExecInstEnum = 13
	LegExecInstEnum_LEG_EXEC_INST_STAY_ON_OFFER_SIDE                                    LegExecInstEnum = 14
	LegExecInstEnum_LEG_EXEC_INST_STRICT_SCALE                                          LegExecInstEnum = 15
	LegExecInstEnum_LEG_EXEC_INST_TRY_TO_SCALE                                          LegExecInstEnum = 16
	LegExecInstEnum_LEG_EXEC_INST_WORK                                                  LegExecInstEnum = 17
	LegExecInstEnum_LEG_EXEC_INST_INSTITUTIONS_ONLY                                     LegExecInstEnum = 18
	LegExecInstEnum_LEG_EXEC_INST_LAST_PEG                                              LegExecInstEnum = 19
	LegExecInstEnum_LEG_EXEC_INST_MARKET_PEG                                            LegExecInstEnum = 20
	LegExecInstEnum_LEG_EXEC_INST_MID_PRICE_PEG                                         LegExecInstEnum = 21
	LegExecInstEnum_LEG_EXEC_INST_NON_NEGOTIABLE                                        LegExecInstEnum = 22
	LegExecInstEnum_LEG_EXEC_INST_OPENING_PEG                                           LegExecInstEnum = 23
	LegExecInstEnum_LEG_EXEC_INST_PRIMARY_PEG                                           LegExecInstEnum = 24
	LegExecInstEnum_LEG_EXEC_INST_SUSPEND                                               LegExecInstEnum = 25
	LegExecInstEnum_LEG_EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION                          LegExecInstEnum = 26
	LegExecInstEnum_LEG_EXEC_INST_NETTING                                               LegExecInstEnum = 27
	LegExecInstEnum_LEG_EXEC_INST_PEG_TO_VWAP                                           LegExecInstEnum = 28
	LegExecInstEnum_LEG_EXEC_INST_CANCEL_ON_SYSTEM_FAILURE                              LegExecInstEnum = 29
	LegExecInstEnum_LEG_EXEC_INST_CANCEL_ON_TRADING_HALT                                LegExecInstEnum = 30
	LegExecInstEnum_LEG_EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE                           LegExecInstEnum = 31
	LegExecInstEnum_LEG_EXEC_INST_REINSTATE_ON_TRADING_HALT                             LegExecInstEnum = 32
	LegExecInstEnum_LEG_EXEC_INST_TRADE_ALONG                                           LegExecInstEnum = 33
	LegExecInstEnum_LEG_EXEC_INST_TRY_TO_STOP                                           LegExecInstEnum = 34
	LegExecInstEnum_LEG_EXEC_INST_CANCEL_IF_NOT_BEST                                    LegExecInstEnum = 35
	LegExecInstEnum_LEG_EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS                          LegExecInstEnum = 36
	LegExecInstEnum_LEG_EXEC_INST_PEG_TO_LIMIT_PRICE                                    LegExecInstEnum = 37
	LegExecInstEnum_LEG_EXEC_INST_STRICT_LIMIT                                          LegExecInstEnum = 38
	LegExecInstEnum_LEG_EXEC_INST_TRAILING_STOP_PEG                                     LegExecInstEnum = 39
	LegExecInstEnum_LEG_EXEC_INST_WORK_TO_TARGET_STRATEGY                               LegExecInstEnum = 40
	LegExecInstEnum_LEG_EXEC_INST_INTERMARKET_SWEEP                                     LegExecInstEnum = 41
	LegExecInstEnum_LEG_EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE            LegExecInstEnum = 42
	LegExecInstEnum_LEG_EXEC_INST_EXTERNAL_ROUTING_ALLOWED                              LegExecInstEnum = 43
	LegExecInstEnum_LEG_EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED                          LegExecInstEnum = 44
	LegExecInstEnum_LEG_EXEC_INST_IMBALANCE_ONLY                                        LegExecInstEnum = 45
	LegExecInstEnum_LEG_EXEC_INST_BEST_EXECUTION                                        LegExecInstEnum = 46
	LegExecInstEnum_LEG_EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER LegExecInstEnum = 47
	LegExecInstEnum_LEG_EXEC_INST_CANCEL_ON_CONNECTION_LOSS                             LegExecInstEnum = 48
	LegExecInstEnum_LEG_EXEC_INST_REINSTATE_ON_CONNECTION_LOSS                          LegExecInstEnum = 49
	LegExecInstEnum_LEG_EXEC_INST_RELEASE_FROM_SUSPENSION                               LegExecInstEnum = 50
	LegExecInstEnum_LEG_EXEC_INST_SUSPEND_ON_CONNECTION_LOSS                            LegExecInstEnum = 51
	LegExecInstEnum_LEG_EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE                             LegExecInstEnum = 52
	LegExecInstEnum_LEG_EXEC_INST_SUSPEND_ON_TRADING_HALT                               LegExecInstEnum = 53
	LegExecInstEnum_LEG_EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL                              LegExecInstEnum = 54
	LegExecInstEnum_LEG_EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL                           LegExecInstEnum = 55
	LegExecInstEnum_LEG_EXEC_INST_EXECUTE_AS_FX_NEUTRAL                                 LegExecInstEnum = 56
)

var LegExecInstEnum_name = map[int32]string{
	0:  "LEG_EXEC_INST_UNSPECIFIED",
	1:  "LEG_EXEC_INST_ALL_OR_NONE",
	2:  "LEG_EXEC_INST_CALL_FIRST",
	3:  "LEG_EXEC_INST_DO_NOT_INCREASE",
	4:  "LEG_EXEC_INST_DO_NOT_REDUCE",
	5:  "LEG_EXEC_INST_GO_ALONG",
	6:  "LEG_EXEC_INST_HELD",
	7:  "LEG_EXEC_INST_NOT_HELD",
	8:  "LEG_EXEC_INST_NO_CROSS",
	9:  "LEG_EXEC_INST_OKTO_CROSS",
	10: "LEG_EXEC_INST_OVER_THE_DAY",
	11: "LEG_EXEC_INST_PARTICIPATE_DO_NOT_INITIATE",
	12: "LEG_EXEC_INST_PERCENT_OF_VOLUME",
	13: "LEG_EXEC_INST_STAY_ON_BID_SIDE",
	14: "LEG_EXEC_INST_STAY_ON_OFFER_SIDE",
	15: "LEG_EXEC_INST_STRICT_SCALE",
	16: "LEG_EXEC_INST_TRY_TO_SCALE",
	17: "LEG_EXEC_INST_WORK",
	18: "LEG_EXEC_INST_INSTITUTIONS_ONLY",
	19: "LEG_EXEC_INST_LAST_PEG",
	20: "LEG_EXEC_INST_MARKET_PEG",
	21: "LEG_EXEC_INST_MID_PRICE_PEG",
	22: "LEG_EXEC_INST_NON_NEGOTIABLE",
	23: "LEG_EXEC_INST_OPENING_PEG",
	24: "LEG_EXEC_INST_PRIMARY_PEG",
	25: "LEG_EXEC_INST_SUSPEND",
	26: "LEG_EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION",
	27: "LEG_EXEC_INST_NETTING",
	28: "LEG_EXEC_INST_PEG_TO_VWAP",
	29: "LEG_EXEC_INST_CANCEL_ON_SYSTEM_FAILURE",
	30: "LEG_EXEC_INST_CANCEL_ON_TRADING_HALT",
	31: "LEG_EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE",
	32: "LEG_EXEC_INST_REINSTATE_ON_TRADING_HALT",
	33: "LEG_EXEC_INST_TRADE_ALONG",
	34: "LEG_EXEC_INST_TRY_TO_STOP",
	35: "LEG_EXEC_INST_CANCEL_IF_NOT_BEST",
	36: "LEG_EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS",
	37: "LEG_EXEC_INST_PEG_TO_LIMIT_PRICE",
	38: "LEG_EXEC_INST_STRICT_LIMIT",
	39: "LEG_EXEC_INST_TRAILING_STOP_PEG",
	40: "LEG_EXEC_INST_WORK_TO_TARGET_STRATEGY",
	41: "LEG_EXEC_INST_INTERMARKET_SWEEP",
	42: "LEG_EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE",
	43: "LEG_EXEC_INST_EXTERNAL_ROUTING_ALLOWED",
	44: "LEG_EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED",
	45: "LEG_EXEC_INST_IMBALANCE_ONLY",
	46: "LEG_EXEC_INST_BEST_EXECUTION",
	47: "LEG_EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER",
	48: "LEG_EXEC_INST_CANCEL_ON_CONNECTION_LOSS",
	49: "LEG_EXEC_INST_REINSTATE_ON_CONNECTION_LOSS",
	50: "LEG_EXEC_INST_RELEASE_FROM_SUSPENSION",
	51: "LEG_EXEC_INST_SUSPEND_ON_CONNECTION_LOSS",
	52: "LEG_EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE",
	53: "LEG_EXEC_INST_SUSPEND_ON_TRADING_HALT",
	54: "LEG_EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL",
	55: "LEG_EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL",
	56: "LEG_EXEC_INST_EXECUTE_AS_FX_NEUTRAL",
}

var LegExecInstEnum_value = map[string]int32{
	"LEG_EXEC_INST_UNSPECIFIED":                                           0,
	"LEG_EXEC_INST_ALL_OR_NONE":                                           1,
	"LEG_EXEC_INST_CALL_FIRST":                                            2,
	"LEG_EXEC_INST_DO_NOT_INCREASE":                                       3,
	"LEG_EXEC_INST_DO_NOT_REDUCE":                                         4,
	"LEG_EXEC_INST_GO_ALONG":                                              5,
	"LEG_EXEC_INST_HELD":                                                  6,
	"LEG_EXEC_INST_NOT_HELD":                                              7,
	"LEG_EXEC_INST_NO_CROSS":                                              8,
	"LEG_EXEC_INST_OKTO_CROSS":                                            9,
	"LEG_EXEC_INST_OVER_THE_DAY":                                          10,
	"LEG_EXEC_INST_PARTICIPATE_DO_NOT_INITIATE":                           11,
	"LEG_EXEC_INST_PERCENT_OF_VOLUME":                                     12,
	"LEG_EXEC_INST_STAY_ON_BID_SIDE":                                      13,
	"LEG_EXEC_INST_STAY_ON_OFFER_SIDE":                                    14,
	"LEG_EXEC_INST_STRICT_SCALE":                                          15,
	"LEG_EXEC_INST_TRY_TO_SCALE":                                          16,
	"LEG_EXEC_INST_WORK":                                                  17,
	"LEG_EXEC_INST_INSTITUTIONS_ONLY":                                     18,
	"LEG_EXEC_INST_LAST_PEG":                                              19,
	"LEG_EXEC_INST_MARKET_PEG":                                            20,
	"LEG_EXEC_INST_MID_PRICE_PEG":                                         21,
	"LEG_EXEC_INST_NON_NEGOTIABLE":                                        22,
	"LEG_EXEC_INST_OPENING_PEG":                                           23,
	"LEG_EXEC_INST_PRIMARY_PEG":                                           24,
	"LEG_EXEC_INST_SUSPEND":                                               25,
	"LEG_EXEC_INST_CUSTOMER_DISPLAY_INSTRUCTION":                          26,
	"LEG_EXEC_INST_NETTING":                                               27,
	"LEG_EXEC_INST_PEG_TO_VWAP":                                           28,
	"LEG_EXEC_INST_CANCEL_ON_SYSTEM_FAILURE":                              29,
	"LEG_EXEC_INST_CANCEL_ON_TRADING_HALT":                                30,
	"LEG_EXEC_INST_REINSTATE_ON_SYSTEM_FAILURE":                           31,
	"LEG_EXEC_INST_REINSTATE_ON_TRADING_HALT":                             32,
	"LEG_EXEC_INST_TRADE_ALONG":                                           33,
	"LEG_EXEC_INST_TRY_TO_STOP":                                           34,
	"LEG_EXEC_INST_CANCEL_IF_NOT_BEST":                                    35,
	"LEG_EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS":                          36,
	"LEG_EXEC_INST_PEG_TO_LIMIT_PRICE":                                    37,
	"LEG_EXEC_INST_STRICT_LIMIT":                                          38,
	"LEG_EXEC_INST_TRAILING_STOP_PEG":                                     39,
	"LEG_EXEC_INST_WORK_TO_TARGET_STRATEGY":                               40,
	"LEG_EXEC_INST_INTERMARKET_SWEEP":                                     41,
	"LEG_EXEC_INST_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE":            42,
	"LEG_EXEC_INST_EXTERNAL_ROUTING_ALLOWED":                              43,
	"LEG_EXEC_INST_EXTERNAL_ROUTING_NOT_ALLOWED":                          44,
	"LEG_EXEC_INST_IMBALANCE_ONLY":                                        45,
	"LEG_EXEC_INST_BEST_EXECUTION":                                        46,
	"LEG_EXEC_INST_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER": 47,
	"LEG_EXEC_INST_CANCEL_ON_CONNECTION_LOSS":                             48,
	"LEG_EXEC_INST_REINSTATE_ON_CONNECTION_LOSS":                          49,
	"LEG_EXEC_INST_RELEASE_FROM_SUSPENSION":                               50,
	"LEG_EXEC_INST_SUSPEND_ON_CONNECTION_LOSS":                            51,
	"LEG_EXEC_INST_SUSPEND_ON_SYSTEM_FAILURE":                             52,
	"LEG_EXEC_INST_SUSPEND_ON_TRADING_HALT":                               53,
	"LEG_EXEC_INST_EXECUTE_AS_DELTA_NEUTRAL":                              54,
	"LEG_EXEC_INST_EXECUTE_AS_DURATION_NEUTRAL":                           55,
	"LEG_EXEC_INST_EXECUTE_AS_FX_NEUTRAL":                                 56,
}

func (x LegExecInstEnum) String() string {
	return proto.EnumName(LegExecInstEnum_name, int32(x))
}

func (LegExecInstEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{103}
}

type LegIOIQtyEnum int32

const (
	LegIOIQtyEnum_LEG_IOI_QTY_UNSPECIFIED          LegIOIQtyEnum = 0
	LegIOIQtyEnum_LEG_IOI_QTY_LARGE                LegIOIQtyEnum = 1
	LegIOIQtyEnum_LEG_IOI_QTY_MEDIUM               LegIOIQtyEnum = 2
	LegIOIQtyEnum_LEG_IOI_QTY_SMALL                LegIOIQtyEnum = 3
	LegIOIQtyEnum_LEG_IOI_QTY_UNDISCLOSED_QUANTITY LegIOIQtyEnum = 4
)

var LegIOIQtyEnum_name = map[int32]string{
	0: "LEG_IOI_QTY_UNSPECIFIED",
	1: "LEG_IOI_QTY_LARGE",
	2: "LEG_IOI_QTY_MEDIUM",
	3: "LEG_IOI_QTY_SMALL",
	4: "LEG_IOI_QTY_UNDISCLOSED_QUANTITY",
}

var LegIOIQtyEnum_value = map[string]int32{
	"LEG_IOI_QTY_UNSPECIFIED":          0,
	"LEG_IOI_QTY_LARGE":                1,
	"LEG_IOI_QTY_MEDIUM":               2,
	"LEG_IOI_QTY_SMALL":                3,
	"LEG_IOI_QTY_UNDISCLOSED_QUANTITY": 4,
}

func (x LegIOIQtyEnum) String() string {
	return proto.EnumName(LegIOIQtyEnum_name, int32(x))
}

func (LegIOIQtyEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{104}
}

type QuoteTypeEnum int32

const (
	QuoteTypeEnum_QUOTE_TYPE_UNSPECIFIED          QuoteTypeEnum = 0
	QuoteTypeEnum_QUOTE_TYPE_INDICATIVE           QuoteTypeEnum = 1
	QuoteTypeEnum_QUOTE_TYPE_RESTRICTED_TRADEABLE QuoteTypeEnum = 2
	QuoteTypeEnum_QUOTE_TYPE_TRADEABLE            QuoteTypeEnum = 3
	QuoteTypeEnum_QUOTE_TYPE_COUNTER              QuoteTypeEnum = 4
)

var QuoteTypeEnum_name = map[int32]string{
	0: "QUOTE_TYPE_UNSPECIFIED",
	1: "QUOTE_TYPE_INDICATIVE",
	2: "QUOTE_TYPE_RESTRICTED_TRADEABLE",
	3: "QUOTE_TYPE_TRADEABLE",
	4: "QUOTE_TYPE_COUNTER",
}

var QuoteTypeEnum_value = map[string]int32{
	"QUOTE_TYPE_UNSPECIFIED":          0,
	"QUOTE_TYPE_INDICATIVE":           1,
	"QUOTE_TYPE_RESTRICTED_TRADEABLE": 2,
	"QUOTE_TYPE_TRADEABLE":            3,
	"QUOTE_TYPE_COUNTER":              4,
}

func (x QuoteTypeEnum) String() string {
	return proto.EnumName(QuoteTypeEnum_name, int32(x))
}

func (QuoteTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{105}
}

type SettlTypeEnum int32

const (
	SettlTypeEnum_SETTL_TYPE_UNSPECIFIED             SettlTypeEnum = 0
	SettlTypeEnum_SETTL_TYPE_CASH                    SettlTypeEnum = 1
	SettlTypeEnum_SETTL_TYPE_FUTURE                  SettlTypeEnum = 2
	SettlTypeEnum_SETTL_TYPE_NEXT_DAY                SettlTypeEnum = 3
	SettlTypeEnum_SETTL_TYPE_REGULAR                 SettlTypeEnum = 4
	SettlTypeEnum_SETTL_TYPE_SELLERS_OPTION          SettlTypeEnum = 5
	SettlTypeEnum_SETTL_TYPE_TPLUS2                  SettlTypeEnum = 6
	SettlTypeEnum_SETTL_TYPE_TPLUS3                  SettlTypeEnum = 7
	SettlTypeEnum_SETTL_TYPE_TPLUS4                  SettlTypeEnum = 8
	SettlTypeEnum_SETTL_TYPE_WHEN_AND_IF_ISSUED      SettlTypeEnum = 9
	SettlTypeEnum_SETTL_TYPE_TPLUS5                  SettlTypeEnum = 10
	SettlTypeEnum_SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT SettlTypeEnum = 11
	SettlTypeEnum_SETTL_TYPE_BROKEN_DATE             SettlTypeEnum = 12
)

var SettlTypeEnum_name = map[int32]string{
	0:  "SETTL_TYPE_UNSPECIFIED",
	1:  "SETTL_TYPE_CASH",
	2:  "SETTL_TYPE_FUTURE",
	3:  "SETTL_TYPE_NEXT_DAY",
	4:  "SETTL_TYPE_REGULAR",
	5:  "SETTL_TYPE_SELLERS_OPTION",
	6:  "SETTL_TYPE_TPLUS2",
	7:  "SETTL_TYPE_TPLUS3",
	8:  "SETTL_TYPE_TPLUS4",
	9:  "SETTL_TYPE_WHEN_AND_IF_ISSUED",
	10: "SETTL_TYPE_TPLUS5",
	11: "SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT",
	12: "SETTL_TYPE_BROKEN_DATE",
}

var SettlTypeEnum_value = map[string]int32{
	"SETTL_TYPE_UNSPECIFIED":             0,
	"SETTL_TYPE_CASH":                    1,
	"SETTL_TYPE_FUTURE":                  2,
	"SETTL_TYPE_NEXT_DAY":                3,
	"SETTL_TYPE_REGULAR":                 4,
	"SETTL_TYPE_SELLERS_OPTION":          5,
	"SETTL_TYPE_TPLUS2":                  6,
	"SETTL_TYPE_TPLUS3":                  7,
	"SETTL_TYPE_TPLUS4":                  8,
	"SETTL_TYPE_WHEN_AND_IF_ISSUED":      9,
	"SETTL_TYPE_TPLUS5":                  10,
	"SETTL_TYPE_FX_SPOT_NEXT_SETTLEMENT": 11,
	"SETTL_TYPE_BROKEN_DATE":             12,
}

func (x SettlTypeEnum) String() string {
	return proto.EnumName(SettlTypeEnum_name, int32(x))
}

func (SettlTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{106}
}

type MiscFeeTypeEnum int32

const (
	MiscFeeTypeEnum_MISC_FEE_TYPE_UNSPECIFIED      MiscFeeTypeEnum = 0
	MiscFeeTypeEnum_MISC_FEE_TYPE_EXCHANGE_FEES    MiscFeeTypeEnum = 1
	MiscFeeTypeEnum_MISC_FEE_TYPE_LEVY             MiscFeeTypeEnum = 2
	MiscFeeTypeEnum_MISC_FEE_TYPE_LOCAL_COMMISSION MiscFeeTypeEnum = 3
	MiscFeeTypeEnum_MISC_FEE_TYPE_OTHER            MiscFeeTypeEnum = 4
	MiscFeeTypeEnum_MISC_FEE_TYPE_REGULATORY       MiscFeeTypeEnum = 5
	MiscFeeTypeEnum_MISC_FEE_TYPE_STAMP            MiscFeeTypeEnum = 6
	MiscFeeTypeEnum_MISC_FEE_TYPE_TAX              MiscFeeTypeEnum = 7
	MiscFeeTypeEnum_MISC_FEE_TYPE_MARKUP           MiscFeeTypeEnum = 8
	MiscFeeTypeEnum_MISC_FEE_TYPE_CONSUMPTION_TAX  MiscFeeTypeEnum = 9
	MiscFeeTypeEnum_MISC_FEE_TYPE_AGENT            MiscFeeTypeEnum = 10
	MiscFeeTypeEnum_MISC_FEE_TYPE_CONVERSION       MiscFeeTypeEnum = 11
	MiscFeeTypeEnum_MISC_FEE_TYPE_PER_TRANSACTION  MiscFeeTypeEnum = 12
	MiscFeeTypeEnum_MISC_FEE_TYPE_SECURITY_LENDING MiscFeeTypeEnum = 13
	MiscFeeTypeEnum_MISC_FEE_TYPE_TRANSFER_FEE     MiscFeeTypeEnum = 14
)

var MiscFeeTypeEnum_name = map[int32]string{
	0:  "MISC_FEE_TYPE_UNSPECIFIED",
	1:  "MISC_FEE_TYPE_EXCHANGE_FEES",
	2:  "MISC_FEE_TYPE_LEVY",
	3:  "MISC_FEE_TYPE_LOCAL_COMMISSION",
	4:  "MISC_FEE_TYPE_OTHER",
	5:  "MISC_FEE_TYPE_REGULATORY",
	6:  "MISC_FEE_TYPE_STAMP",
	7:  "MISC_FEE_TYPE_TAX",
	8:  "MISC_FEE_TYPE_MARKUP",
	9:  "MISC_FEE_TYPE_CONSUMPTION_TAX",
	10: "MISC_FEE_TYPE_AGENT",
	11: "MISC_FEE_TYPE_CONVERSION",
	12: "MISC_FEE_TYPE_PER_TRANSACTION",
	13: "MISC_FEE_TYPE_SECURITY_LENDING",
	14: "MISC_FEE_TYPE_TRANSFER_FEE",
}

var MiscFeeTypeEnum_value = map[string]int32{
	"MISC_FEE_TYPE_UNSPECIFIED":      0,
	"MISC_FEE_TYPE_EXCHANGE_FEES":    1,
	"MISC_FEE_TYPE_LEVY":             2,
	"MISC_FEE_TYPE_LOCAL_COMMISSION": 3,
	"MISC_FEE_TYPE_OTHER":            4,
	"MISC_FEE_TYPE_REGULATORY":       5,
	"MISC_FEE_TYPE_STAMP":            6,
	"MISC_FEE_TYPE_TAX":              7,
	"MISC_FEE_TYPE_MARKUP":           8,
	"MISC_FEE_TYPE_CONSUMPTION_TAX":  9,
	"MISC_FEE_TYPE_AGENT":            10,
	"MISC_FEE_TYPE_CONVERSION":       11,
	"MISC_FEE_TYPE_PER_TRANSACTION":  12,
	"MISC_FEE_TYPE_SECURITY_LENDING": 13,
	"MISC_FEE_TYPE_TRANSFER_FEE":     14,
}

func (x MiscFeeTypeEnum) String() string {
	return proto.EnumName(MiscFeeTypeEnum_name, int32(x))
}

func (MiscFeeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{107}
}

type MiscFeeBasisEnum int32

const (
	MiscFeeBasisEnum_MISC_FEE_BASIS_UNSPECIFIED MiscFeeBasisEnum = 0
	MiscFeeBasisEnum_MISC_FEE_BASIS_ABSOLUTE    MiscFeeBasisEnum = 1
	MiscFeeBasisEnum_MISC_FEE_BASIS_PERCENTAGE  MiscFeeBasisEnum = 2
	MiscFeeBasisEnum_MISC_FEE_BASIS_PER_UNIT    MiscFeeBasisEnum = 3
)

var MiscFeeBasisEnum_name = map[int32]string{
	0: "MISC_FEE_BASIS_UNSPECIFIED",
	1: "MISC_FEE_BASIS_ABSOLUTE",
	2: "MISC_FEE_BASIS_PERCENTAGE",
	3: "MISC_FEE_BASIS_PER_UNIT",
}

var MiscFeeBasisEnum_value = map[string]int32{
	"MISC_FEE_BASIS_UNSPECIFIED": 0,
	"MISC_FEE_BASIS_ABSOLUTE":    1,
	"MISC_FEE_BASIS_PERCENTAGE":  2,
	"MISC_FEE_BASIS_PER_UNIT":    3,
}

func (x MiscFeeBasisEnum) String() string {
	return proto.EnumName(MiscFeeBasisEnum_name, int32(x))
}

func (MiscFeeBasisEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{108}
}

type AllocAcctIDSourceEnum int32

const (
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_UNSPECIFIED AllocAcctIDSourceEnum = 0
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_BIC         AllocAcctIDSourceEnum = 1
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_DTCCCODE    AllocAcctIDSourceEnum = 2
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_OMGEO       AllocAcctIDSourceEnum = 3
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_OTHER       AllocAcctIDSourceEnum = 4
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_SID_CODE    AllocAcctIDSourceEnum = 5
	AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_TFM         AllocAcctIDSourceEnum = 6
)

var AllocAcctIDSourceEnum_name = map[int32]string{
	0: "ALLOC_ACCT_ID_SOURCE_UNSPECIFIED",
	1: "ALLOC_ACCT_ID_SOURCE_BIC",
	2: "ALLOC_ACCT_ID_SOURCE_DTCCCODE",
	3: "ALLOC_ACCT_ID_SOURCE_OMGEO",
	4: "ALLOC_ACCT_ID_SOURCE_OTHER",
	5: "ALLOC_ACCT_ID_SOURCE_SID_CODE",
	6: "ALLOC_ACCT_ID_SOURCE_TFM",
}

var AllocAcctIDSourceEnum_value = map[string]int32{
	"ALLOC_ACCT_ID_SOURCE_UNSPECIFIED": 0,
	"ALLOC_ACCT_ID_SOURCE_BIC":         1,
	"ALLOC_ACCT_ID_SOURCE_DTCCCODE":    2,
	"ALLOC_ACCT_ID_SOURCE_OMGEO":       3,
	"ALLOC_ACCT_ID_SOURCE_OTHER":       4,
	"ALLOC_ACCT_ID_SOURCE_SID_CODE":    5,
	"ALLOC_ACCT_ID_SOURCE_TFM":         6,
}

func (x AllocAcctIDSourceEnum) String() string {
	return proto.EnumName(AllocAcctIDSourceEnum_name, int32(x))
}

func (AllocAcctIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{109}
}

type RoutingTypeEnum int32

const (
	RoutingTypeEnum_ROUTING_TYPE_UNSPECIFIED RoutingTypeEnum = 0
	RoutingTypeEnum_ROUTING_TYPE_BLOCK_FIRM  RoutingTypeEnum = 1
	RoutingTypeEnum_ROUTING_TYPE_BLOCK_LIST  RoutingTypeEnum = 2
	RoutingTypeEnum_ROUTING_TYPE_TARGET_FIRM RoutingTypeEnum = 3
	RoutingTypeEnum_ROUTING_TYPE_TARGET_LIST RoutingTypeEnum = 4
)

var RoutingTypeEnum_name = map[int32]string{
	0: "ROUTING_TYPE_UNSPECIFIED",
	1: "ROUTING_TYPE_BLOCK_FIRM",
	2: "ROUTING_TYPE_BLOCK_LIST",
	3: "ROUTING_TYPE_TARGET_FIRM",
	4: "ROUTING_TYPE_TARGET_LIST",
}

var RoutingTypeEnum_value = map[string]int32{
	"ROUTING_TYPE_UNSPECIFIED": 0,
	"ROUTING_TYPE_BLOCK_FIRM":  1,
	"ROUTING_TYPE_BLOCK_LIST":  2,
	"ROUTING_TYPE_TARGET_FIRM": 3,
	"ROUTING_TYPE_TARGET_LIST": 4,
}

func (x RoutingTypeEnum) String() string {
	return proto.EnumName(RoutingTypeEnum_name, int32(x))
}

func (RoutingTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{110}
}

type TradingSessionIDEnum int32

const (
	TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED TradingSessionIDEnum = 0
	TradingSessionIDEnum_TRADING_SESSION_ID_AFTERNOON   TradingSessionIDEnum = 1
	TradingSessionIDEnum_TRADING_SESSION_ID_AFTER_HOURS TradingSessionIDEnum = 2
	TradingSessionIDEnum_TRADING_SESSION_ID_DAY         TradingSessionIDEnum = 3
	TradingSessionIDEnum_TRADING_SESSION_ID_EVENING     TradingSessionIDEnum = 4
	TradingSessionIDEnum_TRADING_SESSION_ID_HALF_DAY    TradingSessionIDEnum = 5
	TradingSessionIDEnum_TRADING_SESSION_ID_MORNING     TradingSessionIDEnum = 6
)

var TradingSessionIDEnum_name = map[int32]string{
	0: "TRADING_SESSION_ID_UNSPECIFIED",
	1: "TRADING_SESSION_ID_AFTERNOON",
	2: "TRADING_SESSION_ID_AFTER_HOURS",
	3: "TRADING_SESSION_ID_DAY",
	4: "TRADING_SESSION_ID_EVENING",
	5: "TRADING_SESSION_ID_HALF_DAY",
	6: "TRADING_SESSION_ID_MORNING",
}

var TradingSessionIDEnum_value = map[string]int32{
	"TRADING_SESSION_ID_UNSPECIFIED": 0,
	"TRADING_SESSION_ID_AFTERNOON":   1,
	"TRADING_SESSION_ID_AFTER_HOURS": 2,
	"TRADING_SESSION_ID_DAY":         3,
	"TRADING_SESSION_ID_EVENING":     4,
	"TRADING_SESSION_ID_HALF_DAY":    5,
	"TRADING_SESSION_ID_MORNING":     6,
}

func (x TradingSessionIDEnum) String() string {
	return proto.EnumName(TradingSessionIDEnum_name, int32(x))
}

func (TradingSessionIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{111}
}

type TradingSessionSubIDEnum int32

const (
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED                TradingSessionSubIDEnum = 0
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION TradingSessionSubIDEnum = 1
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_CONTINUOUS                 TradingSessionSubIDEnum = 2
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_INTRADAY_AUCTION           TradingSessionSubIDEnum = 3
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION TradingSessionSubIDEnum = 4
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_POST_TRADING               TradingSessionSubIDEnum = 5
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_PRE_TRADING                TradingSessionSubIDEnum = 6
	TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_QUIESCENT                  TradingSessionSubIDEnum = 7
)

var TradingSessionSubIDEnum_name = map[int32]string{
	0: "TRADING_SESSION_SUB_ID_UNSPECIFIED",
	1: "TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION",
	2: "TRADING_SESSION_SUB_ID_CONTINUOUS",
	3: "TRADING_SESSION_SUB_ID_INTRADAY_AUCTION",
	4: "TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION",
	5: "TRADING_SESSION_SUB_ID_POST_TRADING",
	6: "TRADING_SESSION_SUB_ID_PRE_TRADING",
	7: "TRADING_SESSION_SUB_ID_QUIESCENT",
}

var TradingSessionSubIDEnum_value = map[string]int32{
	"TRADING_SESSION_SUB_ID_UNSPECIFIED":                0,
	"TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION": 1,
	"TRADING_SESSION_SUB_ID_CONTINUOUS":                 2,
	"TRADING_SESSION_SUB_ID_INTRADAY_AUCTION":           3,
	"TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION": 4,
	"TRADING_SESSION_SUB_ID_POST_TRADING":               5,
	"TRADING_SESSION_SUB_ID_PRE_TRADING":                6,
	"TRADING_SESSION_SUB_ID_QUIESCENT":                  7,
}

func (x TradingSessionSubIDEnum) String() string {
	return proto.EnumName(TradingSessionSubIDEnum_name, int32(x))
}

func (TradingSessionSubIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{112}
}

type EventTypeEnum int32

const (
	EventTypeEnum_EVENT_TYPE_UNSPECIFIED                EventTypeEnum = 0
	EventTypeEnum_EVENT_TYPE_CALL                       EventTypeEnum = 1
	EventTypeEnum_EVENT_TYPE_OTHER                      EventTypeEnum = 2
	EventTypeEnum_EVENT_TYPE_PUT                        EventTypeEnum = 3
	EventTypeEnum_EVENT_TYPE_SINKING_FUND_CALL          EventTypeEnum = 4
	EventTypeEnum_EVENT_TYPE_TENDER                     EventTypeEnum = 5
	EventTypeEnum_EVENT_TYPE_ACTIVATION                 EventTypeEnum = 6
	EventTypeEnum_EVENT_TYPE_INACTIVIATION              EventTypeEnum = 7
	EventTypeEnum_EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE   EventTypeEnum = 8
	EventTypeEnum_EVENT_TYPE_FINAL_INVENTORY_DUE_DATE   EventTypeEnum = 9
	EventTypeEnum_EVENT_TYPE_FIRST_DELIVERY_DATE        EventTypeEnum = 10
	EventTypeEnum_EVENT_TYPE_FIRST_INTENT_DATE          EventTypeEnum = 11
	EventTypeEnum_EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE EventTypeEnum = 12
	EventTypeEnum_EVENT_TYPE_LAST_DELIVERY_DATE         EventTypeEnum = 13
	EventTypeEnum_EVENT_TYPE_LAST_INTENT_DATE           EventTypeEnum = 14
	EventTypeEnum_EVENT_TYPE_POSITION_REMOVAL_DATE      EventTypeEnum = 15
	EventTypeEnum_EVENT_TYPE_SWAP_END_DATE              EventTypeEnum = 16
	EventTypeEnum_EVENT_TYPE_SWAP_NEXT_ROLL_DATE        EventTypeEnum = 17
	EventTypeEnum_EVENT_TYPE_SWAP_NEXT_START_DATE       EventTypeEnum = 18
	EventTypeEnum_EVENT_TYPE_SWAP_ROLL_DATE             EventTypeEnum = 19
	EventTypeEnum_EVENT_TYPE_SWAP_START_DATE            EventTypeEnum = 20
)

var EventTypeEnum_name = map[int32]string{
	0:  "EVENT_TYPE_UNSPECIFIED",
	1:  "EVENT_TYPE_CALL",
	2:  "EVENT_TYPE_OTHER",
	3:  "EVENT_TYPE_PUT",
	4:  "EVENT_TYPE_SINKING_FUND_CALL",
	5:  "EVENT_TYPE_TENDER",
	6:  "EVENT_TYPE_ACTIVATION",
	7:  "EVENT_TYPE_INACTIVIATION",
	8:  "EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE",
	9:  "EVENT_TYPE_FINAL_INVENTORY_DUE_DATE",
	10: "EVENT_TYPE_FIRST_DELIVERY_DATE",
	11: "EVENT_TYPE_FIRST_INTENT_DATE",
	12: "EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE",
	13: "EVENT_TYPE_LAST_DELIVERY_DATE",
	14: "EVENT_TYPE_LAST_INTENT_DATE",
	15: "EVENT_TYPE_POSITION_REMOVAL_DATE",
	16: "EVENT_TYPE_SWAP_END_DATE",
	17: "EVENT_TYPE_SWAP_NEXT_ROLL_DATE",
	18: "EVENT_TYPE_SWAP_NEXT_START_DATE",
	19: "EVENT_TYPE_SWAP_ROLL_DATE",
	20: "EVENT_TYPE_SWAP_START_DATE",
}

var EventTypeEnum_value = map[string]int32{
	"EVENT_TYPE_UNSPECIFIED":                0,
	"EVENT_TYPE_CALL":                       1,
	"EVENT_TYPE_OTHER":                      2,
	"EVENT_TYPE_PUT":                        3,
	"EVENT_TYPE_SINKING_FUND_CALL":          4,
	"EVENT_TYPE_TENDER":                     5,
	"EVENT_TYPE_ACTIVATION":                 6,
	"EVENT_TYPE_INACTIVIATION":              7,
	"EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE":   8,
	"EVENT_TYPE_FINAL_INVENTORY_DUE_DATE":   9,
	"EVENT_TYPE_FIRST_DELIVERY_DATE":        10,
	"EVENT_TYPE_FIRST_INTENT_DATE":          11,
	"EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE": 12,
	"EVENT_TYPE_LAST_DELIVERY_DATE":         13,
	"EVENT_TYPE_LAST_INTENT_DATE":           14,
	"EVENT_TYPE_POSITION_REMOVAL_DATE":      15,
	"EVENT_TYPE_SWAP_END_DATE":              16,
	"EVENT_TYPE_SWAP_NEXT_ROLL_DATE":        17,
	"EVENT_TYPE_SWAP_NEXT_START_DATE":       18,
	"EVENT_TYPE_SWAP_ROLL_DATE":             19,
	"EVENT_TYPE_SWAP_START_DATE":            20,
}

func (x EventTypeEnum) String() string {
	return proto.EnumName(EventTypeEnum_name, int32(x))
}

func (EventTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{113}
}

type SecurityAltIDSourceEnum int32

const (
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_UNSPECIFIED                      SecurityAltIDSourceEnum = 0
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_CUSIP                            SecurityAltIDSourceEnum = 1
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_QUIK                             SecurityAltIDSourceEnum = 2
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_SEDOL                            SecurityAltIDSourceEnum = 3
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER                      SecurityAltIDSourceEnum = 4
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_RIC_CODE                         SecurityAltIDSourceEnum = 5
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE                 SecurityAltIDSourceEnum = 6
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE                SecurityAltIDSourceEnum = 7
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    SecurityAltIDSourceEnum = 8
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL                  SecurityAltIDSourceEnum = 9
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_BELGIAN                          SecurityAltIDSourceEnum = 10
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL                 SecurityAltIDSourceEnum = 11
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_COMMON                           SecurityAltIDSourceEnum = 12
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_DUTCH                            SecurityAltIDSourceEnum = 13
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_SICOVAM                          SecurityAltIDSourceEnum = 14
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_VALOREN                          SecurityAltIDSourceEnum = 15
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_WERTPAPIER                       SecurityAltIDSourceEnum = 16
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE                   SecurityAltIDSourceEnum = 17
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION          SecurityAltIDSourceEnum = 18
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY SecurityAltIDSourceEnum = 19
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT                 SecurityAltIDSourceEnum = 20
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL                    SecurityAltIDSourceEnum = 21
	SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  SecurityAltIDSourceEnum = 22
)

var SecurityAltIDSourceEnum_name = map[int32]string{
	0:  "SECURITY_ALT_ID_SOURCE_UNSPECIFIED",
	1:  "SECURITY_ALT_ID_SOURCE_CUSIP",
	2:  "SECURITY_ALT_ID_SOURCE_QUIK",
	3:  "SECURITY_ALT_ID_SOURCE_SEDOL",
	4:  "SECURITY_ALT_ID_SOURCE_ISIN_NUMBER",
	5:  "SECURITY_ALT_ID_SOURCE_RIC_CODE",
	6:  "SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "SECURITY_ALT_ID_SOURCE_BELGIAN",
	11: "SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "SECURITY_ALT_ID_SOURCE_COMMON",
	13: "SECURITY_ALT_ID_SOURCE_DUTCH",
	14: "SECURITY_ALT_ID_SOURCE_SICOVAM",
	15: "SECURITY_ALT_ID_SOURCE_VALOREN",
	16: "SECURITY_ALT_ID_SOURCE_WERTPAPIER",
	17: "SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE",
	18: "SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT",
	21: "SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL",
	22: "SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var SecurityAltIDSourceEnum_value = map[string]int32{
	"SECURITY_ALT_ID_SOURCE_UNSPECIFIED":                      0,
	"SECURITY_ALT_ID_SOURCE_CUSIP":                            1,
	"SECURITY_ALT_ID_SOURCE_QUIK":                             2,
	"SECURITY_ALT_ID_SOURCE_SEDOL":                            3,
	"SECURITY_ALT_ID_SOURCE_ISIN_NUMBER":                      4,
	"SECURITY_ALT_ID_SOURCE_RIC_CODE":                         5,
	"SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"SECURITY_ALT_ID_SOURCE_BELGIAN":                          10,
	"SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"SECURITY_ALT_ID_SOURCE_COMMON":                           12,
	"SECURITY_ALT_ID_SOURCE_DUTCH":                            13,
	"SECURITY_ALT_ID_SOURCE_SICOVAM":                          14,
	"SECURITY_ALT_ID_SOURCE_VALOREN":                          15,
	"SECURITY_ALT_ID_SOURCE_WERTPAPIER":                       16,
	"SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE":                   17,
	"SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL":                    21,
	"SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x SecurityAltIDSourceEnum) String() string {
	return proto.EnumName(SecurityAltIDSourceEnum_name, int32(x))
}

func (SecurityAltIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{114}
}

type LegSecurityAltIDSourceEnum int32

const (
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_UNSPECIFIED                      LegSecurityAltIDSourceEnum = 0
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_CUSIP                            LegSecurityAltIDSourceEnum = 1
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_QUIK                             LegSecurityAltIDSourceEnum = 2
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_SEDOL                            LegSecurityAltIDSourceEnum = 3
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER                      LegSecurityAltIDSourceEnum = 4
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_RIC_CODE                         LegSecurityAltIDSourceEnum = 5
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE                 LegSecurityAltIDSourceEnum = 6
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE                LegSecurityAltIDSourceEnum = 7
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    LegSecurityAltIDSourceEnum = 8
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL                  LegSecurityAltIDSourceEnum = 9
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_BELGIAN                          LegSecurityAltIDSourceEnum = 10
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL                 LegSecurityAltIDSourceEnum = 11
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_COMMON                           LegSecurityAltIDSourceEnum = 12
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_DUTCH                            LegSecurityAltIDSourceEnum = 13
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_SICOVAM                          LegSecurityAltIDSourceEnum = 14
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_VALOREN                          LegSecurityAltIDSourceEnum = 15
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_WERTPAPIER                       LegSecurityAltIDSourceEnum = 16
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE                   LegSecurityAltIDSourceEnum = 17
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION          LegSecurityAltIDSourceEnum = 18
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY LegSecurityAltIDSourceEnum = 19
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT                 LegSecurityAltIDSourceEnum = 20
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL                    LegSecurityAltIDSourceEnum = 21
	LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  LegSecurityAltIDSourceEnum = 22
)

var LegSecurityAltIDSourceEnum_name = map[int32]string{
	0:  "LEG_SECURITY_ALT_ID_SOURCE_UNSPECIFIED",
	1:  "LEG_SECURITY_ALT_ID_SOURCE_CUSIP",
	2:  "LEG_SECURITY_ALT_ID_SOURCE_QUIK",
	3:  "LEG_SECURITY_ALT_ID_SOURCE_SEDOL",
	4:  "LEG_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER",
	5:  "LEG_SECURITY_ALT_ID_SOURCE_RIC_CODE",
	6:  "LEG_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "LEG_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "LEG_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "LEG_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "LEG_SECURITY_ALT_ID_SOURCE_BELGIAN",
	11: "LEG_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "LEG_SECURITY_ALT_ID_SOURCE_COMMON",
	13: "LEG_SECURITY_ALT_ID_SOURCE_DUTCH",
	14: "LEG_SECURITY_ALT_ID_SOURCE_SICOVAM",
	15: "LEG_SECURITY_ALT_ID_SOURCE_VALOREN",
	16: "LEG_SECURITY_ALT_ID_SOURCE_WERTPAPIER",
	17: "LEG_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE",
	18: "LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "LEG_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "LEG_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT",
	21: "LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL",
	22: "LEG_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var LegSecurityAltIDSourceEnum_value = map[string]int32{
	"LEG_SECURITY_ALT_ID_SOURCE_UNSPECIFIED":                      0,
	"LEG_SECURITY_ALT_ID_SOURCE_CUSIP":                            1,
	"LEG_SECURITY_ALT_ID_SOURCE_QUIK":                             2,
	"LEG_SECURITY_ALT_ID_SOURCE_SEDOL":                            3,
	"LEG_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER":                      4,
	"LEG_SECURITY_ALT_ID_SOURCE_RIC_CODE":                         5,
	"LEG_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"LEG_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"LEG_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"LEG_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"LEG_SECURITY_ALT_ID_SOURCE_BELGIAN":                          10,
	"LEG_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"LEG_SECURITY_ALT_ID_SOURCE_COMMON":                           12,
	"LEG_SECURITY_ALT_ID_SOURCE_DUTCH":                            13,
	"LEG_SECURITY_ALT_ID_SOURCE_SICOVAM":                          14,
	"LEG_SECURITY_ALT_ID_SOURCE_VALOREN":                          15,
	"LEG_SECURITY_ALT_ID_SOURCE_WERTPAPIER":                       16,
	"LEG_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE":                   17,
	"LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"LEG_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"LEG_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"LEG_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL":                    21,
	"LEG_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x LegSecurityAltIDSourceEnum) String() string {
	return proto.EnumName(LegSecurityAltIDSourceEnum_name, int32(x))
}

func (LegSecurityAltIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{115}
}

type UnderlyingSecurityAltIDSourceEnum int32

const (
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_UNSPECIFIED                      UnderlyingSecurityAltIDSourceEnum = 0
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_CUSIP                            UnderlyingSecurityAltIDSourceEnum = 1
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_QUIK                             UnderlyingSecurityAltIDSourceEnum = 2
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_SEDOL                            UnderlyingSecurityAltIDSourceEnum = 3
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER                      UnderlyingSecurityAltIDSourceEnum = 4
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_RIC_CODE                         UnderlyingSecurityAltIDSourceEnum = 5
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE                 UnderlyingSecurityAltIDSourceEnum = 6
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE                UnderlyingSecurityAltIDSourceEnum = 7
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    UnderlyingSecurityAltIDSourceEnum = 8
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL                  UnderlyingSecurityAltIDSourceEnum = 9
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_BELGIAN                          UnderlyingSecurityAltIDSourceEnum = 10
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL                 UnderlyingSecurityAltIDSourceEnum = 11
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_COMMON                           UnderlyingSecurityAltIDSourceEnum = 12
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_DUTCH                            UnderlyingSecurityAltIDSourceEnum = 13
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_SICOVAM                          UnderlyingSecurityAltIDSourceEnum = 14
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_VALOREN                          UnderlyingSecurityAltIDSourceEnum = 15
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_WERTPAPIER                       UnderlyingSecurityAltIDSourceEnum = 16
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE                   UnderlyingSecurityAltIDSourceEnum = 17
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION          UnderlyingSecurityAltIDSourceEnum = 18
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY UnderlyingSecurityAltIDSourceEnum = 19
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT                 UnderlyingSecurityAltIDSourceEnum = 20
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL                    UnderlyingSecurityAltIDSourceEnum = 21
	UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  UnderlyingSecurityAltIDSourceEnum = 22
)

var UnderlyingSecurityAltIDSourceEnum_name = map[int32]string{
	0:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_UNSPECIFIED",
	1:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_CUSIP",
	2:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_QUIK",
	3:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_SEDOL",
	4:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER",
	5:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_RIC_CODE",
	6:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "UNDERLYING_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "UNDERLYING_SECURITY_ALT_ID_SOURCE_BELGIAN",
	11: "UNDERLYING_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "UNDERLYING_SECURITY_ALT_ID_SOURCE_COMMON",
	13: "UNDERLYING_SECURITY_ALT_ID_SOURCE_DUTCH",
	14: "UNDERLYING_SECURITY_ALT_ID_SOURCE_SICOVAM",
	15: "UNDERLYING_SECURITY_ALT_ID_SOURCE_VALOREN",
	16: "UNDERLYING_SECURITY_ALT_ID_SOURCE_WERTPAPIER",
	17: "UNDERLYING_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE",
	18: "UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "UNDERLYING_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "UNDERLYING_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT",
	21: "UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL",
	22: "UNDERLYING_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var UnderlyingSecurityAltIDSourceEnum_value = map[string]int32{
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_UNSPECIFIED":                      0,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_CUSIP":                            1,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_QUIK":                             2,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_SEDOL":                            3,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER":                      4,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_RIC_CODE":                         5,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_BELGIAN":                          10,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_COMMON":                           12,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_DUTCH":                            13,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_SICOVAM":                          14,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_VALOREN":                          15,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_WERTPAPIER":                       16,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE":                   17,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL":                    21,
	"UNDERLYING_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x UnderlyingSecurityAltIDSourceEnum) String() string {
	return proto.EnumName(UnderlyingSecurityAltIDSourceEnum_name, int32(x))
}

func (UnderlyingSecurityAltIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{116}
}

type InstrAttribTypeEnum int32

const (
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_UNSPECIFIED                                 InstrAttribTypeEnum = 0
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_CALLABLE                                    InstrAttribTypeEnum = 1
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE               InstrAttribTypeEnum = 2
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE                     InstrAttribTypeEnum = 3
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_COUPON_PERIOD                               InstrAttribTypeEnum = 4
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY                        InstrAttribTypeEnum = 5
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE                 InstrAttribTypeEnum = 6
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_FLAT                                        InstrAttribTypeEnum = 7
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INDEXED                                     InstrAttribTypeEnum = 8
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INTEREST_BEARING                            InstrAttribTypeEnum = 9
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_IN_DEFAULT                                  InstrAttribTypeEnum = 10
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT                            InstrAttribTypeEnum = 11
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS                        InstrAttribTypeEnum = 12
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT                     InstrAttribTypeEnum = 13
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE               InstrAttribTypeEnum = 14
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_PRE_REFUNDED                                InstrAttribTypeEnum = 15
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_STEPPED_COUPON                              InstrAttribTypeEnum = 16
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX          InstrAttribTypeEnum = 17
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_TAXABLE                                     InstrAttribTypeEnum = 18
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_TEXT                                        InstrAttribTypeEnum = 19
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_UNRATED                                     InstrAttribTypeEnum = 20
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_VARIABLE_RATE                               InstrAttribTypeEnum = 21
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_WHEN                                        InstrAttribTypeEnum = 22
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_ZERO_COUPON                                 InstrAttribTypeEnum = 23
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY               InstrAttribTypeEnum = 24
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY InstrAttribTypeEnum = 25
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR                      InstrAttribTypeEnum = 26
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR                        InstrAttribTypeEnum = 27
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION                  InstrAttribTypeEnum = 28
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE                     InstrAttribTypeEnum = 29
	InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR                         InstrAttribTypeEnum = 30
)

var InstrAttribTypeEnum_name = map[int32]string{
	0:  "INSTR_ATTRIB_TYPE_UNSPECIFIED",
	1:  "INSTR_ATTRIB_TYPE_CALLABLE",
	2:  "INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE",
	3:  "INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE",
	4:  "INSTR_ATTRIB_TYPE_COUPON_PERIOD",
	5:  "INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY",
	6:  "INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE",
	7:  "INSTR_ATTRIB_TYPE_FLAT",
	8:  "INSTR_ATTRIB_TYPE_INDEXED",
	9:  "INSTR_ATTRIB_TYPE_INTEREST_BEARING",
	10: "INSTR_ATTRIB_TYPE_IN_DEFAULT",
	11: "INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT",
	12: "INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS",
	13: "INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT",
	14: "INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE",
	15: "INSTR_ATTRIB_TYPE_PRE_REFUNDED",
	16: "INSTR_ATTRIB_TYPE_STEPPED_COUPON",
	17: "INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX",
	18: "INSTR_ATTRIB_TYPE_TAXABLE",
	19: "INSTR_ATTRIB_TYPE_TEXT",
	20: "INSTR_ATTRIB_TYPE_UNRATED",
	21: "INSTR_ATTRIB_TYPE_VARIABLE_RATE",
	22: "INSTR_ATTRIB_TYPE_WHEN",
	23: "INSTR_ATTRIB_TYPE_ZERO_COUPON",
	24: "INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY",
	25: "INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY",
	26: "INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR",
	27: "INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR",
	28: "INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION",
	29: "INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE",
	30: "INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR",
}

var InstrAttribTypeEnum_value = map[string]int32{
	"INSTR_ATTRIB_TYPE_UNSPECIFIED":                                 0,
	"INSTR_ATTRIB_TYPE_CALLABLE":                                    1,
	"INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE":               2,
	"INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE":                     3,
	"INSTR_ATTRIB_TYPE_COUPON_PERIOD":                               4,
	"INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY":                        5,
	"INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE":                 6,
	"INSTR_ATTRIB_TYPE_FLAT":                                        7,
	"INSTR_ATTRIB_TYPE_INDEXED":                                     8,
	"INSTR_ATTRIB_TYPE_INTEREST_BEARING":                            9,
	"INSTR_ATTRIB_TYPE_IN_DEFAULT":                                  10,
	"INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT":                            11,
	"INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS":                        12,
	"INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT":                     13,
	"INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE":               14,
	"INSTR_ATTRIB_TYPE_PRE_REFUNDED":                                15,
	"INSTR_ATTRIB_TYPE_STEPPED_COUPON":                              16,
	"INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX":          17,
	"INSTR_ATTRIB_TYPE_TAXABLE":                                     18,
	"INSTR_ATTRIB_TYPE_TEXT":                                        19,
	"INSTR_ATTRIB_TYPE_UNRATED":                                     20,
	"INSTR_ATTRIB_TYPE_VARIABLE_RATE":                               21,
	"INSTR_ATTRIB_TYPE_WHEN":                                        22,
	"INSTR_ATTRIB_TYPE_ZERO_COUPON":                                 23,
	"INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY":               24,
	"INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY": 25,
	"INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR":                      26,
	"INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR":                        27,
	"INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION":                  28,
	"INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE":                     29,
	"INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR":                         30,
}

func (x InstrAttribTypeEnum) String() string {
	return proto.EnumName(InstrAttribTypeEnum_name, int32(x))
}

func (InstrAttribTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{117}
}

type SettlInstSourceEnum int32

const (
	SettlInstSourceEnum_SETTL_INST_SOURCE_UNSPECIFIED   SettlInstSourceEnum = 0
	SettlInstSourceEnum_SETTL_INST_SOURCE_BROKER_CREDIT SettlInstSourceEnum = 1
	SettlInstSourceEnum_SETTL_INST_SOURCE_INSTITUTION   SettlInstSourceEnum = 2
	SettlInstSourceEnum_SETTL_INST_SOURCE_INVESTOR      SettlInstSourceEnum = 3
)

var SettlInstSourceEnum_name = map[int32]string{
	0: "SETTL_INST_SOURCE_UNSPECIFIED",
	1: "SETTL_INST_SOURCE_BROKER_CREDIT",
	2: "SETTL_INST_SOURCE_INSTITUTION",
	3: "SETTL_INST_SOURCE_INVESTOR",
}

var SettlInstSourceEnum_value = map[string]int32{
	"SETTL_INST_SOURCE_UNSPECIFIED":   0,
	"SETTL_INST_SOURCE_BROKER_CREDIT": 1,
	"SETTL_INST_SOURCE_INSTITUTION":   2,
	"SETTL_INST_SOURCE_INVESTOR":      3,
}

func (x SettlInstSourceEnum) String() string {
	return proto.EnumName(SettlInstSourceEnum_name, int32(x))
}

func (SettlInstSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{118}
}

type DlvyInstTypeEnum int32

const (
	DlvyInstTypeEnum_DLVY_INST_TYPE_UNSPECIFIED DlvyInstTypeEnum = 0
	DlvyInstTypeEnum_DLVY_INST_TYPE_CASH        DlvyInstTypeEnum = 1
	DlvyInstTypeEnum_DLVY_INST_TYPE_SECURITIES  DlvyInstTypeEnum = 2
)

var DlvyInstTypeEnum_name = map[int32]string{
	0: "DLVY_INST_TYPE_UNSPECIFIED",
	1: "DLVY_INST_TYPE_CASH",
	2: "DLVY_INST_TYPE_SECURITIES",
}

var DlvyInstTypeEnum_value = map[string]int32{
	"DLVY_INST_TYPE_UNSPECIFIED": 0,
	"DLVY_INST_TYPE_CASH":        1,
	"DLVY_INST_TYPE_SECURITIES":  2,
}

func (x DlvyInstTypeEnum) String() string {
	return proto.EnumName(DlvyInstTypeEnum_name, int32(x))
}

func (DlvyInstTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{119}
}

type SettlPartySubIDTypeEnum int32

const (
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_UNSPECIFIED                         SettlPartySubIDTypeEnum = 0
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_APPLICATION                         SettlPartySubIDTypeEnum = 1
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_BIC                                 SettlPartySubIDTypeEnum = 2
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   SettlPartySubIDTypeEnum = 3
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 SettlPartySubIDTypeEnum = 4
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_CONTACT_NAME                        SettlPartySubIDTypeEnum = 5
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          SettlPartySubIDTypeEnum = 6
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_DEPARTMENT                          SettlPartySubIDTypeEnum = 7
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       SettlPartySubIDTypeEnum = 8
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_FAX_NUMBER                          SettlPartySubIDTypeEnum = 9
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_FIRM                                SettlPartySubIDTypeEnum = 10
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             SettlPartySubIDTypeEnum = 11
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   SettlPartySubIDTypeEnum = 12
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_LOCATION_DESK                       SettlPartySubIDTypeEnum = 13
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_PERSON                              SettlPartySubIDTypeEnum = 14
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        SettlPartySubIDTypeEnum = 15
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               SettlPartySubIDTypeEnum = 16
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      SettlPartySubIDTypeEnum = 17
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  SettlPartySubIDTypeEnum = 18
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION SettlPartySubIDTypeEnum = 19
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   SettlPartySubIDTypeEnum = 20
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 SettlPartySubIDTypeEnum = 21
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   SettlPartySubIDTypeEnum = 22
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             SettlPartySubIDTypeEnum = 23
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           SettlPartySubIDTypeEnum = 24
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_SYSTEM                              SettlPartySubIDTypeEnum = 25
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        SettlPartySubIDTypeEnum = 26
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  SettlPartySubIDTypeEnum = 27
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               SettlPartySubIDTypeEnum = 28
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     SettlPartySubIDTypeEnum = 29
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_LOCATION                            SettlPartySubIDTypeEnum = 30
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_MARKET_MAKER                        SettlPartySubIDTypeEnum = 31
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 SettlPartySubIDTypeEnum = 32
	SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        SettlPartySubIDTypeEnum = 33
)

var SettlPartySubIDTypeEnum_name = map[int32]string{
	0:  "SETTL_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "SETTL_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "SETTL_PARTY_SUB_ID_TYPE_BIC",
	3:  "SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "SETTL_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "SETTL_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "SETTL_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "SETTL_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "SETTL_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "SETTL_PARTY_SUB_ID_TYPE_FIRM",
	11: "SETTL_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "SETTL_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "SETTL_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "SETTL_PARTY_SUB_ID_TYPE_PERSON",
	15: "SETTL_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "SETTL_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "SETTL_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "SETTL_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "SETTL_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "SETTL_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "SETTL_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "SETTL_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "SETTL_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "SETTL_PARTY_SUB_ID_TYPE_LOCATION",
	31: "SETTL_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "SETTL_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "SETTL_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var SettlPartySubIDTypeEnum_value = map[string]int32{
	"SETTL_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"SETTL_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"SETTL_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"SETTL_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"SETTL_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"SETTL_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"SETTL_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"SETTL_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"SETTL_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"SETTL_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"SETTL_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"SETTL_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"SETTL_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"SETTL_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"SETTL_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"SETTL_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"SETTL_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"SETTL_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"SETTL_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"SETTL_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"SETTL_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"SETTL_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"SETTL_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"SETTL_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"SETTL_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"SETTL_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"SETTL_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"SETTL_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"SETTL_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"SETTL_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x SettlPartySubIDTypeEnum) String() string {
	return proto.EnumName(SettlPartySubIDTypeEnum_name, int32(x))
}

func (SettlPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{120}
}

type PartySubIDTypeEnum int32

const (
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_UNSPECIFIED                         PartySubIDTypeEnum = 0
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_APPLICATION                         PartySubIDTypeEnum = 1
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_BIC                                 PartySubIDTypeEnum = 2
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   PartySubIDTypeEnum = 3
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 PartySubIDTypeEnum = 4
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_CONTACT_NAME                        PartySubIDTypeEnum = 5
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          PartySubIDTypeEnum = 6
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_DEPARTMENT                          PartySubIDTypeEnum = 7
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       PartySubIDTypeEnum = 8
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_FAX_NUMBER                          PartySubIDTypeEnum = 9
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_FIRM                                PartySubIDTypeEnum = 10
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             PartySubIDTypeEnum = 11
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   PartySubIDTypeEnum = 12
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_LOCATION_DESK                       PartySubIDTypeEnum = 13
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_PERSON                              PartySubIDTypeEnum = 14
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        PartySubIDTypeEnum = 15
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               PartySubIDTypeEnum = 16
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      PartySubIDTypeEnum = 17
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  PartySubIDTypeEnum = 18
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION PartySubIDTypeEnum = 19
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   PartySubIDTypeEnum = 20
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 PartySubIDTypeEnum = 21
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   PartySubIDTypeEnum = 22
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             PartySubIDTypeEnum = 23
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           PartySubIDTypeEnum = 24
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_SYSTEM                              PartySubIDTypeEnum = 25
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        PartySubIDTypeEnum = 26
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  PartySubIDTypeEnum = 27
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               PartySubIDTypeEnum = 28
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     PartySubIDTypeEnum = 29
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_LOCATION                            PartySubIDTypeEnum = 30
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_MARKET_MAKER                        PartySubIDTypeEnum = 31
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 PartySubIDTypeEnum = 32
	PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        PartySubIDTypeEnum = 33
)

var PartySubIDTypeEnum_name = map[int32]string{
	0:  "PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "PARTY_SUB_ID_TYPE_BIC",
	3:  "PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "PARTY_SUB_ID_TYPE_FIRM",
	11: "PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "PARTY_SUB_ID_TYPE_PERSON",
	15: "PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "PARTY_SUB_ID_TYPE_SYSTEM",
	26: "PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "PARTY_SUB_ID_TYPE_LOCATION",
	31: "PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var PartySubIDTypeEnum_value = map[string]int32{
	"PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"PARTY_SUB_ID_TYPE_BIC":                                 2,
	"PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"PARTY_SUB_ID_TYPE_FIRM":                                10,
	"PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"PARTY_SUB_ID_TYPE_PERSON":                              14,
	"PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x PartySubIDTypeEnum) String() string {
	return proto.EnumName(PartySubIDTypeEnum_name, int32(x))
}

func (PartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{121}
}

type NestedPartySubIDTypeEnum int32

const (
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_UNSPECIFIED                         NestedPartySubIDTypeEnum = 0
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_APPLICATION                         NestedPartySubIDTypeEnum = 1
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_BIC                                 NestedPartySubIDTypeEnum = 2
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   NestedPartySubIDTypeEnum = 3
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 NestedPartySubIDTypeEnum = 4
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_CONTACT_NAME                        NestedPartySubIDTypeEnum = 5
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          NestedPartySubIDTypeEnum = 6
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_DEPARTMENT                          NestedPartySubIDTypeEnum = 7
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       NestedPartySubIDTypeEnum = 8
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_FAX_NUMBER                          NestedPartySubIDTypeEnum = 9
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_FIRM                                NestedPartySubIDTypeEnum = 10
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             NestedPartySubIDTypeEnum = 11
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   NestedPartySubIDTypeEnum = 12
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_LOCATION_DESK                       NestedPartySubIDTypeEnum = 13
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_PERSON                              NestedPartySubIDTypeEnum = 14
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        NestedPartySubIDTypeEnum = 15
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               NestedPartySubIDTypeEnum = 16
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      NestedPartySubIDTypeEnum = 17
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  NestedPartySubIDTypeEnum = 18
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION NestedPartySubIDTypeEnum = 19
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   NestedPartySubIDTypeEnum = 20
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 NestedPartySubIDTypeEnum = 21
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   NestedPartySubIDTypeEnum = 22
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             NestedPartySubIDTypeEnum = 23
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           NestedPartySubIDTypeEnum = 24
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_SYSTEM                              NestedPartySubIDTypeEnum = 25
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        NestedPartySubIDTypeEnum = 26
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  NestedPartySubIDTypeEnum = 27
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               NestedPartySubIDTypeEnum = 28
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     NestedPartySubIDTypeEnum = 29
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_LOCATION                            NestedPartySubIDTypeEnum = 30
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_MARKET_MAKER                        NestedPartySubIDTypeEnum = 31
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 NestedPartySubIDTypeEnum = 32
	NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        NestedPartySubIDTypeEnum = 33
)

var NestedPartySubIDTypeEnum_name = map[int32]string{
	0:  "NESTED_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "NESTED_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "NESTED_PARTY_SUB_ID_TYPE_BIC",
	3:  "NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "NESTED_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "NESTED_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "NESTED_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "NESTED_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "NESTED_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "NESTED_PARTY_SUB_ID_TYPE_FIRM",
	11: "NESTED_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "NESTED_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "NESTED_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "NESTED_PARTY_SUB_ID_TYPE_PERSON",
	15: "NESTED_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "NESTED_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "NESTED_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "NESTED_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "NESTED_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "NESTED_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "NESTED_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "NESTED_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "NESTED_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "NESTED_PARTY_SUB_ID_TYPE_LOCATION",
	31: "NESTED_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "NESTED_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "NESTED_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var NestedPartySubIDTypeEnum_value = map[string]int32{
	"NESTED_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"NESTED_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"NESTED_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"NESTED_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"NESTED_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"NESTED_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"NESTED_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"NESTED_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"NESTED_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"NESTED_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"NESTED_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"NESTED_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"NESTED_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"NESTED_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"NESTED_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"NESTED_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"NESTED_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"NESTED_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"NESTED_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"NESTED_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"NESTED_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"NESTED_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"NESTED_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"NESTED_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"NESTED_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"NESTED_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"NESTED_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"NESTED_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"NESTED_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"NESTED_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x NestedPartySubIDTypeEnum) String() string {
	return proto.EnumName(NestedPartySubIDTypeEnum_name, int32(x))
}

func (NestedPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{122}
}

type Nested2PartySubIDTypeEnum int32

const (
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_UNSPECIFIED                         Nested2PartySubIDTypeEnum = 0
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_APPLICATION                         Nested2PartySubIDTypeEnum = 1
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_BIC                                 Nested2PartySubIDTypeEnum = 2
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   Nested2PartySubIDTypeEnum = 3
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 Nested2PartySubIDTypeEnum = 4
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_CONTACT_NAME                        Nested2PartySubIDTypeEnum = 5
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          Nested2PartySubIDTypeEnum = 6
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_DEPARTMENT                          Nested2PartySubIDTypeEnum = 7
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       Nested2PartySubIDTypeEnum = 8
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_FAX_NUMBER                          Nested2PartySubIDTypeEnum = 9
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_FIRM                                Nested2PartySubIDTypeEnum = 10
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             Nested2PartySubIDTypeEnum = 11
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   Nested2PartySubIDTypeEnum = 12
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_LOCATION_DESK                       Nested2PartySubIDTypeEnum = 13
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_PERSON                              Nested2PartySubIDTypeEnum = 14
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_PHONE_NUMBER                        Nested2PartySubIDTypeEnum = 15
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               Nested2PartySubIDTypeEnum = 16
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      Nested2PartySubIDTypeEnum = 17
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  Nested2PartySubIDTypeEnum = 18
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION Nested2PartySubIDTypeEnum = 19
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   Nested2PartySubIDTypeEnum = 20
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 Nested2PartySubIDTypeEnum = 21
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   Nested2PartySubIDTypeEnum = 22
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             Nested2PartySubIDTypeEnum = 23
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           Nested2PartySubIDTypeEnum = 24
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_SYSTEM                              Nested2PartySubIDTypeEnum = 25
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_TELEX_NUMBER                        Nested2PartySubIDTypeEnum = 26
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  Nested2PartySubIDTypeEnum = 27
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               Nested2PartySubIDTypeEnum = 28
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     Nested2PartySubIDTypeEnum = 29
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_LOCATION                            Nested2PartySubIDTypeEnum = 30
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_MARKET_MAKER                        Nested2PartySubIDTypeEnum = 31
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 Nested2PartySubIDTypeEnum = 32
	Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        Nested2PartySubIDTypeEnum = 33
)

var Nested2PartySubIDTypeEnum_name = map[int32]string{
	0:  "NESTED2PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "NESTED2PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "NESTED2PARTY_SUB_ID_TYPE_BIC",
	3:  "NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "NESTED2PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "NESTED2PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "NESTED2PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "NESTED2PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "NESTED2PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "NESTED2PARTY_SUB_ID_TYPE_FIRM",
	11: "NESTED2PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "NESTED2PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "NESTED2PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "NESTED2PARTY_SUB_ID_TYPE_PERSON",
	15: "NESTED2PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "NESTED2PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "NESTED2PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "NESTED2PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "NESTED2PARTY_SUB_ID_TYPE_SYSTEM",
	26: "NESTED2PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "NESTED2PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "NESTED2PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "NESTED2PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "NESTED2PARTY_SUB_ID_TYPE_LOCATION",
	31: "NESTED2PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "NESTED2PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "NESTED2PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var Nested2PartySubIDTypeEnum_value = map[string]int32{
	"NESTED2PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"NESTED2PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"NESTED2PARTY_SUB_ID_TYPE_BIC":                                 2,
	"NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"NESTED2PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"NESTED2PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"NESTED2PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"NESTED2PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"NESTED2PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"NESTED2PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"NESTED2PARTY_SUB_ID_TYPE_FIRM":                                10,
	"NESTED2PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"NESTED2PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"NESTED2PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"NESTED2PARTY_SUB_ID_TYPE_PERSON":                              14,
	"NESTED2PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"NESTED2PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"NESTED2PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"NESTED2PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"NESTED2PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"NESTED2PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"NESTED2PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"NESTED2PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"NESTED2PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"NESTED2PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"NESTED2PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"NESTED2PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"NESTED2PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"NESTED2PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"NESTED2PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"NESTED2PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x Nested2PartySubIDTypeEnum) String() string {
	return proto.EnumName(Nested2PartySubIDTypeEnum_name, int32(x))
}

func (Nested2PartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{123}
}

type Nested3PartySubIDTypeEnum int32

const (
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_UNSPECIFIED                         Nested3PartySubIDTypeEnum = 0
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_APPLICATION                         Nested3PartySubIDTypeEnum = 1
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_BIC                                 Nested3PartySubIDTypeEnum = 2
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   Nested3PartySubIDTypeEnum = 3
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 Nested3PartySubIDTypeEnum = 4
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_CONTACT_NAME                        Nested3PartySubIDTypeEnum = 5
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          Nested3PartySubIDTypeEnum = 6
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_DEPARTMENT                          Nested3PartySubIDTypeEnum = 7
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       Nested3PartySubIDTypeEnum = 8
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_FAX_NUMBER                          Nested3PartySubIDTypeEnum = 9
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_FIRM                                Nested3PartySubIDTypeEnum = 10
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             Nested3PartySubIDTypeEnum = 11
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   Nested3PartySubIDTypeEnum = 12
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_LOCATION_DESK                       Nested3PartySubIDTypeEnum = 13
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_PERSON                              Nested3PartySubIDTypeEnum = 14
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_PHONE_NUMBER                        Nested3PartySubIDTypeEnum = 15
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               Nested3PartySubIDTypeEnum = 16
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      Nested3PartySubIDTypeEnum = 17
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  Nested3PartySubIDTypeEnum = 18
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION Nested3PartySubIDTypeEnum = 19
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   Nested3PartySubIDTypeEnum = 20
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 Nested3PartySubIDTypeEnum = 21
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   Nested3PartySubIDTypeEnum = 22
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             Nested3PartySubIDTypeEnum = 23
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           Nested3PartySubIDTypeEnum = 24
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_SYSTEM                              Nested3PartySubIDTypeEnum = 25
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_TELEX_NUMBER                        Nested3PartySubIDTypeEnum = 26
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  Nested3PartySubIDTypeEnum = 27
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               Nested3PartySubIDTypeEnum = 28
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     Nested3PartySubIDTypeEnum = 29
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_LOCATION                            Nested3PartySubIDTypeEnum = 30
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_MARKET_MAKER                        Nested3PartySubIDTypeEnum = 31
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 Nested3PartySubIDTypeEnum = 32
	Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        Nested3PartySubIDTypeEnum = 33
)

var Nested3PartySubIDTypeEnum_name = map[int32]string{
	0:  "NESTED3PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "NESTED3PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "NESTED3PARTY_SUB_ID_TYPE_BIC",
	3:  "NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "NESTED3PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "NESTED3PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "NESTED3PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "NESTED3PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "NESTED3PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "NESTED3PARTY_SUB_ID_TYPE_FIRM",
	11: "NESTED3PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "NESTED3PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "NESTED3PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "NESTED3PARTY_SUB_ID_TYPE_PERSON",
	15: "NESTED3PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "NESTED3PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "NESTED3PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "NESTED3PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "NESTED3PARTY_SUB_ID_TYPE_SYSTEM",
	26: "NESTED3PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "NESTED3PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "NESTED3PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "NESTED3PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "NESTED3PARTY_SUB_ID_TYPE_LOCATION",
	31: "NESTED3PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "NESTED3PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "NESTED3PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var Nested3PartySubIDTypeEnum_value = map[string]int32{
	"NESTED3PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"NESTED3PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"NESTED3PARTY_SUB_ID_TYPE_BIC":                                 2,
	"NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"NESTED3PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"NESTED3PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"NESTED3PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"NESTED3PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"NESTED3PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"NESTED3PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"NESTED3PARTY_SUB_ID_TYPE_FIRM":                                10,
	"NESTED3PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"NESTED3PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"NESTED3PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"NESTED3PARTY_SUB_ID_TYPE_PERSON":                              14,
	"NESTED3PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"NESTED3PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"NESTED3PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"NESTED3PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"NESTED3PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"NESTED3PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"NESTED3PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"NESTED3PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"NESTED3PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"NESTED3PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"NESTED3PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"NESTED3PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"NESTED3PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"NESTED3PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"NESTED3PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"NESTED3PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x Nested3PartySubIDTypeEnum) String() string {
	return proto.EnumName(Nested3PartySubIDTypeEnum_name, int32(x))
}

func (Nested3PartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{124}
}

type StrategyParameterTypeEnum int32

const (
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_UNSPECIFIED           StrategyParameterTypeEnum = 0
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_AMT                   StrategyParameterTypeEnum = 1
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_BOOLEAN               StrategyParameterTypeEnum = 2
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_CHAR                  StrategyParameterTypeEnum = 3
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_CURRENCY              StrategyParameterTypeEnum = 4
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_DATA                  StrategyParameterTypeEnum = 5
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_EXCHANGE              StrategyParameterTypeEnum = 6
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_FLOAT                 StrategyParameterTypeEnum = 7
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_INT                   StrategyParameterTypeEnum = 8
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_LENGTH                StrategyParameterTypeEnum = 9
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_LOCAL_MKT_DATE        StrategyParameterTypeEnum = 10
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_MONTH_YEAR            StrategyParameterTypeEnum = 11
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_MULTIPLE_CHAR_VALUE   StrategyParameterTypeEnum = 12
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_NUM_IN_GROUP          StrategyParameterTypeEnum = 13
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_PERCENTAGE            StrategyParameterTypeEnum = 14
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_PRICE                 StrategyParameterTypeEnum = 15
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_PRICE_OFFSET          StrategyParameterTypeEnum = 16
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_QTY                   StrategyParameterTypeEnum = 17
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_SEQ_NUM               StrategyParameterTypeEnum = 18
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_STRING                StrategyParameterTypeEnum = 19
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_TAG_NUM               StrategyParameterTypeEnum = 20
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_UTC_DATE_ONLY         StrategyParameterTypeEnum = 21
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_UTC_TIMESTAMP         StrategyParameterTypeEnum = 22
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_UTC_TIME_ONLY         StrategyParameterTypeEnum = 23
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_MULTIPLE_STRING_VALUE StrategyParameterTypeEnum = 24
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_COUNTRY               StrategyParameterTypeEnum = 25
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_LANGUAGE              StrategyParameterTypeEnum = 26
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_TENOR                 StrategyParameterTypeEnum = 27
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_TZ_TIMESTAMP          StrategyParameterTypeEnum = 28
	StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_TZ_TIME_ONLY          StrategyParameterTypeEnum = 29
)

var StrategyParameterTypeEnum_name = map[int32]string{
	0:  "STRATEGY_PARAMETER_TYPE_UNSPECIFIED",
	1:  "STRATEGY_PARAMETER_TYPE_AMT",
	2:  "STRATEGY_PARAMETER_TYPE_BOOLEAN",
	3:  "STRATEGY_PARAMETER_TYPE_CHAR",
	4:  "STRATEGY_PARAMETER_TYPE_CURRENCY",
	5:  "STRATEGY_PARAMETER_TYPE_DATA",
	6:  "STRATEGY_PARAMETER_TYPE_EXCHANGE",
	7:  "STRATEGY_PARAMETER_TYPE_FLOAT",
	8:  "STRATEGY_PARAMETER_TYPE_INT",
	9:  "STRATEGY_PARAMETER_TYPE_LENGTH",
	10: "STRATEGY_PARAMETER_TYPE_LOCAL_MKT_DATE",
	11: "STRATEGY_PARAMETER_TYPE_MONTH_YEAR",
	12: "STRATEGY_PARAMETER_TYPE_MULTIPLE_CHAR_VALUE",
	13: "STRATEGY_PARAMETER_TYPE_NUM_IN_GROUP",
	14: "STRATEGY_PARAMETER_TYPE_PERCENTAGE",
	15: "STRATEGY_PARAMETER_TYPE_PRICE",
	16: "STRATEGY_PARAMETER_TYPE_PRICE_OFFSET",
	17: "STRATEGY_PARAMETER_TYPE_QTY",
	18: "STRATEGY_PARAMETER_TYPE_SEQ_NUM",
	19: "STRATEGY_PARAMETER_TYPE_STRING",
	20: "STRATEGY_PARAMETER_TYPE_TAG_NUM",
	21: "STRATEGY_PARAMETER_TYPE_UTC_DATE_ONLY",
	22: "STRATEGY_PARAMETER_TYPE_UTC_TIMESTAMP",
	23: "STRATEGY_PARAMETER_TYPE_UTC_TIME_ONLY",
	24: "STRATEGY_PARAMETER_TYPE_MULTIPLE_STRING_VALUE",
	25: "STRATEGY_PARAMETER_TYPE_COUNTRY",
	26: "STRATEGY_PARAMETER_TYPE_LANGUAGE",
	27: "STRATEGY_PARAMETER_TYPE_TENOR",
	28: "STRATEGY_PARAMETER_TYPE_TZ_TIMESTAMP",
	29: "STRATEGY_PARAMETER_TYPE_TZ_TIME_ONLY",
}

var StrategyParameterTypeEnum_value = map[string]int32{
	"STRATEGY_PARAMETER_TYPE_UNSPECIFIED":           0,
	"STRATEGY_PARAMETER_TYPE_AMT":                   1,
	"STRATEGY_PARAMETER_TYPE_BOOLEAN":               2,
	"STRATEGY_PARAMETER_TYPE_CHAR":                  3,
	"STRATEGY_PARAMETER_TYPE_CURRENCY":              4,
	"STRATEGY_PARAMETER_TYPE_DATA":                  5,
	"STRATEGY_PARAMETER_TYPE_EXCHANGE":              6,
	"STRATEGY_PARAMETER_TYPE_FLOAT":                 7,
	"STRATEGY_PARAMETER_TYPE_INT":                   8,
	"STRATEGY_PARAMETER_TYPE_LENGTH":                9,
	"STRATEGY_PARAMETER_TYPE_LOCAL_MKT_DATE":        10,
	"STRATEGY_PARAMETER_TYPE_MONTH_YEAR":            11,
	"STRATEGY_PARAMETER_TYPE_MULTIPLE_CHAR_VALUE":   12,
	"STRATEGY_PARAMETER_TYPE_NUM_IN_GROUP":          13,
	"STRATEGY_PARAMETER_TYPE_PERCENTAGE":            14,
	"STRATEGY_PARAMETER_TYPE_PRICE":                 15,
	"STRATEGY_PARAMETER_TYPE_PRICE_OFFSET":          16,
	"STRATEGY_PARAMETER_TYPE_QTY":                   17,
	"STRATEGY_PARAMETER_TYPE_SEQ_NUM":               18,
	"STRATEGY_PARAMETER_TYPE_STRING":                19,
	"STRATEGY_PARAMETER_TYPE_TAG_NUM":               20,
	"STRATEGY_PARAMETER_TYPE_UTC_DATE_ONLY":         21,
	"STRATEGY_PARAMETER_TYPE_UTC_TIMESTAMP":         22,
	"STRATEGY_PARAMETER_TYPE_UTC_TIME_ONLY":         23,
	"STRATEGY_PARAMETER_TYPE_MULTIPLE_STRING_VALUE": 24,
	"STRATEGY_PARAMETER_TYPE_COUNTRY":               25,
	"STRATEGY_PARAMETER_TYPE_LANGUAGE":              26,
	"STRATEGY_PARAMETER_TYPE_TENOR":                 27,
	"STRATEGY_PARAMETER_TYPE_TZ_TIMESTAMP":          28,
	"STRATEGY_PARAMETER_TYPE_TZ_TIME_ONLY":          29,
}

func (x StrategyParameterTypeEnum) String() string {
	return proto.EnumName(StrategyParameterTypeEnum_name, int32(x))
}

func (StrategyParameterTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{125}
}

type InstrumentPartyIDSourceEnum int32

const (
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED                             InstrumentPartyIDSourceEnum = 0
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              InstrumentPartyIDSourceEnum = 1
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              InstrumentPartyIDSourceEnum = 2
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_BIC                                     InstrumentPartyIDSourceEnum = 3
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     InstrumentPartyIDSourceEnum = 4
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      InstrumentPartyIDSourceEnum = 5
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        InstrumentPartyIDSourceEnum = 6
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      InstrumentPartyIDSourceEnum = 7
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            InstrumentPartyIDSourceEnum = 8
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY                             InstrumentPartyIDSourceEnum = 9
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              InstrumentPartyIDSourceEnum = 10
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           InstrumentPartyIDSourceEnum = 11
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  InstrumentPartyIDSourceEnum = 12
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER InstrumentPartyIDSourceEnum = 13
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            InstrumentPartyIDSourceEnum = 14
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               InstrumentPartyIDSourceEnum = 15
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT                          InstrumentPartyIDSourceEnum = 16
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM                            InstrumentPartyIDSourceEnum = 17
	InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_MIC                                     InstrumentPartyIDSourceEnum = 18
)

var InstrumentPartyIDSourceEnum_name = map[int32]string{
	0:  "INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "INSTRUMENT_PARTY_ID_SOURCE_BIC",
	4:  "INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY",
	10: "INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "INSTRUMENT_PARTY_ID_SOURCE_MIC",
}

var InstrumentPartyIDSourceEnum_value = map[string]int32{
	"INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"INSTRUMENT_PARTY_ID_SOURCE_BIC":                                     3,
	"INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"INSTRUMENT_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x InstrumentPartyIDSourceEnum) String() string {
	return proto.EnumName(InstrumentPartyIDSourceEnum_name, int32(x))
}

func (InstrumentPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{126}
}

type InstrumentPartyRoleEnum int32

const (
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_UNSPECIFIED                           InstrumentPartyRoleEnum = 0
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT                      InstrumentPartyRoleEnum = 1
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM                         InstrumentPartyRoleEnum = 2
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CLIENT_ID                             InstrumentPartyRoleEnum = 3
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM                  InstrumentPartyRoleEnum = 4
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM                           InstrumentPartyRoleEnum = 5
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           InstrumentPartyRoleEnum = 6
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM                         InstrumentPartyRoleEnum = 7
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM                        InstrumentPartyRoleEnum = 8
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM                      InstrumentPartyRoleEnum = 9
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER                      InstrumentPartyRoleEnum = 10
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                InstrumentPartyRoleEnum = 11
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  InstrumentPartyRoleEnum = 12
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM                      InstrumentPartyRoleEnum = 13
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INVESTOR_ID                           InstrumentPartyRoleEnum = 14
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_LOCATE                                InstrumentPartyRoleEnum = 15
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM                InstrumentPartyRoleEnum = 16
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER              InstrumentPartyRoleEnum = 17
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION                   InstrumentPartyRoleEnum = 18
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM                       InstrumentPartyRoleEnum = 19
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                InstrumentPartyRoleEnum = 20
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_AGENT                                 InstrumentPartyRoleEnum = 21
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_BENEFICIARY                           InstrumentPartyRoleEnum = 22
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_BUYER                                 InstrumentPartyRoleEnum = 23
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION                 InstrumentPartyRoleEnum = 24
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID                    InstrumentPartyRoleEnum = 25
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER                         InstrumentPartyRoleEnum = 26
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER                  InstrumentPartyRoleEnum = 27
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   InstrumentPartyRoleEnum = 28
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CUSTODIAN                             InstrumentPartyRoleEnum = 29
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT                      InstrumentPartyRoleEnum = 30
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER                       InstrumentPartyRoleEnum = 31
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXCHANGE                              InstrumentPartyRoleEnum = 32
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY                      InstrumentPartyRoleEnum = 33
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INTERMEDIARY                          InstrumentPartyRoleEnum = 34
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER                    InstrumentPartyRoleEnum = 35
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT                      InstrumentPartyRoleEnum = 36
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY                       InstrumentPartyRoleEnum = 37
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN                         InstrumentPartyRoleEnum = 38
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM                      InstrumentPartyRoleEnum = 39
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER                    InstrumentPartyRoleEnum = 40
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE                       InstrumentPartyRoleEnum = 41
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               InstrumentPartyRoleEnum = 42
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                InstrumentPartyRoleEnum = 43
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               InstrumentPartyRoleEnum = 44
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              InstrumentPartyRoleEnum = 45
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER                         InstrumentPartyRoleEnum = 46
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT                      InstrumentPartyRoleEnum = 47
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM                          InstrumentPartyRoleEnum = 48
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       InstrumentPartyRoleEnum = 49
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT                       InstrumentPartyRoleEnum = 50
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT                       InstrumentPartyRoleEnum = 51
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION                       InstrumentPartyRoleEnum = 52
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SESSION_ID                            InstrumentPartyRoleEnum = 53
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           InstrumentPartyRoleEnum = 54
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC                       InstrumentPartyRoleEnum = 55
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               InstrumentPartyRoleEnum = 56
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT                         InstrumentPartyRoleEnum = 57
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT                        InstrumentPartyRoleEnum = 58
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             InstrumentPartyRoleEnum = 59
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         InstrumentPartyRoleEnum = 60
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE InstrumentPartyRoleEnum = 61
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_DESK_ID                               InstrumentPartyRoleEnum = 62
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE                       InstrumentPartyRoleEnum = 63
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              InstrumentPartyRoleEnum = 64
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              InstrumentPartyRoleEnum = 65
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM                       InstrumentPartyRoleEnum = 66
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_LOCATION_ID                           InstrumentPartyRoleEnum = 67
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          InstrumentPartyRoleEnum = 68
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET                    InstrumentPartyRoleEnum = 69
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_MARKET_MAKER                          InstrumentPartyRoleEnum = 70
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         InstrumentPartyRoleEnum = 71
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR                      InstrumentPartyRoleEnum = 72
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET                      InstrumentPartyRoleEnum = 73
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY                InstrumentPartyRoleEnum = 74
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR                     InstrumentPartyRoleEnum = 75
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER               InstrumentPartyRoleEnum = 76
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY                     InstrumentPartyRoleEnum = 77
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID                    InstrumentPartyRoleEnum = 78
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_PRIME_BROKER                          InstrumentPartyRoleEnum = 79
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM                         InstrumentPartyRoleEnum = 80
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       InstrumentPartyRoleEnum = 81
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      InstrumentPartyRoleEnum = 82
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT                      InstrumentPartyRoleEnum = 83
	InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    InstrumentPartyRoleEnum = 84
)

var InstrumentPartyRoleEnum_name = map[int32]string{
	0:  "INSTRUMENT_PARTY_ROLE_UNSPECIFIED",
	1:  "INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "INSTRUMENT_PARTY_ROLE_CLEARING_FIRM",
	3:  "INSTRUMENT_PARTY_ROLE_CLIENT_ID",
	4:  "INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "INSTRUMENT_PARTY_ROLE_CONTRA_FIRM",
	6:  "INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "INSTRUMENT_PARTY_ROLE_ENTERING_FIRM",
	8:  "INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM",
	9:  "INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER",
	11: "INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM",
	14: "INSTRUMENT_PARTY_ROLE_INVESTOR_ID",
	15: "INSTRUMENT_PARTY_ROLE_LOCATE",
	16: "INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM",
	20: "INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "INSTRUMENT_PARTY_ROLE_AGENT",
	22: "INSTRUMENT_PARTY_ROLE_BENEFICIARY",
	23: "INSTRUMENT_PARTY_ROLE_BUYER",
	24: "INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "INSTRUMENT_PARTY_ROLE_CONTRA_TRADER",
	27: "INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "INSTRUMENT_PARTY_ROLE_CUSTODIAN",
	30: "INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "INSTRUMENT_PARTY_ROLE_ENTERING_TRADER",
	32: "INSTRUMENT_PARTY_ROLE_EXCHANGE",
	33: "INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY",
	34: "INSTRUMENT_PARTY_ROLE_INTERMEDIARY",
	35: "INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT",
	37: "INSTRUMENT_PARTY_ROLE_REGULATORY_BODY",
	38: "INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN",
	39: "INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER",
	41: "INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "INSTRUMENT_PARTY_ROLE_ASSET_MANAGER",
	47: "INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM",
	49: "INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "INSTRUMENT_PARTY_ROLE_SENDER_LOCATION",
	53: "INSTRUMENT_PARTY_ROLE_SESSION_ID",
	54: "INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC",
	56: "INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "INSTRUMENT_PARTY_ROLE_ENTERING_UNIT",
	58: "INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT",
	59: "INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "INSTRUMENT_PARTY_ROLE_DESK_ID",
	63: "INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE",
	64: "INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM",
	67: "INSTRUMENT_PARTY_ROLE_LOCATION_ID",
	68: "INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "INSTRUMENT_PARTY_ROLE_MARKET_MAKER",
	71: "INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "INSTRUMENT_PARTY_ROLE_REGULATED_MARKET",
	74: "INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "INSTRUMENT_PARTY_ROLE_PRIME_BROKER",
	80: "INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM",
	81: "INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var InstrumentPartyRoleEnum_value = map[string]int32{
	"INSTRUMENT_PARTY_ROLE_UNSPECIFIED":                           0,
	"INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"INSTRUMENT_PARTY_ROLE_CLEARING_FIRM":                         2,
	"INSTRUMENT_PARTY_ROLE_CLIENT_ID":                             3,
	"INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"INSTRUMENT_PARTY_ROLE_CONTRA_FIRM":                           5,
	"INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"INSTRUMENT_PARTY_ROLE_ENTERING_FIRM":                         7,
	"INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"INSTRUMENT_PARTY_ROLE_INVESTOR_ID":                           14,
	"INSTRUMENT_PARTY_ROLE_LOCATE":                                15,
	"INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"INSTRUMENT_PARTY_ROLE_AGENT":                                 21,
	"INSTRUMENT_PARTY_ROLE_BENEFICIARY":                           22,
	"INSTRUMENT_PARTY_ROLE_BUYER":                                 23,
	"INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"INSTRUMENT_PARTY_ROLE_CONTRA_TRADER":                         26,
	"INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"INSTRUMENT_PARTY_ROLE_CUSTODIAN":                             29,
	"INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"INSTRUMENT_PARTY_ROLE_ENTERING_TRADER":                       31,
	"INSTRUMENT_PARTY_ROLE_EXCHANGE":                              32,
	"INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"INSTRUMENT_PARTY_ROLE_INTERMEDIARY":                          34,
	"INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"INSTRUMENT_PARTY_ROLE_REGULATORY_BODY":                       37,
	"INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"INSTRUMENT_PARTY_ROLE_ASSET_MANAGER":                         46,
	"INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"INSTRUMENT_PARTY_ROLE_SENDER_LOCATION":                       52,
	"INSTRUMENT_PARTY_ROLE_SESSION_ID":                            53,
	"INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"INSTRUMENT_PARTY_ROLE_ENTERING_UNIT":                         57,
	"INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"INSTRUMENT_PARTY_ROLE_DESK_ID":                               62,
	"INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"INSTRUMENT_PARTY_ROLE_LOCATION_ID":                           67,
	"INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"INSTRUMENT_PARTY_ROLE_MARKET_MAKER":                          70,
	"INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"INSTRUMENT_PARTY_ROLE_REGULATED_MARKET":                      73,
	"INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"INSTRUMENT_PARTY_ROLE_PRIME_BROKER":                          79,
	"INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x InstrumentPartyRoleEnum) String() string {
	return proto.EnumName(InstrumentPartyRoleEnum_name, int32(x))
}

func (InstrumentPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{127}
}

type InstrumentPartySubIDTypeEnum int32

const (
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED                         InstrumentPartySubIDTypeEnum = 0
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION                         InstrumentPartySubIDTypeEnum = 1
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC                                 InstrumentPartySubIDTypeEnum = 2
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   InstrumentPartySubIDTypeEnum = 3
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 InstrumentPartySubIDTypeEnum = 4
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME                        InstrumentPartySubIDTypeEnum = 5
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          InstrumentPartySubIDTypeEnum = 6
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT                          InstrumentPartySubIDTypeEnum = 7
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       InstrumentPartySubIDTypeEnum = 8
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER                          InstrumentPartySubIDTypeEnum = 9
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM                                InstrumentPartySubIDTypeEnum = 10
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             InstrumentPartySubIDTypeEnum = 11
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   InstrumentPartySubIDTypeEnum = 12
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK                       InstrumentPartySubIDTypeEnum = 13
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON                              InstrumentPartySubIDTypeEnum = 14
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        InstrumentPartySubIDTypeEnum = 15
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               InstrumentPartySubIDTypeEnum = 16
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      InstrumentPartySubIDTypeEnum = 17
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  InstrumentPartySubIDTypeEnum = 18
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION InstrumentPartySubIDTypeEnum = 19
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   InstrumentPartySubIDTypeEnum = 20
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 InstrumentPartySubIDTypeEnum = 21
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   InstrumentPartySubIDTypeEnum = 22
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             InstrumentPartySubIDTypeEnum = 23
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           InstrumentPartySubIDTypeEnum = 24
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM                              InstrumentPartySubIDTypeEnum = 25
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        InstrumentPartySubIDTypeEnum = 26
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  InstrumentPartySubIDTypeEnum = 27
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               InstrumentPartySubIDTypeEnum = 28
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     InstrumentPartySubIDTypeEnum = 29
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION                            InstrumentPartySubIDTypeEnum = 30
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER                        InstrumentPartySubIDTypeEnum = 31
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 InstrumentPartySubIDTypeEnum = 32
	InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        InstrumentPartySubIDTypeEnum = 33
)

var InstrumentPartySubIDTypeEnum_name = map[int32]string{
	0:  "INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "INSTRUMENT_PARTY_SUB_ID_TYPE_BIC",
	3:  "INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM",
	11: "INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON",
	15: "INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION",
	31: "INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var InstrumentPartySubIDTypeEnum_value = map[string]int32{
	"INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x InstrumentPartySubIDTypeEnum) String() string {
	return proto.EnumName(InstrumentPartySubIDTypeEnum_name, int32(x))
}

func (InstrumentPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{128}
}

type UnderlyingInstrumentPartyIDSourceEnum int32

const (
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED                             UnderlyingInstrumentPartyIDSourceEnum = 0
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              UnderlyingInstrumentPartyIDSourceEnum = 1
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              UnderlyingInstrumentPartyIDSourceEnum = 2
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_BIC                                     UnderlyingInstrumentPartyIDSourceEnum = 3
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     UnderlyingInstrumentPartyIDSourceEnum = 4
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      UnderlyingInstrumentPartyIDSourceEnum = 5
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        UnderlyingInstrumentPartyIDSourceEnum = 6
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      UnderlyingInstrumentPartyIDSourceEnum = 7
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            UnderlyingInstrumentPartyIDSourceEnum = 8
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY                             UnderlyingInstrumentPartyIDSourceEnum = 9
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              UnderlyingInstrumentPartyIDSourceEnum = 10
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           UnderlyingInstrumentPartyIDSourceEnum = 11
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  UnderlyingInstrumentPartyIDSourceEnum = 12
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER UnderlyingInstrumentPartyIDSourceEnum = 13
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            UnderlyingInstrumentPartyIDSourceEnum = 14
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               UnderlyingInstrumentPartyIDSourceEnum = 15
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT                          UnderlyingInstrumentPartyIDSourceEnum = 16
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM                            UnderlyingInstrumentPartyIDSourceEnum = 17
	UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MIC                                     UnderlyingInstrumentPartyIDSourceEnum = 18
)

var UnderlyingInstrumentPartyIDSourceEnum_name = map[int32]string{
	0:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_BIC",
	4:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY",
	10: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MIC",
}

var UnderlyingInstrumentPartyIDSourceEnum_value = map[string]int32{
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_BIC":                                     3,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x UnderlyingInstrumentPartyIDSourceEnum) String() string {
	return proto.EnumName(UnderlyingInstrumentPartyIDSourceEnum_name, int32(x))
}

func (UnderlyingInstrumentPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{129}
}

type UnderlyingInstrumentPartyRoleEnum int32

const (
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_UNSPECIFIED                           UnderlyingInstrumentPartyRoleEnum = 0
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT                      UnderlyingInstrumentPartyRoleEnum = 1
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM                         UnderlyingInstrumentPartyRoleEnum = 2
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CLIENT_ID                             UnderlyingInstrumentPartyRoleEnum = 3
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM                  UnderlyingInstrumentPartyRoleEnum = 4
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM                           UnderlyingInstrumentPartyRoleEnum = 5
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           UnderlyingInstrumentPartyRoleEnum = 6
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM                         UnderlyingInstrumentPartyRoleEnum = 7
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM                        UnderlyingInstrumentPartyRoleEnum = 8
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM                      UnderlyingInstrumentPartyRoleEnum = 9
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER                      UnderlyingInstrumentPartyRoleEnum = 10
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                UnderlyingInstrumentPartyRoleEnum = 11
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  UnderlyingInstrumentPartyRoleEnum = 12
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM                      UnderlyingInstrumentPartyRoleEnum = 13
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTOR_ID                           UnderlyingInstrumentPartyRoleEnum = 14
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATE                                UnderlyingInstrumentPartyRoleEnum = 15
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM                UnderlyingInstrumentPartyRoleEnum = 16
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER              UnderlyingInstrumentPartyRoleEnum = 17
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION                   UnderlyingInstrumentPartyRoleEnum = 18
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM                       UnderlyingInstrumentPartyRoleEnum = 19
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                UnderlyingInstrumentPartyRoleEnum = 20
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_AGENT                                 UnderlyingInstrumentPartyRoleEnum = 21
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_BENEFICIARY                           UnderlyingInstrumentPartyRoleEnum = 22
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_BUYER                                 UnderlyingInstrumentPartyRoleEnum = 23
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION                 UnderlyingInstrumentPartyRoleEnum = 24
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID                    UnderlyingInstrumentPartyRoleEnum = 25
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER                         UnderlyingInstrumentPartyRoleEnum = 26
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER                  UnderlyingInstrumentPartyRoleEnum = 27
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   UnderlyingInstrumentPartyRoleEnum = 28
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTODIAN                             UnderlyingInstrumentPartyRoleEnum = 29
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT                      UnderlyingInstrumentPartyRoleEnum = 30
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER                       UnderlyingInstrumentPartyRoleEnum = 31
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXCHANGE                              UnderlyingInstrumentPartyRoleEnum = 32
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY                      UnderlyingInstrumentPartyRoleEnum = 33
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERMEDIARY                          UnderlyingInstrumentPartyRoleEnum = 34
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER                    UnderlyingInstrumentPartyRoleEnum = 35
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT                      UnderlyingInstrumentPartyRoleEnum = 36
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY                       UnderlyingInstrumentPartyRoleEnum = 37
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN                         UnderlyingInstrumentPartyRoleEnum = 38
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM                      UnderlyingInstrumentPartyRoleEnum = 39
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER                    UnderlyingInstrumentPartyRoleEnum = 40
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE                       UnderlyingInstrumentPartyRoleEnum = 41
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               UnderlyingInstrumentPartyRoleEnum = 42
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                UnderlyingInstrumentPartyRoleEnum = 43
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               UnderlyingInstrumentPartyRoleEnum = 44
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              UnderlyingInstrumentPartyRoleEnum = 45
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER                         UnderlyingInstrumentPartyRoleEnum = 46
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT                      UnderlyingInstrumentPartyRoleEnum = 47
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM                          UnderlyingInstrumentPartyRoleEnum = 48
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       UnderlyingInstrumentPartyRoleEnum = 49
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT                       UnderlyingInstrumentPartyRoleEnum = 50
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT                       UnderlyingInstrumentPartyRoleEnum = 51
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION                       UnderlyingInstrumentPartyRoleEnum = 52
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SESSION_ID                            UnderlyingInstrumentPartyRoleEnum = 53
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           UnderlyingInstrumentPartyRoleEnum = 54
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC                       UnderlyingInstrumentPartyRoleEnum = 55
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               UnderlyingInstrumentPartyRoleEnum = 56
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT                         UnderlyingInstrumentPartyRoleEnum = 57
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT                        UnderlyingInstrumentPartyRoleEnum = 58
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             UnderlyingInstrumentPartyRoleEnum = 59
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         UnderlyingInstrumentPartyRoleEnum = 60
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE UnderlyingInstrumentPartyRoleEnum = 61
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_DESK_ID                               UnderlyingInstrumentPartyRoleEnum = 62
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE                       UnderlyingInstrumentPartyRoleEnum = 63
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              UnderlyingInstrumentPartyRoleEnum = 64
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              UnderlyingInstrumentPartyRoleEnum = 65
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM                       UnderlyingInstrumentPartyRoleEnum = 66
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATION_ID                           UnderlyingInstrumentPartyRoleEnum = 67
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          UnderlyingInstrumentPartyRoleEnum = 68
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET                    UnderlyingInstrumentPartyRoleEnum = 69
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_MAKER                          UnderlyingInstrumentPartyRoleEnum = 70
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         UnderlyingInstrumentPartyRoleEnum = 71
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR                      UnderlyingInstrumentPartyRoleEnum = 72
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET                      UnderlyingInstrumentPartyRoleEnum = 73
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY                UnderlyingInstrumentPartyRoleEnum = 74
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR                     UnderlyingInstrumentPartyRoleEnum = 75
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER               UnderlyingInstrumentPartyRoleEnum = 76
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY                     UnderlyingInstrumentPartyRoleEnum = 77
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID                    UnderlyingInstrumentPartyRoleEnum = 78
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_PRIME_BROKER                          UnderlyingInstrumentPartyRoleEnum = 79
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM                         UnderlyingInstrumentPartyRoleEnum = 80
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       UnderlyingInstrumentPartyRoleEnum = 81
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      UnderlyingInstrumentPartyRoleEnum = 82
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT                      UnderlyingInstrumentPartyRoleEnum = 83
	UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    UnderlyingInstrumentPartyRoleEnum = 84
)

var UnderlyingInstrumentPartyRoleEnum_name = map[int32]string{
	0:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_UNSPECIFIED",
	1:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM",
	3:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_CLIENT_ID",
	4:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM",
	6:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM",
	8:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM",
	9:  "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER",
	11: "UNDERLYING_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "UNDERLYING_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM",
	14: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTOR_ID",
	15: "UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATE",
	16: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM",
	20: "UNDERLYING_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "UNDERLYING_INSTRUMENT_PARTY_ROLE_AGENT",
	22: "UNDERLYING_INSTRUMENT_PARTY_ROLE_BENEFICIARY",
	23: "UNDERLYING_INSTRUMENT_PARTY_ROLE_BUYER",
	24: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER",
	27: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTODIAN",
	30: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER",
	32: "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXCHANGE",
	33: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY",
	34: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERMEDIARY",
	35: "UNDERLYING_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "UNDERLYING_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT",
	37: "UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY",
	38: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN",
	39: "UNDERLYING_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER",
	41: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER",
	47: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "UNDERLYING_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM",
	49: "UNDERLYING_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION",
	53: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SESSION_ID",
	54: "UNDERLYING_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "UNDERLYING_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC",
	56: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT",
	58: "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT",
	59: "UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "UNDERLYING_INSTRUMENT_PARTY_ROLE_DESK_ID",
	63: "UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE",
	64: "UNDERLYING_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "UNDERLYING_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM",
	67: "UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATION_ID",
	68: "UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_MAKER",
	71: "UNDERLYING_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "UNDERLYING_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET",
	74: "UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "UNDERLYING_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "UNDERLYING_INSTRUMENT_PARTY_ROLE_PRIME_BROKER",
	80: "UNDERLYING_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM",
	81: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var UnderlyingInstrumentPartyRoleEnum_value = map[string]int32{
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_UNSPECIFIED":                           0,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM":                         2,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CLIENT_ID":                             3,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM":                           5,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM":                         7,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTOR_ID":                           14,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATE":                                15,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_AGENT":                                 21,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_BENEFICIARY":                           22,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_BUYER":                                 23,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER":                         26,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTODIAN":                             29,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER":                       31,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXCHANGE":                              32,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERMEDIARY":                          34,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY":                       37,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER":                         46,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION":                       52,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SESSION_ID":                            53,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT":                         57,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_DESK_ID":                               62,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_LOCATION_ID":                           67,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_MARKET_MAKER":                          70,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET":                      73,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_PRIME_BROKER":                          79,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"UNDERLYING_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x UnderlyingInstrumentPartyRoleEnum) String() string {
	return proto.EnumName(UnderlyingInstrumentPartyRoleEnum_name, int32(x))
}

func (UnderlyingInstrumentPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{130}
}

type UnderlyingInstrumentPartySubIDTypeEnum int32

const (
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED                         UnderlyingInstrumentPartySubIDTypeEnum = 0
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION                         UnderlyingInstrumentPartySubIDTypeEnum = 1
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC                                 UnderlyingInstrumentPartySubIDTypeEnum = 2
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   UnderlyingInstrumentPartySubIDTypeEnum = 3
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 UnderlyingInstrumentPartySubIDTypeEnum = 4
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME                        UnderlyingInstrumentPartySubIDTypeEnum = 5
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          UnderlyingInstrumentPartySubIDTypeEnum = 6
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT                          UnderlyingInstrumentPartySubIDTypeEnum = 7
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       UnderlyingInstrumentPartySubIDTypeEnum = 8
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER                          UnderlyingInstrumentPartySubIDTypeEnum = 9
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM                                UnderlyingInstrumentPartySubIDTypeEnum = 10
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             UnderlyingInstrumentPartySubIDTypeEnum = 11
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   UnderlyingInstrumentPartySubIDTypeEnum = 12
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK                       UnderlyingInstrumentPartySubIDTypeEnum = 13
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON                              UnderlyingInstrumentPartySubIDTypeEnum = 14
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        UnderlyingInstrumentPartySubIDTypeEnum = 15
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               UnderlyingInstrumentPartySubIDTypeEnum = 16
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      UnderlyingInstrumentPartySubIDTypeEnum = 17
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  UnderlyingInstrumentPartySubIDTypeEnum = 18
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION UnderlyingInstrumentPartySubIDTypeEnum = 19
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   UnderlyingInstrumentPartySubIDTypeEnum = 20
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 UnderlyingInstrumentPartySubIDTypeEnum = 21
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   UnderlyingInstrumentPartySubIDTypeEnum = 22
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             UnderlyingInstrumentPartySubIDTypeEnum = 23
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           UnderlyingInstrumentPartySubIDTypeEnum = 24
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM                              UnderlyingInstrumentPartySubIDTypeEnum = 25
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        UnderlyingInstrumentPartySubIDTypeEnum = 26
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  UnderlyingInstrumentPartySubIDTypeEnum = 27
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               UnderlyingInstrumentPartySubIDTypeEnum = 28
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     UnderlyingInstrumentPartySubIDTypeEnum = 29
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION                            UnderlyingInstrumentPartySubIDTypeEnum = 30
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER                        UnderlyingInstrumentPartySubIDTypeEnum = 31
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 UnderlyingInstrumentPartySubIDTypeEnum = 32
	UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        UnderlyingInstrumentPartySubIDTypeEnum = 33
)

var UnderlyingInstrumentPartySubIDTypeEnum_name = map[int32]string{
	0:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC",
	3:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM",
	11: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON",
	15: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION",
	31: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var UnderlyingInstrumentPartySubIDTypeEnum_value = map[string]int32{
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x UnderlyingInstrumentPartySubIDTypeEnum) String() string {
	return proto.EnumName(UnderlyingInstrumentPartySubIDTypeEnum_name, int32(x))
}

func (UnderlyingInstrumentPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{131}
}

type DisplayWhenEnum int32

const (
	DisplayWhenEnum_DISPLAY_WHEN_UNSPECIFIED DisplayWhenEnum = 0
	DisplayWhenEnum_DISPLAY_WHEN_EXHAUST     DisplayWhenEnum = 1
	DisplayWhenEnum_DISPLAY_WHEN_IMMEDIATE   DisplayWhenEnum = 2
)

var DisplayWhenEnum_name = map[int32]string{
	0: "DISPLAY_WHEN_UNSPECIFIED",
	1: "DISPLAY_WHEN_EXHAUST",
	2: "DISPLAY_WHEN_IMMEDIATE",
}

var DisplayWhenEnum_value = map[string]int32{
	"DISPLAY_WHEN_UNSPECIFIED": 0,
	"DISPLAY_WHEN_EXHAUST":     1,
	"DISPLAY_WHEN_IMMEDIATE":   2,
}

func (x DisplayWhenEnum) String() string {
	return proto.EnumName(DisplayWhenEnum_name, int32(x))
}

func (DisplayWhenEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{132}
}

type DisplayMethodEnum int32

const (
	DisplayMethodEnum_DISPLAY_METHOD_UNSPECIFIED DisplayMethodEnum = 0
	DisplayMethodEnum_DISPLAY_METHOD_INITIAL     DisplayMethodEnum = 1
	DisplayMethodEnum_DISPLAY_METHOD_NEW         DisplayMethodEnum = 2
	DisplayMethodEnum_DISPLAY_METHOD_RANDOM      DisplayMethodEnum = 3
	DisplayMethodEnum_DISPLAY_METHOD_UNDISCLOSED DisplayMethodEnum = 4
)

var DisplayMethodEnum_name = map[int32]string{
	0: "DISPLAY_METHOD_UNSPECIFIED",
	1: "DISPLAY_METHOD_INITIAL",
	2: "DISPLAY_METHOD_NEW",
	3: "DISPLAY_METHOD_RANDOM",
	4: "DISPLAY_METHOD_UNDISCLOSED",
}

var DisplayMethodEnum_value = map[string]int32{
	"DISPLAY_METHOD_UNSPECIFIED": 0,
	"DISPLAY_METHOD_INITIAL":     1,
	"DISPLAY_METHOD_NEW":         2,
	"DISPLAY_METHOD_RANDOM":      3,
	"DISPLAY_METHOD_UNDISCLOSED": 4,
}

func (x DisplayMethodEnum) String() string {
	return proto.EnumName(DisplayMethodEnum_name, int32(x))
}

func (DisplayMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{133}
}

type TriggerTypeEnum int32

const (
	TriggerTypeEnum_TRIGGER_TYPE_UNSPECIFIED               TriggerTypeEnum = 0
	TriggerTypeEnum_TRIGGER_TYPE_NEXT_AUCTION              TriggerTypeEnum = 1
	TriggerTypeEnum_TRIGGER_TYPE_PARTIAL_EXECUTION         TriggerTypeEnum = 2
	TriggerTypeEnum_TRIGGER_TYPE_PRICE_MOVEMENT            TriggerTypeEnum = 3
	TriggerTypeEnum_TRIGGER_TYPE_SPECIFIED_TRADING_SESSION TriggerTypeEnum = 4
)

var TriggerTypeEnum_name = map[int32]string{
	0: "TRIGGER_TYPE_UNSPECIFIED",
	1: "TRIGGER_TYPE_NEXT_AUCTION",
	2: "TRIGGER_TYPE_PARTIAL_EXECUTION",
	3: "TRIGGER_TYPE_PRICE_MOVEMENT",
	4: "TRIGGER_TYPE_SPECIFIED_TRADING_SESSION",
}

var TriggerTypeEnum_value = map[string]int32{
	"TRIGGER_TYPE_UNSPECIFIED":               0,
	"TRIGGER_TYPE_NEXT_AUCTION":              1,
	"TRIGGER_TYPE_PARTIAL_EXECUTION":         2,
	"TRIGGER_TYPE_PRICE_MOVEMENT":            3,
	"TRIGGER_TYPE_SPECIFIED_TRADING_SESSION": 4,
}

func (x TriggerTypeEnum) String() string {
	return proto.EnumName(TriggerTypeEnum_name, int32(x))
}

func (TriggerTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{134}
}

type TriggerActionEnum int32

const (
	TriggerActionEnum_TRIGGER_ACTION_UNSPECIFIED TriggerActionEnum = 0
	TriggerActionEnum_TRIGGER_ACTION_ACTIVATE    TriggerActionEnum = 1
	TriggerActionEnum_TRIGGER_ACTION_CANCEL      TriggerActionEnum = 2
	TriggerActionEnum_TRIGGER_ACTION_MODIFY      TriggerActionEnum = 3
)

var TriggerActionEnum_name = map[int32]string{
	0: "TRIGGER_ACTION_UNSPECIFIED",
	1: "TRIGGER_ACTION_ACTIVATE",
	2: "TRIGGER_ACTION_CANCEL",
	3: "TRIGGER_ACTION_MODIFY",
}

var TriggerActionEnum_value = map[string]int32{
	"TRIGGER_ACTION_UNSPECIFIED": 0,
	"TRIGGER_ACTION_ACTIVATE":    1,
	"TRIGGER_ACTION_CANCEL":      2,
	"TRIGGER_ACTION_MODIFY":      3,
}

func (x TriggerActionEnum) String() string {
	return proto.EnumName(TriggerActionEnum_name, int32(x))
}

func (TriggerActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{135}
}

type TriggerSecurityIDSourceEnum int32

const (
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_UNSPECIFIED                      TriggerSecurityIDSourceEnum = 0
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_CUSIP                            TriggerSecurityIDSourceEnum = 1
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_QUIK                             TriggerSecurityIDSourceEnum = 2
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_SEDOL                            TriggerSecurityIDSourceEnum = 3
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_ISIN_NUMBER                      TriggerSecurityIDSourceEnum = 4
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_RIC_CODE                         TriggerSecurityIDSourceEnum = 5
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 TriggerSecurityIDSourceEnum = 6
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                TriggerSecurityIDSourceEnum = 7
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    TriggerSecurityIDSourceEnum = 8
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  TriggerSecurityIDSourceEnum = 9
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_BELGIAN                          TriggerSecurityIDSourceEnum = 10
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 TriggerSecurityIDSourceEnum = 11
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_COMMON                           TriggerSecurityIDSourceEnum = 12
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_DUTCH                            TriggerSecurityIDSourceEnum = 13
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_SICOVAM                          TriggerSecurityIDSourceEnum = 14
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_VALOREN                          TriggerSecurityIDSourceEnum = 15
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_WERTPAPIER                       TriggerSecurityIDSourceEnum = 16
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_CLEARING_HOUSE                   TriggerSecurityIDSourceEnum = 17
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          TriggerSecurityIDSourceEnum = 18
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY TriggerSecurityIDSourceEnum = 19
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 TriggerSecurityIDSourceEnum = 20
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_URL                    TriggerSecurityIDSourceEnum = 21
	TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  TriggerSecurityIDSourceEnum = 22
)

var TriggerSecurityIDSourceEnum_name = map[int32]string{
	0:  "TRIGGER_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "TRIGGER_SECURITY_ID_SOURCE_CUSIP",
	2:  "TRIGGER_SECURITY_ID_SOURCE_QUIK",
	3:  "TRIGGER_SECURITY_ID_SOURCE_SEDOL",
	4:  "TRIGGER_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "TRIGGER_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "TRIGGER_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "TRIGGER_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "TRIGGER_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "TRIGGER_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "TRIGGER_SECURITY_ID_SOURCE_BELGIAN",
	11: "TRIGGER_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "TRIGGER_SECURITY_ID_SOURCE_COMMON",
	13: "TRIGGER_SECURITY_ID_SOURCE_DUTCH",
	14: "TRIGGER_SECURITY_ID_SOURCE_SICOVAM",
	15: "TRIGGER_SECURITY_ID_SOURCE_VALOREN",
	16: "TRIGGER_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "TRIGGER_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "TRIGGER_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "TRIGGER_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "TRIGGER_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var TriggerSecurityIDSourceEnum_value = map[string]int32{
	"TRIGGER_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"TRIGGER_SECURITY_ID_SOURCE_CUSIP":                            1,
	"TRIGGER_SECURITY_ID_SOURCE_QUIK":                             2,
	"TRIGGER_SECURITY_ID_SOURCE_SEDOL":                            3,
	"TRIGGER_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"TRIGGER_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"TRIGGER_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"TRIGGER_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"TRIGGER_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"TRIGGER_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"TRIGGER_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"TRIGGER_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"TRIGGER_SECURITY_ID_SOURCE_COMMON":                           12,
	"TRIGGER_SECURITY_ID_SOURCE_DUTCH":                            13,
	"TRIGGER_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"TRIGGER_SECURITY_ID_SOURCE_VALOREN":                          15,
	"TRIGGER_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"TRIGGER_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"TRIGGER_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"TRIGGER_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"TRIGGER_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"TRIGGER_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x TriggerSecurityIDSourceEnum) String() string {
	return proto.EnumName(TriggerSecurityIDSourceEnum_name, int32(x))
}

func (TriggerSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{136}
}

type TriggerPriceTypeEnum int32

const (
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_UNSPECIFIED              TriggerPriceTypeEnum = 0
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_BEST_BID                 TriggerPriceTypeEnum = 1
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_BEST_BID_OR_LAST_TRADE   TriggerPriceTypeEnum = 2
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_BEST_MID                 TriggerPriceTypeEnum = 3
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_BEST_OFFER               TriggerPriceTypeEnum = 4
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_BEST_OFFER_OR_LAST_TRADE TriggerPriceTypeEnum = 5
	TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_LAST_TRADE               TriggerPriceTypeEnum = 6
)

var TriggerPriceTypeEnum_name = map[int32]string{
	0: "TRIGGER_PRICE_TYPE_UNSPECIFIED",
	1: "TRIGGER_PRICE_TYPE_BEST_BID",
	2: "TRIGGER_PRICE_TYPE_BEST_BID_OR_LAST_TRADE",
	3: "TRIGGER_PRICE_TYPE_BEST_MID",
	4: "TRIGGER_PRICE_TYPE_BEST_OFFER",
	5: "TRIGGER_PRICE_TYPE_BEST_OFFER_OR_LAST_TRADE",
	6: "TRIGGER_PRICE_TYPE_LAST_TRADE",
}

var TriggerPriceTypeEnum_value = map[string]int32{
	"TRIGGER_PRICE_TYPE_UNSPECIFIED":              0,
	"TRIGGER_PRICE_TYPE_BEST_BID":                 1,
	"TRIGGER_PRICE_TYPE_BEST_BID_OR_LAST_TRADE":   2,
	"TRIGGER_PRICE_TYPE_BEST_MID":                 3,
	"TRIGGER_PRICE_TYPE_BEST_OFFER":               4,
	"TRIGGER_PRICE_TYPE_BEST_OFFER_OR_LAST_TRADE": 5,
	"TRIGGER_PRICE_TYPE_LAST_TRADE":               6,
}

func (x TriggerPriceTypeEnum) String() string {
	return proto.EnumName(TriggerPriceTypeEnum_name, int32(x))
}

func (TriggerPriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{137}
}

type TriggerPriceTypeScopeEnum int32

const (
	TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_UNSPECIFIED TriggerPriceTypeScopeEnum = 0
	TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_GLOBAL      TriggerPriceTypeScopeEnum = 1
	TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_LOCAL       TriggerPriceTypeScopeEnum = 2
	TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_NATIONAL    TriggerPriceTypeScopeEnum = 3
	TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_NONE        TriggerPriceTypeScopeEnum = 4
)

var TriggerPriceTypeScopeEnum_name = map[int32]string{
	0: "TRIGGER_PRICE_TYPE_SCOPE_UNSPECIFIED",
	1: "TRIGGER_PRICE_TYPE_SCOPE_GLOBAL",
	2: "TRIGGER_PRICE_TYPE_SCOPE_LOCAL",
	3: "TRIGGER_PRICE_TYPE_SCOPE_NATIONAL",
	4: "TRIGGER_PRICE_TYPE_SCOPE_NONE",
}

var TriggerPriceTypeScopeEnum_value = map[string]int32{
	"TRIGGER_PRICE_TYPE_SCOPE_UNSPECIFIED": 0,
	"TRIGGER_PRICE_TYPE_SCOPE_GLOBAL":      1,
	"TRIGGER_PRICE_TYPE_SCOPE_LOCAL":       2,
	"TRIGGER_PRICE_TYPE_SCOPE_NATIONAL":    3,
	"TRIGGER_PRICE_TYPE_SCOPE_NONE":        4,
}

func (x TriggerPriceTypeScopeEnum) String() string {
	return proto.EnumName(TriggerPriceTypeScopeEnum_name, int32(x))
}

func (TriggerPriceTypeScopeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{138}
}

type TriggerPriceDirectionEnum int32

const (
	TriggerPriceDirectionEnum_TRIGGER_PRICE_DIRECTION_UNSPECIFIED TriggerPriceDirectionEnum = 0
	TriggerPriceDirectionEnum_TRIGGER_PRICE_DIRECTION_DOWN        TriggerPriceDirectionEnum = 1
	TriggerPriceDirectionEnum_TRIGGER_PRICE_DIRECTION_UP          TriggerPriceDirectionEnum = 2
)

var TriggerPriceDirectionEnum_name = map[int32]string{
	0: "TRIGGER_PRICE_DIRECTION_UNSPECIFIED",
	1: "TRIGGER_PRICE_DIRECTION_DOWN",
	2: "TRIGGER_PRICE_DIRECTION_UP",
}

var TriggerPriceDirectionEnum_value = map[string]int32{
	"TRIGGER_PRICE_DIRECTION_UNSPECIFIED": 0,
	"TRIGGER_PRICE_DIRECTION_DOWN":        1,
	"TRIGGER_PRICE_DIRECTION_UP":          2,
}

func (x TriggerPriceDirectionEnum) String() string {
	return proto.EnumName(TriggerPriceDirectionEnum_name, int32(x))
}

func (TriggerPriceDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{139}
}

type TriggerOrderTypeEnum int32

const (
	TriggerOrderTypeEnum_TRIGGER_ORDER_TYPE_UNSPECIFIED TriggerOrderTypeEnum = 0
	TriggerOrderTypeEnum_TRIGGER_ORDER_TYPE_LIMIT       TriggerOrderTypeEnum = 1
	TriggerOrderTypeEnum_TRIGGER_ORDER_TYPE_MARKET      TriggerOrderTypeEnum = 2
)

var TriggerOrderTypeEnum_name = map[int32]string{
	0: "TRIGGER_ORDER_TYPE_UNSPECIFIED",
	1: "TRIGGER_ORDER_TYPE_LIMIT",
	2: "TRIGGER_ORDER_TYPE_MARKET",
}

var TriggerOrderTypeEnum_value = map[string]int32{
	"TRIGGER_ORDER_TYPE_UNSPECIFIED": 0,
	"TRIGGER_ORDER_TYPE_LIMIT":       1,
	"TRIGGER_ORDER_TYPE_MARKET":      2,
}

func (x TriggerOrderTypeEnum) String() string {
	return proto.EnumName(TriggerOrderTypeEnum_name, int32(x))
}

func (TriggerOrderTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{140}
}

type RootPartyIDSourceEnum int32

const (
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_UNSPECIFIED                             RootPartyIDSourceEnum = 0
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              RootPartyIDSourceEnum = 1
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              RootPartyIDSourceEnum = 2
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_BIC                                     RootPartyIDSourceEnum = 3
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     RootPartyIDSourceEnum = 4
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      RootPartyIDSourceEnum = 5
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        RootPartyIDSourceEnum = 6
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      RootPartyIDSourceEnum = 7
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            RootPartyIDSourceEnum = 8
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_PROPRIETARY                             RootPartyIDSourceEnum = 9
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              RootPartyIDSourceEnum = 10
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           RootPartyIDSourceEnum = 11
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  RootPartyIDSourceEnum = 12
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER RootPartyIDSourceEnum = 13
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            RootPartyIDSourceEnum = 14
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               RootPartyIDSourceEnum = 15
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_CSDPARTICIPANT                          RootPartyIDSourceEnum = 16
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_ISITCACRONYM                            RootPartyIDSourceEnum = 17
	RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_MIC                                     RootPartyIDSourceEnum = 18
)

var RootPartyIDSourceEnum_name = map[int32]string{
	0:  "ROOT_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "ROOT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "ROOT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "ROOT_PARTY_ID_SOURCE_BIC",
	4:  "ROOT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "ROOT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "ROOT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "ROOT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "ROOT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "ROOT_PARTY_ID_SOURCE_PROPRIETARY",
	10: "ROOT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "ROOT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "ROOT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "ROOT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "ROOT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "ROOT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "ROOT_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "ROOT_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "ROOT_PARTY_ID_SOURCE_MIC",
}

var RootPartyIDSourceEnum_value = map[string]int32{
	"ROOT_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"ROOT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"ROOT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"ROOT_PARTY_ID_SOURCE_BIC":                                     3,
	"ROOT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"ROOT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"ROOT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"ROOT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"ROOT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"ROOT_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"ROOT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"ROOT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"ROOT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"ROOT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"ROOT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"ROOT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"ROOT_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"ROOT_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"ROOT_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x RootPartyIDSourceEnum) String() string {
	return proto.EnumName(RootPartyIDSourceEnum_name, int32(x))
}

func (RootPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{141}
}

type RootPartyRoleEnum int32

const (
	RootPartyRoleEnum_ROOT_PARTY_ROLE_UNSPECIFIED                           RootPartyRoleEnum = 0
	RootPartyRoleEnum_ROOT_PARTY_ROLE_BROKER_OF_CREDIT                      RootPartyRoleEnum = 1
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CLEARING_FIRM                         RootPartyRoleEnum = 2
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CLIENT_ID                             RootPartyRoleEnum = 3
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_CLEARING_FIRM                  RootPartyRoleEnum = 4
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_FIRM                           RootPartyRoleEnum = 5
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           RootPartyRoleEnum = 6
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ENTERING_FIRM                         RootPartyRoleEnum = 7
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXECUTING_FIRM                        RootPartyRoleEnum = 8
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXECUTING_SYSTEM                      RootPartyRoleEnum = 9
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXECUTING_TRADER                      RootPartyRoleEnum = 10
	RootPartyRoleEnum_ROOT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                RootPartyRoleEnum = 11
	RootPartyRoleEnum_ROOT_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  RootPartyRoleEnum = 12
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INTRODUCING_FIRM                      RootPartyRoleEnum = 13
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INVESTOR_ID                           RootPartyRoleEnum = 14
	RootPartyRoleEnum_ROOT_PARTY_ROLE_LOCATE                                RootPartyRoleEnum = 15
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ORDER_ORIGINATION_FIRM                RootPartyRoleEnum = 16
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ORDER_ORIGINATION_TRADER              RootPartyRoleEnum = 17
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SETTLEMENT_LOCATION                   RootPartyRoleEnum = 18
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SPONSORING_FIRM                       RootPartyRoleEnum = 19
	RootPartyRoleEnum_ROOT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                RootPartyRoleEnum = 20
	RootPartyRoleEnum_ROOT_PARTY_ROLE_AGENT                                 RootPartyRoleEnum = 21
	RootPartyRoleEnum_ROOT_PARTY_ROLE_BENEFICIARY                           RootPartyRoleEnum = 22
	RootPartyRoleEnum_ROOT_PARTY_ROLE_BUYER                                 RootPartyRoleEnum = 23
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CLEARING_ORGANIZATION                 RootPartyRoleEnum = 24
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_INVESTOR_ID                    RootPartyRoleEnum = 25
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_TRADER                         RootPartyRoleEnum = 26
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CORRESPONDENT_BROKER                  RootPartyRoleEnum = 27
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   RootPartyRoleEnum = 28
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CUSTODIAN                             RootPartyRoleEnum = 29
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CUSTOMER_ACCOUNT                      RootPartyRoleEnum = 30
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ENTERING_TRADER                       RootPartyRoleEnum = 31
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXCHANGE                              RootPartyRoleEnum = 32
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INTERESTED_PARTY                      RootPartyRoleEnum = 33
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INTERMEDIARY                          RootPartyRoleEnum = 34
	RootPartyRoleEnum_ROOT_PARTY_ROLE_LIQUIDITY_PROVIDER                    RootPartyRoleEnum = 35
	RootPartyRoleEnum_ROOT_PARTY_ROLE_POSITION_ACCOUNT                      RootPartyRoleEnum = 36
	RootPartyRoleEnum_ROOT_PARTY_ROLE_REGULATORY_BODY                       RootPartyRoleEnum = 37
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SUB_CUSTODIAN                         RootPartyRoleEnum = 38
	RootPartyRoleEnum_ROOT_PARTY_ROLE_TRANSFER_TO_FIRM                      RootPartyRoleEnum = 39
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INTRODUCING_BROKER                    RootPartyRoleEnum = 40
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_EXCHANGE                       RootPartyRoleEnum = 41
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               RootPartyRoleEnum = 42
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                RootPartyRoleEnum = 43
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               RootPartyRoleEnum = 44
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              RootPartyRoleEnum = 45
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ASSET_MANAGER                         RootPartyRoleEnum = 46
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CLAIMING_ACCOUNT                      RootPartyRoleEnum = 47
	RootPartyRoleEnum_ROOT_PARTY_ROLE_FOREIGN_FIRM                          RootPartyRoleEnum = 48
	RootPartyRoleEnum_ROOT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       RootPartyRoleEnum = 49
	RootPartyRoleEnum_ROOT_PARTY_ROLE_PLEDGEE_ACCOUNT                       RootPartyRoleEnum = 50
	RootPartyRoleEnum_ROOT_PARTY_ROLE_PLEDGOR_ACCOUNT                       RootPartyRoleEnum = 51
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SENDER_LOCATION                       RootPartyRoleEnum = 52
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SESSION_ID                            RootPartyRoleEnum = 53
	RootPartyRoleEnum_ROOT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           RootPartyRoleEnum = 54
	RootPartyRoleEnum_ROOT_PARTY_ROLE_TRADER_MNEMONIC                       RootPartyRoleEnum = 55
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               RootPartyRoleEnum = 56
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ENTERING_UNIT                         RootPartyRoleEnum = 57
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXECUTING_UNIT                        RootPartyRoleEnum = 58
	RootPartyRoleEnum_ROOT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             RootPartyRoleEnum = 59
	RootPartyRoleEnum_ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         RootPartyRoleEnum = 60
	RootPartyRoleEnum_ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE RootPartyRoleEnum = 61
	RootPartyRoleEnum_ROOT_PARTY_ROLE_DESK_ID                               RootPartyRoleEnum = 62
	RootPartyRoleEnum_ROOT_PARTY_ROLE_EXECUTION_VENUE                       RootPartyRoleEnum = 63
	RootPartyRoleEnum_ROOT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              RootPartyRoleEnum = 64
	RootPartyRoleEnum_ROOT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              RootPartyRoleEnum = 65
	RootPartyRoleEnum_ROOT_PARTY_ROLE_INVESTMENT_FIRM                       RootPartyRoleEnum = 66
	RootPartyRoleEnum_ROOT_PARTY_ROLE_LOCATION_ID                           RootPartyRoleEnum = 67
	RootPartyRoleEnum_ROOT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          RootPartyRoleEnum = 68
	RootPartyRoleEnum_ROOT_PARTY_ROLE_MARKET_DATA_MARKET                    RootPartyRoleEnum = 69
	RootPartyRoleEnum_ROOT_PARTY_ROLE_MARKET_MAKER                          RootPartyRoleEnum = 70
	RootPartyRoleEnum_ROOT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         RootPartyRoleEnum = 71
	RootPartyRoleEnum_ROOT_PARTY_ROLE_QUOTE_ORIGINATOR                      RootPartyRoleEnum = 72
	RootPartyRoleEnum_ROOT_PARTY_ROLE_REGULATED_MARKET                      RootPartyRoleEnum = 73
	RootPartyRoleEnum_ROOT_PARTY_ROLE_REPORTING_INTERMEDIARY                RootPartyRoleEnum = 74
	RootPartyRoleEnum_ROOT_PARTY_ROLE_REPORT_ORIGINATOR                     RootPartyRoleEnum = 75
	RootPartyRoleEnum_ROOT_PARTY_ROLE_SYSTEMATIC_INTERNALISER               RootPartyRoleEnum = 76
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ALLOCATION_ENTITY                     RootPartyRoleEnum = 77
	RootPartyRoleEnum_ROOT_PARTY_ROLE_BROKER_CLEARING_ID                    RootPartyRoleEnum = 78
	RootPartyRoleEnum_ROOT_PARTY_ROLE_PRIME_BROKER                          RootPartyRoleEnum = 79
	RootPartyRoleEnum_ROOT_PARTY_ROLE_STEP_OUT_FIRM                         RootPartyRoleEnum = 80
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       RootPartyRoleEnum = 81
	RootPartyRoleEnum_ROOT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      RootPartyRoleEnum = 82
	RootPartyRoleEnum_ROOT_PARTY_ROLE_CLEARING_ACCOUNT                      RootPartyRoleEnum = 83
	RootPartyRoleEnum_ROOT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    RootPartyRoleEnum = 84
)

var RootPartyRoleEnum_name = map[int32]string{
	0:  "ROOT_PARTY_ROLE_UNSPECIFIED",
	1:  "ROOT_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "ROOT_PARTY_ROLE_CLEARING_FIRM",
	3:  "ROOT_PARTY_ROLE_CLIENT_ID",
	4:  "ROOT_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "ROOT_PARTY_ROLE_CONTRA_FIRM",
	6:  "ROOT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "ROOT_PARTY_ROLE_ENTERING_FIRM",
	8:  "ROOT_PARTY_ROLE_EXECUTING_FIRM",
	9:  "ROOT_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "ROOT_PARTY_ROLE_EXECUTING_TRADER",
	11: "ROOT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "ROOT_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "ROOT_PARTY_ROLE_INTRODUCING_FIRM",
	14: "ROOT_PARTY_ROLE_INVESTOR_ID",
	15: "ROOT_PARTY_ROLE_LOCATE",
	16: "ROOT_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "ROOT_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "ROOT_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "ROOT_PARTY_ROLE_SPONSORING_FIRM",
	20: "ROOT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "ROOT_PARTY_ROLE_AGENT",
	22: "ROOT_PARTY_ROLE_BENEFICIARY",
	23: "ROOT_PARTY_ROLE_BUYER",
	24: "ROOT_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "ROOT_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "ROOT_PARTY_ROLE_CONTRA_TRADER",
	27: "ROOT_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "ROOT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "ROOT_PARTY_ROLE_CUSTODIAN",
	30: "ROOT_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "ROOT_PARTY_ROLE_ENTERING_TRADER",
	32: "ROOT_PARTY_ROLE_EXCHANGE",
	33: "ROOT_PARTY_ROLE_INTERESTED_PARTY",
	34: "ROOT_PARTY_ROLE_INTERMEDIARY",
	35: "ROOT_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "ROOT_PARTY_ROLE_POSITION_ACCOUNT",
	37: "ROOT_PARTY_ROLE_REGULATORY_BODY",
	38: "ROOT_PARTY_ROLE_SUB_CUSTODIAN",
	39: "ROOT_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "ROOT_PARTY_ROLE_INTRODUCING_BROKER",
	41: "ROOT_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "ROOT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "ROOT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "ROOT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "ROOT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "ROOT_PARTY_ROLE_ASSET_MANAGER",
	47: "ROOT_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "ROOT_PARTY_ROLE_FOREIGN_FIRM",
	49: "ROOT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "ROOT_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "ROOT_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "ROOT_PARTY_ROLE_SENDER_LOCATION",
	53: "ROOT_PARTY_ROLE_SESSION_ID",
	54: "ROOT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "ROOT_PARTY_ROLE_TRADER_MNEMONIC",
	56: "ROOT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "ROOT_PARTY_ROLE_ENTERING_UNIT",
	58: "ROOT_PARTY_ROLE_EXECUTING_UNIT",
	59: "ROOT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "ROOT_PARTY_ROLE_DESK_ID",
	63: "ROOT_PARTY_ROLE_EXECUTION_VENUE",
	64: "ROOT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "ROOT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "ROOT_PARTY_ROLE_INVESTMENT_FIRM",
	67: "ROOT_PARTY_ROLE_LOCATION_ID",
	68: "ROOT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "ROOT_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "ROOT_PARTY_ROLE_MARKET_MAKER",
	71: "ROOT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "ROOT_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "ROOT_PARTY_ROLE_REGULATED_MARKET",
	74: "ROOT_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "ROOT_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "ROOT_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "ROOT_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "ROOT_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "ROOT_PARTY_ROLE_PRIME_BROKER",
	80: "ROOT_PARTY_ROLE_STEP_OUT_FIRM",
	81: "ROOT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "ROOT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "ROOT_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "ROOT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var RootPartyRoleEnum_value = map[string]int32{
	"ROOT_PARTY_ROLE_UNSPECIFIED":                           0,
	"ROOT_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"ROOT_PARTY_ROLE_CLEARING_FIRM":                         2,
	"ROOT_PARTY_ROLE_CLIENT_ID":                             3,
	"ROOT_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"ROOT_PARTY_ROLE_CONTRA_FIRM":                           5,
	"ROOT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"ROOT_PARTY_ROLE_ENTERING_FIRM":                         7,
	"ROOT_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"ROOT_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"ROOT_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"ROOT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"ROOT_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"ROOT_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"ROOT_PARTY_ROLE_INVESTOR_ID":                           14,
	"ROOT_PARTY_ROLE_LOCATE":                                15,
	"ROOT_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"ROOT_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"ROOT_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"ROOT_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"ROOT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"ROOT_PARTY_ROLE_AGENT":                                 21,
	"ROOT_PARTY_ROLE_BENEFICIARY":                           22,
	"ROOT_PARTY_ROLE_BUYER":                                 23,
	"ROOT_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"ROOT_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"ROOT_PARTY_ROLE_CONTRA_TRADER":                         26,
	"ROOT_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"ROOT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"ROOT_PARTY_ROLE_CUSTODIAN":                             29,
	"ROOT_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"ROOT_PARTY_ROLE_ENTERING_TRADER":                       31,
	"ROOT_PARTY_ROLE_EXCHANGE":                              32,
	"ROOT_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"ROOT_PARTY_ROLE_INTERMEDIARY":                          34,
	"ROOT_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"ROOT_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"ROOT_PARTY_ROLE_REGULATORY_BODY":                       37,
	"ROOT_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"ROOT_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"ROOT_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"ROOT_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"ROOT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"ROOT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"ROOT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"ROOT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"ROOT_PARTY_ROLE_ASSET_MANAGER":                         46,
	"ROOT_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"ROOT_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"ROOT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"ROOT_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"ROOT_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"ROOT_PARTY_ROLE_SENDER_LOCATION":                       52,
	"ROOT_PARTY_ROLE_SESSION_ID":                            53,
	"ROOT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"ROOT_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"ROOT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"ROOT_PARTY_ROLE_ENTERING_UNIT":                         57,
	"ROOT_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"ROOT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"ROOT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"ROOT_PARTY_ROLE_DESK_ID":                               62,
	"ROOT_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"ROOT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"ROOT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"ROOT_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"ROOT_PARTY_ROLE_LOCATION_ID":                           67,
	"ROOT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"ROOT_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"ROOT_PARTY_ROLE_MARKET_MAKER":                          70,
	"ROOT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"ROOT_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"ROOT_PARTY_ROLE_REGULATED_MARKET":                      73,
	"ROOT_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"ROOT_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"ROOT_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"ROOT_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"ROOT_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"ROOT_PARTY_ROLE_PRIME_BROKER":                          79,
	"ROOT_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"ROOT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"ROOT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"ROOT_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"ROOT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x RootPartyRoleEnum) String() string {
	return proto.EnumName(RootPartyRoleEnum_name, int32(x))
}

func (RootPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{142}
}

type RootPartySubIDTypeEnum int32

const (
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_UNSPECIFIED                         RootPartySubIDTypeEnum = 0
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_APPLICATION                         RootPartySubIDTypeEnum = 1
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_BIC                                 RootPartySubIDTypeEnum = 2
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   RootPartySubIDTypeEnum = 3
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 RootPartySubIDTypeEnum = 4
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_CONTACT_NAME                        RootPartySubIDTypeEnum = 5
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          RootPartySubIDTypeEnum = 6
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_DEPARTMENT                          RootPartySubIDTypeEnum = 7
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       RootPartySubIDTypeEnum = 8
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_FAX_NUMBER                          RootPartySubIDTypeEnum = 9
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_FIRM                                RootPartySubIDTypeEnum = 10
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             RootPartySubIDTypeEnum = 11
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   RootPartySubIDTypeEnum = 12
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_LOCATION_DESK                       RootPartySubIDTypeEnum = 13
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_PERSON                              RootPartySubIDTypeEnum = 14
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        RootPartySubIDTypeEnum = 15
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               RootPartySubIDTypeEnum = 16
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      RootPartySubIDTypeEnum = 17
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  RootPartySubIDTypeEnum = 18
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION RootPartySubIDTypeEnum = 19
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   RootPartySubIDTypeEnum = 20
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 RootPartySubIDTypeEnum = 21
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   RootPartySubIDTypeEnum = 22
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             RootPartySubIDTypeEnum = 23
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           RootPartySubIDTypeEnum = 24
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_SYSTEM                              RootPartySubIDTypeEnum = 25
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        RootPartySubIDTypeEnum = 26
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  RootPartySubIDTypeEnum = 27
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               RootPartySubIDTypeEnum = 28
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     RootPartySubIDTypeEnum = 29
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_LOCATION                            RootPartySubIDTypeEnum = 30
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_MARKET_MAKER                        RootPartySubIDTypeEnum = 31
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 RootPartySubIDTypeEnum = 32
	RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        RootPartySubIDTypeEnum = 33
)

var RootPartySubIDTypeEnum_name = map[int32]string{
	0:  "ROOT_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "ROOT_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "ROOT_PARTY_SUB_ID_TYPE_BIC",
	3:  "ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "ROOT_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "ROOT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "ROOT_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "ROOT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "ROOT_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "ROOT_PARTY_SUB_ID_TYPE_FIRM",
	11: "ROOT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "ROOT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "ROOT_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "ROOT_PARTY_SUB_ID_TYPE_PERSON",
	15: "ROOT_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "ROOT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "ROOT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "ROOT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "ROOT_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "ROOT_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "ROOT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "ROOT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "ROOT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "ROOT_PARTY_SUB_ID_TYPE_LOCATION",
	31: "ROOT_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "ROOT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "ROOT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var RootPartySubIDTypeEnum_value = map[string]int32{
	"ROOT_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"ROOT_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"ROOT_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"ROOT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"ROOT_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"ROOT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"ROOT_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"ROOT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"ROOT_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"ROOT_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"ROOT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"ROOT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"ROOT_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"ROOT_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"ROOT_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"ROOT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"ROOT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"ROOT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"ROOT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"ROOT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"ROOT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"ROOT_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"ROOT_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"ROOT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"ROOT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"ROOT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"ROOT_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"ROOT_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"ROOT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"ROOT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x RootPartySubIDTypeEnum) String() string {
	return proto.EnumName(RootPartySubIDTypeEnum_name, int32(x))
}

func (RootPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{143}
}

type TradSesUpdateActionEnum int32

const (
	TradSesUpdateActionEnum_TRAD_SES_UPDATE_ACTION_UNSPECIFIED TradSesUpdateActionEnum = 0
	TradSesUpdateActionEnum_TRAD_SES_UPDATE_ACTION_ADD         TradSesUpdateActionEnum = 1
	TradSesUpdateActionEnum_TRAD_SES_UPDATE_ACTION_DELETE      TradSesUpdateActionEnum = 2
	TradSesUpdateActionEnum_TRAD_SES_UPDATE_ACTION_MODIFY      TradSesUpdateActionEnum = 3
)

var TradSesUpdateActionEnum_name = map[int32]string{
	0: "TRAD_SES_UPDATE_ACTION_UNSPECIFIED",
	1: "TRAD_SES_UPDATE_ACTION_ADD",
	2: "TRAD_SES_UPDATE_ACTION_DELETE",
	3: "TRAD_SES_UPDATE_ACTION_MODIFY",
}

var TradSesUpdateActionEnum_value = map[string]int32{
	"TRAD_SES_UPDATE_ACTION_UNSPECIFIED": 0,
	"TRAD_SES_UPDATE_ACTION_ADD":         1,
	"TRAD_SES_UPDATE_ACTION_DELETE":      2,
	"TRAD_SES_UPDATE_ACTION_MODIFY":      3,
}

func (x TradSesUpdateActionEnum) String() string {
	return proto.EnumName(TradSesUpdateActionEnum_name, int32(x))
}

func (TradSesUpdateActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{144}
}

type TradSesMethodEnum int32

const (
	TradSesMethodEnum_TRAD_SES_METHOD_UNSPECIFIED TradSesMethodEnum = 0
	TradSesMethodEnum_TRAD_SES_METHOD_ELECTRONIC  TradSesMethodEnum = 1
	TradSesMethodEnum_TRAD_SES_METHOD_OPEN_OUTCRY TradSesMethodEnum = 2
	TradSesMethodEnum_TRAD_SES_METHOD_TWO_PARTY   TradSesMethodEnum = 3
)

var TradSesMethodEnum_name = map[int32]string{
	0: "TRAD_SES_METHOD_UNSPECIFIED",
	1: "TRAD_SES_METHOD_ELECTRONIC",
	2: "TRAD_SES_METHOD_OPEN_OUTCRY",
	3: "TRAD_SES_METHOD_TWO_PARTY",
}

var TradSesMethodEnum_value = map[string]int32{
	"TRAD_SES_METHOD_UNSPECIFIED": 0,
	"TRAD_SES_METHOD_ELECTRONIC":  1,
	"TRAD_SES_METHOD_OPEN_OUTCRY": 2,
	"TRAD_SES_METHOD_TWO_PARTY":   3,
}

func (x TradSesMethodEnum) String() string {
	return proto.EnumName(TradSesMethodEnum_name, int32(x))
}

func (TradSesMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{145}
}

type TradSesModeEnum int32

const (
	TradSesModeEnum_TRAD_SES_MODE_UNSPECIFIED TradSesModeEnum = 0
	TradSesModeEnum_TRAD_SES_MODE_PRODUCTION  TradSesModeEnum = 1
	TradSesModeEnum_TRAD_SES_MODE_SIMULATED   TradSesModeEnum = 2
	TradSesModeEnum_TRAD_SES_MODE_TESTING     TradSesModeEnum = 3
)

var TradSesModeEnum_name = map[int32]string{
	0: "TRAD_SES_MODE_UNSPECIFIED",
	1: "TRAD_SES_MODE_PRODUCTION",
	2: "TRAD_SES_MODE_SIMULATED",
	3: "TRAD_SES_MODE_TESTING",
}

var TradSesModeEnum_value = map[string]int32{
	"TRAD_SES_MODE_UNSPECIFIED": 0,
	"TRAD_SES_MODE_PRODUCTION":  1,
	"TRAD_SES_MODE_SIMULATED":   2,
	"TRAD_SES_MODE_TESTING":     3,
}

func (x TradSesModeEnum) String() string {
	return proto.EnumName(TradSesModeEnum_name, int32(x))
}

func (TradSesModeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{146}
}

type TradSesStatusEnum int32

const (
	TradSesStatusEnum_TRAD_SES_STATUS_UNSPECIFIED      TradSesStatusEnum = 0
	TradSesStatusEnum_TRAD_SES_STATUS_CLOSED           TradSesStatusEnum = 1
	TradSesStatusEnum_TRAD_SES_STATUS_HALTED           TradSesStatusEnum = 2
	TradSesStatusEnum_TRAD_SES_STATUS_OPEN             TradSesStatusEnum = 3
	TradSesStatusEnum_TRAD_SES_STATUS_PRE_CLOSE        TradSesStatusEnum = 4
	TradSesStatusEnum_TRAD_SES_STATUS_PRE_OPEN         TradSesStatusEnum = 5
	TradSesStatusEnum_TRAD_SES_STATUS_REQUEST_REJECTED TradSesStatusEnum = 6
	TradSesStatusEnum_TRAD_SES_STATUS_UNKNOWN          TradSesStatusEnum = 7
)

var TradSesStatusEnum_name = map[int32]string{
	0: "TRAD_SES_STATUS_UNSPECIFIED",
	1: "TRAD_SES_STATUS_CLOSED",
	2: "TRAD_SES_STATUS_HALTED",
	3: "TRAD_SES_STATUS_OPEN",
	4: "TRAD_SES_STATUS_PRE_CLOSE",
	5: "TRAD_SES_STATUS_PRE_OPEN",
	6: "TRAD_SES_STATUS_REQUEST_REJECTED",
	7: "TRAD_SES_STATUS_UNKNOWN",
}

var TradSesStatusEnum_value = map[string]int32{
	"TRAD_SES_STATUS_UNSPECIFIED":      0,
	"TRAD_SES_STATUS_CLOSED":           1,
	"TRAD_SES_STATUS_HALTED":           2,
	"TRAD_SES_STATUS_OPEN":             3,
	"TRAD_SES_STATUS_PRE_CLOSE":        4,
	"TRAD_SES_STATUS_PRE_OPEN":         5,
	"TRAD_SES_STATUS_REQUEST_REJECTED": 6,
	"TRAD_SES_STATUS_UNKNOWN":          7,
}

func (x TradSesStatusEnum) String() string {
	return proto.EnumName(TradSesStatusEnum_name, int32(x))
}

func (TradSesStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{147}
}

type TradSesStatusRejReasonEnum int32

const (
	TradSesStatusRejReasonEnum_TRAD_SES_STATUS_REJ_REASON_UNSPECIFIED                           TradSesStatusRejReasonEnum = 0
	TradSesStatusRejReasonEnum_TRAD_SES_STATUS_REJ_REASON_UNKNOWN_OR_INVALID_TRADING_SESSION_ID TradSesStatusRejReasonEnum = 1
	TradSesStatusRejReasonEnum_TRAD_SES_STATUS_REJ_REASON_OTHER                                 TradSesStatusRejReasonEnum = 2
)

var TradSesStatusRejReasonEnum_name = map[int32]string{
	0: "TRAD_SES_STATUS_REJ_REASON_UNSPECIFIED",
	1: "TRAD_SES_STATUS_REJ_REASON_UNKNOWN_OR_INVALID_TRADING_SESSION_ID",
	2: "TRAD_SES_STATUS_REJ_REASON_OTHER",
}

var TradSesStatusRejReasonEnum_value = map[string]int32{
	"TRAD_SES_STATUS_REJ_REASON_UNSPECIFIED":                           0,
	"TRAD_SES_STATUS_REJ_REASON_UNKNOWN_OR_INVALID_TRADING_SESSION_ID": 1,
	"TRAD_SES_STATUS_REJ_REASON_OTHER":                                 2,
}

func (x TradSesStatusRejReasonEnum) String() string {
	return proto.EnumName(TradSesStatusRejReasonEnum_name, int32(x))
}

func (TradSesStatusRejReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{148}
}

type RefMsgTypeEnum int32

const (
	RefMsgTypeEnum_REF_MSG_TYPE_ADJUSTED_POSITION_REPORT                    RefMsgTypeEnum = 0
	RefMsgTypeEnum_REF_MSG_TYPE_ADVERTISEMENT                               RefMsgTypeEnum = 1
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION                      RefMsgTypeEnum = 2
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK                  RefMsgTypeEnum = 3
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT                RefMsgTypeEnum = 4
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_REPORT                           RefMsgTypeEnum = 5
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_REPORT_ACK                       RefMsgTypeEnum = 6
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT                  RefMsgTypeEnum = 7
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST                 RefMsgTypeEnum = 8
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK             RefMsgTypeEnum = 9
	RefMsgTypeEnum_REF_MSG_TYPE_ASSIGNMENT_REPORT                           RefMsgTypeEnum = 10
	RefMsgTypeEnum_REF_MSG_TYPE_BID_REQUEST                                 RefMsgTypeEnum = 11
	RefMsgTypeEnum_REF_MSG_TYPE_BID_RESPONSE                                RefMsgTypeEnum = 12
	RefMsgTypeEnum_REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT                     RefMsgTypeEnum = 13
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_ASSIGNMENT                       RefMsgTypeEnum = 14
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_INQUIRY                          RefMsgTypeEnum = 15
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK                      RefMsgTypeEnum = 16
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_REPORT                           RefMsgTypeEnum = 17
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_REQUEST                          RefMsgTypeEnum = 18
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_RESPONSE                         RefMsgTypeEnum = 19
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION                                RefMsgTypeEnum = 20
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION_ACK                            RefMsgTypeEnum = 21
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION_REQUEST                        RefMsgTypeEnum = 22
	RefMsgTypeEnum_REF_MSG_TYPE_CONTRARY_INTENTION_REPORT                   RefMsgTypeEnum = 23
	RefMsgTypeEnum_REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST          RefMsgTypeEnum = 24
	RefMsgTypeEnum_REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST                  RefMsgTypeEnum = 25
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST                    RefMsgTypeEnum = 26
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST            RefMsgTypeEnum = 27
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT      RefMsgTypeEnum = 28
	RefMsgTypeEnum_REF_MSG_TYPE_DONT_KNOW_TRADE                             RefMsgTypeEnum = 29
	RefMsgTypeEnum_REF_MSG_TYPE_EMAIL                                       RefMsgTypeEnum = 30
	RefMsgTypeEnum_REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT                   RefMsgTypeEnum = 31
	RefMsgTypeEnum_REF_MSG_TYPE_EXECUTION_REPORT                            RefMsgTypeEnum = 32
	RefMsgTypeEnum_REF_MSG_TYPE_HEARTBEAT                                   RefMsgTypeEnum = 33
	RefMsgTypeEnum_REF_MSG_TYPE_IOI                                         RefMsgTypeEnum = 34
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_CANCEL_REQUEST                         RefMsgTypeEnum = 35
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_EXECUTE                                RefMsgTypeEnum = 36
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STATUS                                 RefMsgTypeEnum = 37
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STATUS_REQUEST                         RefMsgTypeEnum = 38
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STRIKE_PRICE                           RefMsgTypeEnum = 39
	RefMsgTypeEnum_REF_MSG_TYPE_LOGON                                       RefMsgTypeEnum = 40
	RefMsgTypeEnum_REF_MSG_TYPE_LOGOUT                                      RefMsgTypeEnum = 41
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH             RefMsgTypeEnum = 42
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_REQUEST                         RefMsgTypeEnum = 43
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT                  RefMsgTypeEnum = 44
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH           RefMsgTypeEnum = 45
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION                           RefMsgTypeEnum = 46
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION_REQUEST                   RefMsgTypeEnum = 47
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT             RefMsgTypeEnum = 48
	RefMsgTypeEnum_REF_MSG_TYPE_MASS_QUOTE                                  RefMsgTypeEnum = 49
	RefMsgTypeEnum_REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT                  RefMsgTypeEnum = 50
	RefMsgTypeEnum_REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE               RefMsgTypeEnum = 51
	RefMsgTypeEnum_REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST  RefMsgTypeEnum = 52
	RefMsgTypeEnum_REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE RefMsgTypeEnum = 53
	RefMsgTypeEnum_REF_MSG_TYPE_NEWS                                        RefMsgTypeEnum = 54
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_CROSS                             RefMsgTypeEnum = 55
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_LIST                              RefMsgTypeEnum = 56
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_MULTILEG                          RefMsgTypeEnum = 57
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_SINGLE                            RefMsgTypeEnum = 58
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REJECT                         RefMsgTypeEnum = 59
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST                RefMsgTypeEnum = 60
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REQUEST                        RefMsgTypeEnum = 61
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT                    RefMsgTypeEnum = 62
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST                   RefMsgTypeEnum = 63
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT                    RefMsgTypeEnum = 64
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST                   RefMsgTypeEnum = 65
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST                   RefMsgTypeEnum = 66
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_STATUS_REQUEST                        RefMsgTypeEnum = 67
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT                 RefMsgTypeEnum = 68
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST                RefMsgTypeEnum = 69
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_REPORT                             RefMsgTypeEnum = 70
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE                                       RefMsgTypeEnum = 71
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_CANCEL                                RefMsgTypeEnum = 72
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_REQUEST                               RefMsgTypeEnum = 73
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_REQUEST_REJECT                        RefMsgTypeEnum = 74
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_RESPONSE                              RefMsgTypeEnum = 75
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_STATUS_REPORT                         RefMsgTypeEnum = 76
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_STATUS_REQUEST                        RefMsgTypeEnum = 77
	RefMsgTypeEnum_REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS                   RefMsgTypeEnum = 78
	RefMsgTypeEnum_REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE          RefMsgTypeEnum = 79
	RefMsgTypeEnum_REF_MSG_TYPE_REJECT                                      RefMsgTypeEnum = 80
	RefMsgTypeEnum_REF_MSG_TYPE_REQUEST_FOR_POSITIONS                       RefMsgTypeEnum = 81
	RefMsgTypeEnum_REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK                   RefMsgTypeEnum = 82
	RefMsgTypeEnum_REF_MSG_TYPE_RESEND_REQUEST                              RefMsgTypeEnum = 83
	RefMsgTypeEnum_REF_MSG_TYPE_RFQ_REQUEST                                 RefMsgTypeEnum = 84
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION                         RefMsgTypeEnum = 85
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST                 RefMsgTypeEnum = 86
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT           RefMsgTypeEnum = 87
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST                               RefMsgTypeEnum = 88
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST_REQUEST                       RefMsgTypeEnum = 89
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT                 RefMsgTypeEnum = 90
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_STATUS                             RefMsgTypeEnum = 91
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_STATUS_REQUEST                     RefMsgTypeEnum = 92
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_TYPES                              RefMsgTypeEnum = 93
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_TYPE_REQUEST                       RefMsgTypeEnum = 94
	RefMsgTypeEnum_REF_MSG_TYPE_SEQUENCE_RESET                              RefMsgTypeEnum = 95
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS                     RefMsgTypeEnum = 96
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST              RefMsgTypeEnum = 97
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT                RefMsgTypeEnum = 98
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT                    RefMsgTypeEnum = 99
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK                RefMsgTypeEnum = 100
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST                   RefMsgTypeEnum = 101
	RefMsgTypeEnum_REF_MSG_TYPE_TEST_REQUEST                                RefMsgTypeEnum = 102
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT                        RefMsgTypeEnum = 103
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK                    RefMsgTypeEnum = 104
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST                RefMsgTypeEnum = 105
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK            RefMsgTypeEnum = 106
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST                        RefMsgTypeEnum = 107
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST                RefMsgTypeEnum = 108
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT          RefMsgTypeEnum = 109
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_STATUS                      RefMsgTypeEnum = 110
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST              RefMsgTypeEnum = 111
	RefMsgTypeEnum_REF_MSG_TYPE_UNSPECIFIED                                 RefMsgTypeEnum = 112
	RefMsgTypeEnum_REF_MSG_TYPE_USER_NOTIFICATION                           RefMsgTypeEnum = 113
	RefMsgTypeEnum_REF_MSG_TYPE_USER_REQUEST                                RefMsgTypeEnum = 114
	RefMsgTypeEnum_REF_MSG_TYPE_USER_RESPONSE                               RefMsgTypeEnum = 115
	RefMsgTypeEnum_REF_MSG_TYPE_XMLNON_FIX                                  RefMsgTypeEnum = 116
)

var RefMsgTypeEnum_name = map[int32]string{
	0:   "REF_MSG_TYPE_ADJUSTED_POSITION_REPORT",
	1:   "REF_MSG_TYPE_ADVERTISEMENT",
	2:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION",
	3:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK",
	4:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT",
	5:   "REF_MSG_TYPE_ALLOCATION_REPORT",
	6:   "REF_MSG_TYPE_ALLOCATION_REPORT_ACK",
	7:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT",
	8:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST",
	9:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK",
	10:  "REF_MSG_TYPE_ASSIGNMENT_REPORT",
	11:  "REF_MSG_TYPE_BID_REQUEST",
	12:  "REF_MSG_TYPE_BID_RESPONSE",
	13:  "REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT",
	14:  "REF_MSG_TYPE_COLLATERAL_ASSIGNMENT",
	15:  "REF_MSG_TYPE_COLLATERAL_INQUIRY",
	16:  "REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK",
	17:  "REF_MSG_TYPE_COLLATERAL_REPORT",
	18:  "REF_MSG_TYPE_COLLATERAL_REQUEST",
	19:  "REF_MSG_TYPE_COLLATERAL_RESPONSE",
	20:  "REF_MSG_TYPE_CONFIRMATION",
	21:  "REF_MSG_TYPE_CONFIRMATION_ACK",
	22:  "REF_MSG_TYPE_CONFIRMATION_REQUEST",
	23:  "REF_MSG_TYPE_CONTRARY_INTENTION_REPORT",
	24:  "REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST",
	25:  "REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST",
	26:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST",
	27:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST",
	28:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT",
	29:  "REF_MSG_TYPE_DONT_KNOW_TRADE",
	30:  "REF_MSG_TYPE_EMAIL",
	31:  "REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT",
	32:  "REF_MSG_TYPE_EXECUTION_REPORT",
	33:  "REF_MSG_TYPE_HEARTBEAT",
	34:  "REF_MSG_TYPE_IOI",
	35:  "REF_MSG_TYPE_LIST_CANCEL_REQUEST",
	36:  "REF_MSG_TYPE_LIST_EXECUTE",
	37:  "REF_MSG_TYPE_LIST_STATUS",
	38:  "REF_MSG_TYPE_LIST_STATUS_REQUEST",
	39:  "REF_MSG_TYPE_LIST_STRIKE_PRICE",
	40:  "REF_MSG_TYPE_LOGON",
	41:  "REF_MSG_TYPE_LOGOUT",
	42:  "REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH",
	43:  "REF_MSG_TYPE_MARKET_DATA_REQUEST",
	44:  "REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT",
	45:  "REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH",
	46:  "REF_MSG_TYPE_MARKET_DEFINITION",
	47:  "REF_MSG_TYPE_MARKET_DEFINITION_REQUEST",
	48:  "REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT",
	49:  "REF_MSG_TYPE_MASS_QUOTE",
	50:  "REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT",
	51:  "REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE",
	52:  "REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST",
	53:  "REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE",
	54:  "REF_MSG_TYPE_NEWS",
	55:  "REF_MSG_TYPE_NEW_ORDER_CROSS",
	56:  "REF_MSG_TYPE_NEW_ORDER_LIST",
	57:  "REF_MSG_TYPE_NEW_ORDER_MULTILEG",
	58:  "REF_MSG_TYPE_NEW_ORDER_SINGLE",
	59:  "REF_MSG_TYPE_ORDER_CANCEL_REJECT",
	60:  "REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST",
	61:  "REF_MSG_TYPE_ORDER_CANCEL_REQUEST",
	62:  "REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT",
	63:  "REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST",
	64:  "REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT",
	65:  "REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST",
	66:  "REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST",
	67:  "REF_MSG_TYPE_ORDER_STATUS_REQUEST",
	68:  "REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT",
	69:  "REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST",
	70:  "REF_MSG_TYPE_POSITION_REPORT",
	71:  "REF_MSG_TYPE_QUOTE",
	72:  "REF_MSG_TYPE_QUOTE_CANCEL",
	73:  "REF_MSG_TYPE_QUOTE_REQUEST",
	74:  "REF_MSG_TYPE_QUOTE_REQUEST_REJECT",
	75:  "REF_MSG_TYPE_QUOTE_RESPONSE",
	76:  "REF_MSG_TYPE_QUOTE_STATUS_REPORT",
	77:  "REF_MSG_TYPE_QUOTE_STATUS_REQUEST",
	78:  "REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS",
	79:  "REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE",
	80:  "REF_MSG_TYPE_REJECT",
	81:  "REF_MSG_TYPE_REQUEST_FOR_POSITIONS",
	82:  "REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK",
	83:  "REF_MSG_TYPE_RESEND_REQUEST",
	84:  "REF_MSG_TYPE_RFQ_REQUEST",
	85:  "REF_MSG_TYPE_SECURITY_DEFINITION",
	86:  "REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST",
	87:  "REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT",
	88:  "REF_MSG_TYPE_SECURITY_LIST",
	89:  "REF_MSG_TYPE_SECURITY_LIST_REQUEST",
	90:  "REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT",
	91:  "REF_MSG_TYPE_SECURITY_STATUS",
	92:  "REF_MSG_TYPE_SECURITY_STATUS_REQUEST",
	93:  "REF_MSG_TYPE_SECURITY_TYPES",
	94:  "REF_MSG_TYPE_SECURITY_TYPE_REQUEST",
	95:  "REF_MSG_TYPE_SEQUENCE_RESET",
	96:  "REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS",
	97:  "REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST",
	98:  "REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT",
	99:  "REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT",
	100: "REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK",
	101: "REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST",
	102: "REF_MSG_TYPE_TEST_REQUEST",
	103: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT",
	104: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK",
	105: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST",
	106: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK",
	107: "REF_MSG_TYPE_TRADING_SESSION_LIST",
	108: "REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST",
	109: "REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT",
	110: "REF_MSG_TYPE_TRADING_SESSION_STATUS",
	111: "REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST",
	112: "REF_MSG_TYPE_UNSPECIFIED",
	113: "REF_MSG_TYPE_USER_NOTIFICATION",
	114: "REF_MSG_TYPE_USER_REQUEST",
	115: "REF_MSG_TYPE_USER_RESPONSE",
	116: "REF_MSG_TYPE_XMLNON_FIX",
}

var RefMsgTypeEnum_value = map[string]int32{
	"REF_MSG_TYPE_ADJUSTED_POSITION_REPORT":                    0,
	"REF_MSG_TYPE_ADVERTISEMENT":                               1,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION":                      2,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK":                  3,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT":                4,
	"REF_MSG_TYPE_ALLOCATION_REPORT":                           5,
	"REF_MSG_TYPE_ALLOCATION_REPORT_ACK":                       6,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT":                  7,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST":                 8,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK":             9,
	"REF_MSG_TYPE_ASSIGNMENT_REPORT":                           10,
	"REF_MSG_TYPE_BID_REQUEST":                                 11,
	"REF_MSG_TYPE_BID_RESPONSE":                                12,
	"REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT":                     13,
	"REF_MSG_TYPE_COLLATERAL_ASSIGNMENT":                       14,
	"REF_MSG_TYPE_COLLATERAL_INQUIRY":                          15,
	"REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK":                      16,
	"REF_MSG_TYPE_COLLATERAL_REPORT":                           17,
	"REF_MSG_TYPE_COLLATERAL_REQUEST":                          18,
	"REF_MSG_TYPE_COLLATERAL_RESPONSE":                         19,
	"REF_MSG_TYPE_CONFIRMATION":                                20,
	"REF_MSG_TYPE_CONFIRMATION_ACK":                            21,
	"REF_MSG_TYPE_CONFIRMATION_REQUEST":                        22,
	"REF_MSG_TYPE_CONTRARY_INTENTION_REPORT":                   23,
	"REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST":          24,
	"REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST":                  25,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST":                    26,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST":            27,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT":      28,
	"REF_MSG_TYPE_DONT_KNOW_TRADE":                             29,
	"REF_MSG_TYPE_EMAIL":                                       30,
	"REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT":                   31,
	"REF_MSG_TYPE_EXECUTION_REPORT":                            32,
	"REF_MSG_TYPE_HEARTBEAT":                                   33,
	"REF_MSG_TYPE_IOI":                                         34,
	"REF_MSG_TYPE_LIST_CANCEL_REQUEST":                         35,
	"REF_MSG_TYPE_LIST_EXECUTE":                                36,
	"REF_MSG_TYPE_LIST_STATUS":                                 37,
	"REF_MSG_TYPE_LIST_STATUS_REQUEST":                         38,
	"REF_MSG_TYPE_LIST_STRIKE_PRICE":                           39,
	"REF_MSG_TYPE_LOGON":                                       40,
	"REF_MSG_TYPE_LOGOUT":                                      41,
	"REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH":             42,
	"REF_MSG_TYPE_MARKET_DATA_REQUEST":                         43,
	"REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT":                  44,
	"REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH":           45,
	"REF_MSG_TYPE_MARKET_DEFINITION":                           46,
	"REF_MSG_TYPE_MARKET_DEFINITION_REQUEST":                   47,
	"REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT":             48,
	"REF_MSG_TYPE_MASS_QUOTE":                                  49,
	"REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT":                  50,
	"REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE":               51,
	"REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST":  52,
	"REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE": 53,
	"REF_MSG_TYPE_NEWS":                                        54,
	"REF_MSG_TYPE_NEW_ORDER_CROSS":                             55,
	"REF_MSG_TYPE_NEW_ORDER_LIST":                              56,
	"REF_MSG_TYPE_NEW_ORDER_MULTILEG":                          57,
	"REF_MSG_TYPE_NEW_ORDER_SINGLE":                            58,
	"REF_MSG_TYPE_ORDER_CANCEL_REJECT":                         59,
	"REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST":                60,
	"REF_MSG_TYPE_ORDER_CANCEL_REQUEST":                        61,
	"REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT":                    62,
	"REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST":                   63,
	"REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT":                    64,
	"REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST":                   65,
	"REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST":                   66,
	"REF_MSG_TYPE_ORDER_STATUS_REQUEST":                        67,
	"REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT":                 68,
	"REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST":                69,
	"REF_MSG_TYPE_POSITION_REPORT":                             70,
	"REF_MSG_TYPE_QUOTE":                                       71,
	"REF_MSG_TYPE_QUOTE_CANCEL":                                72,
	"REF_MSG_TYPE_QUOTE_REQUEST":                               73,
	"REF_MSG_TYPE_QUOTE_REQUEST_REJECT":                        74,
	"REF_MSG_TYPE_QUOTE_RESPONSE":                              75,
	"REF_MSG_TYPE_QUOTE_STATUS_REPORT":                         76,
	"REF_MSG_TYPE_QUOTE_STATUS_REQUEST":                        77,
	"REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS":                   78,
	"REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE":          79,
	"REF_MSG_TYPE_REJECT":                                      80,
	"REF_MSG_TYPE_REQUEST_FOR_POSITIONS":                       81,
	"REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK":                   82,
	"REF_MSG_TYPE_RESEND_REQUEST":                              83,
	"REF_MSG_TYPE_RFQ_REQUEST":                                 84,
	"REF_MSG_TYPE_SECURITY_DEFINITION":                         85,
	"REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST":                 86,
	"REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT":           87,
	"REF_MSG_TYPE_SECURITY_LIST":                               88,
	"REF_MSG_TYPE_SECURITY_LIST_REQUEST":                       89,
	"REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT":                 90,
	"REF_MSG_TYPE_SECURITY_STATUS":                             91,
	"REF_MSG_TYPE_SECURITY_STATUS_REQUEST":                     92,
	"REF_MSG_TYPE_SECURITY_TYPES":                              93,
	"REF_MSG_TYPE_SECURITY_TYPE_REQUEST":                       94,
	"REF_MSG_TYPE_SEQUENCE_RESET":                              95,
	"REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS":                     96,
	"REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST":              97,
	"REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT":                98,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT":                    99,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK":                100,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST":                   101,
	"REF_MSG_TYPE_TEST_REQUEST":                                102,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT":                        103,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK":                    104,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST":                105,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK":            106,
	"REF_MSG_TYPE_TRADING_SESSION_LIST":                        107,
	"REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST":                108,
	"REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT":          109,
	"REF_MSG_TYPE_TRADING_SESSION_STATUS":                      110,
	"REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST":              111,
	"REF_MSG_TYPE_UNSPECIFIED":                                 112,
	"REF_MSG_TYPE_USER_NOTIFICATION":                           113,
	"REF_MSG_TYPE_USER_REQUEST":                                114,
	"REF_MSG_TYPE_USER_RESPONSE":                               115,
	"REF_MSG_TYPE_XMLNON_FIX":                                  116,
}

func (x RefMsgTypeEnum) String() string {
	return proto.EnumName(RefMsgTypeEnum_name, int32(x))
}

func (RefMsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{149}
}

type MsgDirectionEnum int32

const (
	MsgDirectionEnum_MSG_DIRECTION_UNSPECIFIED MsgDirectionEnum = 0
	MsgDirectionEnum_MSG_DIRECTION_RECEIVE     MsgDirectionEnum = 1
	MsgDirectionEnum_MSG_DIRECTION_SEND        MsgDirectionEnum = 2
)

var MsgDirectionEnum_name = map[int32]string{
	0: "MSG_DIRECTION_UNSPECIFIED",
	1: "MSG_DIRECTION_RECEIVE",
	2: "MSG_DIRECTION_SEND",
}

var MsgDirectionEnum_value = map[string]int32{
	"MSG_DIRECTION_UNSPECIFIED": 0,
	"MSG_DIRECTION_RECEIVE":     1,
	"MSG_DIRECTION_SEND":        2,
}

func (x MsgDirectionEnum) String() string {
	return proto.EnumName(MsgDirectionEnum_name, int32(x))
}

func (MsgDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{150}
}

type RefApplVerIDEnum int32

const (
	RefApplVerIDEnum_REF_APPL_VER_ID_UNSPECIFIED RefApplVerIDEnum = 0
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX27       RefApplVerIDEnum = 1
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX30       RefApplVerIDEnum = 2
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX40       RefApplVerIDEnum = 3
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX41       RefApplVerIDEnum = 4
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX42       RefApplVerIDEnum = 5
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX43       RefApplVerIDEnum = 6
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX44       RefApplVerIDEnum = 7
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50       RefApplVerIDEnum = 8
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50SP1    RefApplVerIDEnum = 9
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50SP2    RefApplVerIDEnum = 10
)

var RefApplVerIDEnum_name = map[int32]string{
	0:  "REF_APPL_VER_ID_UNSPECIFIED",
	1:  "REF_APPL_VER_ID_FIX27",
	2:  "REF_APPL_VER_ID_FIX30",
	3:  "REF_APPL_VER_ID_FIX40",
	4:  "REF_APPL_VER_ID_FIX41",
	5:  "REF_APPL_VER_ID_FIX42",
	6:  "REF_APPL_VER_ID_FIX43",
	7:  "REF_APPL_VER_ID_FIX44",
	8:  "REF_APPL_VER_ID_FIX50",
	9:  "REF_APPL_VER_ID_FIX50SP1",
	10: "REF_APPL_VER_ID_FIX50SP2",
}

var RefApplVerIDEnum_value = map[string]int32{
	"REF_APPL_VER_ID_UNSPECIFIED": 0,
	"REF_APPL_VER_ID_FIX27":       1,
	"REF_APPL_VER_ID_FIX30":       2,
	"REF_APPL_VER_ID_FIX40":       3,
	"REF_APPL_VER_ID_FIX41":       4,
	"REF_APPL_VER_ID_FIX42":       5,
	"REF_APPL_VER_ID_FIX43":       6,
	"REF_APPL_VER_ID_FIX44":       7,
	"REF_APPL_VER_ID_FIX50":       8,
	"REF_APPL_VER_ID_FIX50SP1":    9,
	"REF_APPL_VER_ID_FIX50SP2":    10,
}

func (x RefApplVerIDEnum) String() string {
	return proto.EnumName(RefApplVerIDEnum_name, int32(x))
}

func (RefApplVerIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{151}
}

type SettlObligSourceEnum int32

const (
	SettlObligSourceEnum_SETTL_OBLIG_SOURCE_UNSPECIFIED                  SettlObligSourceEnum = 0
	SettlObligSourceEnum_SETTL_OBLIG_SOURCE_INSTRUCTIONS_FOR_INSTITUTION SettlObligSourceEnum = 1
	SettlObligSourceEnum_SETTL_OBLIG_SOURCE_INSTRUCTIONS_OF_BROKER       SettlObligSourceEnum = 2
	SettlObligSourceEnum_SETTL_OBLIG_SOURCE_INVESTOR                     SettlObligSourceEnum = 3
)

var SettlObligSourceEnum_name = map[int32]string{
	0: "SETTL_OBLIG_SOURCE_UNSPECIFIED",
	1: "SETTL_OBLIG_SOURCE_INSTRUCTIONS_FOR_INSTITUTION",
	2: "SETTL_OBLIG_SOURCE_INSTRUCTIONS_OF_BROKER",
	3: "SETTL_OBLIG_SOURCE_INVESTOR",
}

var SettlObligSourceEnum_value = map[string]int32{
	"SETTL_OBLIG_SOURCE_UNSPECIFIED":                  0,
	"SETTL_OBLIG_SOURCE_INSTRUCTIONS_FOR_INSTITUTION": 1,
	"SETTL_OBLIG_SOURCE_INSTRUCTIONS_OF_BROKER":       2,
	"SETTL_OBLIG_SOURCE_INVESTOR":                     3,
}

func (x SettlObligSourceEnum) String() string {
	return proto.EnumName(SettlObligSourceEnum_name, int32(x))
}

func (SettlObligSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{152}
}

type TickRuleTypeEnum int32

const (
	TickRuleTypeEnum_TICK_RULE_TYPE_UNSPECIFIED            TickRuleTypeEnum = 0
	TickRuleTypeEnum_TICK_RULE_TYPE_FIXED                  TickRuleTypeEnum = 1
	TickRuleTypeEnum_TICK_RULE_TYPE_REGULAR                TickRuleTypeEnum = 2
	TickRuleTypeEnum_TICK_RULE_TYPE_SETTLED_AS_ASPREAD_LEG TickRuleTypeEnum = 3
	TickRuleTypeEnum_TICK_RULE_TYPE_TRADED_AS_ASPREAD_LEG  TickRuleTypeEnum = 4
	TickRuleTypeEnum_TICK_RULE_TYPE_VARIABLE               TickRuleTypeEnum = 5
)

var TickRuleTypeEnum_name = map[int32]string{
	0: "TICK_RULE_TYPE_UNSPECIFIED",
	1: "TICK_RULE_TYPE_FIXED",
	2: "TICK_RULE_TYPE_REGULAR",
	3: "TICK_RULE_TYPE_SETTLED_AS_ASPREAD_LEG",
	4: "TICK_RULE_TYPE_TRADED_AS_ASPREAD_LEG",
	5: "TICK_RULE_TYPE_VARIABLE",
}

var TickRuleTypeEnum_value = map[string]int32{
	"TICK_RULE_TYPE_UNSPECIFIED":            0,
	"TICK_RULE_TYPE_FIXED":                  1,
	"TICK_RULE_TYPE_REGULAR":                2,
	"TICK_RULE_TYPE_SETTLED_AS_ASPREAD_LEG": 3,
	"TICK_RULE_TYPE_TRADED_AS_ASPREAD_LEG":  4,
	"TICK_RULE_TYPE_VARIABLE":               5,
}

func (x TickRuleTypeEnum) String() string {
	return proto.EnumName(TickRuleTypeEnum_name, int32(x))
}

func (TickRuleTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{153}
}

type StrikeExerciseStyleEnum int32

const (
	StrikeExerciseStyleEnum_STRIKE_EXERCISE_STYLE_UNSPECIFIED StrikeExerciseStyleEnum = 0
	StrikeExerciseStyleEnum_STRIKE_EXERCISE_STYLE_AMERICAN    StrikeExerciseStyleEnum = 1
	StrikeExerciseStyleEnum_STRIKE_EXERCISE_STYLE_BERMUDA     StrikeExerciseStyleEnum = 2
	StrikeExerciseStyleEnum_STRIKE_EXERCISE_STYLE_EUROPEAN    StrikeExerciseStyleEnum = 3
)

var StrikeExerciseStyleEnum_name = map[int32]string{
	0: "STRIKE_EXERCISE_STYLE_UNSPECIFIED",
	1: "STRIKE_EXERCISE_STYLE_AMERICAN",
	2: "STRIKE_EXERCISE_STYLE_BERMUDA",
	3: "STRIKE_EXERCISE_STYLE_EUROPEAN",
}

var StrikeExerciseStyleEnum_value = map[string]int32{
	"STRIKE_EXERCISE_STYLE_UNSPECIFIED": 0,
	"STRIKE_EXERCISE_STYLE_AMERICAN":    1,
	"STRIKE_EXERCISE_STYLE_BERMUDA":     2,
	"STRIKE_EXERCISE_STYLE_EUROPEAN":    3,
}

func (x StrikeExerciseStyleEnum) String() string {
	return proto.EnumName(StrikeExerciseStyleEnum_name, int32(x))
}

func (StrikeExerciseStyleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{154}
}

type MaturityMonthYearFormatEnum int32

const (
	MaturityMonthYearFormatEnum_MATURITY_MONTH_YEAR_FORMAT_UNSPECIFIED     MaturityMonthYearFormatEnum = 0
	MaturityMonthYearFormatEnum_MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_DAY  MaturityMonthYearFormatEnum = 1
	MaturityMonthYearFormatEnum_MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_ONLY MaturityMonthYearFormatEnum = 2
	MaturityMonthYearFormatEnum_MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_WEEK MaturityMonthYearFormatEnum = 3
)

var MaturityMonthYearFormatEnum_name = map[int32]string{
	0: "MATURITY_MONTH_YEAR_FORMAT_UNSPECIFIED",
	1: "MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_DAY",
	2: "MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_ONLY",
	3: "MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_WEEK",
}

var MaturityMonthYearFormatEnum_value = map[string]int32{
	"MATURITY_MONTH_YEAR_FORMAT_UNSPECIFIED":     0,
	"MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_DAY":  1,
	"MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_ONLY": 2,
	"MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_WEEK": 3,
}

func (x MaturityMonthYearFormatEnum) String() string {
	return proto.EnumName(MaturityMonthYearFormatEnum_name, int32(x))
}

func (MaturityMonthYearFormatEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{155}
}

type MaturityMonthYearIncrementUnitsEnum int32

const (
	MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_UNSPECIFIED MaturityMonthYearIncrementUnitsEnum = 0
	MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_DAYS        MaturityMonthYearIncrementUnitsEnum = 1
	MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_MONTHS      MaturityMonthYearIncrementUnitsEnum = 2
	MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_WEEKS       MaturityMonthYearIncrementUnitsEnum = 3
	MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_YEARS       MaturityMonthYearIncrementUnitsEnum = 4
)

var MaturityMonthYearIncrementUnitsEnum_name = map[int32]string{
	0: "MATURITY_MONTH_YEAR_INCREMENT_UNITS_UNSPECIFIED",
	1: "MATURITY_MONTH_YEAR_INCREMENT_UNITS_DAYS",
	2: "MATURITY_MONTH_YEAR_INCREMENT_UNITS_MONTHS",
	3: "MATURITY_MONTH_YEAR_INCREMENT_UNITS_WEEKS",
	4: "MATURITY_MONTH_YEAR_INCREMENT_UNITS_YEARS",
}

var MaturityMonthYearIncrementUnitsEnum_value = map[string]int32{
	"MATURITY_MONTH_YEAR_INCREMENT_UNITS_UNSPECIFIED": 0,
	"MATURITY_MONTH_YEAR_INCREMENT_UNITS_DAYS":        1,
	"MATURITY_MONTH_YEAR_INCREMENT_UNITS_MONTHS":      2,
	"MATURITY_MONTH_YEAR_INCREMENT_UNITS_WEEKS":       3,
	"MATURITY_MONTH_YEAR_INCREMENT_UNITS_YEARS":       4,
}

func (x MaturityMonthYearIncrementUnitsEnum) String() string {
	return proto.EnumName(MaturityMonthYearIncrementUnitsEnum_name, int32(x))
}

func (MaturityMonthYearIncrementUnitsEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{156}
}

type SecondaryPriceLimitTypeEnum int32

const (
	SecondaryPriceLimitTypeEnum_SECONDARY_PRICE_LIMIT_TYPE_UNSPECIFIED SecondaryPriceLimitTypeEnum = 0
	SecondaryPriceLimitTypeEnum_SECONDARY_PRICE_LIMIT_TYPE_PERCENTAGE  SecondaryPriceLimitTypeEnum = 1
	SecondaryPriceLimitTypeEnum_SECONDARY_PRICE_LIMIT_TYPE_PRICE       SecondaryPriceLimitTypeEnum = 2
	SecondaryPriceLimitTypeEnum_SECONDARY_PRICE_LIMIT_TYPE_TICKS       SecondaryPriceLimitTypeEnum = 3
)

var SecondaryPriceLimitTypeEnum_name = map[int32]string{
	0: "SECONDARY_PRICE_LIMIT_TYPE_UNSPECIFIED",
	1: "SECONDARY_PRICE_LIMIT_TYPE_PERCENTAGE",
	2: "SECONDARY_PRICE_LIMIT_TYPE_PRICE",
	3: "SECONDARY_PRICE_LIMIT_TYPE_TICKS",
}

var SecondaryPriceLimitTypeEnum_value = map[string]int32{
	"SECONDARY_PRICE_LIMIT_TYPE_UNSPECIFIED": 0,
	"SECONDARY_PRICE_LIMIT_TYPE_PERCENTAGE":  1,
	"SECONDARY_PRICE_LIMIT_TYPE_PRICE":       2,
	"SECONDARY_PRICE_LIMIT_TYPE_TICKS":       3,
}

func (x SecondaryPriceLimitTypeEnum) String() string {
	return proto.EnumName(SecondaryPriceLimitTypeEnum_name, int32(x))
}

func (SecondaryPriceLimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{157}
}

type PriceLimitTypeEnum int32

const (
	PriceLimitTypeEnum_PRICE_LIMIT_TYPE_UNSPECIFIED PriceLimitTypeEnum = 0
	PriceLimitTypeEnum_PRICE_LIMIT_TYPE_PERCENTAGE  PriceLimitTypeEnum = 1
	PriceLimitTypeEnum_PRICE_LIMIT_TYPE_PRICE       PriceLimitTypeEnum = 2
	PriceLimitTypeEnum_PRICE_LIMIT_TYPE_TICKS       PriceLimitTypeEnum = 3
)

var PriceLimitTypeEnum_name = map[int32]string{
	0: "PRICE_LIMIT_TYPE_UNSPECIFIED",
	1: "PRICE_LIMIT_TYPE_PERCENTAGE",
	2: "PRICE_LIMIT_TYPE_PRICE",
	3: "PRICE_LIMIT_TYPE_TICKS",
}

var PriceLimitTypeEnum_value = map[string]int32{
	"PRICE_LIMIT_TYPE_UNSPECIFIED": 0,
	"PRICE_LIMIT_TYPE_PERCENTAGE":  1,
	"PRICE_LIMIT_TYPE_PRICE":       2,
	"PRICE_LIMIT_TYPE_TICKS":       3,
}

func (x PriceLimitTypeEnum) String() string {
	return proto.EnumName(PriceLimitTypeEnum_name, int32(x))
}

func (PriceLimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{158}
}

type MDBookTypeEnum int32

const (
	MDBookTypeEnum_MD_BOOK_TYPE_UNSPECIFIED MDBookTypeEnum = 0
	MDBookTypeEnum_MD_BOOK_TYPE_ORDER_DEPTH MDBookTypeEnum = 1
	MDBookTypeEnum_MD_BOOK_TYPE_PRICE_DEPTH MDBookTypeEnum = 2
	MDBookTypeEnum_MD_BOOK_TYPE_TOP_OF_BOOK MDBookTypeEnum = 3
)

var MDBookTypeEnum_name = map[int32]string{
	0: "MD_BOOK_TYPE_UNSPECIFIED",
	1: "MD_BOOK_TYPE_ORDER_DEPTH",
	2: "MD_BOOK_TYPE_PRICE_DEPTH",
	3: "MD_BOOK_TYPE_TOP_OF_BOOK",
}

var MDBookTypeEnum_value = map[string]int32{
	"MD_BOOK_TYPE_UNSPECIFIED": 0,
	"MD_BOOK_TYPE_ORDER_DEPTH": 1,
	"MD_BOOK_TYPE_PRICE_DEPTH": 2,
	"MD_BOOK_TYPE_TOP_OF_BOOK": 3,
}

func (x MDBookTypeEnum) String() string {
	return proto.EnumName(MDBookTypeEnum_name, int32(x))
}

func (MDBookTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{159}
}

type LotTypeEnum int32

const (
	LotTypeEnum_LOT_TYPE_UNSPECIFIED          LotTypeEnum = 0
	LotTypeEnum_LOT_TYPE_BLOCK_LOT            LotTypeEnum = 1
	LotTypeEnum_LOT_TYPE_ODD_LOT              LotTypeEnum = 2
	LotTypeEnum_LOT_TYPE_ROUND_LOT            LotTypeEnum = 3
	LotTypeEnum_LOT_TYPE_ROUND_LOT_BASED_UPON LotTypeEnum = 4
)

var LotTypeEnum_name = map[int32]string{
	0: "LOT_TYPE_UNSPECIFIED",
	1: "LOT_TYPE_BLOCK_LOT",
	2: "LOT_TYPE_ODD_LOT",
	3: "LOT_TYPE_ROUND_LOT",
	4: "LOT_TYPE_ROUND_LOT_BASED_UPON",
}

var LotTypeEnum_value = map[string]int32{
	"LOT_TYPE_UNSPECIFIED":          0,
	"LOT_TYPE_BLOCK_LOT":            1,
	"LOT_TYPE_ODD_LOT":              2,
	"LOT_TYPE_ROUND_LOT":            3,
	"LOT_TYPE_ROUND_LOT_BASED_UPON": 4,
}

func (x LotTypeEnum) String() string {
	return proto.EnumName(LotTypeEnum_name, int32(x))
}

func (LotTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{160}
}

type MatchTypeEnum int32

const (
	MatchTypeEnum_MATCH_TYPE_UNSPECIFIED                              MatchTypeEnum = 0
	MatchTypeEnum_MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 1
	MatchTypeEnum_MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 2
	MatchTypeEnum_MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 3
	MatchTypeEnum_MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 4
	MatchTypeEnum_MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY        MatchTypeEnum = 5
	MatchTypeEnum_MATCH_TYPE_ACTACCEPTED_TRADE                        MatchTypeEnum = 6
	MatchTypeEnum_MATCH_TYPE_ACTDEFAULT_AFTER_M2                      MatchTypeEnum = 7
	MatchTypeEnum_MATCH_TYPE_ACTDEFAULT_TRADE                         MatchTypeEnum = 8
	MatchTypeEnum_MATCH_TYPE_ACTM6MATCH                               MatchTypeEnum = 9
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES           MatchTypeEnum = 10
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS2BADGES                  MatchTypeEnum = 11
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME        MatchTypeEnum = 12
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS4BADGES                  MatchTypeEnum = 13
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME        MatchTypeEnum = 14
	MatchTypeEnum_MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME               MatchTypeEnum = 15
	MatchTypeEnum_MATCH_TYPE_OCSLOCKED_IN                             MatchTypeEnum = 16
	MatchTypeEnum_MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS MatchTypeEnum = 17
	MatchTypeEnum_MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES      MatchTypeEnum = 18
	MatchTypeEnum_MATCH_TYPE_AUTO_MATCH                               MatchTypeEnum = 19
	MatchTypeEnum_MATCH_TYPE_CALL_AUCTION                             MatchTypeEnum = 20
	MatchTypeEnum_MATCH_TYPE_CONFIRMED_TRADE_REPORT                   MatchTypeEnum = 21
	MatchTypeEnum_MATCH_TYPE_COUNTER_ORDER_SELECTION                  MatchTypeEnum = 22
	MatchTypeEnum_MATCH_TYPE_CROSS_AUCTION                            MatchTypeEnum = 23
	MatchTypeEnum_MATCH_TYPE_ONE_PARTY_TRADE_REPORT                   MatchTypeEnum = 24
	MatchTypeEnum_MATCH_TYPE_TWO_PARTY_TRADE_REPORT                   MatchTypeEnum = 25
	MatchTypeEnum_MATCH_TYPE_ISSUING                                  MatchTypeEnum = 26
)

var MatchTypeEnum_name = map[int32]string{
	0:  "MATCH_TYPE_UNSPECIFIED",
	1:  "MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY",
	2:  "MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY",
	3:  "MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY",
	4:  "MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY",
	5:  "MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY",
	6:  "MATCH_TYPE_ACTACCEPTED_TRADE",
	7:  "MATCH_TYPE_ACTDEFAULT_AFTER_M2",
	8:  "MATCH_TYPE_ACTDEFAULT_TRADE",
	9:  "MATCH_TYPE_ACTM6MATCH",
	10: "MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES",
	11: "MATCH_TYPE_EXACT_MATCH_PLUS2BADGES",
	12: "MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME",
	13: "MATCH_TYPE_EXACT_MATCH_PLUS4BADGES",
	14: "MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME",
	15: "MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME",
	16: "MATCH_TYPE_OCSLOCKED_IN",
	17: "MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS",
	18: "MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES",
	19: "MATCH_TYPE_AUTO_MATCH",
	20: "MATCH_TYPE_CALL_AUCTION",
	21: "MATCH_TYPE_CONFIRMED_TRADE_REPORT",
	22: "MATCH_TYPE_COUNTER_ORDER_SELECTION",
	23: "MATCH_TYPE_CROSS_AUCTION",
	24: "MATCH_TYPE_ONE_PARTY_TRADE_REPORT",
	25: "MATCH_TYPE_TWO_PARTY_TRADE_REPORT",
	26: "MATCH_TYPE_ISSUING",
}

var MatchTypeEnum_value = map[string]int32{
	"MATCH_TYPE_UNSPECIFIED":                              0,
	"MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY":        1,
	"MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY":        2,
	"MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY":        3,
	"MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY":        4,
	"MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY":        5,
	"MATCH_TYPE_ACTACCEPTED_TRADE":                        6,
	"MATCH_TYPE_ACTDEFAULT_AFTER_M2":                      7,
	"MATCH_TYPE_ACTDEFAULT_TRADE":                         8,
	"MATCH_TYPE_ACTM6MATCH":                               9,
	"MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES":           10,
	"MATCH_TYPE_EXACT_MATCH_PLUS2BADGES":                  11,
	"MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME":        12,
	"MATCH_TYPE_EXACT_MATCH_PLUS4BADGES":                  13,
	"MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME":        14,
	"MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME":               15,
	"MATCH_TYPE_OCSLOCKED_IN":                             16,
	"MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS": 17,
	"MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES":      18,
	"MATCH_TYPE_AUTO_MATCH":                               19,
	"MATCH_TYPE_CALL_AUCTION":                             20,
	"MATCH_TYPE_CONFIRMED_TRADE_REPORT":                   21,
	"MATCH_TYPE_COUNTER_ORDER_SELECTION":                  22,
	"MATCH_TYPE_CROSS_AUCTION":                            23,
	"MATCH_TYPE_ONE_PARTY_TRADE_REPORT":                   24,
	"MATCH_TYPE_TWO_PARTY_TRADE_REPORT":                   25,
	"MATCH_TYPE_ISSUING":                                  26,
}

func (x MatchTypeEnum) String() string {
	return proto.EnumName(MatchTypeEnum_name, int32(x))
}

func (MatchTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{161}
}

type ExecInstValueEnum int32

const (
	ExecInstValueEnum_EXEC_INST_VALUE_UNSPECIFIED                                           ExecInstValueEnum = 0
	ExecInstValueEnum_EXEC_INST_VALUE_ALL_OR_NONE                                           ExecInstValueEnum = 1
	ExecInstValueEnum_EXEC_INST_VALUE_CALL_FIRST                                            ExecInstValueEnum = 2
	ExecInstValueEnum_EXEC_INST_VALUE_DO_NOT_INCREASE                                       ExecInstValueEnum = 3
	ExecInstValueEnum_EXEC_INST_VALUE_DO_NOT_REDUCE                                         ExecInstValueEnum = 4
	ExecInstValueEnum_EXEC_INST_VALUE_GO_ALONG                                              ExecInstValueEnum = 5
	ExecInstValueEnum_EXEC_INST_VALUE_HELD                                                  ExecInstValueEnum = 6
	ExecInstValueEnum_EXEC_INST_VALUE_NOT_HELD                                              ExecInstValueEnum = 7
	ExecInstValueEnum_EXEC_INST_VALUE_NO_CROSS                                              ExecInstValueEnum = 8
	ExecInstValueEnum_EXEC_INST_VALUE_OKTO_CROSS                                            ExecInstValueEnum = 9
	ExecInstValueEnum_EXEC_INST_VALUE_OVER_THE_DAY                                          ExecInstValueEnum = 10
	ExecInstValueEnum_EXEC_INST_VALUE_PARTICIPATE_DO_NOT_INITIATE                           ExecInstValueEnum = 11
	ExecInstValueEnum_EXEC_INST_VALUE_PERCENT_OF_VOLUME                                     ExecInstValueEnum = 12
	ExecInstValueEnum_EXEC_INST_VALUE_STAY_ON_BID_SIDE                                      ExecInstValueEnum = 13
	ExecInstValueEnum_EXEC_INST_VALUE_STAY_ON_OFFER_SIDE                                    ExecInstValueEnum = 14
	ExecInstValueEnum_EXEC_INST_VALUE_STRICT_SCALE                                          ExecInstValueEnum = 15
	ExecInstValueEnum_EXEC_INST_VALUE_TRY_TO_SCALE                                          ExecInstValueEnum = 16
	ExecInstValueEnum_EXEC_INST_VALUE_WORK                                                  ExecInstValueEnum = 17
	ExecInstValueEnum_EXEC_INST_VALUE_INSTITUTIONS_ONLY                                     ExecInstValueEnum = 18
	ExecInstValueEnum_EXEC_INST_VALUE_LAST_PEG                                              ExecInstValueEnum = 19
	ExecInstValueEnum_EXEC_INST_VALUE_MARKET_PEG                                            ExecInstValueEnum = 20
	ExecInstValueEnum_EXEC_INST_VALUE_MID_PRICE_PEG                                         ExecInstValueEnum = 21
	ExecInstValueEnum_EXEC_INST_VALUE_NON_NEGOTIABLE                                        ExecInstValueEnum = 22
	ExecInstValueEnum_EXEC_INST_VALUE_OPENING_PEG                                           ExecInstValueEnum = 23
	ExecInstValueEnum_EXEC_INST_VALUE_PRIMARY_PEG                                           ExecInstValueEnum = 24
	ExecInstValueEnum_EXEC_INST_VALUE_SUSPEND                                               ExecInstValueEnum = 25
	ExecInstValueEnum_EXEC_INST_VALUE_CUSTOMER_DISPLAY_INSTRUCTION                          ExecInstValueEnum = 26
	ExecInstValueEnum_EXEC_INST_VALUE_NETTING                                               ExecInstValueEnum = 27
	ExecInstValueEnum_EXEC_INST_VALUE_PEG_TO_VWAP                                           ExecInstValueEnum = 28
	ExecInstValueEnum_EXEC_INST_VALUE_CANCEL_ON_SYSTEM_FAILURE                              ExecInstValueEnum = 29
	ExecInstValueEnum_EXEC_INST_VALUE_CANCEL_ON_TRADING_HALT                                ExecInstValueEnum = 30
	ExecInstValueEnum_EXEC_INST_VALUE_REINSTATE_ON_SYSTEM_FAILURE                           ExecInstValueEnum = 31
	ExecInstValueEnum_EXEC_INST_VALUE_REINSTATE_ON_TRADING_HALT                             ExecInstValueEnum = 32
	ExecInstValueEnum_EXEC_INST_VALUE_TRADE_ALONG                                           ExecInstValueEnum = 33
	ExecInstValueEnum_EXEC_INST_VALUE_TRY_TO_STOP                                           ExecInstValueEnum = 34
	ExecInstValueEnum_EXEC_INST_VALUE_CANCEL_IF_NOT_BEST                                    ExecInstValueEnum = 35
	ExecInstValueEnum_EXEC_INST_VALUE_IGNORE_PRICE_VALIDITY_CHECKS                          ExecInstValueEnum = 36
	ExecInstValueEnum_EXEC_INST_VALUE_PEG_TO_LIMIT_PRICE                                    ExecInstValueEnum = 37
	ExecInstValueEnum_EXEC_INST_VALUE_STRICT_LIMIT                                          ExecInstValueEnum = 38
	ExecInstValueEnum_EXEC_INST_VALUE_TRAILING_STOP_PEG                                     ExecInstValueEnum = 39
	ExecInstValueEnum_EXEC_INST_VALUE_WORK_TO_TARGET_STRATEGY                               ExecInstValueEnum = 40
	ExecInstValueEnum_EXEC_INST_VALUE_INTERMARKET_SWEEP                                     ExecInstValueEnum = 41
	ExecInstValueEnum_EXEC_INST_VALUE_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE            ExecInstValueEnum = 42
	ExecInstValueEnum_EXEC_INST_VALUE_EXTERNAL_ROUTING_ALLOWED                              ExecInstValueEnum = 43
	ExecInstValueEnum_EXEC_INST_VALUE_EXTERNAL_ROUTING_NOT_ALLOWED                          ExecInstValueEnum = 44
	ExecInstValueEnum_EXEC_INST_VALUE_IMBALANCE_ONLY                                        ExecInstValueEnum = 45
	ExecInstValueEnum_EXEC_INST_VALUE_BEST_EXECUTION                                        ExecInstValueEnum = 46
	ExecInstValueEnum_EXEC_INST_VALUE_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER ExecInstValueEnum = 47
	ExecInstValueEnum_EXEC_INST_VALUE_CANCEL_ON_CONNECTION_LOSS                             ExecInstValueEnum = 48
	ExecInstValueEnum_EXEC_INST_VALUE_REINSTATE_ON_CONNECTION_LOSS                          ExecInstValueEnum = 49
	ExecInstValueEnum_EXEC_INST_VALUE_RELEASE_FROM_SUSPENSION                               ExecInstValueEnum = 50
	ExecInstValueEnum_EXEC_INST_VALUE_SUSPEND_ON_CONNECTION_LOSS                            ExecInstValueEnum = 51
	ExecInstValueEnum_EXEC_INST_VALUE_SUSPEND_ON_SYSTEM_FAILURE                             ExecInstValueEnum = 52
	ExecInstValueEnum_EXEC_INST_VALUE_SUSPEND_ON_TRADING_HALT                               ExecInstValueEnum = 53
	ExecInstValueEnum_EXEC_INST_VALUE_EXECUTE_AS_DELTA_NEUTRAL                              ExecInstValueEnum = 54
	ExecInstValueEnum_EXEC_INST_VALUE_EXECUTE_AS_DURATION_NEUTRAL                           ExecInstValueEnum = 55
	ExecInstValueEnum_EXEC_INST_VALUE_EXECUTE_AS_FX_NEUTRAL                                 ExecInstValueEnum = 56
)

var ExecInstValueEnum_name = map[int32]string{
	0:  "EXEC_INST_VALUE_UNSPECIFIED",
	1:  "EXEC_INST_VALUE_ALL_OR_NONE",
	2:  "EXEC_INST_VALUE_CALL_FIRST",
	3:  "EXEC_INST_VALUE_DO_NOT_INCREASE",
	4:  "EXEC_INST_VALUE_DO_NOT_REDUCE",
	5:  "EXEC_INST_VALUE_GO_ALONG",
	6:  "EXEC_INST_VALUE_HELD",
	7:  "EXEC_INST_VALUE_NOT_HELD",
	8:  "EXEC_INST_VALUE_NO_CROSS",
	9:  "EXEC_INST_VALUE_OKTO_CROSS",
	10: "EXEC_INST_VALUE_OVER_THE_DAY",
	11: "EXEC_INST_VALUE_PARTICIPATE_DO_NOT_INITIATE",
	12: "EXEC_INST_VALUE_PERCENT_OF_VOLUME",
	13: "EXEC_INST_VALUE_STAY_ON_BID_SIDE",
	14: "EXEC_INST_VALUE_STAY_ON_OFFER_SIDE",
	15: "EXEC_INST_VALUE_STRICT_SCALE",
	16: "EXEC_INST_VALUE_TRY_TO_SCALE",
	17: "EXEC_INST_VALUE_WORK",
	18: "EXEC_INST_VALUE_INSTITUTIONS_ONLY",
	19: "EXEC_INST_VALUE_LAST_PEG",
	20: "EXEC_INST_VALUE_MARKET_PEG",
	21: "EXEC_INST_VALUE_MID_PRICE_PEG",
	22: "EXEC_INST_VALUE_NON_NEGOTIABLE",
	23: "EXEC_INST_VALUE_OPENING_PEG",
	24: "EXEC_INST_VALUE_PRIMARY_PEG",
	25: "EXEC_INST_VALUE_SUSPEND",
	26: "EXEC_INST_VALUE_CUSTOMER_DISPLAY_INSTRUCTION",
	27: "EXEC_INST_VALUE_NETTING",
	28: "EXEC_INST_VALUE_PEG_TO_VWAP",
	29: "EXEC_INST_VALUE_CANCEL_ON_SYSTEM_FAILURE",
	30: "EXEC_INST_VALUE_CANCEL_ON_TRADING_HALT",
	31: "EXEC_INST_VALUE_REINSTATE_ON_SYSTEM_FAILURE",
	32: "EXEC_INST_VALUE_REINSTATE_ON_TRADING_HALT",
	33: "EXEC_INST_VALUE_TRADE_ALONG",
	34: "EXEC_INST_VALUE_TRY_TO_STOP",
	35: "EXEC_INST_VALUE_CANCEL_IF_NOT_BEST",
	36: "EXEC_INST_VALUE_IGNORE_PRICE_VALIDITY_CHECKS",
	37: "EXEC_INST_VALUE_PEG_TO_LIMIT_PRICE",
	38: "EXEC_INST_VALUE_STRICT_LIMIT",
	39: "EXEC_INST_VALUE_TRAILING_STOP_PEG",
	40: "EXEC_INST_VALUE_WORK_TO_TARGET_STRATEGY",
	41: "EXEC_INST_VALUE_INTERMARKET_SWEEP",
	42: "EXEC_INST_VALUE_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE",
	43: "EXEC_INST_VALUE_EXTERNAL_ROUTING_ALLOWED",
	44: "EXEC_INST_VALUE_EXTERNAL_ROUTING_NOT_ALLOWED",
	45: "EXEC_INST_VALUE_IMBALANCE_ONLY",
	46: "EXEC_INST_VALUE_BEST_EXECUTION",
	47: "EXEC_INST_VALUE_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER",
	48: "EXEC_INST_VALUE_CANCEL_ON_CONNECTION_LOSS",
	49: "EXEC_INST_VALUE_REINSTATE_ON_CONNECTION_LOSS",
	50: "EXEC_INST_VALUE_RELEASE_FROM_SUSPENSION",
	51: "EXEC_INST_VALUE_SUSPEND_ON_CONNECTION_LOSS",
	52: "EXEC_INST_VALUE_SUSPEND_ON_SYSTEM_FAILURE",
	53: "EXEC_INST_VALUE_SUSPEND_ON_TRADING_HALT",
	54: "EXEC_INST_VALUE_EXECUTE_AS_DELTA_NEUTRAL",
	55: "EXEC_INST_VALUE_EXECUTE_AS_DURATION_NEUTRAL",
	56: "EXEC_INST_VALUE_EXECUTE_AS_FX_NEUTRAL",
}

var ExecInstValueEnum_value = map[string]int32{
	"EXEC_INST_VALUE_UNSPECIFIED":                                           0,
	"EXEC_INST_VALUE_ALL_OR_NONE":                                           1,
	"EXEC_INST_VALUE_CALL_FIRST":                                            2,
	"EXEC_INST_VALUE_DO_NOT_INCREASE":                                       3,
	"EXEC_INST_VALUE_DO_NOT_REDUCE":                                         4,
	"EXEC_INST_VALUE_GO_ALONG":                                              5,
	"EXEC_INST_VALUE_HELD":                                                  6,
	"EXEC_INST_VALUE_NOT_HELD":                                              7,
	"EXEC_INST_VALUE_NO_CROSS":                                              8,
	"EXEC_INST_VALUE_OKTO_CROSS":                                            9,
	"EXEC_INST_VALUE_OVER_THE_DAY":                                          10,
	"EXEC_INST_VALUE_PARTICIPATE_DO_NOT_INITIATE":                           11,
	"EXEC_INST_VALUE_PERCENT_OF_VOLUME":                                     12,
	"EXEC_INST_VALUE_STAY_ON_BID_SIDE":                                      13,
	"EXEC_INST_VALUE_STAY_ON_OFFER_SIDE":                                    14,
	"EXEC_INST_VALUE_STRICT_SCALE":                                          15,
	"EXEC_INST_VALUE_TRY_TO_SCALE":                                          16,
	"EXEC_INST_VALUE_WORK":                                                  17,
	"EXEC_INST_VALUE_INSTITUTIONS_ONLY":                                     18,
	"EXEC_INST_VALUE_LAST_PEG":                                              19,
	"EXEC_INST_VALUE_MARKET_PEG":                                            20,
	"EXEC_INST_VALUE_MID_PRICE_PEG":                                         21,
	"EXEC_INST_VALUE_NON_NEGOTIABLE":                                        22,
	"EXEC_INST_VALUE_OPENING_PEG":                                           23,
	"EXEC_INST_VALUE_PRIMARY_PEG":                                           24,
	"EXEC_INST_VALUE_SUSPEND":                                               25,
	"EXEC_INST_VALUE_CUSTOMER_DISPLAY_INSTRUCTION":                          26,
	"EXEC_INST_VALUE_NETTING":                                               27,
	"EXEC_INST_VALUE_PEG_TO_VWAP":                                           28,
	"EXEC_INST_VALUE_CANCEL_ON_SYSTEM_FAILURE":                              29,
	"EXEC_INST_VALUE_CANCEL_ON_TRADING_HALT":                                30,
	"EXEC_INST_VALUE_REINSTATE_ON_SYSTEM_FAILURE":                           31,
	"EXEC_INST_VALUE_REINSTATE_ON_TRADING_HALT":                             32,
	"EXEC_INST_VALUE_TRADE_ALONG":                                           33,
	"EXEC_INST_VALUE_TRY_TO_STOP":                                           34,
	"EXEC_INST_VALUE_CANCEL_IF_NOT_BEST":                                    35,
	"EXEC_INST_VALUE_IGNORE_PRICE_VALIDITY_CHECKS":                          36,
	"EXEC_INST_VALUE_PEG_TO_LIMIT_PRICE":                                    37,
	"EXEC_INST_VALUE_STRICT_LIMIT":                                          38,
	"EXEC_INST_VALUE_TRAILING_STOP_PEG":                                     39,
	"EXEC_INST_VALUE_WORK_TO_TARGET_STRATEGY":                               40,
	"EXEC_INST_VALUE_INTERMARKET_SWEEP":                                     41,
	"EXEC_INST_VALUE_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE":            42,
	"EXEC_INST_VALUE_EXTERNAL_ROUTING_ALLOWED":                              43,
	"EXEC_INST_VALUE_EXTERNAL_ROUTING_NOT_ALLOWED":                          44,
	"EXEC_INST_VALUE_IMBALANCE_ONLY":                                        45,
	"EXEC_INST_VALUE_BEST_EXECUTION":                                        46,
	"EXEC_INST_VALUE_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER": 47,
	"EXEC_INST_VALUE_CANCEL_ON_CONNECTION_LOSS":                             48,
	"EXEC_INST_VALUE_REINSTATE_ON_CONNECTION_LOSS":                          49,
	"EXEC_INST_VALUE_RELEASE_FROM_SUSPENSION":                               50,
	"EXEC_INST_VALUE_SUSPEND_ON_CONNECTION_LOSS":                            51,
	"EXEC_INST_VALUE_SUSPEND_ON_SYSTEM_FAILURE":                             52,
	"EXEC_INST_VALUE_SUSPEND_ON_TRADING_HALT":                               53,
	"EXEC_INST_VALUE_EXECUTE_AS_DELTA_NEUTRAL":                              54,
	"EXEC_INST_VALUE_EXECUTE_AS_DURATION_NEUTRAL":                           55,
	"EXEC_INST_VALUE_EXECUTE_AS_FX_NEUTRAL":                                 56,
}

func (x ExecInstValueEnum) String() string {
	return proto.EnumName(ExecInstValueEnum_name, int32(x))
}

func (ExecInstValueEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{162}
}

type TimeInForceEnum int32

const (
	TimeInForceEnum_TIME_IN_FORCE_UNSPECIFIED           TimeInForceEnum = 0
	TimeInForceEnum_TIME_IN_FORCE_AT_THE_OPENING        TimeInForceEnum = 1
	TimeInForceEnum_TIME_IN_FORCE_DAY                   TimeInForceEnum = 2
	TimeInForceEnum_TIME_IN_FORCE_FILL_OR_KILL          TimeInForceEnum = 3
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_CANCEL      TimeInForceEnum = 4
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_CROSSING    TimeInForceEnum = 5
	TimeInForceEnum_TIME_IN_FORCE_IMMEDIATE_OR_CANCEL   TimeInForceEnum = 6
	TimeInForceEnum_TIME_IN_FORCE_GOOD_TILL_DATE        TimeInForceEnum = 7
	TimeInForceEnum_TIME_IN_FORCE_AT_THE_CLOSE          TimeInForceEnum = 8
	TimeInForceEnum_TIME_IN_FORCE_AT_CROSSING           TimeInForceEnum = 9
	TimeInForceEnum_TIME_IN_FORCE_GOOD_THROUGH_CROSSING TimeInForceEnum = 10
)

var TimeInForceEnum_name = map[int32]string{
	0:  "TIME_IN_FORCE_UNSPECIFIED",
	1:  "TIME_IN_FORCE_AT_THE_OPENING",
	2:  "TIME_IN_FORCE_DAY",
	3:  "TIME_IN_FORCE_FILL_OR_KILL",
	4:  "TIME_IN_FORCE_GOOD_TILL_CANCEL",
	5:  "TIME_IN_FORCE_GOOD_TILL_CROSSING",
	6:  "TIME_IN_FORCE_IMMEDIATE_OR_CANCEL",
	7:  "TIME_IN_FORCE_GOOD_TILL_DATE",
	8:  "TIME_IN_FORCE_AT_THE_CLOSE",
	9:  "TIME_IN_FORCE_AT_CROSSING",
	10: "TIME_IN_FORCE_GOOD_THROUGH_CROSSING",
}

var TimeInForceEnum_value = map[string]int32{
	"TIME_IN_FORCE_UNSPECIFIED":           0,
	"TIME_IN_FORCE_AT_THE_OPENING":        1,
	"TIME_IN_FORCE_DAY":                   2,
	"TIME_IN_FORCE_FILL_OR_KILL":          3,
	"TIME_IN_FORCE_GOOD_TILL_CANCEL":      4,
	"TIME_IN_FORCE_GOOD_TILL_CROSSING":    5,
	"TIME_IN_FORCE_IMMEDIATE_OR_CANCEL":   6,
	"TIME_IN_FORCE_GOOD_TILL_DATE":        7,
	"TIME_IN_FORCE_AT_THE_CLOSE":          8,
	"TIME_IN_FORCE_AT_CROSSING":           9,
	"TIME_IN_FORCE_GOOD_THROUGH_CROSSING": 10,
}

func (x TimeInForceEnum) String() string {
	return proto.EnumName(TimeInForceEnum_name, int32(x))
}

func (TimeInForceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{163}
}

type OrdTypeEnum int32

const (
	OrdTypeEnum_ORD_TYPE_UNSPECIFIED                    OrdTypeEnum = 0
	OrdTypeEnum_ORD_TYPE_LIMIT                          OrdTypeEnum = 1
	OrdTypeEnum_ORD_TYPE_LIMIT_ON_CLOSE                 OrdTypeEnum = 2
	OrdTypeEnum_ORD_TYPE_LIMIT_OR_BETTER                OrdTypeEnum = 3
	OrdTypeEnum_ORD_TYPE_LIMIT_WITH_OR_WITHOUT          OrdTypeEnum = 4
	OrdTypeEnum_ORD_TYPE_MARKET                         OrdTypeEnum = 5
	OrdTypeEnum_ORD_TYPE_MARKET_ON_CLOSE                OrdTypeEnum = 6
	OrdTypeEnum_ORD_TYPE_ON_BASIS                       OrdTypeEnum = 7
	OrdTypeEnum_ORD_TYPE_ON_CLOSE                       OrdTypeEnum = 8
	OrdTypeEnum_ORD_TYPE_STOP                           OrdTypeEnum = 9
	OrdTypeEnum_ORD_TYPE_STOP_LIMIT                     OrdTypeEnum = 10
	OrdTypeEnum_ORD_TYPE_WITH_OR_WITHOUT                OrdTypeEnum = 11
	OrdTypeEnum_ORD_TYPE_PEGGED                         OrdTypeEnum = 12
	OrdTypeEnum_ORD_TYPE_FOREX_MARKET                   OrdTypeEnum = 13
	OrdTypeEnum_ORD_TYPE_PREVIOUSLY_INDICATED           OrdTypeEnum = 14
	OrdTypeEnum_ORD_TYPE_PREVIOUSLY_QUOTED              OrdTypeEnum = 15
	OrdTypeEnum_ORD_TYPE_FOREX_LIMIT                    OrdTypeEnum = 16
	OrdTypeEnum_ORD_TYPE_FOREX_PREVIOUSLY_QUOTED        OrdTypeEnum = 17
	OrdTypeEnum_ORD_TYPE_FOREX_SWAP                     OrdTypeEnum = 18
	OrdTypeEnum_ORD_TYPE_FUNARI                         OrdTypeEnum = 19
	OrdTypeEnum_ORD_TYPE_MARKET_IF_TOUCHED              OrdTypeEnum = 20
	OrdTypeEnum_ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT OrdTypeEnum = 21
	OrdTypeEnum_ORD_TYPE_NEXT_FUND_VALUATION_POINT      OrdTypeEnum = 22
	OrdTypeEnum_ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT  OrdTypeEnum = 23
	OrdTypeEnum_ORD_TYPE_COUNTER_ORDER_SELECTION        OrdTypeEnum = 24
)

var OrdTypeEnum_name = map[int32]string{
	0:  "ORD_TYPE_UNSPECIFIED",
	1:  "ORD_TYPE_LIMIT",
	2:  "ORD_TYPE_LIMIT_ON_CLOSE",
	3:  "ORD_TYPE_LIMIT_OR_BETTER",
	4:  "ORD_TYPE_LIMIT_WITH_OR_WITHOUT",
	5:  "ORD_TYPE_MARKET",
	6:  "ORD_TYPE_MARKET_ON_CLOSE",
	7:  "ORD_TYPE_ON_BASIS",
	8:  "ORD_TYPE_ON_CLOSE",
	9:  "ORD_TYPE_STOP",
	10: "ORD_TYPE_STOP_LIMIT",
	11: "ORD_TYPE_WITH_OR_WITHOUT",
	12: "ORD_TYPE_PEGGED",
	13: "ORD_TYPE_FOREX_MARKET",
	14: "ORD_TYPE_PREVIOUSLY_INDICATED",
	15: "ORD_TYPE_PREVIOUSLY_QUOTED",
	16: "ORD_TYPE_FOREX_LIMIT",
	17: "ORD_TYPE_FOREX_PREVIOUSLY_QUOTED",
	18: "ORD_TYPE_FOREX_SWAP",
	19: "ORD_TYPE_FUNARI",
	20: "ORD_TYPE_MARKET_IF_TOUCHED",
	21: "ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT",
	22: "ORD_TYPE_NEXT_FUND_VALUATION_POINT",
	23: "ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT",
	24: "ORD_TYPE_COUNTER_ORDER_SELECTION",
}

var OrdTypeEnum_value = map[string]int32{
	"ORD_TYPE_UNSPECIFIED":                    0,
	"ORD_TYPE_LIMIT":                          1,
	"ORD_TYPE_LIMIT_ON_CLOSE":                 2,
	"ORD_TYPE_LIMIT_OR_BETTER":                3,
	"ORD_TYPE_LIMIT_WITH_OR_WITHOUT":          4,
	"ORD_TYPE_MARKET":                         5,
	"ORD_TYPE_MARKET_ON_CLOSE":                6,
	"ORD_TYPE_ON_BASIS":                       7,
	"ORD_TYPE_ON_CLOSE":                       8,
	"ORD_TYPE_STOP":                           9,
	"ORD_TYPE_STOP_LIMIT":                     10,
	"ORD_TYPE_WITH_OR_WITHOUT":                11,
	"ORD_TYPE_PEGGED":                         12,
	"ORD_TYPE_FOREX_MARKET":                   13,
	"ORD_TYPE_PREVIOUSLY_INDICATED":           14,
	"ORD_TYPE_PREVIOUSLY_QUOTED":              15,
	"ORD_TYPE_FOREX_LIMIT":                    16,
	"ORD_TYPE_FOREX_PREVIOUSLY_QUOTED":        17,
	"ORD_TYPE_FOREX_SWAP":                     18,
	"ORD_TYPE_FUNARI":                         19,
	"ORD_TYPE_MARKET_IF_TOUCHED":              20,
	"ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT": 21,
	"ORD_TYPE_NEXT_FUND_VALUATION_POINT":      22,
	"ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT":  23,
	"ORD_TYPE_COUNTER_ORDER_SELECTION":        24,
}

func (x OrdTypeEnum) String() string {
	return proto.EnumName(OrdTypeEnum_name, int32(x))
}

func (OrdTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{164}
}

type ExpirationCycleEnum int32

const (
	ExpirationCycleEnum_EXPIRATION_CYCLE_UNSPECIFIED                     ExpirationCycleEnum = 0
	ExpirationCycleEnum_EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_CLOSE ExpirationCycleEnum = 1
	ExpirationCycleEnum_EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_OPEN  ExpirationCycleEnum = 2
	ExpirationCycleEnum_EXPIRATION_CYCLE_SPECIFIED_EXPIRATION            ExpirationCycleEnum = 3
)

var ExpirationCycleEnum_name = map[int32]string{
	0: "EXPIRATION_CYCLE_UNSPECIFIED",
	1: "EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_CLOSE",
	2: "EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_OPEN",
	3: "EXPIRATION_CYCLE_SPECIFIED_EXPIRATION",
}

var ExpirationCycleEnum_value = map[string]int32{
	"EXPIRATION_CYCLE_UNSPECIFIED":                     0,
	"EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_CLOSE": 1,
	"EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_OPEN":  2,
	"EXPIRATION_CYCLE_SPECIFIED_EXPIRATION":            3,
}

func (x ExpirationCycleEnum) String() string {
	return proto.EnumName(ExpirationCycleEnum_name, int32(x))
}

func (ExpirationCycleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{165}
}

type ImpliedMarketIndicatorEnum int32

const (
	ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_UNSPECIFIED                     ImpliedMarketIndicatorEnum = 0
	ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_BOTH_IMPLIED_IN_AND_IMPLIED_OUT ImpliedMarketIndicatorEnum = 1
	ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_IMPLIED_IN                      ImpliedMarketIndicatorEnum = 2
	ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_IMPLIED_OUT                     ImpliedMarketIndicatorEnum = 3
	ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_NOT_IMPLIED                     ImpliedMarketIndicatorEnum = 4
)

var ImpliedMarketIndicatorEnum_name = map[int32]string{
	0: "IMPLIED_MARKET_INDICATOR_UNSPECIFIED",
	1: "IMPLIED_MARKET_INDICATOR_BOTH_IMPLIED_IN_AND_IMPLIED_OUT",
	2: "IMPLIED_MARKET_INDICATOR_IMPLIED_IN",
	3: "IMPLIED_MARKET_INDICATOR_IMPLIED_OUT",
	4: "IMPLIED_MARKET_INDICATOR_NOT_IMPLIED",
}

var ImpliedMarketIndicatorEnum_value = map[string]int32{
	"IMPLIED_MARKET_INDICATOR_UNSPECIFIED":                     0,
	"IMPLIED_MARKET_INDICATOR_BOTH_IMPLIED_IN_AND_IMPLIED_OUT": 1,
	"IMPLIED_MARKET_INDICATOR_IMPLIED_IN":                      2,
	"IMPLIED_MARKET_INDICATOR_IMPLIED_OUT":                     3,
	"IMPLIED_MARKET_INDICATOR_NOT_IMPLIED":                     4,
}

func (x ImpliedMarketIndicatorEnum) String() string {
	return proto.EnumName(ImpliedMarketIndicatorEnum_name, int32(x))
}

func (ImpliedMarketIndicatorEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{166}
}

type MultilegModelEnum int32

const (
	MultilegModelEnum_MULTILEG_MODEL_UNSPECIFIED                    MultilegModelEnum = 0
	MultilegModelEnum_MULTILEG_MODEL_PREDEFINED_MULTILEG_SECURITY   MultilegModelEnum = 1
	MultilegModelEnum_MULTILEG_MODEL_USER_DEFINED                   MultilegModelEnum = 2
	MultilegModelEnum_MULTILEG_MODEL_USER_DEFINED_MULTILEG_SECURITY MultilegModelEnum = 3
)

var MultilegModelEnum_name = map[int32]string{
	0: "MULTILEG_MODEL_UNSPECIFIED",
	1: "MULTILEG_MODEL_PREDEFINED_MULTILEG_SECURITY",
	2: "MULTILEG_MODEL_USER_DEFINED",
	3: "MULTILEG_MODEL_USER_DEFINED_MULTILEG_SECURITY",
}

var MultilegModelEnum_value = map[string]int32{
	"MULTILEG_MODEL_UNSPECIFIED":                    0,
	"MULTILEG_MODEL_PREDEFINED_MULTILEG_SECURITY":   1,
	"MULTILEG_MODEL_USER_DEFINED":                   2,
	"MULTILEG_MODEL_USER_DEFINED_MULTILEG_SECURITY": 3,
}

func (x MultilegModelEnum) String() string {
	return proto.EnumName(MultilegModelEnum_name, int32(x))
}

func (MultilegModelEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{167}
}

type MultilegPriceMethodEnum int32

const (
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_UNSPECIFIED                     MultilegPriceMethodEnum = 0
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_CONTRACT_WEIGHTED_AVERAGE_PRICE MultilegPriceMethodEnum = 1
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_INDIVIDUAL                      MultilegPriceMethodEnum = 2
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_MULTIPLIED_PRICE                MultilegPriceMethodEnum = 3
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_NET_PRICE                       MultilegPriceMethodEnum = 4
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_REVERSED_NET_PRICE              MultilegPriceMethodEnum = 5
	MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_YIELD_DIFFERENCE                MultilegPriceMethodEnum = 6
)

var MultilegPriceMethodEnum_name = map[int32]string{
	0: "MULTILEG_PRICE_METHOD_UNSPECIFIED",
	1: "MULTILEG_PRICE_METHOD_CONTRACT_WEIGHTED_AVERAGE_PRICE",
	2: "MULTILEG_PRICE_METHOD_INDIVIDUAL",
	3: "MULTILEG_PRICE_METHOD_MULTIPLIED_PRICE",
	4: "MULTILEG_PRICE_METHOD_NET_PRICE",
	5: "MULTILEG_PRICE_METHOD_REVERSED_NET_PRICE",
	6: "MULTILEG_PRICE_METHOD_YIELD_DIFFERENCE",
}

var MultilegPriceMethodEnum_value = map[string]int32{
	"MULTILEG_PRICE_METHOD_UNSPECIFIED":                     0,
	"MULTILEG_PRICE_METHOD_CONTRACT_WEIGHTED_AVERAGE_PRICE": 1,
	"MULTILEG_PRICE_METHOD_INDIVIDUAL":                      2,
	"MULTILEG_PRICE_METHOD_MULTIPLIED_PRICE":                3,
	"MULTILEG_PRICE_METHOD_NET_PRICE":                       4,
	"MULTILEG_PRICE_METHOD_REVERSED_NET_PRICE":              5,
	"MULTILEG_PRICE_METHOD_YIELD_DIFFERENCE":                6,
}

func (x MultilegPriceMethodEnum) String() string {
	return proto.EnumName(MultilegPriceMethodEnum_name, int32(x))
}

func (MultilegPriceMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{168}
}

type PriceTypeEnum int32

const (
	PriceTypeEnum_PRICE_TYPE_UNSPECIFIED                        PriceTypeEnum = 0
	PriceTypeEnum_PRICE_TYPE_FIXED_AMOUNT                       PriceTypeEnum = 1
	PriceTypeEnum_PRICE_TYPE_PERCENTAGE                         PriceTypeEnum = 2
	PriceTypeEnum_PRICE_TYPE_PER_UNIT                           PriceTypeEnum = 3
	PriceTypeEnum_PRICE_TYPE_DISCOUNT                           PriceTypeEnum = 4
	PriceTypeEnum_PRICE_TYPE_PREMIUM                            PriceTypeEnum = 5
	PriceTypeEnum_PRICE_TYPE_SPREAD                             PriceTypeEnum = 6
	PriceTypeEnum_PRICE_TYPE_TEDPRICE                           PriceTypeEnum = 7
	PriceTypeEnum_PRICE_TYPE_TEDYIELD                           PriceTypeEnum = 8
	PriceTypeEnum_PRICE_TYPE_FIXED_CABINET_TRADE_PRICE          PriceTypeEnum = 9
	PriceTypeEnum_PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE       PriceTypeEnum = 10
	PriceTypeEnum_PRICE_TYPE_YIELD                              PriceTypeEnum = 11
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS            PriceTypeEnum = 12
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS           PriceTypeEnum = 13
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_HALFS             PriceTypeEnum = 14
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS PriceTypeEnum = 15
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS        PriceTypeEnum = 16
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS      PriceTypeEnum = 17
	PriceTypeEnum_PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS    PriceTypeEnum = 18
)

var PriceTypeEnum_name = map[int32]string{
	0:  "PRICE_TYPE_UNSPECIFIED",
	1:  "PRICE_TYPE_FIXED_AMOUNT",
	2:  "PRICE_TYPE_PERCENTAGE",
	3:  "PRICE_TYPE_PER_UNIT",
	4:  "PRICE_TYPE_DISCOUNT",
	5:  "PRICE_TYPE_PREMIUM",
	6:  "PRICE_TYPE_SPREAD",
	7:  "PRICE_TYPE_TEDPRICE",
	8:  "PRICE_TYPE_TEDYIELD",
	9:  "PRICE_TYPE_FIXED_CABINET_TRADE_PRICE",
	10: "PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE",
	11: "PRICE_TYPE_YIELD",
	12: "PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS",
	13: "PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS",
	14: "PRICE_TYPE_PRODUCT_TICKS_IN_HALFS",
	15: "PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS",
	16: "PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS",
	17: "PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS",
	18: "PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS",
}

var PriceTypeEnum_value = map[string]int32{
	"PRICE_TYPE_UNSPECIFIED":                        0,
	"PRICE_TYPE_FIXED_AMOUNT":                       1,
	"PRICE_TYPE_PERCENTAGE":                         2,
	"PRICE_TYPE_PER_UNIT":                           3,
	"PRICE_TYPE_DISCOUNT":                           4,
	"PRICE_TYPE_PREMIUM":                            5,
	"PRICE_TYPE_SPREAD":                             6,
	"PRICE_TYPE_TEDPRICE":                           7,
	"PRICE_TYPE_TEDYIELD":                           8,
	"PRICE_TYPE_FIXED_CABINET_TRADE_PRICE":          9,
	"PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE":       10,
	"PRICE_TYPE_YIELD":                              11,
	"PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS":            12,
	"PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS":           13,
	"PRICE_TYPE_PRODUCT_TICKS_IN_HALFS":             14,
	"PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS": 15,
	"PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS":        16,
	"PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS":      17,
	"PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS":    18,
}

func (x PriceTypeEnum) String() string {
	return proto.EnumName(PriceTypeEnum_name, int32(x))
}

func (PriceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{169}
}

type DerivativeInstrumentPartySubIDTypeEnum int32

const (
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED                         DerivativeInstrumentPartySubIDTypeEnum = 0
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION                         DerivativeInstrumentPartySubIDTypeEnum = 1
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC                                 DerivativeInstrumentPartySubIDTypeEnum = 2
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   DerivativeInstrumentPartySubIDTypeEnum = 3
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 DerivativeInstrumentPartySubIDTypeEnum = 4
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME                        DerivativeInstrumentPartySubIDTypeEnum = 5
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          DerivativeInstrumentPartySubIDTypeEnum = 6
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT                          DerivativeInstrumentPartySubIDTypeEnum = 7
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       DerivativeInstrumentPartySubIDTypeEnum = 8
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER                          DerivativeInstrumentPartySubIDTypeEnum = 9
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM                                DerivativeInstrumentPartySubIDTypeEnum = 10
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             DerivativeInstrumentPartySubIDTypeEnum = 11
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   DerivativeInstrumentPartySubIDTypeEnum = 12
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK                       DerivativeInstrumentPartySubIDTypeEnum = 13
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON                              DerivativeInstrumentPartySubIDTypeEnum = 14
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER                        DerivativeInstrumentPartySubIDTypeEnum = 15
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               DerivativeInstrumentPartySubIDTypeEnum = 16
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      DerivativeInstrumentPartySubIDTypeEnum = 17
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  DerivativeInstrumentPartySubIDTypeEnum = 18
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION DerivativeInstrumentPartySubIDTypeEnum = 19
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   DerivativeInstrumentPartySubIDTypeEnum = 20
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 DerivativeInstrumentPartySubIDTypeEnum = 21
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   DerivativeInstrumentPartySubIDTypeEnum = 22
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             DerivativeInstrumentPartySubIDTypeEnum = 23
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           DerivativeInstrumentPartySubIDTypeEnum = 24
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM                              DerivativeInstrumentPartySubIDTypeEnum = 25
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER                        DerivativeInstrumentPartySubIDTypeEnum = 26
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  DerivativeInstrumentPartySubIDTypeEnum = 27
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               DerivativeInstrumentPartySubIDTypeEnum = 28
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     DerivativeInstrumentPartySubIDTypeEnum = 29
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION                            DerivativeInstrumentPartySubIDTypeEnum = 30
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER                        DerivativeInstrumentPartySubIDTypeEnum = 31
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 DerivativeInstrumentPartySubIDTypeEnum = 32
	DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        DerivativeInstrumentPartySubIDTypeEnum = 33
)

var DerivativeInstrumentPartySubIDTypeEnum_name = map[int32]string{
	0:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC",
	3:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM",
	11: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON",
	15: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM",
	26: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION",
	31: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var DerivativeInstrumentPartySubIDTypeEnum_value = map[string]int32{
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_BIC":                                 2,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FIRM":                                10,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PERSON":                              14,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x DerivativeInstrumentPartySubIDTypeEnum) String() string {
	return proto.EnumName(DerivativeInstrumentPartySubIDTypeEnum_name, int32(x))
}

func (DerivativeInstrumentPartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{170}
}

type DerivativeInstrumentPartyIDSourceEnum int32

const (
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED                             DerivativeInstrumentPartyIDSourceEnum = 0
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              DerivativeInstrumentPartyIDSourceEnum = 1
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              DerivativeInstrumentPartyIDSourceEnum = 2
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_BIC                                     DerivativeInstrumentPartyIDSourceEnum = 3
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     DerivativeInstrumentPartyIDSourceEnum = 4
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      DerivativeInstrumentPartyIDSourceEnum = 5
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        DerivativeInstrumentPartyIDSourceEnum = 6
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      DerivativeInstrumentPartyIDSourceEnum = 7
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            DerivativeInstrumentPartyIDSourceEnum = 8
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY                             DerivativeInstrumentPartyIDSourceEnum = 9
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              DerivativeInstrumentPartyIDSourceEnum = 10
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           DerivativeInstrumentPartyIDSourceEnum = 11
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  DerivativeInstrumentPartyIDSourceEnum = 12
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER DerivativeInstrumentPartyIDSourceEnum = 13
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            DerivativeInstrumentPartyIDSourceEnum = 14
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               DerivativeInstrumentPartyIDSourceEnum = 15
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT                          DerivativeInstrumentPartyIDSourceEnum = 16
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM                            DerivativeInstrumentPartyIDSourceEnum = 17
	DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MIC                                     DerivativeInstrumentPartyIDSourceEnum = 18
)

var DerivativeInstrumentPartyIDSourceEnum_name = map[int32]string{
	0:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_BIC",
	4:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY",
	10: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MIC",
}

var DerivativeInstrumentPartyIDSourceEnum_value = map[string]int32{
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_BIC":                                     3,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x DerivativeInstrumentPartyIDSourceEnum) String() string {
	return proto.EnumName(DerivativeInstrumentPartyIDSourceEnum_name, int32(x))
}

func (DerivativeInstrumentPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{171}
}

type DerivativeInstrumentPartyRoleEnum int32

const (
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNSPECIFIED                           DerivativeInstrumentPartyRoleEnum = 0
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT                      DerivativeInstrumentPartyRoleEnum = 1
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM                         DerivativeInstrumentPartyRoleEnum = 2
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLIENT_ID                             DerivativeInstrumentPartyRoleEnum = 3
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM                  DerivativeInstrumentPartyRoleEnum = 4
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM                           DerivativeInstrumentPartyRoleEnum = 5
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           DerivativeInstrumentPartyRoleEnum = 6
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM                         DerivativeInstrumentPartyRoleEnum = 7
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM                        DerivativeInstrumentPartyRoleEnum = 8
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM                      DerivativeInstrumentPartyRoleEnum = 9
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER                      DerivativeInstrumentPartyRoleEnum = 10
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                DerivativeInstrumentPartyRoleEnum = 11
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  DerivativeInstrumentPartyRoleEnum = 12
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM                      DerivativeInstrumentPartyRoleEnum = 13
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTOR_ID                           DerivativeInstrumentPartyRoleEnum = 14
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATE                                DerivativeInstrumentPartyRoleEnum = 15
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM                DerivativeInstrumentPartyRoleEnum = 16
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER              DerivativeInstrumentPartyRoleEnum = 17
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION                   DerivativeInstrumentPartyRoleEnum = 18
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM                       DerivativeInstrumentPartyRoleEnum = 19
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                DerivativeInstrumentPartyRoleEnum = 20
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_AGENT                                 DerivativeInstrumentPartyRoleEnum = 21
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_BENEFICIARY                           DerivativeInstrumentPartyRoleEnum = 22
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_BUYER                                 DerivativeInstrumentPartyRoleEnum = 23
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION                 DerivativeInstrumentPartyRoleEnum = 24
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID                    DerivativeInstrumentPartyRoleEnum = 25
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER                         DerivativeInstrumentPartyRoleEnum = 26
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER                  DerivativeInstrumentPartyRoleEnum = 27
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   DerivativeInstrumentPartyRoleEnum = 28
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTODIAN                             DerivativeInstrumentPartyRoleEnum = 29
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT                      DerivativeInstrumentPartyRoleEnum = 30
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER                       DerivativeInstrumentPartyRoleEnum = 31
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXCHANGE                              DerivativeInstrumentPartyRoleEnum = 32
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY                      DerivativeInstrumentPartyRoleEnum = 33
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERMEDIARY                          DerivativeInstrumentPartyRoleEnum = 34
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER                    DerivativeInstrumentPartyRoleEnum = 35
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT                      DerivativeInstrumentPartyRoleEnum = 36
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY                       DerivativeInstrumentPartyRoleEnum = 37
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN                         DerivativeInstrumentPartyRoleEnum = 38
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM                      DerivativeInstrumentPartyRoleEnum = 39
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER                    DerivativeInstrumentPartyRoleEnum = 40
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE                       DerivativeInstrumentPartyRoleEnum = 41
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               DerivativeInstrumentPartyRoleEnum = 42
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                DerivativeInstrumentPartyRoleEnum = 43
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               DerivativeInstrumentPartyRoleEnum = 44
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              DerivativeInstrumentPartyRoleEnum = 45
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER                         DerivativeInstrumentPartyRoleEnum = 46
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT                      DerivativeInstrumentPartyRoleEnum = 47
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM                          DerivativeInstrumentPartyRoleEnum = 48
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       DerivativeInstrumentPartyRoleEnum = 49
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT                       DerivativeInstrumentPartyRoleEnum = 50
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT                       DerivativeInstrumentPartyRoleEnum = 51
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION                       DerivativeInstrumentPartyRoleEnum = 52
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SESSION_ID                            DerivativeInstrumentPartyRoleEnum = 53
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           DerivativeInstrumentPartyRoleEnum = 54
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC                       DerivativeInstrumentPartyRoleEnum = 55
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               DerivativeInstrumentPartyRoleEnum = 56
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT                         DerivativeInstrumentPartyRoleEnum = 57
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT                        DerivativeInstrumentPartyRoleEnum = 58
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             DerivativeInstrumentPartyRoleEnum = 59
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         DerivativeInstrumentPartyRoleEnum = 60
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE DerivativeInstrumentPartyRoleEnum = 61
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_DESK_ID                               DerivativeInstrumentPartyRoleEnum = 62
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE                       DerivativeInstrumentPartyRoleEnum = 63
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              DerivativeInstrumentPartyRoleEnum = 64
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              DerivativeInstrumentPartyRoleEnum = 65
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM                       DerivativeInstrumentPartyRoleEnum = 66
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATION_ID                           DerivativeInstrumentPartyRoleEnum = 67
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          DerivativeInstrumentPartyRoleEnum = 68
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET                    DerivativeInstrumentPartyRoleEnum = 69
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_MAKER                          DerivativeInstrumentPartyRoleEnum = 70
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         DerivativeInstrumentPartyRoleEnum = 71
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR                      DerivativeInstrumentPartyRoleEnum = 72
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET                      DerivativeInstrumentPartyRoleEnum = 73
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY                DerivativeInstrumentPartyRoleEnum = 74
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR                     DerivativeInstrumentPartyRoleEnum = 75
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER               DerivativeInstrumentPartyRoleEnum = 76
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY                     DerivativeInstrumentPartyRoleEnum = 77
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID                    DerivativeInstrumentPartyRoleEnum = 78
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_PRIME_BROKER                          DerivativeInstrumentPartyRoleEnum = 79
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM                         DerivativeInstrumentPartyRoleEnum = 80
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       DerivativeInstrumentPartyRoleEnum = 81
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      DerivativeInstrumentPartyRoleEnum = 82
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT                      DerivativeInstrumentPartyRoleEnum = 83
	DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    DerivativeInstrumentPartyRoleEnum = 84
)

var DerivativeInstrumentPartyRoleEnum_name = map[int32]string{
	0:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNSPECIFIED",
	1:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM",
	3:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLIENT_ID",
	4:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM",
	6:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM",
	8:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM",
	9:  "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER",
	11: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM",
	14: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTOR_ID",
	15: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATE",
	16: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM",
	20: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_AGENT",
	22: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_BENEFICIARY",
	23: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_BUYER",
	24: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER",
	27: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTODIAN",
	30: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER",
	32: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXCHANGE",
	33: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY",
	34: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERMEDIARY",
	35: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT",
	37: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY",
	38: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN",
	39: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER",
	41: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER",
	47: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM",
	49: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION",
	53: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SESSION_ID",
	54: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC",
	56: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT",
	58: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT",
	59: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_DESK_ID",
	63: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE",
	64: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM",
	67: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATION_ID",
	68: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_MAKER",
	71: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET",
	74: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_PRIME_BROKER",
	80: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM",
	81: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var DerivativeInstrumentPartyRoleEnum_value = map[string]int32{
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNSPECIFIED":                           0,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_FIRM":                         2,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLIENT_ID":                             3,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_FIRM":                           5,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_FIRM":                         7,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTOR_ID":                           14,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATE":                                15,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_AGENT":                                 21,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_BENEFICIARY":                           22,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_BUYER":                                 23,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_TRADER":                         26,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTODIAN":                             29,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_TRADER":                       31,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXCHANGE":                              32,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERMEDIARY":                          34,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATORY_BODY":                       37,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ASSET_MANAGER":                         46,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SENDER_LOCATION":                       52,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SESSION_ID":                            53,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ENTERING_UNIT":                         57,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_DESK_ID":                               62,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_LOCATION_ID":                           67,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_MARKET_MAKER":                          70,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_REGULATED_MARKET":                      73,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_PRIME_BROKER":                          79,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x DerivativeInstrumentPartyRoleEnum) String() string {
	return proto.EnumName(DerivativeInstrumentPartyRoleEnum_name, int32(x))
}

func (DerivativeInstrumentPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{172}
}

type DerivativeInstrAttribTypeEnum int32

const (
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_UNSPECIFIED                                 DerivativeInstrAttribTypeEnum = 0
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE                                    DerivativeInstrAttribTypeEnum = 1
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE               DerivativeInstrAttribTypeEnum = 2
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE                     DerivativeInstrAttribTypeEnum = 3
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_COUPON_PERIOD                               DerivativeInstrAttribTypeEnum = 4
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY                        DerivativeInstrAttribTypeEnum = 5
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE                 DerivativeInstrAttribTypeEnum = 6
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_FLAT                                        DerivativeInstrAttribTypeEnum = 7
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INDEXED                                     DerivativeInstrAttribTypeEnum = 8
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INTEREST_BEARING                            DerivativeInstrAttribTypeEnum = 9
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_IN_DEFAULT                                  DerivativeInstrAttribTypeEnum = 10
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT                            DerivativeInstrAttribTypeEnum = 11
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS                        DerivativeInstrAttribTypeEnum = 12
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT                     DerivativeInstrAttribTypeEnum = 13
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE               DerivativeInstrAttribTypeEnum = 14
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_PRE_REFUNDED                                DerivativeInstrAttribTypeEnum = 15
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_STEPPED_COUPON                              DerivativeInstrAttribTypeEnum = 16
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX          DerivativeInstrAttribTypeEnum = 17
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_TAXABLE                                     DerivativeInstrAttribTypeEnum = 18
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_TEXT                                        DerivativeInstrAttribTypeEnum = 19
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_UNRATED                                     DerivativeInstrAttribTypeEnum = 20
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_VARIABLE_RATE                               DerivativeInstrAttribTypeEnum = 21
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_WHEN                                        DerivativeInstrAttribTypeEnum = 22
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_ZERO_COUPON                                 DerivativeInstrAttribTypeEnum = 23
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY               DerivativeInstrAttribTypeEnum = 24
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY DerivativeInstrAttribTypeEnum = 25
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR                      DerivativeInstrAttribTypeEnum = 26
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR                        DerivativeInstrAttribTypeEnum = 27
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION                  DerivativeInstrAttribTypeEnum = 28
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE                     DerivativeInstrAttribTypeEnum = 29
	DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR                         DerivativeInstrAttribTypeEnum = 30
)

var DerivativeInstrAttribTypeEnum_name = map[int32]string{
	0:  "DERIVATIVE_INSTR_ATTRIB_TYPE_UNSPECIFIED",
	1:  "DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE",
	2:  "DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE",
	3:  "DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE",
	4:  "DERIVATIVE_INSTR_ATTRIB_TYPE_COUPON_PERIOD",
	5:  "DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY",
	6:  "DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE",
	7:  "DERIVATIVE_INSTR_ATTRIB_TYPE_FLAT",
	8:  "DERIVATIVE_INSTR_ATTRIB_TYPE_INDEXED",
	9:  "DERIVATIVE_INSTR_ATTRIB_TYPE_INTEREST_BEARING",
	10: "DERIVATIVE_INSTR_ATTRIB_TYPE_IN_DEFAULT",
	11: "DERIVATIVE_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT",
	12: "DERIVATIVE_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS",
	13: "DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT",
	14: "DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE",
	15: "DERIVATIVE_INSTR_ATTRIB_TYPE_PRE_REFUNDED",
	16: "DERIVATIVE_INSTR_ATTRIB_TYPE_STEPPED_COUPON",
	17: "DERIVATIVE_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX",
	18: "DERIVATIVE_INSTR_ATTRIB_TYPE_TAXABLE",
	19: "DERIVATIVE_INSTR_ATTRIB_TYPE_TEXT",
	20: "DERIVATIVE_INSTR_ATTRIB_TYPE_UNRATED",
	21: "DERIVATIVE_INSTR_ATTRIB_TYPE_VARIABLE_RATE",
	22: "DERIVATIVE_INSTR_ATTRIB_TYPE_WHEN",
	23: "DERIVATIVE_INSTR_ATTRIB_TYPE_ZERO_COUPON",
	24: "DERIVATIVE_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY",
	25: "DERIVATIVE_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY",
	26: "DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR",
	27: "DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR",
	28: "DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION",
	29: "DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE",
	30: "DERIVATIVE_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR",
}

var DerivativeInstrAttribTypeEnum_value = map[string]int32{
	"DERIVATIVE_INSTR_ATTRIB_TYPE_UNSPECIFIED":                                 0,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE":                                    1,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE":               2,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE":                     3,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_COUPON_PERIOD":                               4,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY":                        5,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE":                 6,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_FLAT":                                        7,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INDEXED":                                     8,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INTEREST_BEARING":                            9,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_IN_DEFAULT":                                  10,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT":                            11,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS":                        12,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT":                     13,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE":               14,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_PRE_REFUNDED":                                15,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_STEPPED_COUPON":                              16,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX":          17,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_TAXABLE":                                     18,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_TEXT":                                        19,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_UNRATED":                                     20,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_VARIABLE_RATE":                               21,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_WHEN":                                        22,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_ZERO_COUPON":                                 23,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY":               24,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY": 25,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR":                      26,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR":                        27,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION":                  28,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE":                     29,
	"DERIVATIVE_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR":                         30,
}

func (x DerivativeInstrAttribTypeEnum) String() string {
	return proto.EnumName(DerivativeInstrAttribTypeEnum_name, int32(x))
}

func (DerivativeInstrAttribTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{173}
}

type NestedInstrAttribTypeEnum int32

const (
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_UNSPECIFIED                                 NestedInstrAttribTypeEnum = 0
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_CALLABLE                                    NestedInstrAttribTypeEnum = 1
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE               NestedInstrAttribTypeEnum = 2
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE                     NestedInstrAttribTypeEnum = 3
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_COUPON_PERIOD                               NestedInstrAttribTypeEnum = 4
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY                        NestedInstrAttribTypeEnum = 5
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE                 NestedInstrAttribTypeEnum = 6
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_FLAT                                        NestedInstrAttribTypeEnum = 7
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INDEXED                                     NestedInstrAttribTypeEnum = 8
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INTEREST_BEARING                            NestedInstrAttribTypeEnum = 9
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_IN_DEFAULT                                  NestedInstrAttribTypeEnum = 10
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT                            NestedInstrAttribTypeEnum = 11
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS                        NestedInstrAttribTypeEnum = 12
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT                     NestedInstrAttribTypeEnum = 13
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE               NestedInstrAttribTypeEnum = 14
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_PRE_REFUNDED                                NestedInstrAttribTypeEnum = 15
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_STEPPED_COUPON                              NestedInstrAttribTypeEnum = 16
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX          NestedInstrAttribTypeEnum = 17
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_TAXABLE                                     NestedInstrAttribTypeEnum = 18
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_TEXT                                        NestedInstrAttribTypeEnum = 19
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_UNRATED                                     NestedInstrAttribTypeEnum = 20
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_VARIABLE_RATE                               NestedInstrAttribTypeEnum = 21
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_WHEN                                        NestedInstrAttribTypeEnum = 22
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_ZERO_COUPON                                 NestedInstrAttribTypeEnum = 23
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY               NestedInstrAttribTypeEnum = 24
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY NestedInstrAttribTypeEnum = 25
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR                      NestedInstrAttribTypeEnum = 26
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR                        NestedInstrAttribTypeEnum = 27
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION                  NestedInstrAttribTypeEnum = 28
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE                     NestedInstrAttribTypeEnum = 29
	NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR                         NestedInstrAttribTypeEnum = 30
)

var NestedInstrAttribTypeEnum_name = map[int32]string{
	0:  "NESTED_INSTR_ATTRIB_TYPE_UNSPECIFIED",
	1:  "NESTED_INSTR_ATTRIB_TYPE_CALLABLE",
	2:  "NESTED_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE",
	3:  "NESTED_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE",
	4:  "NESTED_INSTR_ATTRIB_TYPE_COUPON_PERIOD",
	5:  "NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY",
	6:  "NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE",
	7:  "NESTED_INSTR_ATTRIB_TYPE_FLAT",
	8:  "NESTED_INSTR_ATTRIB_TYPE_INDEXED",
	9:  "NESTED_INSTR_ATTRIB_TYPE_INTEREST_BEARING",
	10: "NESTED_INSTR_ATTRIB_TYPE_IN_DEFAULT",
	11: "NESTED_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT",
	12: "NESTED_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS",
	13: "NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT",
	14: "NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE",
	15: "NESTED_INSTR_ATTRIB_TYPE_PRE_REFUNDED",
	16: "NESTED_INSTR_ATTRIB_TYPE_STEPPED_COUPON",
	17: "NESTED_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX",
	18: "NESTED_INSTR_ATTRIB_TYPE_TAXABLE",
	19: "NESTED_INSTR_ATTRIB_TYPE_TEXT",
	20: "NESTED_INSTR_ATTRIB_TYPE_UNRATED",
	21: "NESTED_INSTR_ATTRIB_TYPE_VARIABLE_RATE",
	22: "NESTED_INSTR_ATTRIB_TYPE_WHEN",
	23: "NESTED_INSTR_ATTRIB_TYPE_ZERO_COUPON",
	24: "NESTED_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY",
	25: "NESTED_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY",
	26: "NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR",
	27: "NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR",
	28: "NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION",
	29: "NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE",
	30: "NESTED_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR",
}

var NestedInstrAttribTypeEnum_value = map[string]int32{
	"NESTED_INSTR_ATTRIB_TYPE_UNSPECIFIED":                                 0,
	"NESTED_INSTR_ATTRIB_TYPE_CALLABLE":                                    1,
	"NESTED_INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE":               2,
	"NESTED_INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE":                     3,
	"NESTED_INSTR_ATTRIB_TYPE_COUPON_PERIOD":                               4,
	"NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY":                        5,
	"NESTED_INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE":                 6,
	"NESTED_INSTR_ATTRIB_TYPE_FLAT":                                        7,
	"NESTED_INSTR_ATTRIB_TYPE_INDEXED":                                     8,
	"NESTED_INSTR_ATTRIB_TYPE_INTEREST_BEARING":                            9,
	"NESTED_INSTR_ATTRIB_TYPE_IN_DEFAULT":                                  10,
	"NESTED_INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT":                            11,
	"NESTED_INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS":                        12,
	"NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT":                     13,
	"NESTED_INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE":               14,
	"NESTED_INSTR_ATTRIB_TYPE_PRE_REFUNDED":                                15,
	"NESTED_INSTR_ATTRIB_TYPE_STEPPED_COUPON":                              16,
	"NESTED_INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX":          17,
	"NESTED_INSTR_ATTRIB_TYPE_TAXABLE":                                     18,
	"NESTED_INSTR_ATTRIB_TYPE_TEXT":                                        19,
	"NESTED_INSTR_ATTRIB_TYPE_UNRATED":                                     20,
	"NESTED_INSTR_ATTRIB_TYPE_VARIABLE_RATE":                               21,
	"NESTED_INSTR_ATTRIB_TYPE_WHEN":                                        22,
	"NESTED_INSTR_ATTRIB_TYPE_ZERO_COUPON":                                 23,
	"NESTED_INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY":               24,
	"NESTED_INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY": 25,
	"NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR":                      26,
	"NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR":                        27,
	"NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION":                  28,
	"NESTED_INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE":                     29,
	"NESTED_INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR":                         30,
}

func (x NestedInstrAttribTypeEnum) String() string {
	return proto.EnumName(NestedInstrAttribTypeEnum_name, int32(x))
}

func (NestedInstrAttribTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{174}
}

type DerivativeSymbolSfxEnum int32

const (
	DerivativeSymbolSfxEnum_DERIVATIVE_SYMBOL_SFX_UNSPECIFIED                 DerivativeSymbolSfxEnum = 0
	DerivativeSymbolSfxEnum_DERIVATIVE_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST DerivativeSymbolSfxEnum = 1
	DerivativeSymbolSfxEnum_DERIVATIVE_SYMBOL_SFX_WHEN_ISSUED                 DerivativeSymbolSfxEnum = 2
)

var DerivativeSymbolSfxEnum_name = map[int32]string{
	0: "DERIVATIVE_SYMBOL_SFX_UNSPECIFIED",
	1: "DERIVATIVE_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST",
	2: "DERIVATIVE_SYMBOL_SFX_WHEN_ISSUED",
}

var DerivativeSymbolSfxEnum_value = map[string]int32{
	"DERIVATIVE_SYMBOL_SFX_UNSPECIFIED":                 0,
	"DERIVATIVE_SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST": 1,
	"DERIVATIVE_SYMBOL_SFX_WHEN_ISSUED":                 2,
}

func (x DerivativeSymbolSfxEnum) String() string {
	return proto.EnumName(DerivativeSymbolSfxEnum_name, int32(x))
}

func (DerivativeSymbolSfxEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{175}
}

type DerivativeSecurityIDSourceEnum int32

const (
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_UNSPECIFIED                      DerivativeSecurityIDSourceEnum = 0
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_CUSIP                            DerivativeSecurityIDSourceEnum = 1
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_QUIK                             DerivativeSecurityIDSourceEnum = 2
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_SEDOL                            DerivativeSecurityIDSourceEnum = 3
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_ISIN_NUMBER                      DerivativeSecurityIDSourceEnum = 4
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_RIC_CODE                         DerivativeSecurityIDSourceEnum = 5
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE                 DerivativeSecurityIDSourceEnum = 6
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE                DerivativeSecurityIDSourceEnum = 7
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    DerivativeSecurityIDSourceEnum = 8
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL                  DerivativeSecurityIDSourceEnum = 9
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_BELGIAN                          DerivativeSecurityIDSourceEnum = 10
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL                 DerivativeSecurityIDSourceEnum = 11
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_COMMON                           DerivativeSecurityIDSourceEnum = 12
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_DUTCH                            DerivativeSecurityIDSourceEnum = 13
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_SICOVAM                          DerivativeSecurityIDSourceEnum = 14
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_VALOREN                          DerivativeSecurityIDSourceEnum = 15
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_WERTPAPIER                       DerivativeSecurityIDSourceEnum = 16
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_CLEARING_HOUSE                   DerivativeSecurityIDSourceEnum = 17
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION          DerivativeSecurityIDSourceEnum = 18
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY DerivativeSecurityIDSourceEnum = 19
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_LETTER_OF_CREDIT                 DerivativeSecurityIDSourceEnum = 20
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_URL                    DerivativeSecurityIDSourceEnum = 21
	DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  DerivativeSecurityIDSourceEnum = 22
)

var DerivativeSecurityIDSourceEnum_name = map[int32]string{
	0:  "DERIVATIVE_SECURITY_ID_SOURCE_UNSPECIFIED",
	1:  "DERIVATIVE_SECURITY_ID_SOURCE_CUSIP",
	2:  "DERIVATIVE_SECURITY_ID_SOURCE_QUIK",
	3:  "DERIVATIVE_SECURITY_ID_SOURCE_SEDOL",
	4:  "DERIVATIVE_SECURITY_ID_SOURCE_ISIN_NUMBER",
	5:  "DERIVATIVE_SECURITY_ID_SOURCE_RIC_CODE",
	6:  "DERIVATIVE_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "DERIVATIVE_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "DERIVATIVE_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "DERIVATIVE_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "DERIVATIVE_SECURITY_ID_SOURCE_BELGIAN",
	11: "DERIVATIVE_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "DERIVATIVE_SECURITY_ID_SOURCE_COMMON",
	13: "DERIVATIVE_SECURITY_ID_SOURCE_DUTCH",
	14: "DERIVATIVE_SECURITY_ID_SOURCE_SICOVAM",
	15: "DERIVATIVE_SECURITY_ID_SOURCE_VALOREN",
	16: "DERIVATIVE_SECURITY_ID_SOURCE_WERTPAPIER",
	17: "DERIVATIVE_SECURITY_ID_SOURCE_CLEARING_HOUSE",
	18: "DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "DERIVATIVE_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "DERIVATIVE_SECURITY_ID_SOURCE_LETTER_OF_CREDIT",
	21: "DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_URL",
	22: "DERIVATIVE_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var DerivativeSecurityIDSourceEnum_value = map[string]int32{
	"DERIVATIVE_SECURITY_ID_SOURCE_UNSPECIFIED":                      0,
	"DERIVATIVE_SECURITY_ID_SOURCE_CUSIP":                            1,
	"DERIVATIVE_SECURITY_ID_SOURCE_QUIK":                             2,
	"DERIVATIVE_SECURITY_ID_SOURCE_SEDOL":                            3,
	"DERIVATIVE_SECURITY_ID_SOURCE_ISIN_NUMBER":                      4,
	"DERIVATIVE_SECURITY_ID_SOURCE_RIC_CODE":                         5,
	"DERIVATIVE_SECURITY_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"DERIVATIVE_SECURITY_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"DERIVATIVE_SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"DERIVATIVE_SECURITY_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"DERIVATIVE_SECURITY_ID_SOURCE_BELGIAN":                          10,
	"DERIVATIVE_SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"DERIVATIVE_SECURITY_ID_SOURCE_COMMON":                           12,
	"DERIVATIVE_SECURITY_ID_SOURCE_DUTCH":                            13,
	"DERIVATIVE_SECURITY_ID_SOURCE_SICOVAM":                          14,
	"DERIVATIVE_SECURITY_ID_SOURCE_VALOREN":                          15,
	"DERIVATIVE_SECURITY_ID_SOURCE_WERTPAPIER":                       16,
	"DERIVATIVE_SECURITY_ID_SOURCE_CLEARING_HOUSE":                   17,
	"DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"DERIVATIVE_SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"DERIVATIVE_SECURITY_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"DERIVATIVE_SECURITY_ID_SOURCE_ISDA_FPML_URL":                    21,
	"DERIVATIVE_SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x DerivativeSecurityIDSourceEnum) String() string {
	return proto.EnumName(DerivativeSecurityIDSourceEnum_name, int32(x))
}

func (DerivativeSecurityIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{176}
}

type DerivativeProductEnum int32

const (
	DerivativeProductEnum_DERIVATIVE_PRODUCT_UNSPECIFIED DerivativeProductEnum = 0
	DerivativeProductEnum_DERIVATIVE_PRODUCT_AGENCY      DerivativeProductEnum = 1
	DerivativeProductEnum_DERIVATIVE_PRODUCT_COMMODITY   DerivativeProductEnum = 2
	DerivativeProductEnum_DERIVATIVE_PRODUCT_CORPORATE   DerivativeProductEnum = 3
	DerivativeProductEnum_DERIVATIVE_PRODUCT_CURRENCY    DerivativeProductEnum = 4
	DerivativeProductEnum_DERIVATIVE_PRODUCT_EQUITY      DerivativeProductEnum = 5
	DerivativeProductEnum_DERIVATIVE_PRODUCT_GOVERNMENT  DerivativeProductEnum = 6
	DerivativeProductEnum_DERIVATIVE_PRODUCT_INDEX       DerivativeProductEnum = 7
	DerivativeProductEnum_DERIVATIVE_PRODUCT_LOAN        DerivativeProductEnum = 8
	DerivativeProductEnum_DERIVATIVE_PRODUCT_MONEYMARKET DerivativeProductEnum = 9
	DerivativeProductEnum_DERIVATIVE_PRODUCT_MORTGAGE    DerivativeProductEnum = 10
	DerivativeProductEnum_DERIVATIVE_PRODUCT_MUNICIPAL   DerivativeProductEnum = 11
	DerivativeProductEnum_DERIVATIVE_PRODUCT_OTHER       DerivativeProductEnum = 12
	DerivativeProductEnum_DERIVATIVE_PRODUCT_FINANCING   DerivativeProductEnum = 13
)

var DerivativeProductEnum_name = map[int32]string{
	0:  "DERIVATIVE_PRODUCT_UNSPECIFIED",
	1:  "DERIVATIVE_PRODUCT_AGENCY",
	2:  "DERIVATIVE_PRODUCT_COMMODITY",
	3:  "DERIVATIVE_PRODUCT_CORPORATE",
	4:  "DERIVATIVE_PRODUCT_CURRENCY",
	5:  "DERIVATIVE_PRODUCT_EQUITY",
	6:  "DERIVATIVE_PRODUCT_GOVERNMENT",
	7:  "DERIVATIVE_PRODUCT_INDEX",
	8:  "DERIVATIVE_PRODUCT_LOAN",
	9:  "DERIVATIVE_PRODUCT_MONEYMARKET",
	10: "DERIVATIVE_PRODUCT_MORTGAGE",
	11: "DERIVATIVE_PRODUCT_MUNICIPAL",
	12: "DERIVATIVE_PRODUCT_OTHER",
	13: "DERIVATIVE_PRODUCT_FINANCING",
}

var DerivativeProductEnum_value = map[string]int32{
	"DERIVATIVE_PRODUCT_UNSPECIFIED": 0,
	"DERIVATIVE_PRODUCT_AGENCY":      1,
	"DERIVATIVE_PRODUCT_COMMODITY":   2,
	"DERIVATIVE_PRODUCT_CORPORATE":   3,
	"DERIVATIVE_PRODUCT_CURRENCY":    4,
	"DERIVATIVE_PRODUCT_EQUITY":      5,
	"DERIVATIVE_PRODUCT_GOVERNMENT":  6,
	"DERIVATIVE_PRODUCT_INDEX":       7,
	"DERIVATIVE_PRODUCT_LOAN":        8,
	"DERIVATIVE_PRODUCT_MONEYMARKET": 9,
	"DERIVATIVE_PRODUCT_MORTGAGE":    10,
	"DERIVATIVE_PRODUCT_MUNICIPAL":   11,
	"DERIVATIVE_PRODUCT_OTHER":       12,
	"DERIVATIVE_PRODUCT_FINANCING":   13,
}

func (x DerivativeProductEnum) String() string {
	return proto.EnumName(DerivativeProductEnum_name, int32(x))
}

func (DerivativeProductEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{177}
}

type DerivativeSecurityTypeEnum int32

const (
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_UNSPECIFIED                                     DerivativeSecurityTypeEnum = 0
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BANKERS_ACCEPTANCE                              DerivativeSecurityTypeEnum = 1
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT                          DerivativeSecurityTypeEnum = 2
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION              DerivativeSecurityTypeEnum = 3
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_COMMERCIAL_PAPER                                DerivativeSecurityTypeEnum = 4
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_COMMON_STOCK                                    DerivativeSecurityTypeEnum = 5
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CORPORATE_BOND                                  DerivativeSecurityTypeEnum = 6
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT                     DerivativeSecurityTypeEnum = 7
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT                       DerivativeSecurityTypeEnum = 8
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FUTURE                                          DerivativeSecurityTypeEnum = 9
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH                      DerivativeSecurityTypeEnum = 10
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY                          DerivativeSecurityTypeEnum = 11
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY                         DerivativeSecurityTypeEnum = 12
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT                      DerivativeSecurityTypeEnum = 13
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MUTUAL_FUND                                     DerivativeSecurityTypeEnum = 14
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_NO_SECURITY_TYPE                                DerivativeSecurityTypeEnum = 15
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OPTION                                          DerivativeSecurityTypeEnum = 16
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PREFERRED_STOCK                                 DerivativeSecurityTypeEnum = 17
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TIME_DEPOSIT                                    DerivativeSecurityTypeEnum = 18
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL_OLD                            DerivativeSecurityTypeEnum = 19
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_WARRANT                                         DerivativeSecurityTypeEnum = 20
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CONVERTIBLE_BOND                                DerivativeSecurityTypeEnum = 21
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_IOETTEMORTGAGE                                  DerivativeSecurityTypeEnum = 22
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_WILDCARD                                        DerivativeSecurityTypeEnum = 23
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_AMENDED                                         DerivativeSecurityTypeEnum = 24
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_ASSET_BACKED_SECURITIES                         DerivativeSecurityTypeEnum = 25
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BANK_NOTES                                      DerivativeSecurityTypeEnum = 26
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BILL_OF_EXCHANGES                               DerivativeSecurityTypeEnum = 27
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BRADY_BOND                                      DerivativeSecurityTypeEnum = 28
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BRIDGE_LOAN                                     DerivativeSecurityTypeEnum = 29
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CALL_LOANS                                      DerivativeSecurityTypeEnum = 30
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION                       DerivativeSecurityTypeEnum = 31
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION                    DerivativeSecurityTypeEnum = 32
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CORP                                            DerivativeSecurityTypeEnum = 33
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_DEBTOR_IN_POSSESSION                            DerivativeSecurityTypeEnum = 34
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_DEFAULTED                                       DerivativeSecurityTypeEnum = 35
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_DEPOSIT_NOTES                                   DerivativeSecurityTypeEnum = 36
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_DUAL_CURRENCY                                   DerivativeSecurityTypeEnum = 37
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EXTENDED_COMM_NOTE                              DerivativeSecurityTypeEnum = 38
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_COUPON                           DerivativeSecurityTypeEnum = 39
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE                    DerivativeSecurityTypeEnum = 40
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS                        DerivativeSecurityTypeEnum = 41
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_INDEXED_LINKED                                  DerivativeSecurityTypeEnum = 42
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE            DerivativeSecurityTypeEnum = 43
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_LETTER_OF_CREDIT                                DerivativeSecurityTypeEnum = 44
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_LIQUIDITY_NOTE                                  DerivativeSecurityTypeEnum = 45
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MANDATORY_TENDER                                DerivativeSecurityTypeEnum = 46
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MATURED                                         DerivativeSecurityTypeEnum = 47
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MEDIUM_TERM_NOTES                               DerivativeSecurityTypeEnum = 48
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES                      DerivativeSecurityTypeEnum = 49
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_MULTILEG_INSTRUMENT                             DerivativeSecurityTypeEnum = 50
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES                        DerivativeSecurityTypeEnum = 51
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OVERNIGHT                                       DerivativeSecurityTypeEnum = 52
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PLAZOS_FIJOS                                    DerivativeSecurityTypeEnum = 53
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE DerivativeSecurityTypeEnum = 54
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE       DerivativeSecurityTypeEnum = 55
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING                          DerivativeSecurityTypeEnum = 56
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PROMISSORY_NOTE                                 DerivativeSecurityTypeEnum = 57
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REPLACED                                        DerivativeSecurityTypeEnum = 58
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_RETIRED                                         DerivativeSecurityTypeEnum = 59
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE                       DerivativeSecurityTypeEnum = 60
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REVENUE_BONDS                                   DerivativeSecurityTypeEnum = 61
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REVOLVER                                        DerivativeSecurityTypeEnum = 62
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REVOLVER_LOAN                                   DerivativeSecurityTypeEnum = 63
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE                            DerivativeSecurityTypeEnum = 64
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SPECIAL_ASSESSMENT                              DerivativeSecurityTypeEnum = 65
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SPECIAL_OBLIGATION                              DerivativeSecurityTypeEnum = 66
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SPECIAL_TAX                                     DerivativeSecurityTypeEnum = 67
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_STRUCTURED_NOTES                                DerivativeSecurityTypeEnum = 68
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SWING_LINE_FACILITY                             DerivativeSecurityTypeEnum = 69
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TAX_ALLOCATION                                  DerivativeSecurityTypeEnum = 70
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TAX_ANTICIPATION_NOTE                           DerivativeSecurityTypeEnum = 71
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER                     DerivativeSecurityTypeEnum = 72
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE                   DerivativeSecurityTypeEnum = 73
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TERM_LOAN                                       DerivativeSecurityTypeEnum = 74
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TO_BE_ANNOUNCED                                 DerivativeSecurityTypeEnum = 75
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES         DerivativeSecurityTypeEnum = 76
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_TREASURY_BOND                                DerivativeSecurityTypeEnum = 77
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE_OLD                            DerivativeSecurityTypeEnum = 78
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE                       DerivativeSecurityTypeEnum = 79
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_WITHDRAWN                                       DerivativeSecurityTypeEnum = 80
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_YANKEE_CORPORATE_BOND                           DerivativeSecurityTypeEnum = 81
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BUY_SELLBACK                                    DerivativeSecurityTypeEnum = 82
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT                     DerivativeSecurityTypeEnum = 83
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_COMMERCIAL_PAPER                           DerivativeSecurityTypeEnum = 84
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_BOND                             DerivativeSecurityTypeEnum = 85
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_SOVEREIGNS                                 DerivativeSecurityTypeEnum = 86
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS                      DerivativeSecurityTypeEnum = 87
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FORWARD                                         DerivativeSecurityTypeEnum = 88
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_PFANDBRIEFE                                     DerivativeSecurityTypeEnum = 89
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_REPURCHASE                                      DerivativeSecurityTypeEnum = 90
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SECURITIES_LOAN                                 DerivativeSecurityTypeEnum = 91
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SECURITIES_PLEDGE                               DerivativeSecurityTypeEnum = 92
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS                       DerivativeSecurityTypeEnum = 93
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL                                DerivativeSecurityTypeEnum = 94
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE                                DerivativeSecurityTypeEnum = 95
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT                   DerivativeSecurityTypeEnum = 96
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_FUTURES                              DerivativeSecurityTypeEnum = 97
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_PHYSICAL                             DerivativeSecurityTypeEnum = 98
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CASH                                            DerivativeSecurityTypeEnum = 99
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_COMBO                                DerivativeSecurityTypeEnum = 100
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_INTEREST_RATE_SWAP                              DerivativeSecurityTypeEnum = 101
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_BANK_DEPOSITORY_NOTE                            DerivativeSecurityTypeEnum = 102
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CANADIAN_MONEY_MARKETS                          DerivativeSecurityTypeEnum = 103
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS                         DerivativeSecurityTypeEnum = 104
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS                       DerivativeSecurityTypeEnum = 105
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_BILLS                         DerivativeSecurityTypeEnum = 106
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_NOTES                         DerivativeSecurityTypeEnum = 107
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_CREDIT_DEFAULT_SWAP                             DerivativeSecurityTypeEnum = 108
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES              DerivativeSecurityTypeEnum = 109
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE                          DerivativeSecurityTypeEnum = 110
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP                            DerivativeSecurityTypeEnum = 111
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TERM_LIQUIDITY_NOTE                             DerivativeSecurityTypeEnum = 112
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_TREASURY_BILL                                   DerivativeSecurityTypeEnum = 113
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES                DerivativeSecurityTypeEnum = 114
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FX_FORWARD                                      DerivativeSecurityTypeEnum = 115
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FX_SPOT                                         DerivativeSecurityTypeEnum = 116
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_FX_SWAP                                         DerivativeSecurityTypeEnum = 117
	DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_NON_DELIVERABLE_FORWARD                         DerivativeSecurityTypeEnum = 118
)

var DerivativeSecurityTypeEnum_name = map[int32]string{
	0:   "DERIVATIVE_SECURITY_TYPE_UNSPECIFIED",
	1:   "DERIVATIVE_SECURITY_TYPE_BANKERS_ACCEPTANCE",
	2:   "DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT",
	3:   "DERIVATIVE_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION",
	4:   "DERIVATIVE_SECURITY_TYPE_COMMERCIAL_PAPER",
	5:   "DERIVATIVE_SECURITY_TYPE_COMMON_STOCK",
	6:   "DERIVATIVE_SECURITY_TYPE_CORPORATE_BOND",
	7:   "DERIVATIVE_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT",
	8:   "DERIVATIVE_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT",
	9:   "DERIVATIVE_SECURITY_TYPE_FUTURE",
	10:  "DERIVATIVE_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH",
	11:  "DERIVATIVE_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY",
	12:  "DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY",
	13:  "DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT",
	14:  "DERIVATIVE_SECURITY_TYPE_MUTUAL_FUND",
	15:  "DERIVATIVE_SECURITY_TYPE_NO_SECURITY_TYPE",
	16:  "DERIVATIVE_SECURITY_TYPE_OPTION",
	17:  "DERIVATIVE_SECURITY_TYPE_PREFERRED_STOCK",
	18:  "DERIVATIVE_SECURITY_TYPE_TIME_DEPOSIT",
	19:  "DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL_OLD",
	20:  "DERIVATIVE_SECURITY_TYPE_WARRANT",
	21:  "DERIVATIVE_SECURITY_TYPE_CONVERTIBLE_BOND",
	22:  "DERIVATIVE_SECURITY_TYPE_IOETTEMORTGAGE",
	23:  "DERIVATIVE_SECURITY_TYPE_WILDCARD",
	24:  "DERIVATIVE_SECURITY_TYPE_AMENDED",
	25:  "DERIVATIVE_SECURITY_TYPE_ASSET_BACKED_SECURITIES",
	26:  "DERIVATIVE_SECURITY_TYPE_BANK_NOTES",
	27:  "DERIVATIVE_SECURITY_TYPE_BILL_OF_EXCHANGES",
	28:  "DERIVATIVE_SECURITY_TYPE_BRADY_BOND",
	29:  "DERIVATIVE_SECURITY_TYPE_BRIDGE_LOAN",
	30:  "DERIVATIVE_SECURITY_TYPE_CALL_LOANS",
	31:  "DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION",
	32:  "DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION",
	33:  "DERIVATIVE_SECURITY_TYPE_CORP",
	34:  "DERIVATIVE_SECURITY_TYPE_DEBTOR_IN_POSSESSION",
	35:  "DERIVATIVE_SECURITY_TYPE_DEFAULTED",
	36:  "DERIVATIVE_SECURITY_TYPE_DEPOSIT_NOTES",
	37:  "DERIVATIVE_SECURITY_TYPE_DUAL_CURRENCY",
	38:  "DERIVATIVE_SECURITY_TYPE_EXTENDED_COMM_NOTE",
	39:  "DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_COUPON",
	40:  "DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE",
	41:  "DERIVATIVE_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS",
	42:  "DERIVATIVE_SECURITY_TYPE_INDEXED_LINKED",
	43:  "DERIVATIVE_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE",
	44:  "DERIVATIVE_SECURITY_TYPE_LETTER_OF_CREDIT",
	45:  "DERIVATIVE_SECURITY_TYPE_LIQUIDITY_NOTE",
	46:  "DERIVATIVE_SECURITY_TYPE_MANDATORY_TENDER",
	47:  "DERIVATIVE_SECURITY_TYPE_MATURED",
	48:  "DERIVATIVE_SECURITY_TYPE_MEDIUM_TERM_NOTES",
	49:  "DERIVATIVE_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES",
	50:  "DERIVATIVE_SECURITY_TYPE_MULTILEG_INSTRUMENT",
	51:  "DERIVATIVE_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES",
	52:  "DERIVATIVE_SECURITY_TYPE_OVERNIGHT",
	53:  "DERIVATIVE_SECURITY_TYPE_PLAZOS_FIJOS",
	54:  "DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE",
	55:  "DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE",
	56:  "DERIVATIVE_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING",
	57:  "DERIVATIVE_SECURITY_TYPE_PROMISSORY_NOTE",
	58:  "DERIVATIVE_SECURITY_TYPE_REPLACED",
	59:  "DERIVATIVE_SECURITY_TYPE_RETIRED",
	60:  "DERIVATIVE_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE",
	61:  "DERIVATIVE_SECURITY_TYPE_REVENUE_BONDS",
	62:  "DERIVATIVE_SECURITY_TYPE_REVOLVER",
	63:  "DERIVATIVE_SECURITY_TYPE_REVOLVER_LOAN",
	64:  "DERIVATIVE_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE",
	65:  "DERIVATIVE_SECURITY_TYPE_SPECIAL_ASSESSMENT",
	66:  "DERIVATIVE_SECURITY_TYPE_SPECIAL_OBLIGATION",
	67:  "DERIVATIVE_SECURITY_TYPE_SPECIAL_TAX",
	68:  "DERIVATIVE_SECURITY_TYPE_STRUCTURED_NOTES",
	69:  "DERIVATIVE_SECURITY_TYPE_SWING_LINE_FACILITY",
	70:  "DERIVATIVE_SECURITY_TYPE_TAX_ALLOCATION",
	71:  "DERIVATIVE_SECURITY_TYPE_TAX_ANTICIPATION_NOTE",
	72:  "DERIVATIVE_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER",
	73:  "DERIVATIVE_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE",
	74:  "DERIVATIVE_SECURITY_TYPE_TERM_LOAN",
	75:  "DERIVATIVE_SECURITY_TYPE_TO_BE_ANNOUNCED",
	76:  "DERIVATIVE_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES",
	77:  "DERIVATIVE_SECURITY_TYPE_US_TREASURY_BOND",
	78:  "DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE_OLD",
	79:  "DERIVATIVE_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE",
	80:  "DERIVATIVE_SECURITY_TYPE_WITHDRAWN",
	81:  "DERIVATIVE_SECURITY_TYPE_YANKEE_CORPORATE_BOND",
	82:  "DERIVATIVE_SECURITY_TYPE_BUY_SELLBACK",
	83:  "DERIVATIVE_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT",
	84:  "DERIVATIVE_SECURITY_TYPE_EURO_COMMERCIAL_PAPER",
	85:  "DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_BOND",
	86:  "DERIVATIVE_SECURITY_TYPE_EURO_SOVEREIGNS",
	87:  "DERIVATIVE_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS",
	88:  "DERIVATIVE_SECURITY_TYPE_FORWARD",
	89:  "DERIVATIVE_SECURITY_TYPE_PFANDBRIEFE",
	90:  "DERIVATIVE_SECURITY_TYPE_REPURCHASE",
	91:  "DERIVATIVE_SECURITY_TYPE_SECURITIES_LOAN",
	92:  "DERIVATIVE_SECURITY_TYPE_SECURITIES_PLEDGE",
	93:  "DERIVATIVE_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS",
	94:  "DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL",
	95:  "DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE",
	96:  "DERIVATIVE_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT",
	97:  "DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_FUTURES",
	98:  "DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_PHYSICAL",
	99:  "DERIVATIVE_SECURITY_TYPE_CASH",
	100: "DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_COMBO",
	101: "DERIVATIVE_SECURITY_TYPE_INTEREST_RATE_SWAP",
	102: "DERIVATIVE_SECURITY_TYPE_BANK_DEPOSITORY_NOTE",
	103: "DERIVATIVE_SECURITY_TYPE_CANADIAN_MONEY_MARKETS",
	104: "DERIVATIVE_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS",
	105: "DERIVATIVE_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS",
	106: "DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_BILLS",
	107: "DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_NOTES",
	108: "DERIVATIVE_SECURITY_TYPE_CREDIT_DEFAULT_SWAP",
	109: "DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES",
	110: "DERIVATIVE_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE",
	111: "DERIVATIVE_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP",
	112: "DERIVATIVE_SECURITY_TYPE_TERM_LIQUIDITY_NOTE",
	113: "DERIVATIVE_SECURITY_TYPE_TREASURY_BILL",
	114: "DERIVATIVE_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES",
	115: "DERIVATIVE_SECURITY_TYPE_FX_FORWARD",
	116: "DERIVATIVE_SECURITY_TYPE_FX_SPOT",
	117: "DERIVATIVE_SECURITY_TYPE_FX_SWAP",
	118: "DERIVATIVE_SECURITY_TYPE_NON_DELIVERABLE_FORWARD",
}

var DerivativeSecurityTypeEnum_value = map[string]int32{
	"DERIVATIVE_SECURITY_TYPE_UNSPECIFIED":                                     0,
	"DERIVATIVE_SECURITY_TYPE_BANKERS_ACCEPTANCE":                              1,
	"DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT":                          2,
	"DERIVATIVE_SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION":              3,
	"DERIVATIVE_SECURITY_TYPE_COMMERCIAL_PAPER":                                4,
	"DERIVATIVE_SECURITY_TYPE_COMMON_STOCK":                                    5,
	"DERIVATIVE_SECURITY_TYPE_CORPORATE_BOND":                                  6,
	"DERIVATIVE_SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT":                     7,
	"DERIVATIVE_SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT":                       8,
	"DERIVATIVE_SECURITY_TYPE_FUTURE":                                          9,
	"DERIVATIVE_SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH":                      10,
	"DERIVATIVE_SECURITY_TYPE_MORTGAGE_INTEREST_ONLY":                          11,
	"DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY":                         12,
	"DERIVATIVE_SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT":                      13,
	"DERIVATIVE_SECURITY_TYPE_MUTUAL_FUND":                                     14,
	"DERIVATIVE_SECURITY_TYPE_NO_SECURITY_TYPE":                                15,
	"DERIVATIVE_SECURITY_TYPE_OPTION":                                          16,
	"DERIVATIVE_SECURITY_TYPE_PREFERRED_STOCK":                                 17,
	"DERIVATIVE_SECURITY_TYPE_TIME_DEPOSIT":                                    18,
	"DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL_OLD":                            19,
	"DERIVATIVE_SECURITY_TYPE_WARRANT":                                         20,
	"DERIVATIVE_SECURITY_TYPE_CONVERTIBLE_BOND":                                21,
	"DERIVATIVE_SECURITY_TYPE_IOETTEMORTGAGE":                                  22,
	"DERIVATIVE_SECURITY_TYPE_WILDCARD":                                        23,
	"DERIVATIVE_SECURITY_TYPE_AMENDED":                                         24,
	"DERIVATIVE_SECURITY_TYPE_ASSET_BACKED_SECURITIES":                         25,
	"DERIVATIVE_SECURITY_TYPE_BANK_NOTES":                                      26,
	"DERIVATIVE_SECURITY_TYPE_BILL_OF_EXCHANGES":                               27,
	"DERIVATIVE_SECURITY_TYPE_BRADY_BOND":                                      28,
	"DERIVATIVE_SECURITY_TYPE_BRIDGE_LOAN":                                     29,
	"DERIVATIVE_SECURITY_TYPE_CALL_LOANS":                                      30,
	"DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION":                       31,
	"DERIVATIVE_SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION":                    32,
	"DERIVATIVE_SECURITY_TYPE_CORP":                                            33,
	"DERIVATIVE_SECURITY_TYPE_DEBTOR_IN_POSSESSION":                            34,
	"DERIVATIVE_SECURITY_TYPE_DEFAULTED":                                       35,
	"DERIVATIVE_SECURITY_TYPE_DEPOSIT_NOTES":                                   36,
	"DERIVATIVE_SECURITY_TYPE_DUAL_CURRENCY":                                   37,
	"DERIVATIVE_SECURITY_TYPE_EXTENDED_COMM_NOTE":                              38,
	"DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_COUPON":                           39,
	"DERIVATIVE_SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE":                    40,
	"DERIVATIVE_SECURITY_TYPE_GENERAL_OBLIGATION_BONDS":                        41,
	"DERIVATIVE_SECURITY_TYPE_INDEXED_LINKED":                                  42,
	"DERIVATIVE_SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE":            43,
	"DERIVATIVE_SECURITY_TYPE_LETTER_OF_CREDIT":                                44,
	"DERIVATIVE_SECURITY_TYPE_LIQUIDITY_NOTE":                                  45,
	"DERIVATIVE_SECURITY_TYPE_MANDATORY_TENDER":                                46,
	"DERIVATIVE_SECURITY_TYPE_MATURED":                                         47,
	"DERIVATIVE_SECURITY_TYPE_MEDIUM_TERM_NOTES":                               48,
	"DERIVATIVE_SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES":                      49,
	"DERIVATIVE_SECURITY_TYPE_MULTILEG_INSTRUMENT":                             50,
	"DERIVATIVE_SECURITY_TYPE_OTHER_ANTICIPATION_NOTES":                        51,
	"DERIVATIVE_SECURITY_TYPE_OVERNIGHT":                                       52,
	"DERIVATIVE_SECURITY_TYPE_PLAZOS_FIJOS":                                    53,
	"DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE": 54,
	"DERIVATIVE_SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE":       55,
	"DERIVATIVE_SECURITY_TYPE_PRIVATE_EXPORT_FUNDING":                          56,
	"DERIVATIVE_SECURITY_TYPE_PROMISSORY_NOTE":                                 57,
	"DERIVATIVE_SECURITY_TYPE_REPLACED":                                        58,
	"DERIVATIVE_SECURITY_TYPE_RETIRED":                                         59,
	"DERIVATIVE_SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE":                       60,
	"DERIVATIVE_SECURITY_TYPE_REVENUE_BONDS":                                   61,
	"DERIVATIVE_SECURITY_TYPE_REVOLVER":                                        62,
	"DERIVATIVE_SECURITY_TYPE_REVOLVER_LOAN":                                   63,
	"DERIVATIVE_SECURITY_TYPE_SHORT_TERM_LOAN_NOTE":                            64,
	"DERIVATIVE_SECURITY_TYPE_SPECIAL_ASSESSMENT":                              65,
	"DERIVATIVE_SECURITY_TYPE_SPECIAL_OBLIGATION":                              66,
	"DERIVATIVE_SECURITY_TYPE_SPECIAL_TAX":                                     67,
	"DERIVATIVE_SECURITY_TYPE_STRUCTURED_NOTES":                                68,
	"DERIVATIVE_SECURITY_TYPE_SWING_LINE_FACILITY":                             69,
	"DERIVATIVE_SECURITY_TYPE_TAX_ALLOCATION":                                  70,
	"DERIVATIVE_SECURITY_TYPE_TAX_ANTICIPATION_NOTE":                           71,
	"DERIVATIVE_SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER":                     72,
	"DERIVATIVE_SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE":                   73,
	"DERIVATIVE_SECURITY_TYPE_TERM_LOAN":                                       74,
	"DERIVATIVE_SECURITY_TYPE_TO_BE_ANNOUNCED":                                 75,
	"DERIVATIVE_SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES":         76,
	"DERIVATIVE_SECURITY_TYPE_US_TREASURY_BOND":                                77,
	"DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE_OLD":                            78,
	"DERIVATIVE_SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE":                       79,
	"DERIVATIVE_SECURITY_TYPE_WITHDRAWN":                                       80,
	"DERIVATIVE_SECURITY_TYPE_YANKEE_CORPORATE_BOND":                           81,
	"DERIVATIVE_SECURITY_TYPE_BUY_SELLBACK":                                    82,
	"DERIVATIVE_SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT":                     83,
	"DERIVATIVE_SECURITY_TYPE_EURO_COMMERCIAL_PAPER":                           84,
	"DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_BOND":                             85,
	"DERIVATIVE_SECURITY_TYPE_EURO_SOVEREIGNS":                                 86,
	"DERIVATIVE_SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS":                      87,
	"DERIVATIVE_SECURITY_TYPE_FORWARD":                                         88,
	"DERIVATIVE_SECURITY_TYPE_PFANDBRIEFE":                                     89,
	"DERIVATIVE_SECURITY_TYPE_REPURCHASE":                                      90,
	"DERIVATIVE_SECURITY_TYPE_SECURITIES_LOAN":                                 91,
	"DERIVATIVE_SECURITY_TYPE_SECURITIES_PLEDGE":                               92,
	"DERIVATIVE_SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS":                       93,
	"DERIVATIVE_SECURITY_TYPE_US_TREASURY_BILL":                                94,
	"DERIVATIVE_SECURITY_TYPE_US_TREASURY_NOTE":                                95,
	"DERIVATIVE_SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT":                   96,
	"DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_FUTURES":                              97,
	"DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_PHYSICAL":                             98,
	"DERIVATIVE_SECURITY_TYPE_CASH":                                            99,
	"DERIVATIVE_SECURITY_TYPE_OPTIONS_ON_COMBO":                                100,
	"DERIVATIVE_SECURITY_TYPE_INTEREST_RATE_SWAP":                              101,
	"DERIVATIVE_SECURITY_TYPE_BANK_DEPOSITORY_NOTE":                            102,
	"DERIVATIVE_SECURITY_TYPE_CANADIAN_MONEY_MARKETS":                          103,
	"DERIVATIVE_SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS":                         104,
	"DERIVATIVE_SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS":                       105,
	"DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_BILLS":                         106,
	"DERIVATIVE_SECURITY_TYPE_CANADIAN_TREASURY_NOTES":                         107,
	"DERIVATIVE_SECURITY_TYPE_CREDIT_DEFAULT_SWAP":                             108,
	"DERIVATIVE_SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES":              109,
	"DERIVATIVE_SECURITY_TYPE_SECURED_LIQUIDITY_NOTE":                          110,
	"DERIVATIVE_SECURITY_TYPE_TAXABLE_MUNICIPAL_CP":                            111,
	"DERIVATIVE_SECURITY_TYPE_TERM_LIQUIDITY_NOTE":                             112,
	"DERIVATIVE_SECURITY_TYPE_TREASURY_BILL":                                   113,
	"DERIVATIVE_SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES":                114,
	"DERIVATIVE_SECURITY_TYPE_FX_FORWARD":                                      115,
	"DERIVATIVE_SECURITY_TYPE_FX_SPOT":                                         116,
	"DERIVATIVE_SECURITY_TYPE_FX_SWAP":                                         117,
	"DERIVATIVE_SECURITY_TYPE_NON_DELIVERABLE_FORWARD":                         118,
}

func (x DerivativeSecurityTypeEnum) String() string {
	return proto.EnumName(DerivativeSecurityTypeEnum_name, int32(x))
}

func (DerivativeSecurityTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{178}
}

type DerivativeInstrmtAssignmentMethodEnum int32

const (
	DerivativeInstrmtAssignmentMethodEnum_DERIVATIVE_INSTRMT_ASSIGNMENT_METHOD_UNSPECIFIED DerivativeInstrmtAssignmentMethodEnum = 0
)

var DerivativeInstrmtAssignmentMethodEnum_name = map[int32]string{
	0: "DERIVATIVE_INSTRMT_ASSIGNMENT_METHOD_UNSPECIFIED",
}

var DerivativeInstrmtAssignmentMethodEnum_value = map[string]int32{
	"DERIVATIVE_INSTRMT_ASSIGNMENT_METHOD_UNSPECIFIED": 0,
}

func (x DerivativeInstrmtAssignmentMethodEnum) String() string {
	return proto.EnumName(DerivativeInstrmtAssignmentMethodEnum_name, int32(x))
}

func (DerivativeInstrmtAssignmentMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{179}
}

type DerivativeSecurityStatusEnum int32

const (
	DerivativeSecurityStatusEnum_DERIVATIVE_SECURITY_STATUS_UNSPECIFIED DerivativeSecurityStatusEnum = 0
	DerivativeSecurityStatusEnum_DERIVATIVE_SECURITY_STATUS_ACTIVE      DerivativeSecurityStatusEnum = 1
	DerivativeSecurityStatusEnum_DERIVATIVE_SECURITY_STATUS_INACTIVE    DerivativeSecurityStatusEnum = 2
)

var DerivativeSecurityStatusEnum_name = map[int32]string{
	0: "DERIVATIVE_SECURITY_STATUS_UNSPECIFIED",
	1: "DERIVATIVE_SECURITY_STATUS_ACTIVE",
	2: "DERIVATIVE_SECURITY_STATUS_INACTIVE",
}

var DerivativeSecurityStatusEnum_value = map[string]int32{
	"DERIVATIVE_SECURITY_STATUS_UNSPECIFIED": 0,
	"DERIVATIVE_SECURITY_STATUS_ACTIVE":      1,
	"DERIVATIVE_SECURITY_STATUS_INACTIVE":    2,
}

func (x DerivativeSecurityStatusEnum) String() string {
	return proto.EnumName(DerivativeSecurityStatusEnum_name, int32(x))
}

func (DerivativeSecurityStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{180}
}

type DerivativeContractMultiplierUnitEnum int32

const (
	DerivativeContractMultiplierUnitEnum_DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED DerivativeContractMultiplierUnitEnum = 0
	DerivativeContractMultiplierUnitEnum_DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_DAYS        DerivativeContractMultiplierUnitEnum = 1
	DerivativeContractMultiplierUnitEnum_DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_HOURS       DerivativeContractMultiplierUnitEnum = 2
	DerivativeContractMultiplierUnitEnum_DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_SHARES      DerivativeContractMultiplierUnitEnum = 3
)

var DerivativeContractMultiplierUnitEnum_name = map[int32]string{
	0: "DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED",
	1: "DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_DAYS",
	2: "DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_HOURS",
	3: "DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_SHARES",
}

var DerivativeContractMultiplierUnitEnum_value = map[string]int32{
	"DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED": 0,
	"DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_DAYS":        1,
	"DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_HOURS":       2,
	"DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_SHARES":      3,
}

func (x DerivativeContractMultiplierUnitEnum) String() string {
	return proto.EnumName(DerivativeContractMultiplierUnitEnum_name, int32(x))
}

func (DerivativeContractMultiplierUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{181}
}

type DerivativeFlowScheduleTypeEnum int32

const (
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_UNSPECIFIED                     DerivativeFlowScheduleTypeEnum = 0
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH DerivativeFlowScheduleTypeEnum = 1
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK           DerivativeFlowScheduleTypeEnum = 2
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK               DerivativeFlowScheduleTypeEnum = 3
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK           DerivativeFlowScheduleTypeEnum = 4
	DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK               DerivativeFlowScheduleTypeEnum = 5
)

var DerivativeFlowScheduleTypeEnum_name = map[int32]string{
	0: "DERIVATIVE_FLOW_SCHEDULE_TYPE_UNSPECIFIED",
	1: "DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH",
	2: "DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK",
	3: "DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK",
	4: "DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK",
	5: "DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK",
}

var DerivativeFlowScheduleTypeEnum_value = map[string]int32{
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_UNSPECIFIED":                     0,
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH": 1,
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK":           2,
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK":               3,
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK":           4,
	"DERIVATIVE_FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK":               5,
}

func (x DerivativeFlowScheduleTypeEnum) String() string {
	return proto.EnumName(DerivativeFlowScheduleTypeEnum_name, int32(x))
}

func (DerivativeFlowScheduleTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{182}
}

type DerivativeUnitOfMeasureEnum int32

const (
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_UNSPECIFIED        DerivativeUnitOfMeasureEnum = 0
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_BARRELS            DerivativeUnitOfMeasureEnum = 1
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET DerivativeUnitOfMeasureEnum = 2
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_BUSHELS            DerivativeUnitOfMeasureEnum = 3
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_GALLONS            DerivativeUnitOfMeasureEnum = 4
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_MEGAWATT_HOURS     DerivativeUnitOfMeasureEnum = 5
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_METRIC_TONS        DerivativeUnitOfMeasureEnum = 6
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_MILLION_BARRELS    DerivativeUnitOfMeasureEnum = 7
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_ONE_MILLION_BTU    DerivativeUnitOfMeasureEnum = 8
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_POUNDS             DerivativeUnitOfMeasureEnum = 9
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_TONS               DerivativeUnitOfMeasureEnum = 10
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_TROY_OUNCES        DerivativeUnitOfMeasureEnum = 11
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_USDOLLARS          DerivativeUnitOfMeasureEnum = 12
	DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_ALLOWANCES         DerivativeUnitOfMeasureEnum = 13
)

var DerivativeUnitOfMeasureEnum_name = map[int32]string{
	0:  "DERIVATIVE_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "DERIVATIVE_UNIT_OF_MEASURE_BARRELS",
	2:  "DERIVATIVE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "DERIVATIVE_UNIT_OF_MEASURE_BUSHELS",
	4:  "DERIVATIVE_UNIT_OF_MEASURE_GALLONS",
	5:  "DERIVATIVE_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "DERIVATIVE_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "DERIVATIVE_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "DERIVATIVE_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "DERIVATIVE_UNIT_OF_MEASURE_POUNDS",
	10: "DERIVATIVE_UNIT_OF_MEASURE_TONS",
	11: "DERIVATIVE_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "DERIVATIVE_UNIT_OF_MEASURE_USDOLLARS",
	13: "DERIVATIVE_UNIT_OF_MEASURE_ALLOWANCES",
}

var DerivativeUnitOfMeasureEnum_value = map[string]int32{
	"DERIVATIVE_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"DERIVATIVE_UNIT_OF_MEASURE_BARRELS":            1,
	"DERIVATIVE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"DERIVATIVE_UNIT_OF_MEASURE_BUSHELS":            3,
	"DERIVATIVE_UNIT_OF_MEASURE_GALLONS":            4,
	"DERIVATIVE_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"DERIVATIVE_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"DERIVATIVE_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"DERIVATIVE_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"DERIVATIVE_UNIT_OF_MEASURE_POUNDS":             9,
	"DERIVATIVE_UNIT_OF_MEASURE_TONS":               10,
	"DERIVATIVE_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"DERIVATIVE_UNIT_OF_MEASURE_USDOLLARS":          12,
	"DERIVATIVE_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x DerivativeUnitOfMeasureEnum) String() string {
	return proto.EnumName(DerivativeUnitOfMeasureEnum_name, int32(x))
}

func (DerivativeUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{183}
}

type DerivativePriceUnitOfMeasureEnum int32

const (
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_UNSPECIFIED        DerivativePriceUnitOfMeasureEnum = 0
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_BARRELS            DerivativePriceUnitOfMeasureEnum = 1
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET DerivativePriceUnitOfMeasureEnum = 2
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_BUSHELS            DerivativePriceUnitOfMeasureEnum = 3
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_GALLONS            DerivativePriceUnitOfMeasureEnum = 4
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS     DerivativePriceUnitOfMeasureEnum = 5
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_METRIC_TONS        DerivativePriceUnitOfMeasureEnum = 6
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS    DerivativePriceUnitOfMeasureEnum = 7
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU    DerivativePriceUnitOfMeasureEnum = 8
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_POUNDS             DerivativePriceUnitOfMeasureEnum = 9
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_TONS               DerivativePriceUnitOfMeasureEnum = 10
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_TROY_OUNCES        DerivativePriceUnitOfMeasureEnum = 11
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_USDOLLARS          DerivativePriceUnitOfMeasureEnum = 12
	DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_ALLOWANCES         DerivativePriceUnitOfMeasureEnum = 13
)

var DerivativePriceUnitOfMeasureEnum_name = map[int32]string{
	0:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_UNSPECIFIED",
	1:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_BARRELS",
	2:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET",
	3:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_BUSHELS",
	4:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_GALLONS",
	5:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS",
	6:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_METRIC_TONS",
	7:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS",
	8:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU",
	9:  "DERIVATIVE_PRICE_UNIT_OF_MEASURE_POUNDS",
	10: "DERIVATIVE_PRICE_UNIT_OF_MEASURE_TONS",
	11: "DERIVATIVE_PRICE_UNIT_OF_MEASURE_TROY_OUNCES",
	12: "DERIVATIVE_PRICE_UNIT_OF_MEASURE_USDOLLARS",
	13: "DERIVATIVE_PRICE_UNIT_OF_MEASURE_ALLOWANCES",
}

var DerivativePriceUnitOfMeasureEnum_value = map[string]int32{
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_UNSPECIFIED":        0,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_BARRELS":            1,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_BILLION_CUBIC_FEET": 2,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_BUSHELS":            3,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_GALLONS":            4,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_MEGAWATT_HOURS":     5,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_METRIC_TONS":        6,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_MILLION_BARRELS":    7,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_ONE_MILLION_BTU":    8,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_POUNDS":             9,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_TONS":               10,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_TROY_OUNCES":        11,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_USDOLLARS":          12,
	"DERIVATIVE_PRICE_UNIT_OF_MEASURE_ALLOWANCES":         13,
}

func (x DerivativePriceUnitOfMeasureEnum) String() string {
	return proto.EnumName(DerivativePriceUnitOfMeasureEnum_name, int32(x))
}

func (DerivativePriceUnitOfMeasureEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{184}
}

type DerivativeSettlMethodEnum int32

const (
	DerivativeSettlMethodEnum_DERIVATIVE_SETTL_METHOD_UNSPECIFIED                  DerivativeSettlMethodEnum = 0
	DerivativeSettlMethodEnum_DERIVATIVE_SETTL_METHOD_CASH_SETTLEMENT_REQUIRED     DerivativeSettlMethodEnum = 1
	DerivativeSettlMethodEnum_DERIVATIVE_SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED DerivativeSettlMethodEnum = 2
)

var DerivativeSettlMethodEnum_name = map[int32]string{
	0: "DERIVATIVE_SETTL_METHOD_UNSPECIFIED",
	1: "DERIVATIVE_SETTL_METHOD_CASH_SETTLEMENT_REQUIRED",
	2: "DERIVATIVE_SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED",
}

var DerivativeSettlMethodEnum_value = map[string]int32{
	"DERIVATIVE_SETTL_METHOD_UNSPECIFIED":                  0,
	"DERIVATIVE_SETTL_METHOD_CASH_SETTLEMENT_REQUIRED":     1,
	"DERIVATIVE_SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED": 2,
}

func (x DerivativeSettlMethodEnum) String() string {
	return proto.EnumName(DerivativeSettlMethodEnum_name, int32(x))
}

func (DerivativeSettlMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{185}
}

type DerivativePriceQuoteMethodEnum int32

const (
	DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_UNSPECIFIED         DerivativePriceQuoteMethodEnum = 0
	DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_INDEX               DerivativePriceQuoteMethodEnum = 1
	DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX DerivativePriceQuoteMethodEnum = 2
	DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_STANDARD            DerivativePriceQuoteMethodEnum = 3
	DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_PERCENT_OF_PAR      DerivativePriceQuoteMethodEnum = 4
)

var DerivativePriceQuoteMethodEnum_name = map[int32]string{
	0: "DERIVATIVE_PRICE_QUOTE_METHOD_UNSPECIFIED",
	1: "DERIVATIVE_PRICE_QUOTE_METHOD_INDEX",
	2: "DERIVATIVE_PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX",
	3: "DERIVATIVE_PRICE_QUOTE_METHOD_STANDARD",
	4: "DERIVATIVE_PRICE_QUOTE_METHOD_PERCENT_OF_PAR",
}

var DerivativePriceQuoteMethodEnum_value = map[string]int32{
	"DERIVATIVE_PRICE_QUOTE_METHOD_UNSPECIFIED":         0,
	"DERIVATIVE_PRICE_QUOTE_METHOD_INDEX":               1,
	"DERIVATIVE_PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX": 2,
	"DERIVATIVE_PRICE_QUOTE_METHOD_STANDARD":            3,
	"DERIVATIVE_PRICE_QUOTE_METHOD_PERCENT_OF_PAR":      4,
}

func (x DerivativePriceQuoteMethodEnum) String() string {
	return proto.EnumName(DerivativePriceQuoteMethodEnum_name, int32(x))
}

func (DerivativePriceQuoteMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{186}
}

type DerivativeValuationMethodEnum int32

const (
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_UNSPECIFIED                                    DerivativeValuationMethodEnum = 0
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET                   DerivativeValuationMethodEnum = 1
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT DerivativeValuationMethodEnum = 2
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_PREMIUM_STYLE                                  DerivativeValuationMethodEnum = 3
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE DerivativeValuationMethodEnum = 4
	DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION                    DerivativeValuationMethodEnum = 5
)

var DerivativeValuationMethodEnum_name = map[int32]string{
	0: "DERIVATIVE_VALUATION_METHOD_UNSPECIFIED",
	1: "DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET",
	2: "DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT",
	3: "DERIVATIVE_VALUATION_METHOD_PREMIUM_STYLE",
	4: "DERIVATIVE_VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE",
	5: "DERIVATIVE_VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION",
}

var DerivativeValuationMethodEnum_value = map[string]int32{
	"DERIVATIVE_VALUATION_METHOD_UNSPECIFIED":                                    0,
	"DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET":                   1,
	"DERIVATIVE_VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT": 2,
	"DERIVATIVE_VALUATION_METHOD_PREMIUM_STYLE":                                  3,
	"DERIVATIVE_VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE": 4,
	"DERIVATIVE_VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION":                    5,
}

func (x DerivativeValuationMethodEnum) String() string {
	return proto.EnumName(DerivativeValuationMethodEnum_name, int32(x))
}

func (DerivativeValuationMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{187}
}

type DerivativeListMethodEnum int32

const (
	DerivativeListMethodEnum_DERIVATIVE_LIST_METHOD_UNSPECIFIED     DerivativeListMethodEnum = 0
	DerivativeListMethodEnum_DERIVATIVE_LIST_METHOD_PRE_LISTED_ONLY DerivativeListMethodEnum = 1
	DerivativeListMethodEnum_DERIVATIVE_LIST_METHOD_USER_REQUESTED  DerivativeListMethodEnum = 2
)

var DerivativeListMethodEnum_name = map[int32]string{
	0: "DERIVATIVE_LIST_METHOD_UNSPECIFIED",
	1: "DERIVATIVE_LIST_METHOD_PRE_LISTED_ONLY",
	2: "DERIVATIVE_LIST_METHOD_USER_REQUESTED",
}

var DerivativeListMethodEnum_value = map[string]int32{
	"DERIVATIVE_LIST_METHOD_UNSPECIFIED":     0,
	"DERIVATIVE_LIST_METHOD_PRE_LISTED_ONLY": 1,
	"DERIVATIVE_LIST_METHOD_USER_REQUESTED":  2,
}

func (x DerivativeListMethodEnum) String() string {
	return proto.EnumName(DerivativeListMethodEnum_name, int32(x))
}

func (DerivativeListMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{188}
}

type DerivativePutOrCallEnum int32

const (
	DerivativePutOrCallEnum_DERIVATIVE_PUT_OR_CALL_UNSPECIFIED DerivativePutOrCallEnum = 0
	DerivativePutOrCallEnum_DERIVATIVE_PUT_OR_CALL_CALL        DerivativePutOrCallEnum = 1
	DerivativePutOrCallEnum_DERIVATIVE_PUT_OR_CALL_PUT         DerivativePutOrCallEnum = 2
)

var DerivativePutOrCallEnum_name = map[int32]string{
	0: "DERIVATIVE_PUT_OR_CALL_UNSPECIFIED",
	1: "DERIVATIVE_PUT_OR_CALL_CALL",
	2: "DERIVATIVE_PUT_OR_CALL_PUT",
}

var DerivativePutOrCallEnum_value = map[string]int32{
	"DERIVATIVE_PUT_OR_CALL_UNSPECIFIED": 0,
	"DERIVATIVE_PUT_OR_CALL_CALL":        1,
	"DERIVATIVE_PUT_OR_CALL_PUT":         2,
}

func (x DerivativePutOrCallEnum) String() string {
	return proto.EnumName(DerivativePutOrCallEnum_name, int32(x))
}

func (DerivativePutOrCallEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{189}
}

type DerivativeExerciseStyleEnum int32

const (
	DerivativeExerciseStyleEnum_DERIVATIVE_EXERCISE_STYLE_UNSPECIFIED DerivativeExerciseStyleEnum = 0
	DerivativeExerciseStyleEnum_DERIVATIVE_EXERCISE_STYLE_AMERICAN    DerivativeExerciseStyleEnum = 1
	DerivativeExerciseStyleEnum_DERIVATIVE_EXERCISE_STYLE_BERMUDA     DerivativeExerciseStyleEnum = 2
	DerivativeExerciseStyleEnum_DERIVATIVE_EXERCISE_STYLE_EUROPEAN    DerivativeExerciseStyleEnum = 3
)

var DerivativeExerciseStyleEnum_name = map[int32]string{
	0: "DERIVATIVE_EXERCISE_STYLE_UNSPECIFIED",
	1: "DERIVATIVE_EXERCISE_STYLE_AMERICAN",
	2: "DERIVATIVE_EXERCISE_STYLE_BERMUDA",
	3: "DERIVATIVE_EXERCISE_STYLE_EUROPEAN",
}

var DerivativeExerciseStyleEnum_value = map[string]int32{
	"DERIVATIVE_EXERCISE_STYLE_UNSPECIFIED": 0,
	"DERIVATIVE_EXERCISE_STYLE_AMERICAN":    1,
	"DERIVATIVE_EXERCISE_STYLE_BERMUDA":     2,
	"DERIVATIVE_EXERCISE_STYLE_EUROPEAN":    3,
}

func (x DerivativeExerciseStyleEnum) String() string {
	return proto.EnumName(DerivativeExerciseStyleEnum_name, int32(x))
}

func (DerivativeExerciseStyleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{190}
}

type DerivativeTimeUnitEnum int32

const (
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_UNSPECIFIED DerivativeTimeUnitEnum = 0
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_DAY         DerivativeTimeUnitEnum = 1
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_HOUR        DerivativeTimeUnitEnum = 2
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_MINUTE      DerivativeTimeUnitEnum = 3
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_MONTH       DerivativeTimeUnitEnum = 4
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_SECOND      DerivativeTimeUnitEnum = 5
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_WEEK        DerivativeTimeUnitEnum = 6
	DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_YEAR        DerivativeTimeUnitEnum = 7
)

var DerivativeTimeUnitEnum_name = map[int32]string{
	0: "DERIVATIVE_TIME_UNIT_UNSPECIFIED",
	1: "DERIVATIVE_TIME_UNIT_DAY",
	2: "DERIVATIVE_TIME_UNIT_HOUR",
	3: "DERIVATIVE_TIME_UNIT_MINUTE",
	4: "DERIVATIVE_TIME_UNIT_MONTH",
	5: "DERIVATIVE_TIME_UNIT_SECOND",
	6: "DERIVATIVE_TIME_UNIT_WEEK",
	7: "DERIVATIVE_TIME_UNIT_YEAR",
}

var DerivativeTimeUnitEnum_value = map[string]int32{
	"DERIVATIVE_TIME_UNIT_UNSPECIFIED": 0,
	"DERIVATIVE_TIME_UNIT_DAY":         1,
	"DERIVATIVE_TIME_UNIT_HOUR":        2,
	"DERIVATIVE_TIME_UNIT_MINUTE":      3,
	"DERIVATIVE_TIME_UNIT_MONTH":       4,
	"DERIVATIVE_TIME_UNIT_SECOND":      5,
	"DERIVATIVE_TIME_UNIT_WEEK":        6,
	"DERIVATIVE_TIME_UNIT_YEAR":        7,
}

func (x DerivativeTimeUnitEnum) String() string {
	return proto.EnumName(DerivativeTimeUnitEnum_name, int32(x))
}

func (DerivativeTimeUnitEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{191}
}

type DerivativeSecurityAltIDSourceEnum int32

const (
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_UNSPECIFIED                      DerivativeSecurityAltIDSourceEnum = 0
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_CUSIP                            DerivativeSecurityAltIDSourceEnum = 1
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_QUIK                             DerivativeSecurityAltIDSourceEnum = 2
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_SEDOL                            DerivativeSecurityAltIDSourceEnum = 3
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER                      DerivativeSecurityAltIDSourceEnum = 4
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_RIC_CODE                         DerivativeSecurityAltIDSourceEnum = 5
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE                 DerivativeSecurityAltIDSourceEnum = 6
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE                DerivativeSecurityAltIDSourceEnum = 7
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION    DerivativeSecurityAltIDSourceEnum = 8
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL                  DerivativeSecurityAltIDSourceEnum = 9
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_BELGIAN                          DerivativeSecurityAltIDSourceEnum = 10
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL                 DerivativeSecurityAltIDSourceEnum = 11
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_COMMON                           DerivativeSecurityAltIDSourceEnum = 12
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_DUTCH                            DerivativeSecurityAltIDSourceEnum = 13
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_SICOVAM                          DerivativeSecurityAltIDSourceEnum = 14
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_VALOREN                          DerivativeSecurityAltIDSourceEnum = 15
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_WERTPAPIER                       DerivativeSecurityAltIDSourceEnum = 16
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE                   DerivativeSecurityAltIDSourceEnum = 17
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION          DerivativeSecurityAltIDSourceEnum = 18
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY DerivativeSecurityAltIDSourceEnum = 19
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT                 DerivativeSecurityAltIDSourceEnum = 20
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL                    DerivativeSecurityAltIDSourceEnum = 21
	DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER  DerivativeSecurityAltIDSourceEnum = 22
)

var DerivativeSecurityAltIDSourceEnum_name = map[int32]string{
	0:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_UNSPECIFIED",
	1:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_CUSIP",
	2:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_QUIK",
	3:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_SEDOL",
	4:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER",
	5:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_RIC_CODE",
	6:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE",
	8:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION",
	9:  "DERIVATIVE_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL",
	10: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_BELGIAN",
	11: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL",
	12: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_COMMON",
	13: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_DUTCH",
	14: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_SICOVAM",
	15: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_VALOREN",
	16: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_WERTPAPIER",
	17: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE",
	18: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION",
	19: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY",
	20: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT",
	21: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL",
	22: "DERIVATIVE_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER",
}

var DerivativeSecurityAltIDSourceEnum_value = map[string]int32{
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_UNSPECIFIED":                      0,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_CUSIP":                            1,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_QUIK":                             2,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_SEDOL":                            3,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISIN_NUMBER":                      4,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_RIC_CODE":                         5,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_COUNTRY_CODE":                 6,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISO_CURRENCY_CODE":                7,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION":    8,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_EXCHANGE_SYMBOL":                  9,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_BELGIAN":                          10,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_BLOOMBERG_SYMBOL":                 11,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_COMMON":                           12,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_DUTCH":                            13,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_SICOVAM":                          14,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_VALOREN":                          15,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_WERTPAPIER":                       16,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_CLEARING_HOUSE":                   17,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_SPECIFICATION":          18,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY": 19,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_LETTER_OF_CREDIT":                 20,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_ISDA_FPML_URL":                    21,
	"DERIVATIVE_SECURITY_ALT_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER":  22,
}

func (x DerivativeSecurityAltIDSourceEnum) String() string {
	return proto.EnumName(DerivativeSecurityAltIDSourceEnum_name, int32(x))
}

func (DerivativeSecurityAltIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{192}
}

type DerivativeEventTypeEnum int32

const (
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_UNSPECIFIED                DerivativeEventTypeEnum = 0
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_CALL                       DerivativeEventTypeEnum = 1
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_OTHER                      DerivativeEventTypeEnum = 2
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_PUT                        DerivativeEventTypeEnum = 3
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SINKING_FUND_CALL          DerivativeEventTypeEnum = 4
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_TENDER                     DerivativeEventTypeEnum = 5
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_ACTIVATION                 DerivativeEventTypeEnum = 6
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_INACTIVIATION              DerivativeEventTypeEnum = 7
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE   DerivativeEventTypeEnum = 8
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_FINAL_INVENTORY_DUE_DATE   DerivativeEventTypeEnum = 9
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_FIRST_DELIVERY_DATE        DerivativeEventTypeEnum = 10
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_FIRST_INTENT_DATE          DerivativeEventTypeEnum = 11
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE DerivativeEventTypeEnum = 12
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_LAST_DELIVERY_DATE         DerivativeEventTypeEnum = 13
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_LAST_INTENT_DATE           DerivativeEventTypeEnum = 14
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_POSITION_REMOVAL_DATE      DerivativeEventTypeEnum = 15
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SWAP_END_DATE              DerivativeEventTypeEnum = 16
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SWAP_NEXT_ROLL_DATE        DerivativeEventTypeEnum = 17
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SWAP_NEXT_START_DATE       DerivativeEventTypeEnum = 18
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SWAP_ROLL_DATE             DerivativeEventTypeEnum = 19
	DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_SWAP_START_DATE            DerivativeEventTypeEnum = 20
)

var DerivativeEventTypeEnum_name = map[int32]string{
	0:  "DERIVATIVE_EVENT_TYPE_UNSPECIFIED",
	1:  "DERIVATIVE_EVENT_TYPE_CALL",
	2:  "DERIVATIVE_EVENT_TYPE_OTHER",
	3:  "DERIVATIVE_EVENT_TYPE_PUT",
	4:  "DERIVATIVE_EVENT_TYPE_SINKING_FUND_CALL",
	5:  "DERIVATIVE_EVENT_TYPE_TENDER",
	6:  "DERIVATIVE_EVENT_TYPE_ACTIVATION",
	7:  "DERIVATIVE_EVENT_TYPE_INACTIVIATION",
	8:  "DERIVATIVE_EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE",
	9:  "DERIVATIVE_EVENT_TYPE_FINAL_INVENTORY_DUE_DATE",
	10: "DERIVATIVE_EVENT_TYPE_FIRST_DELIVERY_DATE",
	11: "DERIVATIVE_EVENT_TYPE_FIRST_INTENT_DATE",
	12: "DERIVATIVE_EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE",
	13: "DERIVATIVE_EVENT_TYPE_LAST_DELIVERY_DATE",
	14: "DERIVATIVE_EVENT_TYPE_LAST_INTENT_DATE",
	15: "DERIVATIVE_EVENT_TYPE_POSITION_REMOVAL_DATE",
	16: "DERIVATIVE_EVENT_TYPE_SWAP_END_DATE",
	17: "DERIVATIVE_EVENT_TYPE_SWAP_NEXT_ROLL_DATE",
	18: "DERIVATIVE_EVENT_TYPE_SWAP_NEXT_START_DATE",
	19: "DERIVATIVE_EVENT_TYPE_SWAP_ROLL_DATE",
	20: "DERIVATIVE_EVENT_TYPE_SWAP_START_DATE",
}

var DerivativeEventTypeEnum_value = map[string]int32{
	"DERIVATIVE_EVENT_TYPE_UNSPECIFIED":                0,
	"DERIVATIVE_EVENT_TYPE_CALL":                       1,
	"DERIVATIVE_EVENT_TYPE_OTHER":                      2,
	"DERIVATIVE_EVENT_TYPE_PUT":                        3,
	"DERIVATIVE_EVENT_TYPE_SINKING_FUND_CALL":          4,
	"DERIVATIVE_EVENT_TYPE_TENDER":                     5,
	"DERIVATIVE_EVENT_TYPE_ACTIVATION":                 6,
	"DERIVATIVE_EVENT_TYPE_INACTIVIATION":              7,
	"DERIVATIVE_EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE":   8,
	"DERIVATIVE_EVENT_TYPE_FINAL_INVENTORY_DUE_DATE":   9,
	"DERIVATIVE_EVENT_TYPE_FIRST_DELIVERY_DATE":        10,
	"DERIVATIVE_EVENT_TYPE_FIRST_INTENT_DATE":          11,
	"DERIVATIVE_EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE": 12,
	"DERIVATIVE_EVENT_TYPE_LAST_DELIVERY_DATE":         13,
	"DERIVATIVE_EVENT_TYPE_LAST_INTENT_DATE":           14,
	"DERIVATIVE_EVENT_TYPE_POSITION_REMOVAL_DATE":      15,
	"DERIVATIVE_EVENT_TYPE_SWAP_END_DATE":              16,
	"DERIVATIVE_EVENT_TYPE_SWAP_NEXT_ROLL_DATE":        17,
	"DERIVATIVE_EVENT_TYPE_SWAP_NEXT_START_DATE":       18,
	"DERIVATIVE_EVENT_TYPE_SWAP_ROLL_DATE":             19,
	"DERIVATIVE_EVENT_TYPE_SWAP_START_DATE":            20,
}

func (x DerivativeEventTypeEnum) String() string {
	return proto.EnumName(DerivativeEventTypeEnum_name, int32(x))
}

func (DerivativeEventTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{193}
}

type ListUpdateActionEnum int32

const (
	ListUpdateActionEnum_LIST_UPDATE_ACTION_UNSPECIFIED ListUpdateActionEnum = 0
	ListUpdateActionEnum_LIST_UPDATE_ACTION_ADD         ListUpdateActionEnum = 1
	ListUpdateActionEnum_LIST_UPDATE_ACTION_DELETE      ListUpdateActionEnum = 2
	ListUpdateActionEnum_LIST_UPDATE_ACTION_MODIFY      ListUpdateActionEnum = 3
)

var ListUpdateActionEnum_name = map[int32]string{
	0: "LIST_UPDATE_ACTION_UNSPECIFIED",
	1: "LIST_UPDATE_ACTION_ADD",
	2: "LIST_UPDATE_ACTION_DELETE",
	3: "LIST_UPDATE_ACTION_MODIFY",
}

var ListUpdateActionEnum_value = map[string]int32{
	"LIST_UPDATE_ACTION_UNSPECIFIED": 0,
	"LIST_UPDATE_ACTION_ADD":         1,
	"LIST_UPDATE_ACTION_DELETE":      2,
	"LIST_UPDATE_ACTION_MODIFY":      3,
}

func (x ListUpdateActionEnum) String() string {
	return proto.EnumName(ListUpdateActionEnum_name, int32(x))
}

func (ListUpdateActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{194}
}

type CorporateActionEnum int32

const (
	CorporateActionEnum_CORPORATE_ACTION_UNSPECIFIED                  CorporateActionEnum = 0
	CorporateActionEnum_CORPORATE_ACTION_EX_DISTRIBUTION              CorporateActionEnum = 1
	CorporateActionEnum_CORPORATE_ACTION_EX_DIVIDEND                  CorporateActionEnum = 2
	CorporateActionEnum_CORPORATE_ACTION_EX_INTEREST                  CorporateActionEnum = 3
	CorporateActionEnum_CORPORATE_ACTION_EX_RIGHTS                    CorporateActionEnum = 4
	CorporateActionEnum_CORPORATE_ACTION_NEW                          CorporateActionEnum = 5
	CorporateActionEnum_CORPORATE_ACTION_CASH_DIVIDEND                CorporateActionEnum = 6
	CorporateActionEnum_CORPORATE_ACTION_CUSIP                        CorporateActionEnum = 7
	CorporateActionEnum_CORPORATE_ACTION_LIQUIDATION_REORGANIZATION   CorporateActionEnum = 8
	CorporateActionEnum_CORPORATE_ACTION_MERGER_REORGANIZATION        CorporateActionEnum = 9
	CorporateActionEnum_CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT      CorporateActionEnum = 10
	CorporateActionEnum_CORPORATE_ACTION_POSITION_CONSOLIDATION       CorporateActionEnum = 11
	CorporateActionEnum_CORPORATE_ACTION_REVERSE_STOCK_SPLIT          CorporateActionEnum = 12
	CorporateActionEnum_CORPORATE_ACTION_RIGHTS_OFFERING              CorporateActionEnum = 13
	CorporateActionEnum_CORPORATE_ACTION_SHAREHOLDER_MEETING          CorporateActionEnum = 14
	CorporateActionEnum_CORPORATE_ACTION_SPECIAL_ACTION               CorporateActionEnum = 15
	CorporateActionEnum_CORPORATE_ACTION_SPINOFF                      CorporateActionEnum = 16
	CorporateActionEnum_CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT CorporateActionEnum = 17
	CorporateActionEnum_CORPORATE_ACTION_STOCK_DIVIDEND               CorporateActionEnum = 18
	CorporateActionEnum_CORPORATE_ACTION_SYMBOL_CONVERSION            CorporateActionEnum = 19
	CorporateActionEnum_CORPORATE_ACTION_TENDER_OFFER                 CorporateActionEnum = 20
	CorporateActionEnum_CORPORATE_ACTION_WARRANT                      CorporateActionEnum = 21
	CorporateActionEnum_CORPORATE_ACTION_LEAP_ROLLOVER                CorporateActionEnum = 22
	CorporateActionEnum_CORPORATE_ACTION_SUCCESSION_EVENT             CorporateActionEnum = 23
)

var CorporateActionEnum_name = map[int32]string{
	0:  "CORPORATE_ACTION_UNSPECIFIED",
	1:  "CORPORATE_ACTION_EX_DISTRIBUTION",
	2:  "CORPORATE_ACTION_EX_DIVIDEND",
	3:  "CORPORATE_ACTION_EX_INTEREST",
	4:  "CORPORATE_ACTION_EX_RIGHTS",
	5:  "CORPORATE_ACTION_NEW",
	6:  "CORPORATE_ACTION_CASH_DIVIDEND",
	7:  "CORPORATE_ACTION_CUSIP",
	8:  "CORPORATE_ACTION_LIQUIDATION_REORGANIZATION",
	9:  "CORPORATE_ACTION_MERGER_REORGANIZATION",
	10: "CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT",
	11: "CORPORATE_ACTION_POSITION_CONSOLIDATION",
	12: "CORPORATE_ACTION_REVERSE_STOCK_SPLIT",
	13: "CORPORATE_ACTION_RIGHTS_OFFERING",
	14: "CORPORATE_ACTION_SHAREHOLDER_MEETING",
	15: "CORPORATE_ACTION_SPECIAL_ACTION",
	16: "CORPORATE_ACTION_SPINOFF",
	17: "CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT",
	18: "CORPORATE_ACTION_STOCK_DIVIDEND",
	19: "CORPORATE_ACTION_SYMBOL_CONVERSION",
	20: "CORPORATE_ACTION_TENDER_OFFER",
	21: "CORPORATE_ACTION_WARRANT",
	22: "CORPORATE_ACTION_LEAP_ROLLOVER",
	23: "CORPORATE_ACTION_SUCCESSION_EVENT",
}

var CorporateActionEnum_value = map[string]int32{
	"CORPORATE_ACTION_UNSPECIFIED":                  0,
	"CORPORATE_ACTION_EX_DISTRIBUTION":              1,
	"CORPORATE_ACTION_EX_DIVIDEND":                  2,
	"CORPORATE_ACTION_EX_INTEREST":                  3,
	"CORPORATE_ACTION_EX_RIGHTS":                    4,
	"CORPORATE_ACTION_NEW":                          5,
	"CORPORATE_ACTION_CASH_DIVIDEND":                6,
	"CORPORATE_ACTION_CUSIP":                        7,
	"CORPORATE_ACTION_LIQUIDATION_REORGANIZATION":   8,
	"CORPORATE_ACTION_MERGER_REORGANIZATION":        9,
	"CORPORATE_ACTION_NON_INTEGER_STOCK_SPLIT":      10,
	"CORPORATE_ACTION_POSITION_CONSOLIDATION":       11,
	"CORPORATE_ACTION_REVERSE_STOCK_SPLIT":          12,
	"CORPORATE_ACTION_RIGHTS_OFFERING":              13,
	"CORPORATE_ACTION_SHAREHOLDER_MEETING":          14,
	"CORPORATE_ACTION_SPECIAL_ACTION":               15,
	"CORPORATE_ACTION_SPINOFF":                      16,
	"CORPORATE_ACTION_STANDARD_INTEGER_STOCK_SPLIT": 17,
	"CORPORATE_ACTION_STOCK_DIVIDEND":               18,
	"CORPORATE_ACTION_SYMBOL_CONVERSION":            19,
	"CORPORATE_ACTION_TENDER_OFFER":                 20,
	"CORPORATE_ACTION_WARRANT":                      21,
	"CORPORATE_ACTION_LEAP_ROLLOVER":                22,
	"CORPORATE_ACTION_SUCCESSION_EVENT":             23,
}

func (x CorporateActionEnum) String() string {
	return proto.EnumName(CorporateActionEnum_name, int32(x))
}

func (CorporateActionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{195}
}

type Nested4PartySubIDTypeEnum int32

const (
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_UNSPECIFIED                         Nested4PartySubIDTypeEnum = 0
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_APPLICATION                         Nested4PartySubIDTypeEnum = 1
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_BIC                                 Nested4PartySubIDTypeEnum = 2
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME                   Nested4PartySubIDTypeEnum = 3
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER                 Nested4PartySubIDTypeEnum = 4
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_CONTACT_NAME                        Nested4PartySubIDTypeEnum = 5
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE          Nested4PartySubIDTypeEnum = 6
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_DEPARTMENT                          Nested4PartySubIDTypeEnum = 7
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_EMAIL_ADDRESS                       Nested4PartySubIDTypeEnum = 8
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_FAX_NUMBER                          Nested4PartySubIDTypeEnum = 9
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_FIRM                                Nested4PartySubIDTypeEnum = 10
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM             Nested4PartySubIDTypeEnum = 11
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME                   Nested4PartySubIDTypeEnum = 12
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_LOCATION_DESK                       Nested4PartySubIDTypeEnum = 13
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_PERSON                              Nested4PartySubIDTypeEnum = 14
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_PHONE_NUMBER                        Nested4PartySubIDTypeEnum = 15
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE               Nested4PartySubIDTypeEnum = 16
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_POSTAL_ADDRESS                      Nested4PartySubIDTypeEnum = 17
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS                  Nested4PartySubIDTypeEnum = 18
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION Nested4PartySubIDTypeEnum = 19
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NAME                   Nested4PartySubIDTypeEnum = 20
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER                 Nested4PartySubIDTypeEnum = 21
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_REGULATORY_STATUS                   Nested4PartySubIDTypeEnum = 22
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME             Nested4PartySubIDTypeEnum = 23
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER           Nested4PartySubIDTypeEnum = 24
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_SYSTEM                              Nested4PartySubIDTypeEnum = 25
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_TELEX_NUMBER                        Nested4PartySubIDTypeEnum = 26
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID                  Nested4PartySubIDTypeEnum = 27
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY               Nested4PartySubIDTypeEnum = 28
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_EXECUTION_VENUE                     Nested4PartySubIDTypeEnum = 29
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_LOCATION                            Nested4PartySubIDTypeEnum = 30
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_MARKET_MAKER                        Nested4PartySubIDTypeEnum = 31
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT                 Nested4PartySubIDTypeEnum = 32
	Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER        Nested4PartySubIDTypeEnum = 33
)

var Nested4PartySubIDTypeEnum_name = map[int32]string{
	0:  "NESTED4PARTY_SUB_ID_TYPE_UNSPECIFIED",
	1:  "NESTED4PARTY_SUB_ID_TYPE_APPLICATION",
	2:  "NESTED4PARTY_SUB_ID_TYPE_BIC",
	3:  "NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME",
	4:  "NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER",
	5:  "NESTED4PARTY_SUB_ID_TYPE_CONTACT_NAME",
	6:  "NESTED4PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE",
	7:  "NESTED4PARTY_SUB_ID_TYPE_DEPARTMENT",
	8:  "NESTED4PARTY_SUB_ID_TYPE_EMAIL_ADDRESS",
	9:  "NESTED4PARTY_SUB_ID_TYPE_FAX_NUMBER",
	10: "NESTED4PARTY_SUB_ID_TYPE_FIRM",
	11: "NESTED4PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM",
	12: "NESTED4PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME",
	13: "NESTED4PARTY_SUB_ID_TYPE_LOCATION_DESK",
	14: "NESTED4PARTY_SUB_ID_TYPE_PERSON",
	15: "NESTED4PARTY_SUB_ID_TYPE_PHONE_NUMBER",
	16: "NESTED4PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE",
	17: "NESTED4PARTY_SUB_ID_TYPE_POSTAL_ADDRESS",
	18: "NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS",
	19: "NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION",
	20: "NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NAME",
	21: "NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER",
	22: "NESTED4PARTY_SUB_ID_TYPE_REGULATORY_STATUS",
	23: "NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME",
	24: "NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER",
	25: "NESTED4PARTY_SUB_ID_TYPE_SYSTEM",
	26: "NESTED4PARTY_SUB_ID_TYPE_TELEX_NUMBER",
	27: "NESTED4PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID",
	28: "NESTED4PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY",
	29: "NESTED4PARTY_SUB_ID_TYPE_EXECUTION_VENUE",
	30: "NESTED4PARTY_SUB_ID_TYPE_LOCATION",
	31: "NESTED4PARTY_SUB_ID_TYPE_MARKET_MAKER",
	32: "NESTED4PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT",
	33: "NESTED4PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER",
}

var Nested4PartySubIDTypeEnum_value = map[string]int32{
	"NESTED4PARTY_SUB_ID_TYPE_UNSPECIFIED":                         0,
	"NESTED4PARTY_SUB_ID_TYPE_APPLICATION":                         1,
	"NESTED4PARTY_SUB_ID_TYPE_BIC":                                 2,
	"NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME":                   3,
	"NESTED4PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER":                 4,
	"NESTED4PARTY_SUB_ID_TYPE_CONTACT_NAME":                        5,
	"NESTED4PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE":          6,
	"NESTED4PARTY_SUB_ID_TYPE_DEPARTMENT":                          7,
	"NESTED4PARTY_SUB_ID_TYPE_EMAIL_ADDRESS":                       8,
	"NESTED4PARTY_SUB_ID_TYPE_FAX_NUMBER":                          9,
	"NESTED4PARTY_SUB_ID_TYPE_FIRM":                                10,
	"NESTED4PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM":             11,
	"NESTED4PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME":                   12,
	"NESTED4PARTY_SUB_ID_TYPE_LOCATION_DESK":                       13,
	"NESTED4PARTY_SUB_ID_TYPE_PERSON":                              14,
	"NESTED4PARTY_SUB_ID_TYPE_PHONE_NUMBER":                        15,
	"NESTED4PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE":               16,
	"NESTED4PARTY_SUB_ID_TYPE_POSTAL_ADDRESS":                      17,
	"NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS":                  18,
	"NESTED4PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION": 19,
	"NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NAME":                   20,
	"NESTED4PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER":                 21,
	"NESTED4PARTY_SUB_ID_TYPE_REGULATORY_STATUS":                   22,
	"NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME":             23,
	"NESTED4PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER":           24,
	"NESTED4PARTY_SUB_ID_TYPE_SYSTEM":                              25,
	"NESTED4PARTY_SUB_ID_TYPE_TELEX_NUMBER":                        26,
	"NESTED4PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID":                  27,
	"NESTED4PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY":               28,
	"NESTED4PARTY_SUB_ID_TYPE_EXECUTION_VENUE":                     29,
	"NESTED4PARTY_SUB_ID_TYPE_LOCATION":                            30,
	"NESTED4PARTY_SUB_ID_TYPE_MARKET_MAKER":                        31,
	"NESTED4PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT":                 32,
	"NESTED4PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER":        33,
}

func (x Nested4PartySubIDTypeEnum) String() string {
	return proto.EnumName(Nested4PartySubIDTypeEnum_name, int32(x))
}

func (Nested4PartySubIDTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{196}
}

type Nested4PartyIDSourceEnum int32

const (
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_UNSPECIFIED                             Nested4PartyIDSourceEnum = 0
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              Nested4PartyIDSourceEnum = 1
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              Nested4PartyIDSourceEnum = 2
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_BIC                                     Nested4PartyIDSourceEnum = 3
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     Nested4PartyIDSourceEnum = 4
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      Nested4PartyIDSourceEnum = 5
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        Nested4PartyIDSourceEnum = 6
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      Nested4PartyIDSourceEnum = 7
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            Nested4PartyIDSourceEnum = 8
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_PROPRIETARY                             Nested4PartyIDSourceEnum = 9
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              Nested4PartyIDSourceEnum = 10
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           Nested4PartyIDSourceEnum = 11
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  Nested4PartyIDSourceEnum = 12
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER Nested4PartyIDSourceEnum = 13
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            Nested4PartyIDSourceEnum = 14
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               Nested4PartyIDSourceEnum = 15
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_CSDPARTICIPANT                          Nested4PartyIDSourceEnum = 16
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_ISITCACRONYM                            Nested4PartyIDSourceEnum = 17
	Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_MIC                                     Nested4PartyIDSourceEnum = 18
)

var Nested4PartyIDSourceEnum_name = map[int32]string{
	0:  "NESTED4PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "NESTED4PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "NESTED4PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "NESTED4PARTY_ID_SOURCE_BIC",
	4:  "NESTED4PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "NESTED4PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "NESTED4PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "NESTED4PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "NESTED4PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "NESTED4PARTY_ID_SOURCE_PROPRIETARY",
	10: "NESTED4PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "NESTED4PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "NESTED4PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "NESTED4PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "NESTED4PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "NESTED4PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "NESTED4PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "NESTED4PARTY_ID_SOURCE_ISITCACRONYM",
	18: "NESTED4PARTY_ID_SOURCE_MIC",
}

var Nested4PartyIDSourceEnum_value = map[string]int32{
	"NESTED4PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"NESTED4PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"NESTED4PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"NESTED4PARTY_ID_SOURCE_BIC":                                     3,
	"NESTED4PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"NESTED4PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"NESTED4PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"NESTED4PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"NESTED4PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"NESTED4PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"NESTED4PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"NESTED4PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"NESTED4PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"NESTED4PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"NESTED4PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"NESTED4PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"NESTED4PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"NESTED4PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"NESTED4PARTY_ID_SOURCE_MIC":                                     18,
}

func (x Nested4PartyIDSourceEnum) String() string {
	return proto.EnumName(Nested4PartyIDSourceEnum_name, int32(x))
}

func (Nested4PartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{197}
}

type Nested4PartyRoleEnum int32

const (
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_UNSPECIFIED                           Nested4PartyRoleEnum = 0
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_BROKER_OF_CREDIT                      Nested4PartyRoleEnum = 1
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CLEARING_FIRM                         Nested4PartyRoleEnum = 2
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CLIENT_ID                             Nested4PartyRoleEnum = 3
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_CLEARING_FIRM                  Nested4PartyRoleEnum = 4
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_FIRM                           Nested4PartyRoleEnum = 5
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           Nested4PartyRoleEnum = 6
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ENTERING_FIRM                         Nested4PartyRoleEnum = 7
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXECUTING_FIRM                        Nested4PartyRoleEnum = 8
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXECUTING_SYSTEM                      Nested4PartyRoleEnum = 9
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXECUTING_TRADER                      Nested4PartyRoleEnum = 10
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_FUND_MANAGER_CLIENT_ID                Nested4PartyRoleEnum = 11
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_GIVEUP_CLEARING_FIRM                  Nested4PartyRoleEnum = 12
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INTRODUCING_FIRM                      Nested4PartyRoleEnum = 13
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INVESTOR_ID                           Nested4PartyRoleEnum = 14
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_LOCATE                                Nested4PartyRoleEnum = 15
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ORDER_ORIGINATION_FIRM                Nested4PartyRoleEnum = 16
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ORDER_ORIGINATION_TRADER              Nested4PartyRoleEnum = 17
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SETTLEMENT_LOCATION                   Nested4PartyRoleEnum = 18
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SPONSORING_FIRM                       Nested4PartyRoleEnum = 19
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_UNDERLYING_CONTRA_FIRM                Nested4PartyRoleEnum = 20
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_AGENT                                 Nested4PartyRoleEnum = 21
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_BENEFICIARY                           Nested4PartyRoleEnum = 22
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_BUYER                                 Nested4PartyRoleEnum = 23
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CLEARING_ORGANIZATION                 Nested4PartyRoleEnum = 24
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_INVESTOR_ID                    Nested4PartyRoleEnum = 25
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_TRADER                         Nested4PartyRoleEnum = 26
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CORRESPONDENT_BROKER                  Nested4PartyRoleEnum = 27
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   Nested4PartyRoleEnum = 28
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CUSTODIAN                             Nested4PartyRoleEnum = 29
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CUSTOMER_ACCOUNT                      Nested4PartyRoleEnum = 30
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ENTERING_TRADER                       Nested4PartyRoleEnum = 31
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXCHANGE                              Nested4PartyRoleEnum = 32
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INTERESTED_PARTY                      Nested4PartyRoleEnum = 33
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INTERMEDIARY                          Nested4PartyRoleEnum = 34
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_LIQUIDITY_PROVIDER                    Nested4PartyRoleEnum = 35
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_POSITION_ACCOUNT                      Nested4PartyRoleEnum = 36
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_REGULATORY_BODY                       Nested4PartyRoleEnum = 37
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SUB_CUSTODIAN                         Nested4PartyRoleEnum = 38
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_TRANSFER_TO_FIRM                      Nested4PartyRoleEnum = 39
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INTRODUCING_BROKER                    Nested4PartyRoleEnum = 40
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_EXCHANGE                       Nested4PartyRoleEnum = 41
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CONTRA_POSITION_ACCOUNT               Nested4PartyRoleEnum = 42
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                Nested4PartyRoleEnum = 43
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               Nested4PartyRoleEnum = 44
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              Nested4PartyRoleEnum = 45
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ASSET_MANAGER                         Nested4PartyRoleEnum = 46
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CLAIMING_ACCOUNT                      Nested4PartyRoleEnum = 47
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_FOREIGN_FIRM                          Nested4PartyRoleEnum = 48
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       Nested4PartyRoleEnum = 49
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_PLEDGEE_ACCOUNT                       Nested4PartyRoleEnum = 50
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_PLEDGOR_ACCOUNT                       Nested4PartyRoleEnum = 51
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SENDER_LOCATION                       Nested4PartyRoleEnum = 52
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SESSION_ID                            Nested4PartyRoleEnum = 53
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           Nested4PartyRoleEnum = 54
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_TRADER_MNEMONIC                       Nested4PartyRoleEnum = 55
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               Nested4PartyRoleEnum = 56
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ENTERING_UNIT                         Nested4PartyRoleEnum = 57
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXECUTING_UNIT                        Nested4PartyRoleEnum = 58
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             Nested4PartyRoleEnum = 59
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         Nested4PartyRoleEnum = 60
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE Nested4PartyRoleEnum = 61
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_DESK_ID                               Nested4PartyRoleEnum = 62
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_EXECUTION_VENUE                       Nested4PartyRoleEnum = 63
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_HOME_COMPETENT_AUTHORITY              Nested4PartyRoleEnum = 64
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_HOST_COMPETENT_AUTHORITY              Nested4PartyRoleEnum = 65
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_INVESTMENT_FIRM                       Nested4PartyRoleEnum = 66
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_LOCATION_ID                           Nested4PartyRoleEnum = 67
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          Nested4PartyRoleEnum = 68
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_MARKET_DATA_MARKET                    Nested4PartyRoleEnum = 69
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_MARKET_MAKER                          Nested4PartyRoleEnum = 70
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         Nested4PartyRoleEnum = 71
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_QUOTE_ORIGINATOR                      Nested4PartyRoleEnum = 72
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_REGULATED_MARKET                      Nested4PartyRoleEnum = 73
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_REPORTING_INTERMEDIARY                Nested4PartyRoleEnum = 74
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_REPORT_ORIGINATOR                     Nested4PartyRoleEnum = 75
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_SYSTEMATIC_INTERNALISER               Nested4PartyRoleEnum = 76
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ALLOCATION_ENTITY                     Nested4PartyRoleEnum = 77
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_BROKER_CLEARING_ID                    Nested4PartyRoleEnum = 78
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_PRIME_BROKER                          Nested4PartyRoleEnum = 79
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_STEP_OUT_FIRM                         Nested4PartyRoleEnum = 80
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       Nested4PartyRoleEnum = 81
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      Nested4PartyRoleEnum = 82
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_CLEARING_ACCOUNT                      Nested4PartyRoleEnum = 83
	Nested4PartyRoleEnum_NESTED4PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    Nested4PartyRoleEnum = 84
)

var Nested4PartyRoleEnum_name = map[int32]string{
	0:  "NESTED4PARTY_ROLE_UNSPECIFIED",
	1:  "NESTED4PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "NESTED4PARTY_ROLE_CLEARING_FIRM",
	3:  "NESTED4PARTY_ROLE_CLIENT_ID",
	4:  "NESTED4PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "NESTED4PARTY_ROLE_CONTRA_FIRM",
	6:  "NESTED4PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "NESTED4PARTY_ROLE_ENTERING_FIRM",
	8:  "NESTED4PARTY_ROLE_EXECUTING_FIRM",
	9:  "NESTED4PARTY_ROLE_EXECUTING_SYSTEM",
	10: "NESTED4PARTY_ROLE_EXECUTING_TRADER",
	11: "NESTED4PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "NESTED4PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "NESTED4PARTY_ROLE_INTRODUCING_FIRM",
	14: "NESTED4PARTY_ROLE_INVESTOR_ID",
	15: "NESTED4PARTY_ROLE_LOCATE",
	16: "NESTED4PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "NESTED4PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "NESTED4PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "NESTED4PARTY_ROLE_SPONSORING_FIRM",
	20: "NESTED4PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "NESTED4PARTY_ROLE_AGENT",
	22: "NESTED4PARTY_ROLE_BENEFICIARY",
	23: "NESTED4PARTY_ROLE_BUYER",
	24: "NESTED4PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "NESTED4PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "NESTED4PARTY_ROLE_CONTRA_TRADER",
	27: "NESTED4PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "NESTED4PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "NESTED4PARTY_ROLE_CUSTODIAN",
	30: "NESTED4PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "NESTED4PARTY_ROLE_ENTERING_TRADER",
	32: "NESTED4PARTY_ROLE_EXCHANGE",
	33: "NESTED4PARTY_ROLE_INTERESTED_PARTY",
	34: "NESTED4PARTY_ROLE_INTERMEDIARY",
	35: "NESTED4PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "NESTED4PARTY_ROLE_POSITION_ACCOUNT",
	37: "NESTED4PARTY_ROLE_REGULATORY_BODY",
	38: "NESTED4PARTY_ROLE_SUB_CUSTODIAN",
	39: "NESTED4PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "NESTED4PARTY_ROLE_INTRODUCING_BROKER",
	41: "NESTED4PARTY_ROLE_CONTRA_EXCHANGE",
	42: "NESTED4PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "NESTED4PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "NESTED4PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "NESTED4PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "NESTED4PARTY_ROLE_ASSET_MANAGER",
	47: "NESTED4PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "NESTED4PARTY_ROLE_FOREIGN_FIRM",
	49: "NESTED4PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "NESTED4PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "NESTED4PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "NESTED4PARTY_ROLE_SENDER_LOCATION",
	53: "NESTED4PARTY_ROLE_SESSION_ID",
	54: "NESTED4PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "NESTED4PARTY_ROLE_TRADER_MNEMONIC",
	56: "NESTED4PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "NESTED4PARTY_ROLE_ENTERING_UNIT",
	58: "NESTED4PARTY_ROLE_EXECUTING_UNIT",
	59: "NESTED4PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "NESTED4PARTY_ROLE_DESK_ID",
	63: "NESTED4PARTY_ROLE_EXECUTION_VENUE",
	64: "NESTED4PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "NESTED4PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "NESTED4PARTY_ROLE_INVESTMENT_FIRM",
	67: "NESTED4PARTY_ROLE_LOCATION_ID",
	68: "NESTED4PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "NESTED4PARTY_ROLE_MARKET_DATA_MARKET",
	70: "NESTED4PARTY_ROLE_MARKET_MAKER",
	71: "NESTED4PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "NESTED4PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "NESTED4PARTY_ROLE_REGULATED_MARKET",
	74: "NESTED4PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "NESTED4PARTY_ROLE_REPORT_ORIGINATOR",
	76: "NESTED4PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "NESTED4PARTY_ROLE_ALLOCATION_ENTITY",
	78: "NESTED4PARTY_ROLE_BROKER_CLEARING_ID",
	79: "NESTED4PARTY_ROLE_PRIME_BROKER",
	80: "NESTED4PARTY_ROLE_STEP_OUT_FIRM",
	81: "NESTED4PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "NESTED4PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "NESTED4PARTY_ROLE_CLEARING_ACCOUNT",
	84: "NESTED4PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var Nested4PartyRoleEnum_value = map[string]int32{
	"NESTED4PARTY_ROLE_UNSPECIFIED":                           0,
	"NESTED4PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"NESTED4PARTY_ROLE_CLEARING_FIRM":                         2,
	"NESTED4PARTY_ROLE_CLIENT_ID":                             3,
	"NESTED4PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"NESTED4PARTY_ROLE_CONTRA_FIRM":                           5,
	"NESTED4PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"NESTED4PARTY_ROLE_ENTERING_FIRM":                         7,
	"NESTED4PARTY_ROLE_EXECUTING_FIRM":                        8,
	"NESTED4PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"NESTED4PARTY_ROLE_EXECUTING_TRADER":                      10,
	"NESTED4PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"NESTED4PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"NESTED4PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"NESTED4PARTY_ROLE_INVESTOR_ID":                           14,
	"NESTED4PARTY_ROLE_LOCATE":                                15,
	"NESTED4PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"NESTED4PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"NESTED4PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"NESTED4PARTY_ROLE_SPONSORING_FIRM":                       19,
	"NESTED4PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"NESTED4PARTY_ROLE_AGENT":                                 21,
	"NESTED4PARTY_ROLE_BENEFICIARY":                           22,
	"NESTED4PARTY_ROLE_BUYER":                                 23,
	"NESTED4PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"NESTED4PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"NESTED4PARTY_ROLE_CONTRA_TRADER":                         26,
	"NESTED4PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"NESTED4PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"NESTED4PARTY_ROLE_CUSTODIAN":                             29,
	"NESTED4PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"NESTED4PARTY_ROLE_ENTERING_TRADER":                       31,
	"NESTED4PARTY_ROLE_EXCHANGE":                              32,
	"NESTED4PARTY_ROLE_INTERESTED_PARTY":                      33,
	"NESTED4PARTY_ROLE_INTERMEDIARY":                          34,
	"NESTED4PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"NESTED4PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"NESTED4PARTY_ROLE_REGULATORY_BODY":                       37,
	"NESTED4PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"NESTED4PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"NESTED4PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"NESTED4PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"NESTED4PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"NESTED4PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"NESTED4PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"NESTED4PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"NESTED4PARTY_ROLE_ASSET_MANAGER":                         46,
	"NESTED4PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"NESTED4PARTY_ROLE_FOREIGN_FIRM":                          48,
	"NESTED4PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"NESTED4PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"NESTED4PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"NESTED4PARTY_ROLE_SENDER_LOCATION":                       52,
	"NESTED4PARTY_ROLE_SESSION_ID":                            53,
	"NESTED4PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"NESTED4PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"NESTED4PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"NESTED4PARTY_ROLE_ENTERING_UNIT":                         57,
	"NESTED4PARTY_ROLE_EXECUTING_UNIT":                        58,
	"NESTED4PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"NESTED4PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"NESTED4PARTY_ROLE_DESK_ID":                               62,
	"NESTED4PARTY_ROLE_EXECUTION_VENUE":                       63,
	"NESTED4PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"NESTED4PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"NESTED4PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"NESTED4PARTY_ROLE_LOCATION_ID":                           67,
	"NESTED4PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"NESTED4PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"NESTED4PARTY_ROLE_MARKET_MAKER":                          70,
	"NESTED4PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"NESTED4PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"NESTED4PARTY_ROLE_REGULATED_MARKET":                      73,
	"NESTED4PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"NESTED4PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"NESTED4PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"NESTED4PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"NESTED4PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"NESTED4PARTY_ROLE_PRIME_BROKER":                          79,
	"NESTED4PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"NESTED4PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"NESTED4PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"NESTED4PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"NESTED4PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x Nested4PartyRoleEnum) String() string {
	return proto.EnumName(Nested4PartyRoleEnum_name, int32(x))
}

func (Nested4PartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{198}
}

type RateSourceEnum int32

const (
	RateSourceEnum_RATE_SOURCE_UNSPECIFIED RateSourceEnum = 0
	RateSourceEnum_RATE_SOURCE_BLOOMBERG   RateSourceEnum = 1
	RateSourceEnum_RATE_SOURCE_OTHER       RateSourceEnum = 2
	RateSourceEnum_RATE_SOURCE_REUTERS     RateSourceEnum = 3
	RateSourceEnum_RATE_SOURCE_TELERATE    RateSourceEnum = 4
)

var RateSourceEnum_name = map[int32]string{
	0: "RATE_SOURCE_UNSPECIFIED",
	1: "RATE_SOURCE_BLOOMBERG",
	2: "RATE_SOURCE_OTHER",
	3: "RATE_SOURCE_REUTERS",
	4: "RATE_SOURCE_TELERATE",
}

var RateSourceEnum_value = map[string]int32{
	"RATE_SOURCE_UNSPECIFIED": 0,
	"RATE_SOURCE_BLOOMBERG":   1,
	"RATE_SOURCE_OTHER":       2,
	"RATE_SOURCE_REUTERS":     3,
	"RATE_SOURCE_TELERATE":    4,
}

func (x RateSourceEnum) String() string {
	return proto.EnumName(RateSourceEnum_name, int32(x))
}

func (RateSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{199}
}

type RateSourceTypeEnum int32

const (
	RateSourceTypeEnum_RATE_SOURCE_TYPE_UNSPECIFIED RateSourceTypeEnum = 0
	RateSourceTypeEnum_RATE_SOURCE_TYPE_PRIMARY     RateSourceTypeEnum = 1
	RateSourceTypeEnum_RATE_SOURCE_TYPE_SECONDARY   RateSourceTypeEnum = 2
)

var RateSourceTypeEnum_name = map[int32]string{
	0: "RATE_SOURCE_TYPE_UNSPECIFIED",
	1: "RATE_SOURCE_TYPE_PRIMARY",
	2: "RATE_SOURCE_TYPE_SECONDARY",
}

var RateSourceTypeEnum_value = map[string]int32{
	"RATE_SOURCE_TYPE_UNSPECIFIED": 0,
	"RATE_SOURCE_TYPE_PRIMARY":     1,
	"RATE_SOURCE_TYPE_SECONDARY":   2,
}

func (x RateSourceTypeEnum) String() string {
	return proto.EnumName(RateSourceTypeEnum_name, int32(x))
}

func (RateSourceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{200}
}

type TargetPartyIDSourceEnum int32

const (
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_UNSPECIFIED                             TargetPartyIDSourceEnum = 0
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER              TargetPartyIDSourceEnum = 1
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER              TargetPartyIDSourceEnum = 2
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_BIC                                     TargetPartyIDSourceEnum = 3
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID                     TargetPartyIDSourceEnum = 4
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_GENERAL_IDENTIFIER                      TargetPartyIDSourceEnum = 5
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_ISO_COUNTRY_CODE                        TargetPartyIDSourceEnum = 6
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID                      TargetPartyIDSourceEnum = 7
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY            TargetPartyIDSourceEnum = 8
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_PROPRIETARY                             TargetPartyIDSourceEnum = 9
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION              TargetPartyIDSourceEnum = 10
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID           TargetPartyIDSourceEnum = 11
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT                  TargetPartyIDSourceEnum = 12
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER TargetPartyIDSourceEnum = 13
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER            TargetPartyIDSourceEnum = 14
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER               TargetPartyIDSourceEnum = 15
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_CSDPARTICIPANT                          TargetPartyIDSourceEnum = 16
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_ISITCACRONYM                            TargetPartyIDSourceEnum = 17
	TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_MIC                                     TargetPartyIDSourceEnum = 18
)

var TargetPartyIDSourceEnum_name = map[int32]string{
	0:  "TARGET_PARTY_ID_SOURCE_UNSPECIFIED",
	1:  "TARGET_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER",
	2:  "TARGET_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER",
	3:  "TARGET_PARTY_ID_SOURCE_BIC",
	4:  "TARGET_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID",
	5:  "TARGET_PARTY_ID_SOURCE_GENERAL_IDENTIFIER",
	6:  "TARGET_PARTY_ID_SOURCE_ISO_COUNTRY_CODE",
	7:  "TARGET_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID",
	8:  "TARGET_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY",
	9:  "TARGET_PARTY_ID_SOURCE_PROPRIETARY",
	10: "TARGET_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION",
	11: "TARGET_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID",
	12: "TARGET_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT",
	13: "TARGET_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",
	14: "TARGET_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER",
	15: "TARGET_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER",
	16: "TARGET_PARTY_ID_SOURCE_CSDPARTICIPANT",
	17: "TARGET_PARTY_ID_SOURCE_ISITCACRONYM",
	18: "TARGET_PARTY_ID_SOURCE_MIC",
}

var TargetPartyIDSourceEnum_value = map[string]int32{
	"TARGET_PARTY_ID_SOURCE_UNSPECIFIED":                             0,
	"TARGET_PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER":              1,
	"TARGET_PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER":              2,
	"TARGET_PARTY_ID_SOURCE_BIC":                                     3,
	"TARGET_PARTY_ID_SOURCE_CHINESE_INVESTOR_ID":                     4,
	"TARGET_PARTY_ID_SOURCE_GENERAL_IDENTIFIER":                      5,
	"TARGET_PARTY_ID_SOURCE_ISO_COUNTRY_CODE":                        6,
	"TARGET_PARTY_ID_SOURCE_KOREAN_INVESTOR_ID":                      7,
	"TARGET_PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY":            8,
	"TARGET_PARTY_ID_SOURCE_PROPRIETARY":                             9,
	"TARGET_PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION":              10,
	"TARGET_PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID":           11,
	"TARGET_PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT":                  12,
	"TARGET_PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER": 13,
	"TARGET_PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER":            14,
	"TARGET_PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER":               15,
	"TARGET_PARTY_ID_SOURCE_CSDPARTICIPANT":                          16,
	"TARGET_PARTY_ID_SOURCE_ISITCACRONYM":                            17,
	"TARGET_PARTY_ID_SOURCE_MIC":                                     18,
}

func (x TargetPartyIDSourceEnum) String() string {
	return proto.EnumName(TargetPartyIDSourceEnum_name, int32(x))
}

func (TargetPartyIDSourceEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{201}
}

type TargetPartyRoleEnum int32

const (
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_UNSPECIFIED                           TargetPartyRoleEnum = 0
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_BROKER_OF_CREDIT                      TargetPartyRoleEnum = 1
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CLEARING_FIRM                         TargetPartyRoleEnum = 2
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CLIENT_ID                             TargetPartyRoleEnum = 3
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_CLEARING_FIRM                  TargetPartyRoleEnum = 4
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_FIRM                           TargetPartyRoleEnum = 5
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM           TargetPartyRoleEnum = 6
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ENTERING_FIRM                         TargetPartyRoleEnum = 7
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXECUTING_FIRM                        TargetPartyRoleEnum = 8
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXECUTING_SYSTEM                      TargetPartyRoleEnum = 9
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXECUTING_TRADER                      TargetPartyRoleEnum = 10
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_FUND_MANAGER_CLIENT_ID                TargetPartyRoleEnum = 11
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_GIVEUP_CLEARING_FIRM                  TargetPartyRoleEnum = 12
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INTRODUCING_FIRM                      TargetPartyRoleEnum = 13
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INVESTOR_ID                           TargetPartyRoleEnum = 14
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_LOCATE                                TargetPartyRoleEnum = 15
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ORDER_ORIGINATION_FIRM                TargetPartyRoleEnum = 16
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ORDER_ORIGINATION_TRADER              TargetPartyRoleEnum = 17
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SETTLEMENT_LOCATION                   TargetPartyRoleEnum = 18
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SPONSORING_FIRM                       TargetPartyRoleEnum = 19
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_UNDERLYING_CONTRA_FIRM                TargetPartyRoleEnum = 20
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_AGENT                                 TargetPartyRoleEnum = 21
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_BENEFICIARY                           TargetPartyRoleEnum = 22
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_BUYER                                 TargetPartyRoleEnum = 23
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CLEARING_ORGANIZATION                 TargetPartyRoleEnum = 24
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_INVESTOR_ID                    TargetPartyRoleEnum = 25
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_TRADER                         TargetPartyRoleEnum = 26
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CORRESPONDENT_BROKER                  TargetPartyRoleEnum = 27
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION   TargetPartyRoleEnum = 28
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CUSTODIAN                             TargetPartyRoleEnum = 29
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CUSTOMER_ACCOUNT                      TargetPartyRoleEnum = 30
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ENTERING_TRADER                       TargetPartyRoleEnum = 31
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXCHANGE                              TargetPartyRoleEnum = 32
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INTERESTED_PARTY                      TargetPartyRoleEnum = 33
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INTERMEDIARY                          TargetPartyRoleEnum = 34
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_LIQUIDITY_PROVIDER                    TargetPartyRoleEnum = 35
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_POSITION_ACCOUNT                      TargetPartyRoleEnum = 36
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_REGULATORY_BODY                       TargetPartyRoleEnum = 37
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SUB_CUSTODIAN                         TargetPartyRoleEnum = 38
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_TRANSFER_TO_FIRM                      TargetPartyRoleEnum = 39
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INTRODUCING_BROKER                    TargetPartyRoleEnum = 40
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_EXCHANGE                       TargetPartyRoleEnum = 41
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CONTRA_POSITION_ACCOUNT               TargetPartyRoleEnum = 42
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT                TargetPartyRoleEnum = 43
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID               TargetPartyRoleEnum = 44
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER              TargetPartyRoleEnum = 45
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ASSET_MANAGER                         TargetPartyRoleEnum = 46
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CLAIMING_ACCOUNT                      TargetPartyRoleEnum = 47
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_FOREIGN_FIRM                          TargetPartyRoleEnum = 48
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT       TargetPartyRoleEnum = 49
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_PLEDGEE_ACCOUNT                       TargetPartyRoleEnum = 50
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_PLEDGOR_ACCOUNT                       TargetPartyRoleEnum = 51
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SENDER_LOCATION                       TargetPartyRoleEnum = 52
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SESSION_ID                            TargetPartyRoleEnum = 53
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM           TargetPartyRoleEnum = 54
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_TRADER_MNEMONIC                       TargetPartyRoleEnum = 55
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY               TargetPartyRoleEnum = 56
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ENTERING_UNIT                         TargetPartyRoleEnum = 57
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXECUTING_UNIT                        TargetPartyRoleEnum = 58
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY             TargetPartyRoleEnum = 59
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY         TargetPartyRoleEnum = 60
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE TargetPartyRoleEnum = 61
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_DESK_ID                               TargetPartyRoleEnum = 62
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_EXECUTION_VENUE                       TargetPartyRoleEnum = 63
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_HOME_COMPETENT_AUTHORITY              TargetPartyRoleEnum = 64
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_HOST_COMPETENT_AUTHORITY              TargetPartyRoleEnum = 65
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_INVESTMENT_FIRM                       TargetPartyRoleEnum = 66
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_LOCATION_ID                           TargetPartyRoleEnum = 67
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR          TargetPartyRoleEnum = 68
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_MARKET_DATA_MARKET                    TargetPartyRoleEnum = 69
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_MARKET_MAKER                          TargetPartyRoleEnum = 70
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY         TargetPartyRoleEnum = 71
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_QUOTE_ORIGINATOR                      TargetPartyRoleEnum = 72
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_REGULATED_MARKET                      TargetPartyRoleEnum = 73
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_REPORTING_INTERMEDIARY                TargetPartyRoleEnum = 74
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_REPORT_ORIGINATOR                     TargetPartyRoleEnum = 75
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_SYSTEMATIC_INTERNALISER               TargetPartyRoleEnum = 76
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ALLOCATION_ENTITY                     TargetPartyRoleEnum = 77
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_BROKER_CLEARING_ID                    TargetPartyRoleEnum = 78
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_PRIME_BROKER                          TargetPartyRoleEnum = 79
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_STEP_OUT_FIRM                         TargetPartyRoleEnum = 80
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY       TargetPartyRoleEnum = 81
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY      TargetPartyRoleEnum = 82
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_CLEARING_ACCOUNT                      TargetPartyRoleEnum = 83
	TargetPartyRoleEnum_TARGET_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY    TargetPartyRoleEnum = 84
)

var TargetPartyRoleEnum_name = map[int32]string{
	0:  "TARGET_PARTY_ROLE_UNSPECIFIED",
	1:  "TARGET_PARTY_ROLE_BROKER_OF_CREDIT",
	2:  "TARGET_PARTY_ROLE_CLEARING_FIRM",
	3:  "TARGET_PARTY_ROLE_CLIENT_ID",
	4:  "TARGET_PARTY_ROLE_CONTRA_CLEARING_FIRM",
	5:  "TARGET_PARTY_ROLE_CONTRA_FIRM",
	6:  "TARGET_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM",
	7:  "TARGET_PARTY_ROLE_ENTERING_FIRM",
	8:  "TARGET_PARTY_ROLE_EXECUTING_FIRM",
	9:  "TARGET_PARTY_ROLE_EXECUTING_SYSTEM",
	10: "TARGET_PARTY_ROLE_EXECUTING_TRADER",
	11: "TARGET_PARTY_ROLE_FUND_MANAGER_CLIENT_ID",
	12: "TARGET_PARTY_ROLE_GIVEUP_CLEARING_FIRM",
	13: "TARGET_PARTY_ROLE_INTRODUCING_FIRM",
	14: "TARGET_PARTY_ROLE_INVESTOR_ID",
	15: "TARGET_PARTY_ROLE_LOCATE",
	16: "TARGET_PARTY_ROLE_ORDER_ORIGINATION_FIRM",
	17: "TARGET_PARTY_ROLE_ORDER_ORIGINATION_TRADER",
	18: "TARGET_PARTY_ROLE_SETTLEMENT_LOCATION",
	19: "TARGET_PARTY_ROLE_SPONSORING_FIRM",
	20: "TARGET_PARTY_ROLE_UNDERLYING_CONTRA_FIRM",
	21: "TARGET_PARTY_ROLE_AGENT",
	22: "TARGET_PARTY_ROLE_BENEFICIARY",
	23: "TARGET_PARTY_ROLE_BUYER",
	24: "TARGET_PARTY_ROLE_CLEARING_ORGANIZATION",
	25: "TARGET_PARTY_ROLE_CONTRA_INVESTOR_ID",
	26: "TARGET_PARTY_ROLE_CONTRA_TRADER",
	27: "TARGET_PARTY_ROLE_CORRESPONDENT_BROKER",
	28: "TARGET_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION",
	29: "TARGET_PARTY_ROLE_CUSTODIAN",
	30: "TARGET_PARTY_ROLE_CUSTOMER_ACCOUNT",
	31: "TARGET_PARTY_ROLE_ENTERING_TRADER",
	32: "TARGET_PARTY_ROLE_EXCHANGE",
	33: "TARGET_PARTY_ROLE_INTERESTED_PARTY",
	34: "TARGET_PARTY_ROLE_INTERMEDIARY",
	35: "TARGET_PARTY_ROLE_LIQUIDITY_PROVIDER",
	36: "TARGET_PARTY_ROLE_POSITION_ACCOUNT",
	37: "TARGET_PARTY_ROLE_REGULATORY_BODY",
	38: "TARGET_PARTY_ROLE_SUB_CUSTODIAN",
	39: "TARGET_PARTY_ROLE_TRANSFER_TO_FIRM",
	40: "TARGET_PARTY_ROLE_INTRODUCING_BROKER",
	41: "TARGET_PARTY_ROLE_CONTRA_EXCHANGE",
	42: "TARGET_PARTY_ROLE_CONTRA_POSITION_ACCOUNT",
	43: "TARGET_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT",
	44: "TARGET_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID",
	45: "TARGET_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER",
	46: "TARGET_PARTY_ROLE_ASSET_MANAGER",
	47: "TARGET_PARTY_ROLE_CLAIMING_ACCOUNT",
	48: "TARGET_PARTY_ROLE_FOREIGN_FIRM",
	49: "TARGET_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT",
	50: "TARGET_PARTY_ROLE_PLEDGEE_ACCOUNT",
	51: "TARGET_PARTY_ROLE_PLEDGOR_ACCOUNT",
	52: "TARGET_PARTY_ROLE_SENDER_LOCATION",
	53: "TARGET_PARTY_ROLE_SESSION_ID",
	54: "TARGET_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM",
	55: "TARGET_PARTY_ROLE_TRADER_MNEMONIC",
	56: "TARGET_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY",
	57: "TARGET_PARTY_ROLE_ENTERING_UNIT",
	58: "TARGET_PARTY_ROLE_EXECUTING_UNIT",
	59: "TARGET_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY",
	60: "TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY",
	61: "TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE",
	62: "TARGET_PARTY_ROLE_DESK_ID",
	63: "TARGET_PARTY_ROLE_EXECUTION_VENUE",
	64: "TARGET_PARTY_ROLE_HOME_COMPETENT_AUTHORITY",
	65: "TARGET_PARTY_ROLE_HOST_COMPETENT_AUTHORITY",
	66: "TARGET_PARTY_ROLE_INVESTMENT_FIRM",
	67: "TARGET_PARTY_ROLE_LOCATION_ID",
	68: "TARGET_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR",
	69: "TARGET_PARTY_ROLE_MARKET_DATA_MARKET",
	70: "TARGET_PARTY_ROLE_MARKET_MAKER",
	71: "TARGET_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY",
	72: "TARGET_PARTY_ROLE_QUOTE_ORIGINATOR",
	73: "TARGET_PARTY_ROLE_REGULATED_MARKET",
	74: "TARGET_PARTY_ROLE_REPORTING_INTERMEDIARY",
	75: "TARGET_PARTY_ROLE_REPORT_ORIGINATOR",
	76: "TARGET_PARTY_ROLE_SYSTEMATIC_INTERNALISER",
	77: "TARGET_PARTY_ROLE_ALLOCATION_ENTITY",
	78: "TARGET_PARTY_ROLE_BROKER_CLEARING_ID",
	79: "TARGET_PARTY_ROLE_PRIME_BROKER",
	80: "TARGET_PARTY_ROLE_STEP_OUT_FIRM",
	81: "TARGET_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY",
	82: "TARGET_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY",
	83: "TARGET_PARTY_ROLE_CLEARING_ACCOUNT",
	84: "TARGET_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY",
}

var TargetPartyRoleEnum_value = map[string]int32{
	"TARGET_PARTY_ROLE_UNSPECIFIED":                           0,
	"TARGET_PARTY_ROLE_BROKER_OF_CREDIT":                      1,
	"TARGET_PARTY_ROLE_CLEARING_FIRM":                         2,
	"TARGET_PARTY_ROLE_CLIENT_ID":                             3,
	"TARGET_PARTY_ROLE_CONTRA_CLEARING_FIRM":                  4,
	"TARGET_PARTY_ROLE_CONTRA_FIRM":                           5,
	"TARGET_PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM":           6,
	"TARGET_PARTY_ROLE_ENTERING_FIRM":                         7,
	"TARGET_PARTY_ROLE_EXECUTING_FIRM":                        8,
	"TARGET_PARTY_ROLE_EXECUTING_SYSTEM":                      9,
	"TARGET_PARTY_ROLE_EXECUTING_TRADER":                      10,
	"TARGET_PARTY_ROLE_FUND_MANAGER_CLIENT_ID":                11,
	"TARGET_PARTY_ROLE_GIVEUP_CLEARING_FIRM":                  12,
	"TARGET_PARTY_ROLE_INTRODUCING_FIRM":                      13,
	"TARGET_PARTY_ROLE_INVESTOR_ID":                           14,
	"TARGET_PARTY_ROLE_LOCATE":                                15,
	"TARGET_PARTY_ROLE_ORDER_ORIGINATION_FIRM":                16,
	"TARGET_PARTY_ROLE_ORDER_ORIGINATION_TRADER":              17,
	"TARGET_PARTY_ROLE_SETTLEMENT_LOCATION":                   18,
	"TARGET_PARTY_ROLE_SPONSORING_FIRM":                       19,
	"TARGET_PARTY_ROLE_UNDERLYING_CONTRA_FIRM":                20,
	"TARGET_PARTY_ROLE_AGENT":                                 21,
	"TARGET_PARTY_ROLE_BENEFICIARY":                           22,
	"TARGET_PARTY_ROLE_BUYER":                                 23,
	"TARGET_PARTY_ROLE_CLEARING_ORGANIZATION":                 24,
	"TARGET_PARTY_ROLE_CONTRA_INVESTOR_ID":                    25,
	"TARGET_PARTY_ROLE_CONTRA_TRADER":                         26,
	"TARGET_PARTY_ROLE_CORRESPONDENT_BROKER":                  27,
	"TARGET_PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION":   28,
	"TARGET_PARTY_ROLE_CUSTODIAN":                             29,
	"TARGET_PARTY_ROLE_CUSTOMER_ACCOUNT":                      30,
	"TARGET_PARTY_ROLE_ENTERING_TRADER":                       31,
	"TARGET_PARTY_ROLE_EXCHANGE":                              32,
	"TARGET_PARTY_ROLE_INTERESTED_PARTY":                      33,
	"TARGET_PARTY_ROLE_INTERMEDIARY":                          34,
	"TARGET_PARTY_ROLE_LIQUIDITY_PROVIDER":                    35,
	"TARGET_PARTY_ROLE_POSITION_ACCOUNT":                      36,
	"TARGET_PARTY_ROLE_REGULATORY_BODY":                       37,
	"TARGET_PARTY_ROLE_SUB_CUSTODIAN":                         38,
	"TARGET_PARTY_ROLE_TRANSFER_TO_FIRM":                      39,
	"TARGET_PARTY_ROLE_INTRODUCING_BROKER":                    40,
	"TARGET_PARTY_ROLE_CONTRA_EXCHANGE":                       41,
	"TARGET_PARTY_ROLE_CONTRA_POSITION_ACCOUNT":               42,
	"TARGET_PARTY_ROLE_INTERNAL_CARRY_ACCOUNT":                43,
	"TARGET_PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID":               44,
	"TARGET_PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER":              45,
	"TARGET_PARTY_ROLE_ASSET_MANAGER":                         46,
	"TARGET_PARTY_ROLE_CLAIMING_ACCOUNT":                      47,
	"TARGET_PARTY_ROLE_FOREIGN_FIRM":                          48,
	"TARGET_PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT":       49,
	"TARGET_PARTY_ROLE_PLEDGEE_ACCOUNT":                       50,
	"TARGET_PARTY_ROLE_PLEDGOR_ACCOUNT":                       51,
	"TARGET_PARTY_ROLE_SENDER_LOCATION":                       52,
	"TARGET_PARTY_ROLE_SESSION_ID":                            53,
	"TARGET_PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM":           54,
	"TARGET_PARTY_ROLE_TRADER_MNEMONIC":                       55,
	"TARGET_PARTY_ROLE_ACCEPTABLE_COUNTERPARTY":               56,
	"TARGET_PARTY_ROLE_ENTERING_UNIT":                         57,
	"TARGET_PARTY_ROLE_EXECUTING_UNIT":                        58,
	"TARGET_PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY":             59,
	"TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY":         60,
	"TARGET_PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE": 61,
	"TARGET_PARTY_ROLE_DESK_ID":                               62,
	"TARGET_PARTY_ROLE_EXECUTION_VENUE":                       63,
	"TARGET_PARTY_ROLE_HOME_COMPETENT_AUTHORITY":              64,
	"TARGET_PARTY_ROLE_HOST_COMPETENT_AUTHORITY":              65,
	"TARGET_PARTY_ROLE_INVESTMENT_FIRM":                       66,
	"TARGET_PARTY_ROLE_LOCATION_ID":                           67,
	"TARGET_PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR":          68,
	"TARGET_PARTY_ROLE_MARKET_DATA_MARKET":                    69,
	"TARGET_PARTY_ROLE_MARKET_MAKER":                          70,
	"TARGET_PARTY_ROLE_MULTILATERAL_TRADING_FACILITY":         71,
	"TARGET_PARTY_ROLE_QUOTE_ORIGINATOR":                      72,
	"TARGET_PARTY_ROLE_REGULATED_MARKET":                      73,
	"TARGET_PARTY_ROLE_REPORTING_INTERMEDIARY":                74,
	"TARGET_PARTY_ROLE_REPORT_ORIGINATOR":                     75,
	"TARGET_PARTY_ROLE_SYSTEMATIC_INTERNALISER":               76,
	"TARGET_PARTY_ROLE_ALLOCATION_ENTITY":                     77,
	"TARGET_PARTY_ROLE_BROKER_CLEARING_ID":                    78,
	"TARGET_PARTY_ROLE_PRIME_BROKER":                          79,
	"TARGET_PARTY_ROLE_STEP_OUT_FIRM":                         80,
	"TARGET_PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY":       81,
	"TARGET_PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY":      82,
	"TARGET_PARTY_ROLE_CLEARING_ACCOUNT":                      83,
	"TARGET_PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY":    84,
}

func (x TargetPartyRoleEnum) String() string {
	return proto.EnumName(TargetPartyRoleEnum_name, int32(x))
}

func (TargetPartyRoleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{202}
}

type ComplexEventTypeEnum int32

const (
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_UNSPECIFIED     ComplexEventTypeEnum = 0
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_CAPPED          ComplexEventTypeEnum = 1
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_KNOCK_IN_UP     ComplexEventTypeEnum = 2
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_KNOCK_OUT_DOWN  ComplexEventTypeEnum = 3
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_KNOCK_OUT_UP    ComplexEventTypeEnum = 4
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_KOCK_IN_DOWN    ComplexEventTypeEnum = 5
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_RESET_BARRIER   ComplexEventTypeEnum = 6
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_ROLLING_BARRIER ComplexEventTypeEnum = 7
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_TRIGGER         ComplexEventTypeEnum = 8
	ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_UNDERLYING      ComplexEventTypeEnum = 9
)

var ComplexEventTypeEnum_name = map[int32]string{
	0: "COMPLEX_EVENT_TYPE_UNSPECIFIED",
	1: "COMPLEX_EVENT_TYPE_CAPPED",
	2: "COMPLEX_EVENT_TYPE_KNOCK_IN_UP",
	3: "COMPLEX_EVENT_TYPE_KNOCK_OUT_DOWN",
	4: "COMPLEX_EVENT_TYPE_KNOCK_OUT_UP",
	5: "COMPLEX_EVENT_TYPE_KOCK_IN_DOWN",
	6: "COMPLEX_EVENT_TYPE_RESET_BARRIER",
	7: "COMPLEX_EVENT_TYPE_ROLLING_BARRIER",
	8: "COMPLEX_EVENT_TYPE_TRIGGER",
	9: "COMPLEX_EVENT_TYPE_UNDERLYING",
}

var ComplexEventTypeEnum_value = map[string]int32{
	"COMPLEX_EVENT_TYPE_UNSPECIFIED":     0,
	"COMPLEX_EVENT_TYPE_CAPPED":          1,
	"COMPLEX_EVENT_TYPE_KNOCK_IN_UP":     2,
	"COMPLEX_EVENT_TYPE_KNOCK_OUT_DOWN":  3,
	"COMPLEX_EVENT_TYPE_KNOCK_OUT_UP":    4,
	"COMPLEX_EVENT_TYPE_KOCK_IN_DOWN":    5,
	"COMPLEX_EVENT_TYPE_RESET_BARRIER":   6,
	"COMPLEX_EVENT_TYPE_ROLLING_BARRIER": 7,
	"COMPLEX_EVENT_TYPE_TRIGGER":         8,
	"COMPLEX_EVENT_TYPE_UNDERLYING":      9,
}

func (x ComplexEventTypeEnum) String() string {
	return proto.EnumName(ComplexEventTypeEnum_name, int32(x))
}

func (ComplexEventTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{203}
}

type ComplexEventPriceBoundaryMethodEnum int32

const (
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_UNSPECIFIED                                  ComplexEventPriceBoundaryMethodEnum = 0
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_EQUAL_TO_COMPLEX_EVENT_PRICE                 ComplexEventPriceBoundaryMethodEnum = 1
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_COMPLEX_EVENT_PRICE             ComplexEventPriceBoundaryMethodEnum = 2
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE ComplexEventPriceBoundaryMethodEnum = 3
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_COMPLEX_EVENT_PRICE                ComplexEventPriceBoundaryMethodEnum = 4
	ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE    ComplexEventPriceBoundaryMethodEnum = 5
)

var ComplexEventPriceBoundaryMethodEnum_name = map[int32]string{
	0: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_UNSPECIFIED",
	1: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_EQUAL_TO_COMPLEX_EVENT_PRICE",
	2: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_COMPLEX_EVENT_PRICE",
	3: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE",
	4: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_COMPLEX_EVENT_PRICE",
	5: "COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE",
}

var ComplexEventPriceBoundaryMethodEnum_value = map[string]int32{
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_UNSPECIFIED":                                  0,
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_EQUAL_TO_COMPLEX_EVENT_PRICE":                 1,
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_COMPLEX_EVENT_PRICE":             2,
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE": 3,
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_COMPLEX_EVENT_PRICE":                4,
	"COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE":    5,
}

func (x ComplexEventPriceBoundaryMethodEnum) String() string {
	return proto.EnumName(ComplexEventPriceBoundaryMethodEnum_name, int32(x))
}

func (ComplexEventPriceBoundaryMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{204}
}

type ComplexEventPriceTimeTypeEnum int32

const (
	ComplexEventPriceTimeTypeEnum_COMPLEX_EVENT_PRICE_TIME_TYPE_UNSPECIFIED    ComplexEventPriceTimeTypeEnum = 0
	ComplexEventPriceTimeTypeEnum_COMPLEX_EVENT_PRICE_TIME_TYPE_EXPIRATION     ComplexEventPriceTimeTypeEnum = 1
	ComplexEventPriceTimeTypeEnum_COMPLEX_EVENT_PRICE_TIME_TYPE_IMMEDIATE      ComplexEventPriceTimeTypeEnum = 2
	ComplexEventPriceTimeTypeEnum_COMPLEX_EVENT_PRICE_TIME_TYPE_SPECIFIED_DATE ComplexEventPriceTimeTypeEnum = 3
)

var ComplexEventPriceTimeTypeEnum_name = map[int32]string{
	0: "COMPLEX_EVENT_PRICE_TIME_TYPE_UNSPECIFIED",
	1: "COMPLEX_EVENT_PRICE_TIME_TYPE_EXPIRATION",
	2: "COMPLEX_EVENT_PRICE_TIME_TYPE_IMMEDIATE",
	3: "COMPLEX_EVENT_PRICE_TIME_TYPE_SPECIFIED_DATE",
}

var ComplexEventPriceTimeTypeEnum_value = map[string]int32{
	"COMPLEX_EVENT_PRICE_TIME_TYPE_UNSPECIFIED":    0,
	"COMPLEX_EVENT_PRICE_TIME_TYPE_EXPIRATION":     1,
	"COMPLEX_EVENT_PRICE_TIME_TYPE_IMMEDIATE":      2,
	"COMPLEX_EVENT_PRICE_TIME_TYPE_SPECIFIED_DATE": 3,
}

func (x ComplexEventPriceTimeTypeEnum) String() string {
	return proto.EnumName(ComplexEventPriceTimeTypeEnum_name, int32(x))
}

func (ComplexEventPriceTimeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{205}
}

type ComplexEventConditionEnum int32

const (
	ComplexEventConditionEnum_COMPLEX_EVENT_CONDITION_UNSPECIFIED ComplexEventConditionEnum = 0
	ComplexEventConditionEnum_COMPLEX_EVENT_CONDITION_AND         ComplexEventConditionEnum = 1
	ComplexEventConditionEnum_COMPLEX_EVENT_CONDITION_OR          ComplexEventConditionEnum = 2
)

var ComplexEventConditionEnum_name = map[int32]string{
	0: "COMPLEX_EVENT_CONDITION_UNSPECIFIED",
	1: "COMPLEX_EVENT_CONDITION_AND",
	2: "COMPLEX_EVENT_CONDITION_OR",
}

var ComplexEventConditionEnum_value = map[string]int32{
	"COMPLEX_EVENT_CONDITION_UNSPECIFIED": 0,
	"COMPLEX_EVENT_CONDITION_AND":         1,
	"COMPLEX_EVENT_CONDITION_OR":          2,
}

func (x ComplexEventConditionEnum) String() string {
	return proto.EnumName(ComplexEventConditionEnum_name, int32(x))
}

func (ComplexEventConditionEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{206}
}

type CommissionData struct {
	CommCurrency         string            `protobuf:"bytes,1,opt,name=comm_currency,json=commCurrency,proto3" json:"comm_currency,omitempty"`
	CommType             CommTypeEnum      `protobuf:"varint,2,opt,name=comm_type,json=commType,proto3,enum=Common.CommTypeEnum" json:"comm_type,omitempty"`
	Commission           *fix.Decimal64        `protobuf:"bytes,3,opt,name=commission,proto3" json:"commission,omitempty"`
	FundRenewWaiv        FundRenewWaivEnum `protobuf:"varint,4,opt,name=fund_renew_waiv,json=fundRenewWaiv,proto3,enum=Common.FundRenewWaivEnum" json:"fund_renew_waiv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommissionData) Reset()         { *m = CommissionData{} }
func (m *CommissionData) String() string { return proto.CompactTextString(m) }
func (*CommissionData) ProtoMessage()    {}
func (*CommissionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *CommissionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommissionData.Unmarshal(m, b)
}
func (m *CommissionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommissionData.Marshal(b, m, deterministic)
}
func (m *CommissionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionData.Merge(m, src)
}
func (m *CommissionData) XXX_Size() int {
	return xxx_messageInfo_CommissionData.Size(m)
}
func (m *CommissionData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionData.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionData proto.InternalMessageInfo

func (m *CommissionData) GetCommCurrency() string {
	if m != nil {
		return m.CommCurrency
	}
	return ""
}

func (m *CommissionData) GetCommType() CommTypeEnum {
	if m != nil {
		return m.CommType
	}
	return CommTypeEnum_COMM_TYPE_UNSPECIFIED
}

func (m *CommissionData) GetCommission() *fix.Decimal64 {
	if m != nil {
		return m.Commission
	}
	return nil
}

func (m *CommissionData) GetFundRenewWaiv() FundRenewWaivEnum {
	if m != nil {
		return m.FundRenewWaiv
	}
	return FundRenewWaivEnum_FUND_RENEW_WAIV_UNSPECIFIED
}

type DiscretionInstructions struct {
	DiscretionInst           DiscretionInstEnum           `protobuf:"varint,1,opt,name=discretion_inst,json=discretionInst,proto3,enum=Common.DiscretionInstEnum" json:"discretion_inst,omitempty"`
	DiscretionLimitType      DiscretionLimitTypeEnum      `protobuf:"varint,2,opt,name=discretion_limit_type,json=discretionLimitType,proto3,enum=Common.DiscretionLimitTypeEnum" json:"discretion_limit_type,omitempty"`
	DiscretionMoveType       DiscretionMoveTypeEnum       `protobuf:"varint,3,opt,name=discretion_move_type,json=discretionMoveType,proto3,enum=Common.DiscretionMoveTypeEnum" json:"discretion_move_type,omitempty"`
	DiscretionOffsetType     DiscretionOffsetTypeEnum     `protobuf:"varint,4,opt,name=discretion_offset_type,json=discretionOffsetType,proto3,enum=Common.DiscretionOffsetTypeEnum" json:"discretion_offset_type,omitempty"`
	DiscretionOffsetValue    *fix.Decimal64                   `protobuf:"bytes,5,opt,name=discretion_offset_value,json=discretionOffsetValue,proto3" json:"discretion_offset_value,omitempty"`
	DiscretionRoundDirection DiscretionRoundDirectionEnum `protobuf:"varint,6,opt,name=discretion_round_direction,json=discretionRoundDirection,proto3,enum=Common.DiscretionRoundDirectionEnum" json:"discretion_round_direction,omitempty"`
	DiscretionScope          DiscretionScopeEnum          `protobuf:"varint,7,opt,name=discretion_scope,json=discretionScope,proto3,enum=Common.DiscretionScopeEnum" json:"discretion_scope,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                     `json:"-"`
	XXX_unrecognized         []byte                       `json:"-"`
	XXX_sizecache            int32                        `json:"-"`
}

func (m *DiscretionInstructions) Reset()         { *m = DiscretionInstructions{} }
func (m *DiscretionInstructions) String() string { return proto.CompactTextString(m) }
func (*DiscretionInstructions) ProtoMessage()    {}
func (*DiscretionInstructions) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *DiscretionInstructions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscretionInstructions.Unmarshal(m, b)
}
func (m *DiscretionInstructions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscretionInstructions.Marshal(b, m, deterministic)
}
func (m *DiscretionInstructions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscretionInstructions.Merge(m, src)
}
func (m *DiscretionInstructions) XXX_Size() int {
	return xxx_messageInfo_DiscretionInstructions.Size(m)
}
func (m *DiscretionInstructions) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscretionInstructions.DiscardUnknown(m)
}

var xxx_messageInfo_DiscretionInstructions proto.InternalMessageInfo

func (m *DiscretionInstructions) GetDiscretionInst() DiscretionInstEnum {
	if m != nil {
		return m.DiscretionInst
	}
	return DiscretionInstEnum_DISCRETION_INST_UNSPECIFIED
}

func (m *DiscretionInstructions) GetDiscretionLimitType() DiscretionLimitTypeEnum {
	if m != nil {
		return m.DiscretionLimitType
	}
	return DiscretionLimitTypeEnum_DISCRETION_LIMIT_TYPE_UNSPECIFIED
}

func (m *DiscretionInstructions) GetDiscretionMoveType() DiscretionMoveTypeEnum {
	if m != nil {
		return m.DiscretionMoveType
	}
	return DiscretionMoveTypeEnum_DISCRETION_MOVE_TYPE_UNSPECIFIED
}

func (m *DiscretionInstructions) GetDiscretionOffsetType() DiscretionOffsetTypeEnum {
	if m != nil {
		return m.DiscretionOffsetType
	}
	return DiscretionOffsetTypeEnum_DISCRETION_OFFSET_TYPE_UNSPECIFIED
}

func (m *DiscretionInstructions) GetDiscretionOffsetValue() *fix.Decimal64 {
	if m != nil {
		return m.DiscretionOffsetValue
	}
	return nil
}

func (m *DiscretionInstructions) GetDiscretionRoundDirection() DiscretionRoundDirectionEnum {
	if m != nil {
		return m.DiscretionRoundDirection
	}
	return DiscretionRoundDirectionEnum_DISCRETION_ROUND_DIRECTION_UNSPECIFIED
}

func (m *DiscretionInstructions) GetDiscretionScope() DiscretionScopeEnum {
	if m != nil {
		return m.DiscretionScope
	}
	return DiscretionScopeEnum_DISCRETION_SCOPE_UNSPECIFIED
}

type FinancingDetails struct {
	AgreementCurrency    string              `protobuf:"bytes,1,opt,name=agreement_currency,json=agreementCurrency,proto3" json:"agreement_currency,omitempty"`
	AgreementDate        int32               `protobuf:"fixed32,2,opt,name=agreement_date,json=agreementDate,proto3" json:"agreement_date,omitempty"`
	AgreementDesc        string              `protobuf:"bytes,3,opt,name=agreement_desc,json=agreementDesc,proto3" json:"agreement_desc,omitempty"`
	AgreementId          string              `protobuf:"bytes,4,opt,name=agreement_id,json=agreementId,proto3" json:"agreement_id,omitempty"`
	DeliveryType         DeliveryTypeEnum    `protobuf:"varint,5,opt,name=delivery_type,json=deliveryType,proto3,enum=Common.DeliveryTypeEnum" json:"delivery_type,omitempty"`
	EndDate              int32               `protobuf:"fixed32,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	MarginRatio          *fix.Decimal64          `protobuf:"bytes,7,opt,name=margin_ratio,json=marginRatio,proto3" json:"margin_ratio,omitempty"`
	StartDate            int32               `protobuf:"fixed32,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	TerminationType      TerminationTypeEnum `protobuf:"varint,9,opt,name=termination_type,json=terminationType,proto3,enum=Common.TerminationTypeEnum" json:"termination_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FinancingDetails) Reset()         { *m = FinancingDetails{} }
func (m *FinancingDetails) String() string { return proto.CompactTextString(m) }
func (*FinancingDetails) ProtoMessage()    {}
func (*FinancingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *FinancingDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinancingDetails.Unmarshal(m, b)
}
func (m *FinancingDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinancingDetails.Marshal(b, m, deterministic)
}
func (m *FinancingDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinancingDetails.Merge(m, src)
}
func (m *FinancingDetails) XXX_Size() int {
	return xxx_messageInfo_FinancingDetails.Size(m)
}
func (m *FinancingDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_FinancingDetails.DiscardUnknown(m)
}

var xxx_messageInfo_FinancingDetails proto.InternalMessageInfo

func (m *FinancingDetails) GetAgreementCurrency() string {
	if m != nil {
		return m.AgreementCurrency
	}
	return ""
}

func (m *FinancingDetails) GetAgreementDate() int32 {
	if m != nil {
		return m.AgreementDate
	}
	return 0
}

func (m *FinancingDetails) GetAgreementDesc() string {
	if m != nil {
		return m.AgreementDesc
	}
	return ""
}

func (m *FinancingDetails) GetAgreementId() string {
	if m != nil {
		return m.AgreementId
	}
	return ""
}

func (m *FinancingDetails) GetDeliveryType() DeliveryTypeEnum {
	if m != nil {
		return m.DeliveryType
	}
	return DeliveryTypeEnum_DELIVERY_TYPE_UNSPECIFIED
}

func (m *FinancingDetails) GetEndDate() int32 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *FinancingDetails) GetMarginRatio() *fix.Decimal64 {
	if m != nil {
		return m.MarginRatio
	}
	return nil
}

func (m *FinancingDetails) GetStartDate() int32 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *FinancingDetails) GetTerminationType() TerminationTypeEnum {
	if m != nil {
		return m.TerminationType
	}
	return TerminationTypeEnum_TERMINATION_TYPE_UNSPECIFIED
}

type Instrument struct {
	CfiCode                    string               `protobuf:"bytes,1,opt,name=cfi_code,json=cfiCode,proto3" json:"cfi_code,omitempty"`
	ContractMultiplier         *fix.Decimal64           `protobuf:"bytes,2,opt,name=contract_multiplier,json=contractMultiplier,proto3" json:"contract_multiplier,omitempty"`
	CountryOfIssue             string               `protobuf:"bytes,3,opt,name=country_of_issue,json=countryOfIssue,proto3" json:"country_of_issue,omitempty"`
	CouponPaymentDate          int32                `protobuf:"fixed32,4,opt,name=coupon_payment_date,json=couponPaymentDate,proto3" json:"coupon_payment_date,omitempty"`
	CouponRate                 *fix.Decimal64           `protobuf:"bytes,5,opt,name=coupon_rate,json=couponRate,proto3" json:"coupon_rate,omitempty"`
	CreditRating               string               `protobuf:"bytes,6,opt,name=credit_rating,json=creditRating,proto3" json:"credit_rating,omitempty"`
	EncodedIssuer              string               `protobuf:"bytes,7,opt,name=encoded_issuer,json=encodedIssuer,proto3" json:"encoded_issuer,omitempty"`
	EncodedIssuerLen           int64                `protobuf:"fixed64,8,opt,name=encoded_issuer_len,json=encodedIssuerLen,proto3" json:"encoded_issuer_len,omitempty"`
	EncodedSecurityDesc        string               `protobuf:"bytes,9,opt,name=encoded_security_desc,json=encodedSecurityDesc,proto3" json:"encoded_security_desc,omitempty"`
	EncodedSecurityDescLen     int64                `protobuf:"fixed64,10,opt,name=encoded_security_desc_len,json=encodedSecurityDescLen,proto3" json:"encoded_security_desc_len,omitempty"`
	Factor                     *fix.Decimal64           `protobuf:"bytes,11,opt,name=factor,proto3" json:"factor,omitempty"`
	InstrRegistry              string               `protobuf:"bytes,12,opt,name=instr_registry,json=instrRegistry,proto3" json:"instr_registry,omitempty"`
	IssueDate                  int32                `protobuf:"fixed32,13,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	Issuer                     string               `protobuf:"bytes,14,opt,name=issuer,proto3" json:"issuer,omitempty"`
	LocaleOfIssue              string               `protobuf:"bytes,15,opt,name=locale_of_issue,json=localeOfIssue,proto3" json:"locale_of_issue,omitempty"`
	MaturityDate               int32                `protobuf:"fixed32,16,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	MaturityMonthYear          int32                `protobuf:"fixed32,17,opt,name=maturity_month_year,json=maturityMonthYear,proto3" json:"maturity_month_year,omitempty"`
	OptAttribute               []byte               `protobuf:"bytes,18,opt,name=opt_attribute,json=optAttribute,proto3" json:"opt_attribute,omitempty"`
	Product                    ProductEnum          `protobuf:"varint,19,opt,name=product,proto3,enum=Common.ProductEnum" json:"product,omitempty"`
	RedemptionDate             int32                `protobuf:"fixed32,20,opt,name=redemption_date,json=redemptionDate,proto3" json:"redemption_date,omitempty"`
	RepoCollateralSecurityType string               `protobuf:"bytes,21,opt,name=repo_collateral_security_type,json=repoCollateralSecurityType,proto3" json:"repo_collateral_security_type,omitempty"`
	RepurchaseRate             *fix.Decimal64           `protobuf:"bytes,22,opt,name=repurchase_rate,json=repurchaseRate,proto3" json:"repurchase_rate,omitempty"`
	RepurchaseTerm             int64                `protobuf:"fixed64,23,opt,name=repurchase_term,json=repurchaseTerm,proto3" json:"repurchase_term,omitempty"`
	SecurityDesc               string               `protobuf:"bytes,24,opt,name=security_desc,json=securityDesc,proto3" json:"security_desc,omitempty"`
	SecurityExchange           string               `protobuf:"bytes,25,opt,name=security_exchange,json=securityExchange,proto3" json:"security_exchange,omitempty"`
	SecurityId                 string               `protobuf:"bytes,26,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	SecurityIdSource           SecurityIDSourceEnum `protobuf:"varint,27,opt,name=security_id_source,json=securityIdSource,proto3,enum=Common.SecurityIDSourceEnum" json:"security_id_source,omitempty"`
	SecurityType               SecurityTypeEnum     `protobuf:"varint,28,opt,name=security_type,json=securityType,proto3,enum=Common.SecurityTypeEnum" json:"security_type,omitempty"`
	StateOrProvinceOfIssue     string               `protobuf:"bytes,29,opt,name=state_or_province_of_issue,json=stateOrProvinceOfIssue,proto3" json:"state_or_province_of_issue,omitempty"`
	StrikePrice                *fix.Decimal64           `protobuf:"bytes,30,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
	Symbol                     string               `protobuf:"bytes,31,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SymbolSfx                  SymbolSfxEnum        `protobuf:"varint,32,opt,name=symbol_sfx,json=symbolSfx,proto3,enum=Common.SymbolSfxEnum" json:"symbol_sfx,omitempty"`
	ContractSettlMonth         int32                `protobuf:"fixed32,33,opt,name=contract_settl_month,json=contractSettlMonth,proto3" json:"contract_settl_month,omitempty"`
	// Types that are valid to be assigned to CpProgramUnion:
	//	*Instrument_CpProgram
	//	*Instrument_CpProgramReserved100Plus
	CpProgramUnion                  isInstrument_CpProgramUnion `protobuf_oneof:"cp_program_union"`
	CpRegType                       string                      `protobuf:"bytes,36,opt,name=cp_reg_type,json=cpRegType,proto3" json:"cp_reg_type,omitempty"`
	DatedDate                       int32                       `protobuf:"fixed32,37,opt,name=dated_date,json=datedDate,proto3" json:"dated_date,omitempty"`
	EvntGrp                         []*EvntGrp                  `protobuf:"bytes,38,rep,name=evnt_grp,json=evntGrp,proto3" json:"evnt_grp,omitempty"`
	InstrmtAssignmentMethod         []byte                      `protobuf:"bytes,39,opt,name=instrmt_assignment_method,json=instrmtAssignmentMethod,proto3" json:"instrmt_assignment_method,omitempty"`
	InstrumentParties               []*InstrumentParties        `protobuf:"bytes,40,rep,name=instrument_parties,json=instrumentParties,proto3" json:"instrument_parties,omitempty"`
	InterestAccrualDate             int32                       `protobuf:"fixed32,41,opt,name=interest_accrual_date,json=interestAccrualDate,proto3" json:"interest_accrual_date,omitempty"`
	MaturityTime                    *fix.LocalTimeOnly              `protobuf:"bytes,42,opt,name=maturity_time,json=maturityTime,proto3" json:"maturity_time,omitempty"`
	MinPriceIncrement               *fix.Decimal64                  `protobuf:"bytes,43,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	NtPositionLimit                 int64                       `protobuf:"fixed64,44,opt,name=nt_position_limit,json=ntPositionLimit,proto3" json:"nt_position_limit,omitempty"`
	Pool                            string                      `protobuf:"bytes,45,opt,name=pool,proto3" json:"pool,omitempty"`
	PositionLimit                   int64                       `protobuf:"fixed64,46,opt,name=position_limit,json=positionLimit,proto3" json:"position_limit,omitempty"`
	PutOrCall                       PutOrCallEnum               `protobuf:"varint,47,opt,name=put_or_call,json=putOrCall,proto3,enum=Common.PutOrCallEnum" json:"put_or_call,omitempty"`
	SecAltIdGrp                     []*SecAltIDGrp              `protobuf:"bytes,48,rep,name=sec_alt_id_grp,json=secAltIdGrp,proto3" json:"sec_alt_id_grp,omitempty"`
	SecurityStatus                  SecurityStatusEnum          `protobuf:"varint,49,opt,name=security_status,json=securityStatus,proto3,enum=Common.SecurityStatusEnum" json:"security_status,omitempty"`
	SecuritySubType                 string                      `protobuf:"bytes,50,opt,name=security_sub_type,json=securitySubType,proto3" json:"security_sub_type,omitempty"`
	SettleOnOpenFlag                string                      `protobuf:"bytes,51,opt,name=settle_on_open_flag,json=settleOnOpenFlag,proto3" json:"settle_on_open_flag,omitempty"`
	StrikeCurrency                  string                      `protobuf:"bytes,52,opt,name=strike_currency,json=strikeCurrency,proto3" json:"strike_currency,omitempty"`
	StrikeMultiplier                *fix.Decimal64                  `protobuf:"bytes,53,opt,name=strike_multiplier,json=strikeMultiplier,proto3" json:"strike_multiplier,omitempty"`
	StrikeValue                     *fix.Decimal64                  `protobuf:"bytes,54,opt,name=strike_value,json=strikeValue,proto3" json:"strike_value,omitempty"`
	TimeUnit                        TimeUnitEnum                `protobuf:"varint,55,opt,name=time_unit,json=timeUnit,proto3,enum=Common.TimeUnitEnum" json:"time_unit,omitempty"`
	UnitOfMeasure                   UnitOfMeasureEnum           `protobuf:"varint,56,opt,name=unit_of_measure,json=unitOfMeasure,proto3,enum=Common.UnitOfMeasureEnum" json:"unit_of_measure,omitempty"`
	CapPrice                        *fix.Decimal64                  `protobuf:"bytes,57,opt,name=cap_price,json=capPrice,proto3" json:"cap_price,omitempty"`
	ExerciseStyle                   ExerciseStyleEnum           `protobuf:"varint,58,opt,name=exercise_style,json=exerciseStyle,proto3,enum=Common.ExerciseStyleEnum" json:"exercise_style,omitempty"`
	FlexProductEligibilityIndicator bool                        `protobuf:"varint,59,opt,name=flex_product_eligibility_indicator,json=flexProductEligibilityIndicator,proto3" json:"flex_product_eligibility_indicator,omitempty"`
	FlexibleIndicator               bool                        `protobuf:"varint,60,opt,name=flexible_indicator,json=flexibleIndicator,proto3" json:"flexible_indicator,omitempty"`
	FloorPrice                      *fix.Decimal64                  `protobuf:"bytes,61,opt,name=floor_price,json=floorPrice,proto3" json:"floor_price,omitempty"`
	ListMethod                      ListMethodEnum              `protobuf:"varint,62,opt,name=list_method,json=listMethod,proto3,enum=Common.ListMethodEnum" json:"list_method,omitempty"`
	MinPriceIncrementAmount         *fix.Decimal64                  `protobuf:"bytes,63,opt,name=min_price_increment_amount,json=minPriceIncrementAmount,proto3" json:"min_price_increment_amount,omitempty"`
	OptPayoutAmount                 *fix.Decimal64                  `protobuf:"bytes,64,opt,name=opt_payout_amount,json=optPayoutAmount,proto3" json:"opt_payout_amount,omitempty"`
	PriceQuoteMethod                PriceQuoteMethodEnum        `protobuf:"varint,65,opt,name=price_quote_method,json=priceQuoteMethod,proto3,enum=Common.PriceQuoteMethodEnum" json:"price_quote_method,omitempty"`
	PriceUnitOfMeasure              PriceUnitOfMeasureEnum      `protobuf:"varint,66,opt,name=price_unit_of_measure,json=priceUnitOfMeasure,proto3,enum=Common.PriceUnitOfMeasureEnum" json:"price_unit_of_measure,omitempty"`
	PriceUnitOfMeasureQty           *fix.Decimal64                  `protobuf:"bytes,67,opt,name=price_unit_of_measure_qty,json=priceUnitOfMeasureQty,proto3" json:"price_unit_of_measure_qty,omitempty"`
	ProductComplex                  string                      `protobuf:"bytes,68,opt,name=product_complex,json=productComplex,proto3" json:"product_complex,omitempty"`
	SecurityGroup                   string                      `protobuf:"bytes,69,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	SecurityXml                     *SecurityXML                `protobuf:"bytes,70,opt,name=security_xml,json=securityXml,proto3" json:"security_xml,omitempty"`
	SettlMethod                     SettlMethodEnum             `protobuf:"varint,71,opt,name=settl_method,json=settlMethod,proto3,enum=Common.SettlMethodEnum" json:"settl_method,omitempty"`
	UnitOfMeasureQty                *fix.Decimal64                  `protobuf:"bytes,72,opt,name=unit_of_measure_qty,json=unitOfMeasureQty,proto3" json:"unit_of_measure_qty,omitempty"`
	ValuationMethod                 ValuationMethodEnum         `protobuf:"varint,73,opt,name=valuation_method,json=valuationMethod,proto3,enum=Common.ValuationMethodEnum" json:"valuation_method,omitempty"`
	ComplexEvents                   []*ComplexEvents            `protobuf:"bytes,74,rep,name=complex_events,json=complexEvents,proto3" json:"complex_events,omitempty"`
	ContractMultiplierUnit          ContractMultiplierUnitEnum  `protobuf:"varint,75,opt,name=contract_multiplier_unit,json=contractMultiplierUnit,proto3,enum=Common.ContractMultiplierUnitEnum" json:"contract_multiplier_unit,omitempty"`
	// Types that are valid to be assigned to FlowScheduleTypeUnion:
	//	*Instrument_FlowScheduleType
	//	*Instrument_FlowScheduleTypeReserved100Plus
	FlowScheduleTypeUnion                 isInstrument_FlowScheduleTypeUnion `protobuf_oneof:"flow_schedule_type_union"`
	AttachmentPoint                       *fix.Decimal64                         `protobuf:"bytes,78,opt,name=attachment_point,json=attachmentPoint,proto3" json:"attachment_point,omitempty"`
	DetachmentPoint                       *fix.Decimal64                         `protobuf:"bytes,79,opt,name=detachment_point,json=detachmentPoint,proto3" json:"detachment_point,omitempty"`
	NotionalPercentageOutstanding         *fix.Decimal64                         `protobuf:"bytes,80,opt,name=notional_percentage_outstanding,json=notionalPercentageOutstanding,proto3" json:"notional_percentage_outstanding,omitempty"`
	OriginalNotionalPercentageOutstanding *fix.Decimal64                         `protobuf:"bytes,81,opt,name=original_notional_percentage_outstanding,json=originalNotionalPercentageOutstanding,proto3" json:"original_notional_percentage_outstanding,omitempty"`
	RestructuringType                     RestructuringTypeEnum              `protobuf:"varint,82,opt,name=restructuring_type,json=restructuringType,proto3,enum=Common.RestructuringTypeEnum" json:"restructuring_type,omitempty"`
	Seniority                             SeniorityEnum                      `protobuf:"varint,83,opt,name=seniority,proto3,enum=Common.SeniorityEnum" json:"seniority,omitempty"`
	OptPayoutType                         OptPayoutTypeEnum                  `protobuf:"varint,84,opt,name=opt_payout_type,json=optPayoutType,proto3,enum=Common.OptPayoutTypeEnum" json:"opt_payout_type,omitempty"`
	StrikePriceBoundaryMethod             StrikePriceBoundaryMethodEnum      `protobuf:"varint,85,opt,name=strike_price_boundary_method,json=strikePriceBoundaryMethod,proto3,enum=Common.StrikePriceBoundaryMethodEnum" json:"strike_price_boundary_method,omitempty"`
	StrikePriceBoundaryPrecision          *fix.Decimal64                         `protobuf:"bytes,86,opt,name=strike_price_boundary_precision,json=strikePriceBoundaryPrecision,proto3" json:"strike_price_boundary_precision,omitempty"`
	// Types that are valid to be assigned to StrikePriceDeterminationMethodUnion:
	//	*Instrument_StrikePriceDeterminationMethod
	//	*Instrument_StrikePriceDeterminationMethodReserved100Plus
	StrikePriceDeterminationMethodUnion isInstrument_StrikePriceDeterminationMethodUnion `protobuf_oneof:"strike_price_determination_method_union"`
	UnderlyingPriceDeterminationMethod  UnderlyingPriceDeterminationMethodEnum           `protobuf:"varint,89,opt,name=underlying_price_determination_method,json=underlyingPriceDeterminationMethod,proto3,enum=Common.UnderlyingPriceDeterminationMethodEnum" json:"underlying_price_determination_method,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                                         `json:"-"`
	XXX_unrecognized                    []byte                                           `json:"-"`
	XXX_sizecache                       int32                                            `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetCfiCode() string {
	if m != nil {
		return m.CfiCode
	}
	return ""
}

func (m *Instrument) GetContractMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.ContractMultiplier
	}
	return nil
}

func (m *Instrument) GetCountryOfIssue() string {
	if m != nil {
		return m.CountryOfIssue
	}
	return ""
}

func (m *Instrument) GetCouponPaymentDate() int32 {
	if m != nil {
		return m.CouponPaymentDate
	}
	return 0
}

func (m *Instrument) GetCouponRate() *fix.Decimal64 {
	if m != nil {
		return m.CouponRate
	}
	return nil
}

func (m *Instrument) GetCreditRating() string {
	if m != nil {
		return m.CreditRating
	}
	return ""
}

func (m *Instrument) GetEncodedIssuer() string {
	if m != nil {
		return m.EncodedIssuer
	}
	return ""
}

func (m *Instrument) GetEncodedIssuerLen() int64 {
	if m != nil {
		return m.EncodedIssuerLen
	}
	return 0
}

func (m *Instrument) GetEncodedSecurityDesc() string {
	if m != nil {
		return m.EncodedSecurityDesc
	}
	return ""
}

func (m *Instrument) GetEncodedSecurityDescLen() int64 {
	if m != nil {
		return m.EncodedSecurityDescLen
	}
	return 0
}

func (m *Instrument) GetFactor() *fix.Decimal64 {
	if m != nil {
		return m.Factor
	}
	return nil
}

func (m *Instrument) GetInstrRegistry() string {
	if m != nil {
		return m.InstrRegistry
	}
	return ""
}

func (m *Instrument) GetIssueDate() int32 {
	if m != nil {
		return m.IssueDate
	}
	return 0
}

func (m *Instrument) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Instrument) GetLocaleOfIssue() string {
	if m != nil {
		return m.LocaleOfIssue
	}
	return ""
}

func (m *Instrument) GetMaturityDate() int32 {
	if m != nil {
		return m.MaturityDate
	}
	return 0
}

func (m *Instrument) GetMaturityMonthYear() int32 {
	if m != nil {
		return m.MaturityMonthYear
	}
	return 0
}

func (m *Instrument) GetOptAttribute() []byte {
	if m != nil {
		return m.OptAttribute
	}
	return nil
}

func (m *Instrument) GetProduct() ProductEnum {
	if m != nil {
		return m.Product
	}
	return ProductEnum_PRODUCT_UNSPECIFIED
}

func (m *Instrument) GetRedemptionDate() int32 {
	if m != nil {
		return m.RedemptionDate
	}
	return 0
}

func (m *Instrument) GetRepoCollateralSecurityType() string {
	if m != nil {
		return m.RepoCollateralSecurityType
	}
	return ""
}

func (m *Instrument) GetRepurchaseRate() *fix.Decimal64 {
	if m != nil {
		return m.RepurchaseRate
	}
	return nil
}

func (m *Instrument) GetRepurchaseTerm() int64 {
	if m != nil {
		return m.RepurchaseTerm
	}
	return 0
}

func (m *Instrument) GetSecurityDesc() string {
	if m != nil {
		return m.SecurityDesc
	}
	return ""
}

func (m *Instrument) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *Instrument) GetSecurityId() string {
	if m != nil {
		return m.SecurityId
	}
	return ""
}

func (m *Instrument) GetSecurityIdSource() SecurityIDSourceEnum {
	if m != nil {
		return m.SecurityIdSource
	}
	return SecurityIDSourceEnum_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *Instrument) GetSecurityType() SecurityTypeEnum {
	if m != nil {
		return m.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSPECIFIED
}

func (m *Instrument) GetStateOrProvinceOfIssue() string {
	if m != nil {
		return m.StateOrProvinceOfIssue
	}
	return ""
}

func (m *Instrument) GetStrikePrice() *fix.Decimal64 {
	if m != nil {
		return m.StrikePrice
	}
	return nil
}

func (m *Instrument) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Instrument) GetSymbolSfx() SymbolSfxEnum {
	if m != nil {
		return m.SymbolSfx
	}
	return SymbolSfxEnum_SYMBOL_SFX_UNSPECIFIED
}

func (m *Instrument) GetContractSettlMonth() int32 {
	if m != nil {
		return m.ContractSettlMonth
	}
	return 0
}

type isInstrument_CpProgramUnion interface {
	isInstrument_CpProgramUnion()
}

type Instrument_CpProgram struct {
	CpProgram CPProgramEnum `protobuf:"varint,34,opt,name=cp_program,json=cpProgram,proto3,enum=Common.CPProgramEnum,oneof"`
}

type Instrument_CpProgramReserved100Plus struct {
	CpProgramReserved100Plus uint32 `protobuf:"fixed32,35,opt,name=cp_program_reserved100plus,json=cpProgramReserved100plus,proto3,oneof"`
}

func (*Instrument_CpProgram) isInstrument_CpProgramUnion() {}

func (*Instrument_CpProgramReserved100Plus) isInstrument_CpProgramUnion() {}

func (m *Instrument) GetCpProgramUnion() isInstrument_CpProgramUnion {
	if m != nil {
		return m.CpProgramUnion
	}
	return nil
}

func (m *Instrument) GetCpProgram() CPProgramEnum {
	if x, ok := m.GetCpProgramUnion().(*Instrument_CpProgram); ok {
		return x.CpProgram
	}
	return CPProgramEnum_CP_PROGRAM_UNSPECIFIED
}

func (m *Instrument) GetCpProgramReserved100Plus() uint32 {
	if x, ok := m.GetCpProgramUnion().(*Instrument_CpProgramReserved100Plus); ok {
		return x.CpProgramReserved100Plus
	}
	return 0
}

func (m *Instrument) GetCpRegType() string {
	if m != nil {
		return m.CpRegType
	}
	return ""
}

func (m *Instrument) GetDatedDate() int32 {
	if m != nil {
		return m.DatedDate
	}
	return 0
}

func (m *Instrument) GetEvntGrp() []*EvntGrp {
	if m != nil {
		return m.EvntGrp
	}
	return nil
}

func (m *Instrument) GetInstrmtAssignmentMethod() []byte {
	if m != nil {
		return m.InstrmtAssignmentMethod
	}
	return nil
}

func (m *Instrument) GetInstrumentParties() []*InstrumentParties {
	if m != nil {
		return m.InstrumentParties
	}
	return nil
}

func (m *Instrument) GetInterestAccrualDate() int32 {
	if m != nil {
		return m.InterestAccrualDate
	}
	return 0
}

func (m *Instrument) GetMaturityTime() *fix.LocalTimeOnly {
	if m != nil {
		return m.MaturityTime
	}
	return nil
}

func (m *Instrument) GetMinPriceIncrement() *fix.Decimal64 {
	if m != nil {
		return m.MinPriceIncrement
	}
	return nil
}

func (m *Instrument) GetNtPositionLimit() int64 {
	if m != nil {
		return m.NtPositionLimit
	}
	return 0
}

func (m *Instrument) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *Instrument) GetPositionLimit() int64 {
	if m != nil {
		return m.PositionLimit
	}
	return 0
}

func (m *Instrument) GetPutOrCall() PutOrCallEnum {
	if m != nil {
		return m.PutOrCall
	}
	return PutOrCallEnum_PUT_OR_CALL_UNSPECIFIED
}

func (m *Instrument) GetSecAltIdGrp() []*SecAltIDGrp {
	if m != nil {
		return m.SecAltIdGrp
	}
	return nil
}

func (m *Instrument) GetSecurityStatus() SecurityStatusEnum {
	if m != nil {
		return m.SecurityStatus
	}
	return SecurityStatusEnum_SECURITY_STATUS_UNSPECIFIED
}

func (m *Instrument) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *Instrument) GetSettleOnOpenFlag() string {
	if m != nil {
		return m.SettleOnOpenFlag
	}
	return ""
}

func (m *Instrument) GetStrikeCurrency() string {
	if m != nil {
		return m.StrikeCurrency
	}
	return ""
}

func (m *Instrument) GetStrikeMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.StrikeMultiplier
	}
	return nil
}

func (m *Instrument) GetStrikeValue() *fix.Decimal64 {
	if m != nil {
		return m.StrikeValue
	}
	return nil
}

func (m *Instrument) GetTimeUnit() TimeUnitEnum {
	if m != nil {
		return m.TimeUnit
	}
	return TimeUnitEnum_TIME_UNIT_UNSPECIFIED
}

func (m *Instrument) GetUnitOfMeasure() UnitOfMeasureEnum {
	if m != nil {
		return m.UnitOfMeasure
	}
	return UnitOfMeasureEnum_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *Instrument) GetCapPrice() *fix.Decimal64 {
	if m != nil {
		return m.CapPrice
	}
	return nil
}

func (m *Instrument) GetExerciseStyle() ExerciseStyleEnum {
	if m != nil {
		return m.ExerciseStyle
	}
	return ExerciseStyleEnum_EXERCISE_STYLE_UNSPECIFIED
}

func (m *Instrument) GetFlexProductEligibilityIndicator() bool {
	if m != nil {
		return m.FlexProductEligibilityIndicator
	}
	return false
}

func (m *Instrument) GetFlexibleIndicator() bool {
	if m != nil {
		return m.FlexibleIndicator
	}
	return false
}

func (m *Instrument) GetFloorPrice() *fix.Decimal64 {
	if m != nil {
		return m.FloorPrice
	}
	return nil
}

func (m *Instrument) GetListMethod() ListMethodEnum {
	if m != nil {
		return m.ListMethod
	}
	return ListMethodEnum_LIST_METHOD_UNSPECIFIED
}

func (m *Instrument) GetMinPriceIncrementAmount() *fix.Decimal64 {
	if m != nil {
		return m.MinPriceIncrementAmount
	}
	return nil
}

func (m *Instrument) GetOptPayoutAmount() *fix.Decimal64 {
	if m != nil {
		return m.OptPayoutAmount
	}
	return nil
}

func (m *Instrument) GetPriceQuoteMethod() PriceQuoteMethodEnum {
	if m != nil {
		return m.PriceQuoteMethod
	}
	return PriceQuoteMethodEnum_PRICE_QUOTE_METHOD_UNSPECIFIED
}

func (m *Instrument) GetPriceUnitOfMeasure() PriceUnitOfMeasureEnum {
	if m != nil {
		return m.PriceUnitOfMeasure
	}
	return PriceUnitOfMeasureEnum_PRICE_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *Instrument) GetPriceUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.PriceUnitOfMeasureQty
	}
	return nil
}

func (m *Instrument) GetProductComplex() string {
	if m != nil {
		return m.ProductComplex
	}
	return ""
}

func (m *Instrument) GetSecurityGroup() string {
	if m != nil {
		return m.SecurityGroup
	}
	return ""
}

func (m *Instrument) GetSecurityXml() *SecurityXML {
	if m != nil {
		return m.SecurityXml
	}
	return nil
}

func (m *Instrument) GetSettlMethod() SettlMethodEnum {
	if m != nil {
		return m.SettlMethod
	}
	return SettlMethodEnum_SETTL_METHOD_UNSPECIFIED
}

func (m *Instrument) GetUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.UnitOfMeasureQty
	}
	return nil
}

func (m *Instrument) GetValuationMethod() ValuationMethodEnum {
	if m != nil {
		return m.ValuationMethod
	}
	return ValuationMethodEnum_VALUATION_METHOD_UNSPECIFIED
}

func (m *Instrument) GetComplexEvents() []*ComplexEvents {
	if m != nil {
		return m.ComplexEvents
	}
	return nil
}

func (m *Instrument) GetContractMultiplierUnit() ContractMultiplierUnitEnum {
	if m != nil {
		return m.ContractMultiplierUnit
	}
	return ContractMultiplierUnitEnum_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED
}

type isInstrument_FlowScheduleTypeUnion interface {
	isInstrument_FlowScheduleTypeUnion()
}

type Instrument_FlowScheduleType struct {
	FlowScheduleType FlowScheduleTypeEnum `protobuf:"varint,76,opt,name=flow_schedule_type,json=flowScheduleType,proto3,enum=Common.FlowScheduleTypeEnum,oneof"`
}

type Instrument_FlowScheduleTypeReserved100Plus struct {
	FlowScheduleTypeReserved100Plus uint32 `protobuf:"fixed32,77,opt,name=flow_schedule_type_reserved100plus,json=flowScheduleTypeReserved100plus,proto3,oneof"`
}

func (*Instrument_FlowScheduleType) isInstrument_FlowScheduleTypeUnion() {}

func (*Instrument_FlowScheduleTypeReserved100Plus) isInstrument_FlowScheduleTypeUnion() {}

func (m *Instrument) GetFlowScheduleTypeUnion() isInstrument_FlowScheduleTypeUnion {
	if m != nil {
		return m.FlowScheduleTypeUnion
	}
	return nil
}

func (m *Instrument) GetFlowScheduleType() FlowScheduleTypeEnum {
	if x, ok := m.GetFlowScheduleTypeUnion().(*Instrument_FlowScheduleType); ok {
		return x.FlowScheduleType
	}
	return FlowScheduleTypeEnum_FLOW_SCHEDULE_TYPE_UNSPECIFIED
}

func (m *Instrument) GetFlowScheduleTypeReserved100Plus() uint32 {
	if x, ok := m.GetFlowScheduleTypeUnion().(*Instrument_FlowScheduleTypeReserved100Plus); ok {
		return x.FlowScheduleTypeReserved100Plus
	}
	return 0
}

func (m *Instrument) GetAttachmentPoint() *fix.Decimal64 {
	if m != nil {
		return m.AttachmentPoint
	}
	return nil
}

func (m *Instrument) GetDetachmentPoint() *fix.Decimal64 {
	if m != nil {
		return m.DetachmentPoint
	}
	return nil
}

func (m *Instrument) GetNotionalPercentageOutstanding() *fix.Decimal64 {
	if m != nil {
		return m.NotionalPercentageOutstanding
	}
	return nil
}

func (m *Instrument) GetOriginalNotionalPercentageOutstanding() *fix.Decimal64 {
	if m != nil {
		return m.OriginalNotionalPercentageOutstanding
	}
	return nil
}

func (m *Instrument) GetRestructuringType() RestructuringTypeEnum {
	if m != nil {
		return m.RestructuringType
	}
	return RestructuringTypeEnum_RESTRUCTURING_TYPE_UNSPECIFIED
}

func (m *Instrument) GetSeniority() SeniorityEnum {
	if m != nil {
		return m.Seniority
	}
	return SeniorityEnum_SENIORITY_UNSPECIFIED
}

func (m *Instrument) GetOptPayoutType() OptPayoutTypeEnum {
	if m != nil {
		return m.OptPayoutType
	}
	return OptPayoutTypeEnum_OPT_PAYOUT_TYPE_UNSPECIFIED
}

func (m *Instrument) GetStrikePriceBoundaryMethod() StrikePriceBoundaryMethodEnum {
	if m != nil {
		return m.StrikePriceBoundaryMethod
	}
	return StrikePriceBoundaryMethodEnum_STRIKE_PRICE_BOUNDARY_METHOD_UNSPECIFIED
}

func (m *Instrument) GetStrikePriceBoundaryPrecision() *fix.Decimal64 {
	if m != nil {
		return m.StrikePriceBoundaryPrecision
	}
	return nil
}

type isInstrument_StrikePriceDeterminationMethodUnion interface {
	isInstrument_StrikePriceDeterminationMethodUnion()
}

type Instrument_StrikePriceDeterminationMethod struct {
	StrikePriceDeterminationMethod StrikePriceDeterminationMethodEnum `protobuf:"varint,87,opt,name=strike_price_determination_method,json=strikePriceDeterminationMethod,proto3,enum=Common.StrikePriceDeterminationMethodEnum,oneof"`
}

type Instrument_StrikePriceDeterminationMethodReserved100Plus struct {
	StrikePriceDeterminationMethodReserved100Plus uint32 `protobuf:"fixed32,88,opt,name=strike_price_determination_method_reserved100plus,json=strikePriceDeterminationMethodReserved100plus,proto3,oneof"`
}

func (*Instrument_StrikePriceDeterminationMethod) isInstrument_StrikePriceDeterminationMethodUnion() {}

func (*Instrument_StrikePriceDeterminationMethodReserved100Plus) isInstrument_StrikePriceDeterminationMethodUnion() {
}

func (m *Instrument) GetStrikePriceDeterminationMethodUnion() isInstrument_StrikePriceDeterminationMethodUnion {
	if m != nil {
		return m.StrikePriceDeterminationMethodUnion
	}
	return nil
}

func (m *Instrument) GetStrikePriceDeterminationMethod() StrikePriceDeterminationMethodEnum {
	if x, ok := m.GetStrikePriceDeterminationMethodUnion().(*Instrument_StrikePriceDeterminationMethod); ok {
		return x.StrikePriceDeterminationMethod
	}
	return StrikePriceDeterminationMethodEnum_STRIKE_PRICE_DETERMINATION_METHOD_UNSPECIFIED
}

func (m *Instrument) GetStrikePriceDeterminationMethodReserved100Plus() uint32 {
	if x, ok := m.GetStrikePriceDeterminationMethodUnion().(*Instrument_StrikePriceDeterminationMethodReserved100Plus); ok {
		return x.StrikePriceDeterminationMethodReserved100Plus
	}
	return 0
}

func (m *Instrument) GetUnderlyingPriceDeterminationMethod() UnderlyingPriceDeterminationMethodEnum {
	if m != nil {
		return m.UnderlyingPriceDeterminationMethod
	}
	return UnderlyingPriceDeterminationMethodEnum_UNDERLYING_PRICE_DETERMINATION_METHOD_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Instrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Instrument_CpProgram)(nil),
		(*Instrument_CpProgramReserved100Plus)(nil),
		(*Instrument_FlowScheduleType)(nil),
		(*Instrument_FlowScheduleTypeReserved100Plus)(nil),
		(*Instrument_StrikePriceDeterminationMethod)(nil),
		(*Instrument_StrikePriceDeterminationMethodReserved100Plus)(nil),
	}
}

type InstrumentExtension struct {
	AttrbGrp             []*AttrbGrp      `protobuf:"bytes,1,rep,name=attrb_grp,json=attrbGrp,proto3" json:"attrb_grp,omitempty"`
	DeliveryForm         DeliveryFormEnum `protobuf:"varint,2,opt,name=delivery_form,json=deliveryForm,proto3,enum=Common.DeliveryFormEnum" json:"delivery_form,omitempty"`
	PctAtRisk            *fix.Decimal64       `protobuf:"bytes,3,opt,name=pct_at_risk,json=pctAtRisk,proto3" json:"pct_at_risk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstrumentExtension) Reset()         { *m = InstrumentExtension{} }
func (m *InstrumentExtension) String() string { return proto.CompactTextString(m) }
func (*InstrumentExtension) ProtoMessage()    {}
func (*InstrumentExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

func (m *InstrumentExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentExtension.Unmarshal(m, b)
}
func (m *InstrumentExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentExtension.Marshal(b, m, deterministic)
}
func (m *InstrumentExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentExtension.Merge(m, src)
}
func (m *InstrumentExtension) XXX_Size() int {
	return xxx_messageInfo_InstrumentExtension.Size(m)
}
func (m *InstrumentExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentExtension.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentExtension proto.InternalMessageInfo

func (m *InstrumentExtension) GetAttrbGrp() []*AttrbGrp {
	if m != nil {
		return m.AttrbGrp
	}
	return nil
}

func (m *InstrumentExtension) GetDeliveryForm() DeliveryFormEnum {
	if m != nil {
		return m.DeliveryForm
	}
	return DeliveryFormEnum_DELIVERY_FORM_UNSPECIFIED
}

func (m *InstrumentExtension) GetPctAtRisk() *fix.Decimal64 {
	if m != nil {
		return m.PctAtRisk
	}
	return nil
}

type InstrumentLeg struct {
	EncodedLegIssuer              string                        `protobuf:"bytes,1,opt,name=encoded_leg_issuer,json=encodedLegIssuer,proto3" json:"encoded_leg_issuer,omitempty"`
	EncodedLegIssuerLen           int64                         `protobuf:"fixed64,2,opt,name=encoded_leg_issuer_len,json=encodedLegIssuerLen,proto3" json:"encoded_leg_issuer_len,omitempty"`
	EncodedLegSecurityDesc        string                        `protobuf:"bytes,3,opt,name=encoded_leg_security_desc,json=encodedLegSecurityDesc,proto3" json:"encoded_leg_security_desc,omitempty"`
	EncodedLegSecurityDescLen     int64                         `protobuf:"fixed64,4,opt,name=encoded_leg_security_desc_len,json=encodedLegSecurityDescLen,proto3" json:"encoded_leg_security_desc_len,omitempty"`
	LegCfiCode                    string                        `protobuf:"bytes,5,opt,name=leg_cfi_code,json=legCfiCode,proto3" json:"leg_cfi_code,omitempty"`
	LegContractMultiplier         *fix.Decimal64                    `protobuf:"bytes,6,opt,name=leg_contract_multiplier,json=legContractMultiplier,proto3" json:"leg_contract_multiplier,omitempty"`
	LegCountryOfIssue             string                        `protobuf:"bytes,7,opt,name=leg_country_of_issue,json=legCountryOfIssue,proto3" json:"leg_country_of_issue,omitempty"`
	LegCouponPaymentDate          int32                         `protobuf:"fixed32,8,opt,name=leg_coupon_payment_date,json=legCouponPaymentDate,proto3" json:"leg_coupon_payment_date,omitempty"`
	LegCouponRate                 *fix.Decimal64                    `protobuf:"bytes,9,opt,name=leg_coupon_rate,json=legCouponRate,proto3" json:"leg_coupon_rate,omitempty"`
	LegCreditRating               string                        `protobuf:"bytes,10,opt,name=leg_credit_rating,json=legCreditRating,proto3" json:"leg_credit_rating,omitempty"`
	LegFactor                     *fix.Decimal64                    `protobuf:"bytes,11,opt,name=leg_factor,json=legFactor,proto3" json:"leg_factor,omitempty"`
	LegInstrRegistry              string                        `protobuf:"bytes,12,opt,name=leg_instr_registry,json=legInstrRegistry,proto3" json:"leg_instr_registry,omitempty"`
	LegIssueDate                  int32                         `protobuf:"fixed32,13,opt,name=leg_issue_date,json=legIssueDate,proto3" json:"leg_issue_date,omitempty"`
	LegIssuer                     string                        `protobuf:"bytes,14,opt,name=leg_issuer,json=legIssuer,proto3" json:"leg_issuer,omitempty"`
	LegLocaleOfIssue              string                        `protobuf:"bytes,15,opt,name=leg_locale_of_issue,json=legLocaleOfIssue,proto3" json:"leg_locale_of_issue,omitempty"`
	LegMaturityDate               int32                         `protobuf:"fixed32,16,opt,name=leg_maturity_date,json=legMaturityDate,proto3" json:"leg_maturity_date,omitempty"`
	LegMaturityMonthYear          int32                         `protobuf:"fixed32,17,opt,name=leg_maturity_month_year,json=legMaturityMonthYear,proto3" json:"leg_maturity_month_year,omitempty"`
	LegOptAttribute               []byte                        `protobuf:"bytes,18,opt,name=leg_opt_attribute,json=legOptAttribute,proto3" json:"leg_opt_attribute,omitempty"`
	LegProduct                    LegProductEnum                `protobuf:"varint,19,opt,name=leg_product,json=legProduct,proto3,enum=Common.LegProductEnum" json:"leg_product,omitempty"`
	LegRatioQty                   *fix.Decimal64                    `protobuf:"bytes,20,opt,name=leg_ratio_qty,json=legRatioQty,proto3" json:"leg_ratio_qty,omitempty"`
	LegRedemptionDate             int32                         `protobuf:"fixed32,21,opt,name=leg_redemption_date,json=legRedemptionDate,proto3" json:"leg_redemption_date,omitempty"`
	LegRepoCollateralSecurityType string                        `protobuf:"bytes,22,opt,name=leg_repo_collateral_security_type,json=legRepoCollateralSecurityType,proto3" json:"leg_repo_collateral_security_type,omitempty"`
	LegRepurchaseRate             *fix.Decimal64                    `protobuf:"bytes,23,opt,name=leg_repurchase_rate,json=legRepurchaseRate,proto3" json:"leg_repurchase_rate,omitempty"`
	LegRepurchaseTerm             int64                         `protobuf:"fixed64,24,opt,name=leg_repurchase_term,json=legRepurchaseTerm,proto3" json:"leg_repurchase_term,omitempty"`
	LegSecurityDesc               string                        `protobuf:"bytes,25,opt,name=leg_security_desc,json=legSecurityDesc,proto3" json:"leg_security_desc,omitempty"`
	LegSecurityExchange           string                        `protobuf:"bytes,26,opt,name=leg_security_exchange,json=legSecurityExchange,proto3" json:"leg_security_exchange,omitempty"`
	LegSecurityId                 string                        `protobuf:"bytes,27,opt,name=leg_security_id,json=legSecurityId,proto3" json:"leg_security_id,omitempty"`
	LegSecurityIdSource           LegSecurityIDSourceEnum       `protobuf:"varint,28,opt,name=leg_security_id_source,json=legSecurityIdSource,proto3,enum=Common.LegSecurityIDSourceEnum" json:"leg_security_id_source,omitempty"`
	LegSecurityType               LegSecurityTypeEnum           `protobuf:"varint,29,opt,name=leg_security_type,json=legSecurityType,proto3,enum=Common.LegSecurityTypeEnum" json:"leg_security_type,omitempty"`
	LegSide                       LegSideEnum                   `protobuf:"varint,30,opt,name=leg_side,json=legSide,proto3,enum=Common.LegSideEnum" json:"leg_side,omitempty"`
	LegStateOrProvinceOfIssue     string                        `protobuf:"bytes,31,opt,name=leg_state_or_province_of_issue,json=legStateOrProvinceOfIssue,proto3" json:"leg_state_or_province_of_issue,omitempty"`
	LegStrikePrice                *fix.Decimal64                    `protobuf:"bytes,32,opt,name=leg_strike_price,json=legStrikePrice,proto3" json:"leg_strike_price,omitempty"`
	LegSymbol                     string                        `protobuf:"bytes,33,opt,name=leg_symbol,json=legSymbol,proto3" json:"leg_symbol,omitempty"`
	LegSymbolSfx                  LegSymbolSfxEnum              `protobuf:"varint,34,opt,name=leg_symbol_sfx,json=legSymbolSfx,proto3,enum=Common.LegSymbolSfxEnum" json:"leg_symbol_sfx,omitempty"`
	LegContractSettlMonth         int32                         `protobuf:"fixed32,35,opt,name=leg_contract_settl_month,json=legContractSettlMonth,proto3" json:"leg_contract_settl_month,omitempty"`
	LegCurrency                   string                        `protobuf:"bytes,36,opt,name=leg_currency,json=legCurrency,proto3" json:"leg_currency,omitempty"`
	LegDatedDate                  int32                         `protobuf:"fixed32,37,opt,name=leg_dated_date,json=legDatedDate,proto3" json:"leg_dated_date,omitempty"`
	LegInterestAccrualDate        int32                         `protobuf:"fixed32,38,opt,name=leg_interest_accrual_date,json=legInterestAccrualDate,proto3" json:"leg_interest_accrual_date,omitempty"`
	LegOptionRatio                *fix.Decimal64                    `protobuf:"bytes,39,opt,name=leg_option_ratio,json=legOptionRatio,proto3" json:"leg_option_ratio,omitempty"`
	LegPool                       string                        `protobuf:"bytes,40,opt,name=leg_pool,json=legPool,proto3" json:"leg_pool,omitempty"`
	LegPrice                      *fix.Decimal64                    `protobuf:"bytes,41,opt,name=leg_price,json=legPrice,proto3" json:"leg_price,omitempty"`
	LegSecAltIdGrp                []*LegSecAltIDGrp             `protobuf:"bytes,42,rep,name=leg_sec_alt_id_grp,json=legSecAltIdGrp,proto3" json:"leg_sec_alt_id_grp,omitempty"`
	LegSecuritySubType            string                        `protobuf:"bytes,43,opt,name=leg_security_sub_type,json=legSecuritySubType,proto3" json:"leg_security_sub_type,omitempty"`
	LegStrikeCurrency             string                        `protobuf:"bytes,44,opt,name=leg_strike_currency,json=legStrikeCurrency,proto3" json:"leg_strike_currency,omitempty"`
	LegTimeUnit                   LegTimeUnitEnum               `protobuf:"varint,45,opt,name=leg_time_unit,json=legTimeUnit,proto3,enum=Common.LegTimeUnitEnum" json:"leg_time_unit,omitempty"`
	LegUnitOfMeasure              LegUnitOfMeasureEnum          `protobuf:"varint,46,opt,name=leg_unit_of_measure,json=legUnitOfMeasure,proto3,enum=Common.LegUnitOfMeasureEnum" json:"leg_unit_of_measure,omitempty"`
	LegExerciseStyle              LegExerciseStyleEnum          `protobuf:"varint,47,opt,name=leg_exercise_style,json=legExerciseStyle,proto3,enum=Common.LegExerciseStyleEnum" json:"leg_exercise_style,omitempty"`
	LegMaturityTime               *fix.LocalTimeOnly                `protobuf:"bytes,48,opt,name=leg_maturity_time,json=legMaturityTime,proto3" json:"leg_maturity_time,omitempty"`
	LegPriceUnitOfMeasure         LegPriceUnitOfMeasureEnum     `protobuf:"varint,49,opt,name=leg_price_unit_of_measure,json=legPriceUnitOfMeasure,proto3,enum=Common.LegPriceUnitOfMeasureEnum" json:"leg_price_unit_of_measure,omitempty"`
	LegPriceUnitOfMeasureQty      *fix.Decimal64                    `protobuf:"bytes,50,opt,name=leg_price_unit_of_measure_qty,json=legPriceUnitOfMeasureQty,proto3" json:"leg_price_unit_of_measure_qty,omitempty"`
	LegPutOrCall                  int64                         `protobuf:"fixed64,51,opt,name=leg_put_or_call,json=legPutOrCall,proto3" json:"leg_put_or_call,omitempty"`
	LegUnitOfMeasureQty           *fix.Decimal64                    `protobuf:"bytes,52,opt,name=leg_unit_of_measure_qty,json=legUnitOfMeasureQty,proto3" json:"leg_unit_of_measure_qty,omitempty"`
	LegContractMultiplierUnit     LegContractMultiplierUnitEnum `protobuf:"varint,53,opt,name=leg_contract_multiplier_unit,json=legContractMultiplierUnit,proto3,enum=Common.LegContractMultiplierUnitEnum" json:"leg_contract_multiplier_unit,omitempty"`
	// Types that are valid to be assigned to LegFlowScheduleTypeUnion:
	//	*InstrumentLeg_LegFlowScheduleType
	//	*InstrumentLeg_LegFlowScheduleTypeReserved100Plus
	LegFlowScheduleTypeUnion isInstrumentLeg_LegFlowScheduleTypeUnion `protobuf_oneof:"leg_flow_schedule_type_union"`
	XXX_NoUnkeyedLiteral     struct{}                                 `json:"-"`
	XXX_unrecognized         []byte                                   `json:"-"`
	XXX_sizecache            int32                                    `json:"-"`
}

func (m *InstrumentLeg) Reset()         { *m = InstrumentLeg{} }
func (m *InstrumentLeg) String() string { return proto.CompactTextString(m) }
func (*InstrumentLeg) ProtoMessage()    {}
func (*InstrumentLeg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

func (m *InstrumentLeg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentLeg.Unmarshal(m, b)
}
func (m *InstrumentLeg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentLeg.Marshal(b, m, deterministic)
}
func (m *InstrumentLeg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentLeg.Merge(m, src)
}
func (m *InstrumentLeg) XXX_Size() int {
	return xxx_messageInfo_InstrumentLeg.Size(m)
}
func (m *InstrumentLeg) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentLeg.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentLeg proto.InternalMessageInfo

func (m *InstrumentLeg) GetEncodedLegIssuer() string {
	if m != nil {
		return m.EncodedLegIssuer
	}
	return ""
}

func (m *InstrumentLeg) GetEncodedLegIssuerLen() int64 {
	if m != nil {
		return m.EncodedLegIssuerLen
	}
	return 0
}

func (m *InstrumentLeg) GetEncodedLegSecurityDesc() string {
	if m != nil {
		return m.EncodedLegSecurityDesc
	}
	return ""
}

func (m *InstrumentLeg) GetEncodedLegSecurityDescLen() int64 {
	if m != nil {
		return m.EncodedLegSecurityDescLen
	}
	return 0
}

func (m *InstrumentLeg) GetLegCfiCode() string {
	if m != nil {
		return m.LegCfiCode
	}
	return ""
}

func (m *InstrumentLeg) GetLegContractMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.LegContractMultiplier
	}
	return nil
}

func (m *InstrumentLeg) GetLegCountryOfIssue() string {
	if m != nil {
		return m.LegCountryOfIssue
	}
	return ""
}

func (m *InstrumentLeg) GetLegCouponPaymentDate() int32 {
	if m != nil {
		return m.LegCouponPaymentDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegCouponRate() *fix.Decimal64 {
	if m != nil {
		return m.LegCouponRate
	}
	return nil
}

func (m *InstrumentLeg) GetLegCreditRating() string {
	if m != nil {
		return m.LegCreditRating
	}
	return ""
}

func (m *InstrumentLeg) GetLegFactor() *fix.Decimal64 {
	if m != nil {
		return m.LegFactor
	}
	return nil
}

func (m *InstrumentLeg) GetLegInstrRegistry() string {
	if m != nil {
		return m.LegInstrRegistry
	}
	return ""
}

func (m *InstrumentLeg) GetLegIssueDate() int32 {
	if m != nil {
		return m.LegIssueDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegIssuer() string {
	if m != nil {
		return m.LegIssuer
	}
	return ""
}

func (m *InstrumentLeg) GetLegLocaleOfIssue() string {
	if m != nil {
		return m.LegLocaleOfIssue
	}
	return ""
}

func (m *InstrumentLeg) GetLegMaturityDate() int32 {
	if m != nil {
		return m.LegMaturityDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegMaturityMonthYear() int32 {
	if m != nil {
		return m.LegMaturityMonthYear
	}
	return 0
}

func (m *InstrumentLeg) GetLegOptAttribute() []byte {
	if m != nil {
		return m.LegOptAttribute
	}
	return nil
}

func (m *InstrumentLeg) GetLegProduct() LegProductEnum {
	if m != nil {
		return m.LegProduct
	}
	return LegProductEnum_LEG_PRODUCT_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegRatioQty() *fix.Decimal64 {
	if m != nil {
		return m.LegRatioQty
	}
	return nil
}

func (m *InstrumentLeg) GetLegRedemptionDate() int32 {
	if m != nil {
		return m.LegRedemptionDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegRepoCollateralSecurityType() string {
	if m != nil {
		return m.LegRepoCollateralSecurityType
	}
	return ""
}

func (m *InstrumentLeg) GetLegRepurchaseRate() *fix.Decimal64 {
	if m != nil {
		return m.LegRepurchaseRate
	}
	return nil
}

func (m *InstrumentLeg) GetLegRepurchaseTerm() int64 {
	if m != nil {
		return m.LegRepurchaseTerm
	}
	return 0
}

func (m *InstrumentLeg) GetLegSecurityDesc() string {
	if m != nil {
		return m.LegSecurityDesc
	}
	return ""
}

func (m *InstrumentLeg) GetLegSecurityExchange() string {
	if m != nil {
		return m.LegSecurityExchange
	}
	return ""
}

func (m *InstrumentLeg) GetLegSecurityId() string {
	if m != nil {
		return m.LegSecurityId
	}
	return ""
}

func (m *InstrumentLeg) GetLegSecurityIdSource() LegSecurityIDSourceEnum {
	if m != nil {
		return m.LegSecurityIdSource
	}
	return LegSecurityIDSourceEnum_LEG_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegSecurityType() LegSecurityTypeEnum {
	if m != nil {
		return m.LegSecurityType
	}
	return LegSecurityTypeEnum_LEG_SECURITY_TYPE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegSide() LegSideEnum {
	if m != nil {
		return m.LegSide
	}
	return LegSideEnum_LEG_SIDE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegStateOrProvinceOfIssue() string {
	if m != nil {
		return m.LegStateOrProvinceOfIssue
	}
	return ""
}

func (m *InstrumentLeg) GetLegStrikePrice() *fix.Decimal64 {
	if m != nil {
		return m.LegStrikePrice
	}
	return nil
}

func (m *InstrumentLeg) GetLegSymbol() string {
	if m != nil {
		return m.LegSymbol
	}
	return ""
}

func (m *InstrumentLeg) GetLegSymbolSfx() LegSymbolSfxEnum {
	if m != nil {
		return m.LegSymbolSfx
	}
	return LegSymbolSfxEnum_LEG_SYMBOL_SFX_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegContractSettlMonth() int32 {
	if m != nil {
		return m.LegContractSettlMonth
	}
	return 0
}

func (m *InstrumentLeg) GetLegCurrency() string {
	if m != nil {
		return m.LegCurrency
	}
	return ""
}

func (m *InstrumentLeg) GetLegDatedDate() int32 {
	if m != nil {
		return m.LegDatedDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegInterestAccrualDate() int32 {
	if m != nil {
		return m.LegInterestAccrualDate
	}
	return 0
}

func (m *InstrumentLeg) GetLegOptionRatio() *fix.Decimal64 {
	if m != nil {
		return m.LegOptionRatio
	}
	return nil
}

func (m *InstrumentLeg) GetLegPool() string {
	if m != nil {
		return m.LegPool
	}
	return ""
}

func (m *InstrumentLeg) GetLegPrice() *fix.Decimal64 {
	if m != nil {
		return m.LegPrice
	}
	return nil
}

func (m *InstrumentLeg) GetLegSecAltIdGrp() []*LegSecAltIDGrp {
	if m != nil {
		return m.LegSecAltIdGrp
	}
	return nil
}

func (m *InstrumentLeg) GetLegSecuritySubType() string {
	if m != nil {
		return m.LegSecuritySubType
	}
	return ""
}

func (m *InstrumentLeg) GetLegStrikeCurrency() string {
	if m != nil {
		return m.LegStrikeCurrency
	}
	return ""
}

func (m *InstrumentLeg) GetLegTimeUnit() LegTimeUnitEnum {
	if m != nil {
		return m.LegTimeUnit
	}
	return LegTimeUnitEnum_LEG_TIME_UNIT_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegUnitOfMeasure() LegUnitOfMeasureEnum {
	if m != nil {
		return m.LegUnitOfMeasure
	}
	return LegUnitOfMeasureEnum_LEG_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegExerciseStyle() LegExerciseStyleEnum {
	if m != nil {
		return m.LegExerciseStyle
	}
	return LegExerciseStyleEnum_LEG_EXERCISE_STYLE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegMaturityTime() *fix.LocalTimeOnly {
	if m != nil {
		return m.LegMaturityTime
	}
	return nil
}

func (m *InstrumentLeg) GetLegPriceUnitOfMeasure() LegPriceUnitOfMeasureEnum {
	if m != nil {
		return m.LegPriceUnitOfMeasure
	}
	return LegPriceUnitOfMeasureEnum_LEG_PRICE_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegPriceUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.LegPriceUnitOfMeasureQty
	}
	return nil
}

func (m *InstrumentLeg) GetLegPutOrCall() int64 {
	if m != nil {
		return m.LegPutOrCall
	}
	return 0
}

func (m *InstrumentLeg) GetLegUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.LegUnitOfMeasureQty
	}
	return nil
}

func (m *InstrumentLeg) GetLegContractMultiplierUnit() LegContractMultiplierUnitEnum {
	if m != nil {
		return m.LegContractMultiplierUnit
	}
	return LegContractMultiplierUnitEnum_LEG_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED
}

type isInstrumentLeg_LegFlowScheduleTypeUnion interface {
	isInstrumentLeg_LegFlowScheduleTypeUnion()
}

type InstrumentLeg_LegFlowScheduleType struct {
	LegFlowScheduleType LegFlowScheduleTypeEnum `protobuf:"varint,54,opt,name=leg_flow_schedule_type,json=legFlowScheduleType,proto3,enum=Common.LegFlowScheduleTypeEnum,oneof"`
}

type InstrumentLeg_LegFlowScheduleTypeReserved100Plus struct {
	LegFlowScheduleTypeReserved100Plus uint32 `protobuf:"fixed32,55,opt,name=leg_flow_schedule_type_reserved100plus,json=legFlowScheduleTypeReserved100plus,proto3,oneof"`
}

func (*InstrumentLeg_LegFlowScheduleType) isInstrumentLeg_LegFlowScheduleTypeUnion() {}

func (*InstrumentLeg_LegFlowScheduleTypeReserved100Plus) isInstrumentLeg_LegFlowScheduleTypeUnion() {}

func (m *InstrumentLeg) GetLegFlowScheduleTypeUnion() isInstrumentLeg_LegFlowScheduleTypeUnion {
	if m != nil {
		return m.LegFlowScheduleTypeUnion
	}
	return nil
}

func (m *InstrumentLeg) GetLegFlowScheduleType() LegFlowScheduleTypeEnum {
	if x, ok := m.GetLegFlowScheduleTypeUnion().(*InstrumentLeg_LegFlowScheduleType); ok {
		return x.LegFlowScheduleType
	}
	return LegFlowScheduleTypeEnum_LEG_FLOW_SCHEDULE_TYPE_UNSPECIFIED
}

func (m *InstrumentLeg) GetLegFlowScheduleTypeReserved100Plus() uint32 {
	if x, ok := m.GetLegFlowScheduleTypeUnion().(*InstrumentLeg_LegFlowScheduleTypeReserved100Plus); ok {
		return x.LegFlowScheduleTypeReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstrumentLeg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstrumentLeg_LegFlowScheduleType)(nil),
		(*InstrumentLeg_LegFlowScheduleTypeReserved100Plus)(nil),
	}
}

type LegBenchmarkCurveData struct {
	LegBenchmarkCurveCurrency string                    `protobuf:"bytes,1,opt,name=leg_benchmark_curve_currency,json=legBenchmarkCurveCurrency,proto3" json:"leg_benchmark_curve_currency,omitempty"`
	LegBenchmarkCurveName     LegBenchmarkCurveNameEnum `protobuf:"varint,2,opt,name=leg_benchmark_curve_name,json=legBenchmarkCurveName,proto3,enum=Common.LegBenchmarkCurveNameEnum" json:"leg_benchmark_curve_name,omitempty"`
	LegBenchmarkCurvePoint    string                    `protobuf:"bytes,3,opt,name=leg_benchmark_curve_point,json=legBenchmarkCurvePoint,proto3" json:"leg_benchmark_curve_point,omitempty"`
	LegBenchmarkPrice         *fix.Decimal64                `protobuf:"bytes,4,opt,name=leg_benchmark_price,json=legBenchmarkPrice,proto3" json:"leg_benchmark_price,omitempty"`
	LegBenchmarkPriceType     int64                     `protobuf:"fixed64,5,opt,name=leg_benchmark_price_type,json=legBenchmarkPriceType,proto3" json:"leg_benchmark_price_type,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                  `json:"-"`
	XXX_unrecognized          []byte                    `json:"-"`
	XXX_sizecache             int32                     `json:"-"`
}

func (m *LegBenchmarkCurveData) Reset()         { *m = LegBenchmarkCurveData{} }
func (m *LegBenchmarkCurveData) String() string { return proto.CompactTextString(m) }
func (*LegBenchmarkCurveData) ProtoMessage()    {}
func (*LegBenchmarkCurveData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

func (m *LegBenchmarkCurveData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegBenchmarkCurveData.Unmarshal(m, b)
}
func (m *LegBenchmarkCurveData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegBenchmarkCurveData.Marshal(b, m, deterministic)
}
func (m *LegBenchmarkCurveData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegBenchmarkCurveData.Merge(m, src)
}
func (m *LegBenchmarkCurveData) XXX_Size() int {
	return xxx_messageInfo_LegBenchmarkCurveData.Size(m)
}
func (m *LegBenchmarkCurveData) XXX_DiscardUnknown() {
	xxx_messageInfo_LegBenchmarkCurveData.DiscardUnknown(m)
}

var xxx_messageInfo_LegBenchmarkCurveData proto.InternalMessageInfo

func (m *LegBenchmarkCurveData) GetLegBenchmarkCurveCurrency() string {
	if m != nil {
		return m.LegBenchmarkCurveCurrency
	}
	return ""
}

func (m *LegBenchmarkCurveData) GetLegBenchmarkCurveName() LegBenchmarkCurveNameEnum {
	if m != nil {
		return m.LegBenchmarkCurveName
	}
	return LegBenchmarkCurveNameEnum_LEG_BENCHMARK_CURVE_NAME_UNSPECIFIED
}

func (m *LegBenchmarkCurveData) GetLegBenchmarkCurvePoint() string {
	if m != nil {
		return m.LegBenchmarkCurvePoint
	}
	return ""
}

func (m *LegBenchmarkCurveData) GetLegBenchmarkPrice() *fix.Decimal64 {
	if m != nil {
		return m.LegBenchmarkPrice
	}
	return nil
}

func (m *LegBenchmarkCurveData) GetLegBenchmarkPriceType() int64 {
	if m != nil {
		return m.LegBenchmarkPriceType
	}
	return 0
}

type LegStipulations struct {
	LegStipulationType   LegStipulationTypeEnum `protobuf:"varint,1,opt,name=leg_stipulation_type,json=legStipulationType,proto3,enum=Common.LegStipulationTypeEnum" json:"leg_stipulation_type,omitempty"`
	LegStipulationValue  string                 `protobuf:"bytes,2,opt,name=leg_stipulation_value,json=legStipulationValue,proto3" json:"leg_stipulation_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LegStipulations) Reset()         { *m = LegStipulations{} }
func (m *LegStipulations) String() string { return proto.CompactTextString(m) }
func (*LegStipulations) ProtoMessage()    {}
func (*LegStipulations) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

func (m *LegStipulations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegStipulations.Unmarshal(m, b)
}
func (m *LegStipulations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegStipulations.Marshal(b, m, deterministic)
}
func (m *LegStipulations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegStipulations.Merge(m, src)
}
func (m *LegStipulations) XXX_Size() int {
	return xxx_messageInfo_LegStipulations.Size(m)
}
func (m *LegStipulations) XXX_DiscardUnknown() {
	xxx_messageInfo_LegStipulations.DiscardUnknown(m)
}

var xxx_messageInfo_LegStipulations proto.InternalMessageInfo

func (m *LegStipulations) GetLegStipulationType() LegStipulationTypeEnum {
	if m != nil {
		return m.LegStipulationType
	}
	return LegStipulationTypeEnum_LEG_STIPULATION_TYPE_UNSPECIFIED
}

func (m *LegStipulations) GetLegStipulationValue() string {
	if m != nil {
		return m.LegStipulationValue
	}
	return ""
}

type NestedParties struct {
	NestedPartyId        string                  `protobuf:"bytes,1,opt,name=nested_party_id,json=nestedPartyId,proto3" json:"nested_party_id,omitempty"`
	NestedPartyIdSource  NestedPartyIDSourceEnum `protobuf:"varint,2,opt,name=nested_party_id_source,json=nestedPartyIdSource,proto3,enum=Common.NestedPartyIDSourceEnum" json:"nested_party_id_source,omitempty"`
	NestedPartyRole      NestedPartyRoleEnum     `protobuf:"varint,3,opt,name=nested_party_role,json=nestedPartyRole,proto3,enum=Common.NestedPartyRoleEnum" json:"nested_party_role,omitempty"`
	NstdPtysSubGrp       []*NstdPtysSubGrp       `protobuf:"bytes,4,rep,name=nstd_ptys_sub_grp,json=nstdPtysSubGrp,proto3" json:"nstd_ptys_sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NestedParties) Reset()         { *m = NestedParties{} }
func (m *NestedParties) String() string { return proto.CompactTextString(m) }
func (*NestedParties) ProtoMessage()    {}
func (*NestedParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

func (m *NestedParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedParties.Unmarshal(m, b)
}
func (m *NestedParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedParties.Marshal(b, m, deterministic)
}
func (m *NestedParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedParties.Merge(m, src)
}
func (m *NestedParties) XXX_Size() int {
	return xxx_messageInfo_NestedParties.Size(m)
}
func (m *NestedParties) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedParties.DiscardUnknown(m)
}

var xxx_messageInfo_NestedParties proto.InternalMessageInfo

func (m *NestedParties) GetNestedPartyId() string {
	if m != nil {
		return m.NestedPartyId
	}
	return ""
}

func (m *NestedParties) GetNestedPartyIdSource() NestedPartyIDSourceEnum {
	if m != nil {
		return m.NestedPartyIdSource
	}
	return NestedPartyIDSourceEnum_NESTED_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *NestedParties) GetNestedPartyRole() NestedPartyRoleEnum {
	if m != nil {
		return m.NestedPartyRole
	}
	return NestedPartyRoleEnum_NESTED_PARTY_ROLE_UNSPECIFIED
}

func (m *NestedParties) GetNstdPtysSubGrp() []*NstdPtysSubGrp {
	if m != nil {
		return m.NstdPtysSubGrp
	}
	return nil
}

type OrderQtyData struct {
	CashOrderQty         *fix.Decimal64            `protobuf:"bytes,1,opt,name=cash_order_qty,json=cashOrderQty,proto3" json:"cash_order_qty,omitempty"`
	OrderPercent         *fix.Decimal64            `protobuf:"bytes,2,opt,name=order_percent,json=orderPercent,proto3" json:"order_percent,omitempty"`
	OrderQty             *fix.Decimal64            `protobuf:"bytes,3,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	RoundingDirection    RoundingDirectionEnum `protobuf:"varint,4,opt,name=rounding_direction,json=roundingDirection,proto3,enum=Common.RoundingDirectionEnum" json:"rounding_direction,omitempty"`
	RoundingModulus      *fix.Decimal64            `protobuf:"bytes,5,opt,name=rounding_modulus,json=roundingModulus,proto3" json:"rounding_modulus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OrderQtyData) Reset()         { *m = OrderQtyData{} }
func (m *OrderQtyData) String() string { return proto.CompactTextString(m) }
func (*OrderQtyData) ProtoMessage()    {}
func (*OrderQtyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

func (m *OrderQtyData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderQtyData.Unmarshal(m, b)
}
func (m *OrderQtyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderQtyData.Marshal(b, m, deterministic)
}
func (m *OrderQtyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderQtyData.Merge(m, src)
}
func (m *OrderQtyData) XXX_Size() int {
	return xxx_messageInfo_OrderQtyData.Size(m)
}
func (m *OrderQtyData) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderQtyData.DiscardUnknown(m)
}

var xxx_messageInfo_OrderQtyData proto.InternalMessageInfo

func (m *OrderQtyData) GetCashOrderQty() *fix.Decimal64 {
	if m != nil {
		return m.CashOrderQty
	}
	return nil
}

func (m *OrderQtyData) GetOrderPercent() *fix.Decimal64 {
	if m != nil {
		return m.OrderPercent
	}
	return nil
}

func (m *OrderQtyData) GetOrderQty() *fix.Decimal64 {
	if m != nil {
		return m.OrderQty
	}
	return nil
}

func (m *OrderQtyData) GetRoundingDirection() RoundingDirectionEnum {
	if m != nil {
		return m.RoundingDirection
	}
	return RoundingDirectionEnum_ROUNDING_DIRECTION_UNSPECIFIED
}

func (m *OrderQtyData) GetRoundingModulus() *fix.Decimal64 {
	if m != nil {
		return m.RoundingModulus
	}
	return nil
}

type Parties struct {
	PartyId              string            `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyIdSource        PartyIDSourceEnum `protobuf:"varint,2,opt,name=party_id_source,json=partyIdSource,proto3,enum=Common.PartyIDSourceEnum" json:"party_id_source,omitempty"`
	PartyRole            PartyRoleEnum     `protobuf:"varint,3,opt,name=party_role,json=partyRole,proto3,enum=Common.PartyRoleEnum" json:"party_role,omitempty"`
	PtysSubGrp           []*PtysSubGrp     `protobuf:"bytes,4,rep,name=ptys_sub_grp,json=ptysSubGrp,proto3" json:"ptys_sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Parties) Reset()         { *m = Parties{} }
func (m *Parties) String() string { return proto.CompactTextString(m) }
func (*Parties) ProtoMessage()    {}
func (*Parties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

func (m *Parties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parties.Unmarshal(m, b)
}
func (m *Parties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parties.Marshal(b, m, deterministic)
}
func (m *Parties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parties.Merge(m, src)
}
func (m *Parties) XXX_Size() int {
	return xxx_messageInfo_Parties.Size(m)
}
func (m *Parties) XXX_DiscardUnknown() {
	xxx_messageInfo_Parties.DiscardUnknown(m)
}

var xxx_messageInfo_Parties proto.InternalMessageInfo

func (m *Parties) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Parties) GetPartyIdSource() PartyIDSourceEnum {
	if m != nil {
		return m.PartyIdSource
	}
	return PartyIDSourceEnum_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *Parties) GetPartyRole() PartyRoleEnum {
	if m != nil {
		return m.PartyRole
	}
	return PartyRoleEnum_PARTY_ROLE_UNSPECIFIED
}

func (m *Parties) GetPtysSubGrp() []*PtysSubGrp {
	if m != nil {
		return m.PtysSubGrp
	}
	return nil
}

type PegInstructions struct {
	PegLimitType         PegLimitTypeEnum        `protobuf:"varint,1,opt,name=peg_limit_type,json=pegLimitType,proto3,enum=Common.PegLimitTypeEnum" json:"peg_limit_type,omitempty"`
	PegMoveType          PegMoveTypeEnum         `protobuf:"varint,2,opt,name=peg_move_type,json=pegMoveType,proto3,enum=Common.PegMoveTypeEnum" json:"peg_move_type,omitempty"`
	PegOffsetType        PegOffsetTypeEnum       `protobuf:"varint,3,opt,name=peg_offset_type,json=pegOffsetType,proto3,enum=Common.PegOffsetTypeEnum" json:"peg_offset_type,omitempty"`
	PegOffsetValue       *fix.Decimal64              `protobuf:"bytes,4,opt,name=peg_offset_value,json=pegOffsetValue,proto3" json:"peg_offset_value,omitempty"`
	PegPriceType         PegPriceTypeEnum        `protobuf:"varint,5,opt,name=peg_price_type,json=pegPriceType,proto3,enum=Common.PegPriceTypeEnum" json:"peg_price_type,omitempty"`
	PegRoundDirection    PegRoundDirectionEnum   `protobuf:"varint,6,opt,name=peg_round_direction,json=pegRoundDirection,proto3,enum=Common.PegRoundDirectionEnum" json:"peg_round_direction,omitempty"`
	PegScope             PegScopeEnum            `protobuf:"varint,7,opt,name=peg_scope,json=pegScope,proto3,enum=Common.PegScopeEnum" json:"peg_scope,omitempty"`
	PegSecurityDesc      string                  `protobuf:"bytes,8,opt,name=peg_security_desc,json=pegSecurityDesc,proto3" json:"peg_security_desc,omitempty"`
	PegSecurityId        string                  `protobuf:"bytes,9,opt,name=peg_security_id,json=pegSecurityId,proto3" json:"peg_security_id,omitempty"`
	PegSecurityIdSource  PegSecurityIDSourceEnum `protobuf:"varint,10,opt,name=peg_security_id_source,json=pegSecurityIdSource,proto3,enum=Common.PegSecurityIDSourceEnum" json:"peg_security_id_source,omitempty"`
	PegSymbol            string                  `protobuf:"bytes,11,opt,name=peg_symbol,json=pegSymbol,proto3" json:"peg_symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PegInstructions) Reset()         { *m = PegInstructions{} }
func (m *PegInstructions) String() string { return proto.CompactTextString(m) }
func (*PegInstructions) ProtoMessage()    {}
func (*PegInstructions) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

func (m *PegInstructions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PegInstructions.Unmarshal(m, b)
}
func (m *PegInstructions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PegInstructions.Marshal(b, m, deterministic)
}
func (m *PegInstructions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PegInstructions.Merge(m, src)
}
func (m *PegInstructions) XXX_Size() int {
	return xxx_messageInfo_PegInstructions.Size(m)
}
func (m *PegInstructions) XXX_DiscardUnknown() {
	xxx_messageInfo_PegInstructions.DiscardUnknown(m)
}

var xxx_messageInfo_PegInstructions proto.InternalMessageInfo

func (m *PegInstructions) GetPegLimitType() PegLimitTypeEnum {
	if m != nil {
		return m.PegLimitType
	}
	return PegLimitTypeEnum_PEG_LIMIT_TYPE_UNSPECIFIED
}

func (m *PegInstructions) GetPegMoveType() PegMoveTypeEnum {
	if m != nil {
		return m.PegMoveType
	}
	return PegMoveTypeEnum_PEG_MOVE_TYPE_UNSPECIFIED
}

func (m *PegInstructions) GetPegOffsetType() PegOffsetTypeEnum {
	if m != nil {
		return m.PegOffsetType
	}
	return PegOffsetTypeEnum_PEG_OFFSET_TYPE_UNSPECIFIED
}

func (m *PegInstructions) GetPegOffsetValue() *fix.Decimal64 {
	if m != nil {
		return m.PegOffsetValue
	}
	return nil
}

func (m *PegInstructions) GetPegPriceType() PegPriceTypeEnum {
	if m != nil {
		return m.PegPriceType
	}
	return PegPriceTypeEnum_PEG_PRICE_TYPE_UNSPECIFIED
}

func (m *PegInstructions) GetPegRoundDirection() PegRoundDirectionEnum {
	if m != nil {
		return m.PegRoundDirection
	}
	return PegRoundDirectionEnum_PEG_ROUND_DIRECTION_UNSPECIFIED
}

func (m *PegInstructions) GetPegScope() PegScopeEnum {
	if m != nil {
		return m.PegScope
	}
	return PegScopeEnum_PEG_SCOPE_UNSPECIFIED
}

func (m *PegInstructions) GetPegSecurityDesc() string {
	if m != nil {
		return m.PegSecurityDesc
	}
	return ""
}

func (m *PegInstructions) GetPegSecurityId() string {
	if m != nil {
		return m.PegSecurityId
	}
	return ""
}

func (m *PegInstructions) GetPegSecurityIdSource() PegSecurityIDSourceEnum {
	if m != nil {
		return m.PegSecurityIdSource
	}
	return PegSecurityIDSourceEnum_PEG_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *PegInstructions) GetPegSymbol() string {
	if m != nil {
		return m.PegSymbol
	}
	return ""
}

type PositionAmountData struct {
	PosAmt               *fix.Decimal64     `protobuf:"bytes,1,opt,name=pos_amt,json=posAmt,proto3" json:"pos_amt,omitempty"`
	PosAmtType           PosAmtTypeEnum `protobuf:"varint,2,opt,name=pos_amt_type,json=posAmtType,proto3,enum=Common.PosAmtTypeEnum" json:"pos_amt_type,omitempty"`
	PositionCurrency     string         `protobuf:"bytes,3,opt,name=position_currency,json=positionCurrency,proto3" json:"position_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PositionAmountData) Reset()         { *m = PositionAmountData{} }
func (m *PositionAmountData) String() string { return proto.CompactTextString(m) }
func (*PositionAmountData) ProtoMessage()    {}
func (*PositionAmountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}

func (m *PositionAmountData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionAmountData.Unmarshal(m, b)
}
func (m *PositionAmountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionAmountData.Marshal(b, m, deterministic)
}
func (m *PositionAmountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionAmountData.Merge(m, src)
}
func (m *PositionAmountData) XXX_Size() int {
	return xxx_messageInfo_PositionAmountData.Size(m)
}
func (m *PositionAmountData) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionAmountData.DiscardUnknown(m)
}

var xxx_messageInfo_PositionAmountData proto.InternalMessageInfo

func (m *PositionAmountData) GetPosAmt() *fix.Decimal64 {
	if m != nil {
		return m.PosAmt
	}
	return nil
}

func (m *PositionAmountData) GetPosAmtType() PosAmtTypeEnum {
	if m != nil {
		return m.PosAmtType
	}
	return PosAmtTypeEnum_POS_AMT_TYPE_UNSPECIFIED
}

func (m *PositionAmountData) GetPositionCurrency() string {
	if m != nil {
		return m.PositionCurrency
	}
	return ""
}

type PositionQty struct {
	LongQty              *fix.Decimal64       `protobuf:"bytes,1,opt,name=long_qty,json=longQty,proto3" json:"long_qty,omitempty"`
	NestedParties        []*NestedParties `protobuf:"bytes,2,rep,name=nested_parties,json=nestedParties,proto3" json:"nested_parties,omitempty"`
	PosQtyStatus         PosQtyStatusEnum `protobuf:"varint,3,opt,name=pos_qty_status,json=posQtyStatus,proto3,enum=Common.PosQtyStatusEnum" json:"pos_qty_status,omitempty"`
	PosType              PosTypeEnum      `protobuf:"varint,4,opt,name=pos_type,json=posType,proto3,enum=Common.PosTypeEnum" json:"pos_type,omitempty"`
	QuantityDate         int32            `protobuf:"fixed32,5,opt,name=quantity_date,json=quantityDate,proto3" json:"quantity_date,omitempty"`
	ShortQty             *fix.Decimal64       `protobuf:"bytes,6,opt,name=short_qty,json=shortQty,proto3" json:"short_qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PositionQty) Reset()         { *m = PositionQty{} }
func (m *PositionQty) String() string { return proto.CompactTextString(m) }
func (*PositionQty) ProtoMessage()    {}
func (*PositionQty) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}

func (m *PositionQty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionQty.Unmarshal(m, b)
}
func (m *PositionQty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionQty.Marshal(b, m, deterministic)
}
func (m *PositionQty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionQty.Merge(m, src)
}
func (m *PositionQty) XXX_Size() int {
	return xxx_messageInfo_PositionQty.Size(m)
}
func (m *PositionQty) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionQty.DiscardUnknown(m)
}

var xxx_messageInfo_PositionQty proto.InternalMessageInfo

func (m *PositionQty) GetLongQty() *fix.Decimal64 {
	if m != nil {
		return m.LongQty
	}
	return nil
}

func (m *PositionQty) GetNestedParties() []*NestedParties {
	if m != nil {
		return m.NestedParties
	}
	return nil
}

func (m *PositionQty) GetPosQtyStatus() PosQtyStatusEnum {
	if m != nil {
		return m.PosQtyStatus
	}
	return PosQtyStatusEnum_POS_QTY_STATUS_UNSPECIFIED
}

func (m *PositionQty) GetPosType() PosTypeEnum {
	if m != nil {
		return m.PosType
	}
	return PosTypeEnum_POS_TYPE_UNSPECIFIED
}

func (m *PositionQty) GetQuantityDate() int32 {
	if m != nil {
		return m.QuantityDate
	}
	return 0
}

func (m *PositionQty) GetShortQty() *fix.Decimal64 {
	if m != nil {
		return m.ShortQty
	}
	return nil
}

type SettlInstructionsData struct {
	DlvyInstGrp          []*DlvyInstGrp        `protobuf:"bytes,1,rep,name=dlvy_inst_grp,json=dlvyInstGrp,proto3" json:"dlvy_inst_grp,omitempty"`
	SettlDeliveryType    SettlDeliveryTypeEnum `protobuf:"varint,2,opt,name=settl_delivery_type,json=settlDeliveryType,proto3,enum=Common.SettlDeliveryTypeEnum" json:"settl_delivery_type,omitempty"`
	StandInstDbId        string                `protobuf:"bytes,3,opt,name=stand_inst_db_id,json=standInstDbId,proto3" json:"stand_inst_db_id,omitempty"`
	StandInstDbName      string                `protobuf:"bytes,4,opt,name=stand_inst_db_name,json=standInstDbName,proto3" json:"stand_inst_db_name,omitempty"`
	StandInstDbType      StandInstDbTypeEnum   `protobuf:"varint,5,opt,name=stand_inst_db_type,json=standInstDbType,proto3,enum=Common.StandInstDbTypeEnum" json:"stand_inst_db_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SettlInstructionsData) Reset()         { *m = SettlInstructionsData{} }
func (m *SettlInstructionsData) String() string { return proto.CompactTextString(m) }
func (*SettlInstructionsData) ProtoMessage()    {}
func (*SettlInstructionsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}

func (m *SettlInstructionsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlInstructionsData.Unmarshal(m, b)
}
func (m *SettlInstructionsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlInstructionsData.Marshal(b, m, deterministic)
}
func (m *SettlInstructionsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlInstructionsData.Merge(m, src)
}
func (m *SettlInstructionsData) XXX_Size() int {
	return xxx_messageInfo_SettlInstructionsData.Size(m)
}
func (m *SettlInstructionsData) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlInstructionsData.DiscardUnknown(m)
}

var xxx_messageInfo_SettlInstructionsData proto.InternalMessageInfo

func (m *SettlInstructionsData) GetDlvyInstGrp() []*DlvyInstGrp {
	if m != nil {
		return m.DlvyInstGrp
	}
	return nil
}

func (m *SettlInstructionsData) GetSettlDeliveryType() SettlDeliveryTypeEnum {
	if m != nil {
		return m.SettlDeliveryType
	}
	return SettlDeliveryTypeEnum_SETTL_DELIVERY_TYPE_UNSPECIFIED
}

func (m *SettlInstructionsData) GetStandInstDbId() string {
	if m != nil {
		return m.StandInstDbId
	}
	return ""
}

func (m *SettlInstructionsData) GetStandInstDbName() string {
	if m != nil {
		return m.StandInstDbName
	}
	return ""
}

func (m *SettlInstructionsData) GetStandInstDbType() StandInstDbTypeEnum {
	if m != nil {
		return m.StandInstDbType
	}
	return StandInstDbTypeEnum_STAND_INST_DB_TYPE_UNSPECIFIED
}

type SettlParties struct {
	SettlPartyId         string                 `protobuf:"bytes,1,opt,name=settl_party_id,json=settlPartyId,proto3" json:"settl_party_id,omitempty"`
	SettlPartyIdSource   SettlPartyIDSourceEnum `protobuf:"varint,2,opt,name=settl_party_id_source,json=settlPartyIdSource,proto3,enum=Common.SettlPartyIDSourceEnum" json:"settl_party_id_source,omitempty"`
	SettlPartyRole       SettlPartyRoleEnum     `protobuf:"varint,3,opt,name=settl_party_role,json=settlPartyRole,proto3,enum=Common.SettlPartyRoleEnum" json:"settl_party_role,omitempty"`
	SettlPtysSubGrp      []*SettlPtysSubGrp     `protobuf:"bytes,4,rep,name=settl_ptys_sub_grp,json=settlPtysSubGrp,proto3" json:"settl_ptys_sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SettlParties) Reset()         { *m = SettlParties{} }
func (m *SettlParties) String() string { return proto.CompactTextString(m) }
func (*SettlParties) ProtoMessage()    {}
func (*SettlParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}

func (m *SettlParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlParties.Unmarshal(m, b)
}
func (m *SettlParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlParties.Marshal(b, m, deterministic)
}
func (m *SettlParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlParties.Merge(m, src)
}
func (m *SettlParties) XXX_Size() int {
	return xxx_messageInfo_SettlParties.Size(m)
}
func (m *SettlParties) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlParties.DiscardUnknown(m)
}

var xxx_messageInfo_SettlParties proto.InternalMessageInfo

func (m *SettlParties) GetSettlPartyId() string {
	if m != nil {
		return m.SettlPartyId
	}
	return ""
}

func (m *SettlParties) GetSettlPartyIdSource() SettlPartyIDSourceEnum {
	if m != nil {
		return m.SettlPartyIdSource
	}
	return SettlPartyIDSourceEnum_SETTL_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *SettlParties) GetSettlPartyRole() SettlPartyRoleEnum {
	if m != nil {
		return m.SettlPartyRole
	}
	return SettlPartyRoleEnum_SETTL_PARTY_ROLE_UNSPECIFIED
}

func (m *SettlParties) GetSettlPtysSubGrp() []*SettlPtysSubGrp {
	if m != nil {
		return m.SettlPtysSubGrp
	}
	return nil
}

type SpreadOrBenchmarkCurveData struct {
	BenchmarkCurveCurrency    string                        `protobuf:"bytes,1,opt,name=benchmark_curve_currency,json=benchmarkCurveCurrency,proto3" json:"benchmark_curve_currency,omitempty"`
	BenchmarkCurveName        BenchmarkCurveNameEnum        `protobuf:"varint,2,opt,name=benchmark_curve_name,json=benchmarkCurveName,proto3,enum=Common.BenchmarkCurveNameEnum" json:"benchmark_curve_name,omitempty"`
	BenchmarkCurvePoint       string                        `protobuf:"bytes,3,opt,name=benchmark_curve_point,json=benchmarkCurvePoint,proto3" json:"benchmark_curve_point,omitempty"`
	Spread                    *fix.Decimal64                    `protobuf:"bytes,4,opt,name=spread,proto3" json:"spread,omitempty"`
	BenchmarkPrice            *fix.Decimal64                    `protobuf:"bytes,5,opt,name=benchmark_price,json=benchmarkPrice,proto3" json:"benchmark_price,omitempty"`
	BenchmarkPriceType        BenchmarkPriceTypeEnum        `protobuf:"varint,6,opt,name=benchmark_price_type,json=benchmarkPriceType,proto3,enum=Common.BenchmarkPriceTypeEnum" json:"benchmark_price_type,omitempty"`
	BenchmarkSecurityId       string                        `protobuf:"bytes,7,opt,name=benchmark_security_id,json=benchmarkSecurityId,proto3" json:"benchmark_security_id,omitempty"`
	BenchmarkSecurityIdSource BenchmarkSecurityIDSourceEnum `protobuf:"varint,8,opt,name=benchmark_security_id_source,json=benchmarkSecurityIdSource,proto3,enum=Common.BenchmarkSecurityIDSourceEnum" json:"benchmark_security_id_source,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                      `json:"-"`
	XXX_unrecognized          []byte                        `json:"-"`
	XXX_sizecache             int32                         `json:"-"`
}

func (m *SpreadOrBenchmarkCurveData) Reset()         { *m = SpreadOrBenchmarkCurveData{} }
func (m *SpreadOrBenchmarkCurveData) String() string { return proto.CompactTextString(m) }
func (*SpreadOrBenchmarkCurveData) ProtoMessage()    {}
func (*SpreadOrBenchmarkCurveData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}

func (m *SpreadOrBenchmarkCurveData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpreadOrBenchmarkCurveData.Unmarshal(m, b)
}
func (m *SpreadOrBenchmarkCurveData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpreadOrBenchmarkCurveData.Marshal(b, m, deterministic)
}
func (m *SpreadOrBenchmarkCurveData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadOrBenchmarkCurveData.Merge(m, src)
}
func (m *SpreadOrBenchmarkCurveData) XXX_Size() int {
	return xxx_messageInfo_SpreadOrBenchmarkCurveData.Size(m)
}
func (m *SpreadOrBenchmarkCurveData) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadOrBenchmarkCurveData.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadOrBenchmarkCurveData proto.InternalMessageInfo

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkCurveCurrency() string {
	if m != nil {
		return m.BenchmarkCurveCurrency
	}
	return ""
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkCurveName() BenchmarkCurveNameEnum {
	if m != nil {
		return m.BenchmarkCurveName
	}
	return BenchmarkCurveNameEnum_BENCHMARK_CURVE_NAME_UNSPECIFIED
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkCurvePoint() string {
	if m != nil {
		return m.BenchmarkCurvePoint
	}
	return ""
}

func (m *SpreadOrBenchmarkCurveData) GetSpread() *fix.Decimal64 {
	if m != nil {
		return m.Spread
	}
	return nil
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkPrice() *fix.Decimal64 {
	if m != nil {
		return m.BenchmarkPrice
	}
	return nil
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkPriceType() BenchmarkPriceTypeEnum {
	if m != nil {
		return m.BenchmarkPriceType
	}
	return BenchmarkPriceTypeEnum_BENCHMARK_PRICE_TYPE_UNSPECIFIED
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkSecurityId() string {
	if m != nil {
		return m.BenchmarkSecurityId
	}
	return ""
}

func (m *SpreadOrBenchmarkCurveData) GetBenchmarkSecurityIdSource() BenchmarkSecurityIDSourceEnum {
	if m != nil {
		return m.BenchmarkSecurityIdSource
	}
	return BenchmarkSecurityIDSourceEnum_BENCHMARK_SECURITY_ID_SOURCE_UNSPECIFIED
}

type Stipulations struct {
	StipulationType      StipulationTypeEnum `protobuf:"varint,1,opt,name=stipulation_type,json=stipulationType,proto3,enum=Common.StipulationTypeEnum" json:"stipulation_type,omitempty"`
	StipulationValue     string              `protobuf:"bytes,2,opt,name=stipulation_value,json=stipulationValue,proto3" json:"stipulation_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Stipulations) Reset()         { *m = Stipulations{} }
func (m *Stipulations) String() string { return proto.CompactTextString(m) }
func (*Stipulations) ProtoMessage()    {}
func (*Stipulations) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}

func (m *Stipulations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stipulations.Unmarshal(m, b)
}
func (m *Stipulations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stipulations.Marshal(b, m, deterministic)
}
func (m *Stipulations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stipulations.Merge(m, src)
}
func (m *Stipulations) XXX_Size() int {
	return xxx_messageInfo_Stipulations.Size(m)
}
func (m *Stipulations) XXX_DiscardUnknown() {
	xxx_messageInfo_Stipulations.DiscardUnknown(m)
}

var xxx_messageInfo_Stipulations proto.InternalMessageInfo

func (m *Stipulations) GetStipulationType() StipulationTypeEnum {
	if m != nil {
		return m.StipulationType
	}
	return StipulationTypeEnum_STIPULATION_TYPE_UNSPECIFIED
}

func (m *Stipulations) GetStipulationValue() string {
	if m != nil {
		return m.StipulationValue
	}
	return ""
}

type TrdRegTimestamps struct {
	DeskOrderHandlingInst []DeskOrderHandlingInstEnum `protobuf:"varint,1,rep,packed,name=desk_order_handling_inst,json=deskOrderHandlingInst,proto3,enum=Common.DeskOrderHandlingInstEnum" json:"desk_order_handling_inst,omitempty"`
	DeskType              DeskTypeEnum                `protobuf:"varint,2,opt,name=desk_type,json=deskType,proto3,enum=Common.DeskTypeEnum" json:"desk_type,omitempty"`
	DeskTypeSource        DeskTypeSourceEnum          `protobuf:"varint,3,opt,name=desk_type_source,json=deskTypeSource,proto3,enum=Common.DeskTypeSourceEnum" json:"desk_type_source,omitempty"`
	TrdRegTimestamp       *fix.Timestamp                  `protobuf:"bytes,4,opt,name=trd_reg_timestamp,json=trdRegfix.Timestamp,proto3" json:"trd_reg_timestamp,omitempty"`
	TrdRegTimestampOrigin string                      `protobuf:"bytes,5,opt,name=trd_reg_timestamp_origin,json=trdRegfix.TimestampOrigin,proto3" json:"trd_reg_timestamp_origin,omitempty"`
	TrdRegTimestampType   TrdRegTimestampTypeEnum     `protobuf:"varint,6,opt,name=trd_reg_timestamp_type,json=trdRegfix.TimestampType,proto3,enum=Common.TrdRegTimestampTypeEnum" json:"trd_reg_timestamp_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *TrdRegTimestamps) Reset()         { *m = TrdRegTimestamps{} }
func (m *TrdRegTimestamps) String() string { return proto.CompactTextString(m) }
func (*TrdRegTimestamps) ProtoMessage()    {}
func (*TrdRegTimestamps) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}

func (m *TrdRegTimestamps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdRegTimestamps.Unmarshal(m, b)
}
func (m *TrdRegTimestamps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdRegTimestamps.Marshal(b, m, deterministic)
}
func (m *TrdRegTimestamps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdRegTimestamps.Merge(m, src)
}
func (m *TrdRegTimestamps) XXX_Size() int {
	return xxx_messageInfo_TrdRegTimestamps.Size(m)
}
func (m *TrdRegTimestamps) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdRegTimestamps.DiscardUnknown(m)
}

var xxx_messageInfo_TrdRegTimestamps proto.InternalMessageInfo

func (m *TrdRegTimestamps) GetDeskOrderHandlingInst() []DeskOrderHandlingInstEnum {
	if m != nil {
		return m.DeskOrderHandlingInst
	}
	return nil
}

func (m *TrdRegTimestamps) GetDeskType() DeskTypeEnum {
	if m != nil {
		return m.DeskType
	}
	return DeskTypeEnum_DESK_TYPE_UNSPECIFIED
}

func (m *TrdRegTimestamps) GetDeskTypeSource() DeskTypeSourceEnum {
	if m != nil {
		return m.DeskTypeSource
	}
	return DeskTypeSourceEnum_DESK_TYPE_SOURCE_UNSPECIFIED
}

func (m *TrdRegTimestamps) GetTrdRegTimestamp() *fix.Timestamp {
	if m != nil {
		return m.TrdRegTimestamp
	}
	return nil
}

func (m *TrdRegTimestamps) GetTrdRegTimestampOrigin() string {
	if m != nil {
		return m.TrdRegTimestampOrigin
	}
	return ""
}

func (m *TrdRegTimestamps) GetTrdRegTimestampType() TrdRegTimestampTypeEnum {
	if m != nil {
		return m.TrdRegTimestampType
	}
	return TrdRegTimestampTypeEnum_TRD_REG_TIMESTAMP_TYPE_UNSPECIFIED
}

type UnderlyingInstrument struct {
	EncodedUnderlyingIssuer              string                               `protobuf:"bytes,1,opt,name=encoded_underlying_issuer,json=encodedUnderlyingIssuer,proto3" json:"encoded_underlying_issuer,omitempty"`
	EncodedUnderlyingIssuerLen           int64                                `protobuf:"fixed64,2,opt,name=encoded_underlying_issuer_len,json=encodedUnderlyingIssuerLen,proto3" json:"encoded_underlying_issuer_len,omitempty"`
	EncodedUnderlyingSecurityDesc        string                               `protobuf:"bytes,3,opt,name=encoded_underlying_security_desc,json=encodedUnderlyingSecurityDesc,proto3" json:"encoded_underlying_security_desc,omitempty"`
	EncodedUnderlyingSecurityDescLen     int64                                `protobuf:"fixed64,4,opt,name=encoded_underlying_security_desc_len,json=encodedUnderlyingSecurityDescLen,proto3" json:"encoded_underlying_security_desc_len,omitempty"`
	UnderlyingCfiCode                    string                               `protobuf:"bytes,5,opt,name=underlying_cfi_code,json=underlyingCfiCode,proto3" json:"underlying_cfi_code,omitempty"`
	UnderlyingContractMultiplier         *fix.Decimal64                           `protobuf:"bytes,6,opt,name=underlying_contract_multiplier,json=underlyingContractMultiplier,proto3" json:"underlying_contract_multiplier,omitempty"`
	UnderlyingCountryOfIssue             string                               `protobuf:"bytes,7,opt,name=underlying_country_of_issue,json=underlyingCountryOfIssue,proto3" json:"underlying_country_of_issue,omitempty"`
	UnderlyingCouponPaymentDate          int32                                `protobuf:"fixed32,8,opt,name=underlying_coupon_payment_date,json=underlyingCouponPaymentDate,proto3" json:"underlying_coupon_payment_date,omitempty"`
	UnderlyingCouponRate                 *fix.Decimal64                           `protobuf:"bytes,9,opt,name=underlying_coupon_rate,json=underlyingCouponRate,proto3" json:"underlying_coupon_rate,omitempty"`
	UnderlyingCreditRating               string                               `protobuf:"bytes,10,opt,name=underlying_credit_rating,json=underlyingCreditRating,proto3" json:"underlying_credit_rating,omitempty"`
	UnderlyingFactor                     *fix.Decimal64                           `protobuf:"bytes,11,opt,name=underlying_factor,json=underlyingFactor,proto3" json:"underlying_factor,omitempty"`
	UnderlyingInstrRegistry              string                               `protobuf:"bytes,12,opt,name=underlying_instr_registry,json=underlyingInstrRegistry,proto3" json:"underlying_instr_registry,omitempty"`
	UnderlyingIssueDate                  int32                                `protobuf:"fixed32,13,opt,name=underlying_issue_date,json=underlyingIssueDate,proto3" json:"underlying_issue_date,omitempty"`
	UnderlyingIssuer                     string                               `protobuf:"bytes,14,opt,name=underlying_issuer,json=underlyingIssuer,proto3" json:"underlying_issuer,omitempty"`
	UnderlyingLocaleOfIssue              string                               `protobuf:"bytes,15,opt,name=underlying_locale_of_issue,json=underlyingLocaleOfIssue,proto3" json:"underlying_locale_of_issue,omitempty"`
	UnderlyingMaturityDate               int32                                `protobuf:"fixed32,16,opt,name=underlying_maturity_date,json=underlyingMaturityDate,proto3" json:"underlying_maturity_date,omitempty"`
	UnderlyingMaturityMonthYear          int32                                `protobuf:"fixed32,17,opt,name=underlying_maturity_month_year,json=underlyingMaturityMonthYear,proto3" json:"underlying_maturity_month_year,omitempty"`
	UnderlyingOptAttribute               []byte                               `protobuf:"bytes,18,opt,name=underlying_opt_attribute,json=underlyingOptAttribute,proto3" json:"underlying_opt_attribute,omitempty"`
	UnderlyingProduct                    UnderlyingProductEnum                `protobuf:"varint,19,opt,name=underlying_product,json=underlyingProduct,proto3,enum=Common.UnderlyingProductEnum" json:"underlying_product,omitempty"`
	UnderlyingPutOrCall                  int64                                `protobuf:"fixed64,20,opt,name=underlying_put_or_call,json=underlyingPutOrCall,proto3" json:"underlying_put_or_call,omitempty"`
	UnderlyingRedemptionDate             int32                                `protobuf:"fixed32,21,opt,name=underlying_redemption_date,json=underlyingRedemptionDate,proto3" json:"underlying_redemption_date,omitempty"`
	UnderlyingRepoCollateralSecurityType string                               `protobuf:"bytes,22,opt,name=underlying_repo_collateral_security_type,json=underlyingRepoCollateralSecurityType,proto3" json:"underlying_repo_collateral_security_type,omitempty"`
	UnderlyingRepurchaseRate             *fix.Decimal64                           `protobuf:"bytes,23,opt,name=underlying_repurchase_rate,json=underlyingRepurchaseRate,proto3" json:"underlying_repurchase_rate,omitempty"`
	UnderlyingRepurchaseTerm             int64                                `protobuf:"fixed64,24,opt,name=underlying_repurchase_term,json=underlyingRepurchaseTerm,proto3" json:"underlying_repurchase_term,omitempty"`
	UnderlyingSecurityDesc               string                               `protobuf:"bytes,25,opt,name=underlying_security_desc,json=underlyingSecurityDesc,proto3" json:"underlying_security_desc,omitempty"`
	UnderlyingSecurityExchange           string                               `protobuf:"bytes,26,opt,name=underlying_security_exchange,json=underlyingSecurityExchange,proto3" json:"underlying_security_exchange,omitempty"`
	UnderlyingSecurityId                 string                               `protobuf:"bytes,27,opt,name=underlying_security_id,json=underlyingSecurityId,proto3" json:"underlying_security_id,omitempty"`
	UnderlyingSecurityIdSource           UnderlyingSecurityIDSourceEnum       `protobuf:"varint,28,opt,name=underlying_security_id_source,json=underlyingSecurityIdSource,proto3,enum=Common.UnderlyingSecurityIDSourceEnum" json:"underlying_security_id_source,omitempty"`
	UnderlyingSecurityType               UnderlyingSecurityTypeEnum           `protobuf:"varint,29,opt,name=underlying_security_type,json=underlyingSecurityType,proto3,enum=Common.UnderlyingSecurityTypeEnum" json:"underlying_security_type,omitempty"`
	UnderlyingStateOrProvinceOfIssue     string                               `protobuf:"bytes,30,opt,name=underlying_state_or_province_of_issue,json=underlyingStateOrProvinceOfIssue,proto3" json:"underlying_state_or_province_of_issue,omitempty"`
	UnderlyingStrikePrice                *fix.Decimal64                           `protobuf:"bytes,31,opt,name=underlying_strike_price,json=underlyingStrikePrice,proto3" json:"underlying_strike_price,omitempty"`
	UnderlyingSymbol                     string                               `protobuf:"bytes,32,opt,name=underlying_symbol,json=underlyingSymbol,proto3" json:"underlying_symbol,omitempty"`
	UnderlyingSymbolSfx                  UnderlyingSymbolSfxEnum              `protobuf:"varint,33,opt,name=underlying_symbol_sfx,json=underlyingSymbolSfx,proto3,enum=Common.UnderlyingSymbolSfxEnum" json:"underlying_symbol_sfx,omitempty"`
	UndSecAltIdGrp                       []*UndSecAltIDGrp                    `protobuf:"bytes,34,rep,name=und_sec_alt_id_grp,json=undSecAltIdGrp,proto3" json:"und_sec_alt_id_grp,omitempty"`
	UnderlyingAdjustedQuantity           *fix.Decimal64                           `protobuf:"bytes,35,opt,name=underlying_adjusted_quantity,json=underlyingAdjustedQuantity,proto3" json:"underlying_adjusted_quantity,omitempty"`
	UnderlyingAllocationPercent          *fix.Decimal64                           `protobuf:"bytes,36,opt,name=underlying_allocation_percent,json=underlyingAllocationPercent,proto3" json:"underlying_allocation_percent,omitempty"`
	UnderlyingCapValue                   *fix.Decimal64                           `protobuf:"bytes,37,opt,name=underlying_cap_value,json=underlyingCapValue,proto3" json:"underlying_cap_value,omitempty"`
	UnderlyingCashAmount                 *fix.Decimal64                           `protobuf:"bytes,38,opt,name=underlying_cash_amount,json=underlyingCashAmount,proto3" json:"underlying_cash_amount,omitempty"`
	UnderlyingCashType                   UnderlyingCashTypeEnum               `protobuf:"varint,39,opt,name=underlying_cash_type,json=underlyingCashType,proto3,enum=Common.UnderlyingCashTypeEnum" json:"underlying_cash_type,omitempty"`
	UnderlyingCpProgram                  string                               `protobuf:"bytes,40,opt,name=underlying_cp_program,json=underlyingCpProgram,proto3" json:"underlying_cp_program,omitempty"`
	UnderlyingCpRegType                  string                               `protobuf:"bytes,41,opt,name=underlying_cp_reg_type,json=underlyingCpRegType,proto3" json:"underlying_cp_reg_type,omitempty"`
	UnderlyingCurrency                   string                               `protobuf:"bytes,42,opt,name=underlying_currency,json=underlyingCurrency,proto3" json:"underlying_currency,omitempty"`
	UnderlyingCurrentValue               *fix.Decimal64                           `protobuf:"bytes,43,opt,name=underlying_current_value,json=underlyingCurrentValue,proto3" json:"underlying_current_value,omitempty"`
	UnderlyingDirtyPrice                 *fix.Decimal64                           `protobuf:"bytes,44,opt,name=underlying_dirty_price,json=underlyingDirtyPrice,proto3" json:"underlying_dirty_price,omitempty"`
	UnderlyingEndPrice                   *fix.Decimal64                           `protobuf:"bytes,45,opt,name=underlying_end_price,json=underlyingEndPrice,proto3" json:"underlying_end_price,omitempty"`
	UnderlyingEndValue                   *fix.Decimal64                           `protobuf:"bytes,46,opt,name=underlying_end_value,json=underlyingEndValue,proto3" json:"underlying_end_value,omitempty"`
	UnderlyingFxRate                     *fix.Decimal64                           `protobuf:"bytes,47,opt,name=underlying_fx_rate,json=underlyingFxRate,proto3" json:"underlying_fx_rate,omitempty"`
	UnderlyingFxRateCalc                 UnderlyingFXRateCalcEnum             `protobuf:"varint,48,opt,name=underlying_fx_rate_calc,json=underlyingFxRateCalc,proto3,enum=Common.UnderlyingFXRateCalcEnum" json:"underlying_fx_rate_calc,omitempty"`
	UnderlyingPx                         *fix.Decimal64                           `protobuf:"bytes,49,opt,name=underlying_px,json=underlyingPx,proto3" json:"underlying_px,omitempty"`
	UnderlyingQty                        *fix.Decimal64                           `protobuf:"bytes,50,opt,name=underlying_qty,json=underlyingQty,proto3" json:"underlying_qty,omitempty"`
	UnderlyingSecuritySubType            string                               `protobuf:"bytes,51,opt,name=underlying_security_sub_type,json=underlyingSecuritySubType,proto3" json:"underlying_security_sub_type,omitempty"`
	UnderlyingSettlMethod                string                               `protobuf:"bytes,52,opt,name=underlying_settl_method,json=underlyingSettlMethod,proto3" json:"underlying_settl_method,omitempty"`
	UnderlyingSettlementType             UnderlyingSettlementTypeEnum         `protobuf:"varint,53,opt,name=underlying_settlement_type,json=underlyingSettlementType,proto3,enum=Common.UnderlyingSettlementTypeEnum" json:"underlying_settlement_type,omitempty"`
	UnderlyingStartValue                 *fix.Decimal64                           `protobuf:"bytes,54,opt,name=underlying_start_value,json=underlyingStartValue,proto3" json:"underlying_start_value,omitempty"`
	UnderlyingStipulations               []*UnderlyingStipulations            `protobuf:"bytes,55,rep,name=underlying_stipulations,json=underlyingStipulations,proto3" json:"underlying_stipulations,omitempty"`
	UnderlyingStrikeCurrency             string                               `protobuf:"bytes,56,opt,name=underlying_strike_currency,json=underlyingStrikeCurrency,proto3" json:"underlying_strike_currency,omitempty"`
	UnderlyingTimeUnit                   UnderlyingTimeUnitEnum               `protobuf:"varint,57,opt,name=underlying_time_unit,json=underlyingTimeUnit,proto3,enum=Common.UnderlyingTimeUnitEnum" json:"underlying_time_unit,omitempty"`
	UnderlyingUnitOfMeasure              UnderlyingUnitOfMeasureEnum          `protobuf:"varint,58,opt,name=underlying_unit_of_measure,json=underlyingUnitOfMeasure,proto3,enum=Common.UnderlyingUnitOfMeasureEnum" json:"underlying_unit_of_measure,omitempty"`
	UndlyInstrumentParties               []*UndlyInstrumentParties            `protobuf:"bytes,59,rep,name=undly_instrument_parties,json=undlyInstrumentParties,proto3" json:"undly_instrument_parties,omitempty"`
	UnderlyingExerciseStyle              UnderlyingExerciseStyleEnum          `protobuf:"varint,60,opt,name=underlying_exercise_style,json=underlyingExerciseStyle,proto3,enum=Common.UnderlyingExerciseStyleEnum" json:"underlying_exercise_style,omitempty"`
	UnderlyingMaturityTime               *fix.LocalTimeOnly                       `protobuf:"bytes,61,opt,name=underlying_maturity_time,json=underlyingMaturityTime,proto3" json:"underlying_maturity_time,omitempty"`
	UnderlyingPriceUnitOfMeasure         UnderlyingPriceUnitOfMeasureEnum     `protobuf:"varint,62,opt,name=underlying_price_unit_of_measure,json=underlyingPriceUnitOfMeasure,proto3,enum=Common.UnderlyingPriceUnitOfMeasureEnum" json:"underlying_price_unit_of_measure,omitempty"`
	UnderlyingPriceUnitOfMeasureQty      *fix.Decimal64                           `protobuf:"bytes,63,opt,name=underlying_price_unit_of_measure_qty,json=underlyingPriceUnitOfMeasureQty,proto3" json:"underlying_price_unit_of_measure_qty,omitempty"`
	UnderlyingUnitOfMeasureQty           *fix.Decimal64                           `protobuf:"bytes,64,opt,name=underlying_unit_of_measure_qty,json=underlyingUnitOfMeasureQty,proto3" json:"underlying_unit_of_measure_qty,omitempty"`
	UnderlyingContractMultiplierUnit     UnderlyingContractMultiplierUnitEnum `protobuf:"varint,65,opt,name=underlying_contract_multiplier_unit,json=underlyingContractMultiplierUnit,proto3,enum=Common.UnderlyingContractMultiplierUnitEnum" json:"underlying_contract_multiplier_unit,omitempty"`
	// Types that are valid to be assigned to UnderlyingFlowScheduleTypeUnion:
	//	*UnderlyingInstrument_UnderlyingFlowScheduleType
	//	*UnderlyingInstrument_UnderlyingFlowScheduleTypeReserved100Plus
	UnderlyingFlowScheduleTypeUnion                 isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion `protobuf_oneof:"underlying_flow_schedule_type_union"`
	UnderlyingAttachmentPoint                       *fix.Decimal64                                             `protobuf:"bytes,68,opt,name=underlying_attachment_point,json=underlyingAttachmentPoint,proto3" json:"underlying_attachment_point,omitempty"`
	UnderlyingDetachmentPoint                       *fix.Decimal64                                             `protobuf:"bytes,69,opt,name=underlying_detachment_point,json=underlyingDetachmentPoint,proto3" json:"underlying_detachment_point,omitempty"`
	UnderlyingNotionalPercentageOutstanding         *fix.Decimal64                                             `protobuf:"bytes,70,opt,name=underlying_notional_percentage_outstanding,json=underlyingNotionalPercentageOutstanding,proto3" json:"underlying_notional_percentage_outstanding,omitempty"`
	UnderlyingOriginalNotionalPercentageOutstanding *fix.Decimal64                                             `protobuf:"bytes,71,opt,name=underlying_original_notional_percentage_outstanding,json=underlyingOriginalNotionalPercentageOutstanding,proto3" json:"underlying_original_notional_percentage_outstanding,omitempty"`
	UnderlyingRestructuringType                     UnderlyingRestructuringTypeEnum                        `protobuf:"varint,72,opt,name=underlying_restructuring_type,json=underlyingRestructuringType,proto3,enum=Common.UnderlyingRestructuringTypeEnum" json:"underlying_restructuring_type,omitempty"`
	UnderlyingSeniority                             UnderlyingSeniorityEnum                                `protobuf:"varint,73,opt,name=underlying_seniority,json=underlyingSeniority,proto3,enum=Common.UnderlyingSeniorityEnum" json:"underlying_seniority,omitempty"`
	XXX_NoUnkeyedLiteral                            struct{}                                               `json:"-"`
	XXX_unrecognized                                []byte                                                 `json:"-"`
	XXX_sizecache                                   int32                                                  `json:"-"`
}

func (m *UnderlyingInstrument) Reset()         { *m = UnderlyingInstrument{} }
func (m *UnderlyingInstrument) String() string { return proto.CompactTextString(m) }
func (*UnderlyingInstrument) ProtoMessage()    {}
func (*UnderlyingInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}

func (m *UnderlyingInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnderlyingInstrument.Unmarshal(m, b)
}
func (m *UnderlyingInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnderlyingInstrument.Marshal(b, m, deterministic)
}
func (m *UnderlyingInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnderlyingInstrument.Merge(m, src)
}
func (m *UnderlyingInstrument) XXX_Size() int {
	return xxx_messageInfo_UnderlyingInstrument.Size(m)
}
func (m *UnderlyingInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_UnderlyingInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_UnderlyingInstrument proto.InternalMessageInfo

func (m *UnderlyingInstrument) GetEncodedUnderlyingIssuer() string {
	if m != nil {
		return m.EncodedUnderlyingIssuer
	}
	return ""
}

func (m *UnderlyingInstrument) GetEncodedUnderlyingIssuerLen() int64 {
	if m != nil {
		return m.EncodedUnderlyingIssuerLen
	}
	return 0
}

func (m *UnderlyingInstrument) GetEncodedUnderlyingSecurityDesc() string {
	if m != nil {
		return m.EncodedUnderlyingSecurityDesc
	}
	return ""
}

func (m *UnderlyingInstrument) GetEncodedUnderlyingSecurityDescLen() int64 {
	if m != nil {
		return m.EncodedUnderlyingSecurityDescLen
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingCfiCode() string {
	if m != nil {
		return m.UnderlyingCfiCode
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingContractMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingContractMultiplier
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingCountryOfIssue() string {
	if m != nil {
		return m.UnderlyingCountryOfIssue
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingCouponPaymentDate() int32 {
	if m != nil {
		return m.UnderlyingCouponPaymentDate
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingCouponRate() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingCouponRate
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingCreditRating() string {
	if m != nil {
		return m.UnderlyingCreditRating
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingFactor() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingFactor
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingInstrRegistry() string {
	if m != nil {
		return m.UnderlyingInstrRegistry
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingIssueDate() int32 {
	if m != nil {
		return m.UnderlyingIssueDate
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingIssuer() string {
	if m != nil {
		return m.UnderlyingIssuer
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingLocaleOfIssue() string {
	if m != nil {
		return m.UnderlyingLocaleOfIssue
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingMaturityDate() int32 {
	if m != nil {
		return m.UnderlyingMaturityDate
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingMaturityMonthYear() int32 {
	if m != nil {
		return m.UnderlyingMaturityMonthYear
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingOptAttribute() []byte {
	if m != nil {
		return m.UnderlyingOptAttribute
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingProduct() UnderlyingProductEnum {
	if m != nil {
		return m.UnderlyingProduct
	}
	return UnderlyingProductEnum_UNDERLYING_PRODUCT_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingPutOrCall() int64 {
	if m != nil {
		return m.UnderlyingPutOrCall
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingRedemptionDate() int32 {
	if m != nil {
		return m.UnderlyingRedemptionDate
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingRepoCollateralSecurityType() string {
	if m != nil {
		return m.UnderlyingRepoCollateralSecurityType
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingRepurchaseRate() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingRepurchaseRate
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingRepurchaseTerm() int64 {
	if m != nil {
		return m.UnderlyingRepurchaseTerm
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingSecurityDesc() string {
	if m != nil {
		return m.UnderlyingSecurityDesc
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSecurityExchange() string {
	if m != nil {
		return m.UnderlyingSecurityExchange
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSecurityId() string {
	if m != nil {
		return m.UnderlyingSecurityId
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSecurityIdSource() UnderlyingSecurityIDSourceEnum {
	if m != nil {
		return m.UnderlyingSecurityIdSource
	}
	return UnderlyingSecurityIDSourceEnum_UNDERLYING_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingSecurityType() UnderlyingSecurityTypeEnum {
	if m != nil {
		return m.UnderlyingSecurityType
	}
	return UnderlyingSecurityTypeEnum_UNDERLYING_SECURITY_TYPE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingStateOrProvinceOfIssue() string {
	if m != nil {
		return m.UnderlyingStateOrProvinceOfIssue
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingStrikePrice() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingStrikePrice
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingSymbol() string {
	if m != nil {
		return m.UnderlyingSymbol
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSymbolSfx() UnderlyingSymbolSfxEnum {
	if m != nil {
		return m.UnderlyingSymbolSfx
	}
	return UnderlyingSymbolSfxEnum_UNDERLYING_SYMBOL_SFX_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUndSecAltIdGrp() []*UndSecAltIDGrp {
	if m != nil {
		return m.UndSecAltIdGrp
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingAdjustedQuantity() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingAdjustedQuantity
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingAllocationPercent() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingAllocationPercent
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingCapValue() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingCapValue
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingCashAmount() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingCashAmount
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingCashType() UnderlyingCashTypeEnum {
	if m != nil {
		return m.UnderlyingCashType
	}
	return UnderlyingCashTypeEnum_UNDERLYING_CASH_TYPE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingCpProgram() string {
	if m != nil {
		return m.UnderlyingCpProgram
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingCpRegType() string {
	if m != nil {
		return m.UnderlyingCpRegType
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingCurrency() string {
	if m != nil {
		return m.UnderlyingCurrency
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingCurrentValue() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingCurrentValue
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingDirtyPrice() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingDirtyPrice
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingEndPrice() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingEndPrice
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingEndValue() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingEndValue
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingFxRate() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingFxRate
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingFxRateCalc() UnderlyingFXRateCalcEnum {
	if m != nil {
		return m.UnderlyingFxRateCalc
	}
	return UnderlyingFXRateCalcEnum_UNDERLYING_FX_RATE_CALC_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingPx() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingPx
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingQty() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingQty
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingSecuritySubType() string {
	if m != nil {
		return m.UnderlyingSecuritySubType
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSettlMethod() string {
	if m != nil {
		return m.UnderlyingSettlMethod
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingSettlementType() UnderlyingSettlementTypeEnum {
	if m != nil {
		return m.UnderlyingSettlementType
	}
	return UnderlyingSettlementTypeEnum_UNDERLYING_SETTLEMENT_TYPE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingStartValue() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingStartValue
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingStipulations() []*UnderlyingStipulations {
	if m != nil {
		return m.UnderlyingStipulations
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingStrikeCurrency() string {
	if m != nil {
		return m.UnderlyingStrikeCurrency
	}
	return ""
}

func (m *UnderlyingInstrument) GetUnderlyingTimeUnit() UnderlyingTimeUnitEnum {
	if m != nil {
		return m.UnderlyingTimeUnit
	}
	return UnderlyingTimeUnitEnum_UNDERLYING_TIME_UNIT_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingUnitOfMeasure() UnderlyingUnitOfMeasureEnum {
	if m != nil {
		return m.UnderlyingUnitOfMeasure
	}
	return UnderlyingUnitOfMeasureEnum_UNDERLYING_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUndlyInstrumentParties() []*UndlyInstrumentParties {
	if m != nil {
		return m.UndlyInstrumentParties
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingExerciseStyle() UnderlyingExerciseStyleEnum {
	if m != nil {
		return m.UnderlyingExerciseStyle
	}
	return UnderlyingExerciseStyleEnum_UNDERLYING_EXERCISE_STYLE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingMaturityTime() *fix.LocalTimeOnly {
	if m != nil {
		return m.UnderlyingMaturityTime
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingPriceUnitOfMeasure() UnderlyingPriceUnitOfMeasureEnum {
	if m != nil {
		return m.UnderlyingPriceUnitOfMeasure
	}
	return UnderlyingPriceUnitOfMeasureEnum_UNDERLYING_PRICE_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingPriceUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingPriceUnitOfMeasureQty
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingUnitOfMeasureQty
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingContractMultiplierUnit() UnderlyingContractMultiplierUnitEnum {
	if m != nil {
		return m.UnderlyingContractMultiplierUnit
	}
	return UnderlyingContractMultiplierUnitEnum_UNDERLYING_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED
}

type isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion interface {
	isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion()
}

type UnderlyingInstrument_UnderlyingFlowScheduleType struct {
	UnderlyingFlowScheduleType UnderlyingFlowScheduleTypeEnum `protobuf:"varint,66,opt,name=underlying_flow_schedule_type,json=underlyingFlowScheduleType,proto3,enum=Common.UnderlyingFlowScheduleTypeEnum,oneof"`
}

type UnderlyingInstrument_UnderlyingFlowScheduleTypeReserved100Plus struct {
	UnderlyingFlowScheduleTypeReserved100Plus uint32 `protobuf:"fixed32,67,opt,name=underlying_flow_schedule_type_reserved100plus,json=underlyingFlowScheduleTypeReserved100plus,proto3,oneof"`
}

func (*UnderlyingInstrument_UnderlyingFlowScheduleType) isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion() {
}

func (*UnderlyingInstrument_UnderlyingFlowScheduleTypeReserved100Plus) isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion() {
}

func (m *UnderlyingInstrument) GetUnderlyingFlowScheduleTypeUnion() isUnderlyingInstrument_UnderlyingFlowScheduleTypeUnion {
	if m != nil {
		return m.UnderlyingFlowScheduleTypeUnion
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingFlowScheduleType() UnderlyingFlowScheduleTypeEnum {
	if x, ok := m.GetUnderlyingFlowScheduleTypeUnion().(*UnderlyingInstrument_UnderlyingFlowScheduleType); ok {
		return x.UnderlyingFlowScheduleType
	}
	return UnderlyingFlowScheduleTypeEnum_UNDERLYING_FLOW_SCHEDULE_TYPE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingFlowScheduleTypeReserved100Plus() uint32 {
	if x, ok := m.GetUnderlyingFlowScheduleTypeUnion().(*UnderlyingInstrument_UnderlyingFlowScheduleTypeReserved100Plus); ok {
		return x.UnderlyingFlowScheduleTypeReserved100Plus
	}
	return 0
}

func (m *UnderlyingInstrument) GetUnderlyingAttachmentPoint() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingAttachmentPoint
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingDetachmentPoint() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingDetachmentPoint
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingNotionalPercentageOutstanding() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingNotionalPercentageOutstanding
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingOriginalNotionalPercentageOutstanding() *fix.Decimal64 {
	if m != nil {
		return m.UnderlyingOriginalNotionalPercentageOutstanding
	}
	return nil
}

func (m *UnderlyingInstrument) GetUnderlyingRestructuringType() UnderlyingRestructuringTypeEnum {
	if m != nil {
		return m.UnderlyingRestructuringType
	}
	return UnderlyingRestructuringTypeEnum_UNDERLYING_RESTRUCTURING_TYPE_UNSPECIFIED
}

func (m *UnderlyingInstrument) GetUnderlyingSeniority() UnderlyingSeniorityEnum {
	if m != nil {
		return m.UnderlyingSeniority
	}
	return UnderlyingSeniorityEnum_UNDERLYING_SENIORITY_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UnderlyingInstrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UnderlyingInstrument_UnderlyingFlowScheduleType)(nil),
		(*UnderlyingInstrument_UnderlyingFlowScheduleTypeReserved100Plus)(nil),
	}
}

type YieldData struct {
	Yield                    *fix.Decimal64                   `protobuf:"bytes,1,opt,name=yield,proto3" json:"yield,omitempty"`
	YieldType                YieldTypeEnum                `protobuf:"varint,2,opt,name=yield_type,json=yieldType,proto3,enum=Common.YieldTypeEnum" json:"yield_type,omitempty"`
	YieldCalcDate            int32                        `protobuf:"fixed32,3,opt,name=yield_calc_date,json=yieldCalcDate,proto3" json:"yield_calc_date,omitempty"`
	YieldRedemptionDate      int32                        `protobuf:"fixed32,4,opt,name=yield_redemption_date,json=yieldRedemptionDate,proto3" json:"yield_redemption_date,omitempty"`
	YieldRedemptionPrice     *fix.Decimal64                   `protobuf:"bytes,5,opt,name=yield_redemption_price,json=yieldRedemptionPrice,proto3" json:"yield_redemption_price,omitempty"`
	YieldRedemptionPriceType YieldRedemptionPriceTypeEnum `protobuf:"varint,6,opt,name=yield_redemption_price_type,json=yieldRedemptionPriceType,proto3,enum=Common.YieldRedemptionPriceTypeEnum" json:"yield_redemption_price_type,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                     `json:"-"`
	XXX_unrecognized         []byte                       `json:"-"`
	XXX_sizecache            int32                        `json:"-"`
}

func (m *YieldData) Reset()         { *m = YieldData{} }
func (m *YieldData) String() string { return proto.CompactTextString(m) }
func (*YieldData) ProtoMessage()    {}
func (*YieldData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}

func (m *YieldData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YieldData.Unmarshal(m, b)
}
func (m *YieldData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YieldData.Marshal(b, m, deterministic)
}
func (m *YieldData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YieldData.Merge(m, src)
}
func (m *YieldData) XXX_Size() int {
	return xxx_messageInfo_YieldData.Size(m)
}
func (m *YieldData) XXX_DiscardUnknown() {
	xxx_messageInfo_YieldData.DiscardUnknown(m)
}

var xxx_messageInfo_YieldData proto.InternalMessageInfo

func (m *YieldData) GetYield() *fix.Decimal64 {
	if m != nil {
		return m.Yield
	}
	return nil
}

func (m *YieldData) GetYieldType() YieldTypeEnum {
	if m != nil {
		return m.YieldType
	}
	return YieldTypeEnum_YIELD_TYPE_UNSPECIFIED
}

func (m *YieldData) GetYieldCalcDate() int32 {
	if m != nil {
		return m.YieldCalcDate
	}
	return 0
}

func (m *YieldData) GetYieldRedemptionDate() int32 {
	if m != nil {
		return m.YieldRedemptionDate
	}
	return 0
}

func (m *YieldData) GetYieldRedemptionPrice() *fix.Decimal64 {
	if m != nil {
		return m.YieldRedemptionPrice
	}
	return nil
}

func (m *YieldData) GetYieldRedemptionPriceType() YieldRedemptionPriceTypeEnum {
	if m != nil {
		return m.YieldRedemptionPriceType
	}
	return YieldRedemptionPriceTypeEnum_YIELD_REDEMPTION_PRICE_TYPE_UNSPECIFIED
}

type UnderlyingStipulations struct {
	UnderlyingStipType   UnderlyingStipTypeEnum `protobuf:"varint,1,opt,name=underlying_stip_type,json=underlyingStipType,proto3,enum=Common.UnderlyingStipTypeEnum" json:"underlying_stip_type,omitempty"`
	UnderlyingStipValue  string                 `protobuf:"bytes,2,opt,name=underlying_stip_value,json=underlyingStipValue,proto3" json:"underlying_stip_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UnderlyingStipulations) Reset()         { *m = UnderlyingStipulations{} }
func (m *UnderlyingStipulations) String() string { return proto.CompactTextString(m) }
func (*UnderlyingStipulations) ProtoMessage()    {}
func (*UnderlyingStipulations) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}

func (m *UnderlyingStipulations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnderlyingStipulations.Unmarshal(m, b)
}
func (m *UnderlyingStipulations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnderlyingStipulations.Marshal(b, m, deterministic)
}
func (m *UnderlyingStipulations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnderlyingStipulations.Merge(m, src)
}
func (m *UnderlyingStipulations) XXX_Size() int {
	return xxx_messageInfo_UnderlyingStipulations.Size(m)
}
func (m *UnderlyingStipulations) XXX_DiscardUnknown() {
	xxx_messageInfo_UnderlyingStipulations.DiscardUnknown(m)
}

var xxx_messageInfo_UnderlyingStipulations proto.InternalMessageInfo

func (m *UnderlyingStipulations) GetUnderlyingStipType() UnderlyingStipTypeEnum {
	if m != nil {
		return m.UnderlyingStipType
	}
	return UnderlyingStipTypeEnum_UNDERLYING_STIP_TYPE_UNSPECIFIED
}

func (m *UnderlyingStipulations) GetUnderlyingStipValue() string {
	if m != nil {
		return m.UnderlyingStipValue
	}
	return ""
}

type NestedParties2 struct {
	Nested2PartyId       string                   `protobuf:"bytes,1,opt,name=nested2party_id,json=nested2partyId,proto3" json:"nested2party_id,omitempty"`
	Nested2PartyIdSource Nested2PartyIDSourceEnum `protobuf:"varint,2,opt,name=nested2party_id_source,json=nested2partyIdSource,proto3,enum=Common.Nested2PartyIDSourceEnum" json:"nested2party_id_source,omitempty"`
	Nested2PartyRole     Nested2PartyRoleEnum     `protobuf:"varint,3,opt,name=nested2party_role,json=nested2partyRole,proto3,enum=Common.Nested2PartyRoleEnum" json:"nested2party_role,omitempty"`
	NstdPtys2SubGrp      []*NstdPtys2SubGrp       `protobuf:"bytes,4,rep,name=nstd_ptys2sub_grp,json=nstdPtys2subGrp,proto3" json:"nstd_ptys2sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NestedParties2) Reset()         { *m = NestedParties2{} }
func (m *NestedParties2) String() string { return proto.CompactTextString(m) }
func (*NestedParties2) ProtoMessage()    {}
func (*NestedParties2) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}

func (m *NestedParties2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedParties2.Unmarshal(m, b)
}
func (m *NestedParties2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedParties2.Marshal(b, m, deterministic)
}
func (m *NestedParties2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedParties2.Merge(m, src)
}
func (m *NestedParties2) XXX_Size() int {
	return xxx_messageInfo_NestedParties2.Size(m)
}
func (m *NestedParties2) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedParties2.DiscardUnknown(m)
}

var xxx_messageInfo_NestedParties2 proto.InternalMessageInfo

func (m *NestedParties2) GetNested2PartyId() string {
	if m != nil {
		return m.Nested2PartyId
	}
	return ""
}

func (m *NestedParties2) GetNested2PartyIdSource() Nested2PartyIDSourceEnum {
	if m != nil {
		return m.Nested2PartyIdSource
	}
	return Nested2PartyIDSourceEnum_NESTED2PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *NestedParties2) GetNested2PartyRole() Nested2PartyRoleEnum {
	if m != nil {
		return m.Nested2PartyRole
	}
	return Nested2PartyRoleEnum_NESTED2PARTY_ROLE_UNSPECIFIED
}

func (m *NestedParties2) GetNstdPtys2SubGrp() []*NstdPtys2SubGrp {
	if m != nil {
		return m.NstdPtys2SubGrp
	}
	return nil
}

type NestedParties3 struct {
	Nested3PartyId       string                   `protobuf:"bytes,1,opt,name=nested3party_id,json=nested3partyId,proto3" json:"nested3party_id,omitempty"`
	Nested3PartyIdSource Nested3PartyIDSourceEnum `protobuf:"varint,2,opt,name=nested3party_id_source,json=nested3partyIdSource,proto3,enum=Common.Nested3PartyIDSourceEnum" json:"nested3party_id_source,omitempty"`
	Nested3PartyRole     Nested3PartyRoleEnum     `protobuf:"varint,3,opt,name=nested3party_role,json=nested3partyRole,proto3,enum=Common.Nested3PartyRoleEnum" json:"nested3party_role,omitempty"`
	NstdPtys3SubGrp      []*NstdPtys3SubGrp       `protobuf:"bytes,4,rep,name=nstd_ptys3sub_grp,json=nstdPtys3subGrp,proto3" json:"nstd_ptys3sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NestedParties3) Reset()         { *m = NestedParties3{} }
func (m *NestedParties3) String() string { return proto.CompactTextString(m) }
func (*NestedParties3) ProtoMessage()    {}
func (*NestedParties3) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}

func (m *NestedParties3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedParties3.Unmarshal(m, b)
}
func (m *NestedParties3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedParties3.Marshal(b, m, deterministic)
}
func (m *NestedParties3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedParties3.Merge(m, src)
}
func (m *NestedParties3) XXX_Size() int {
	return xxx_messageInfo_NestedParties3.Size(m)
}
func (m *NestedParties3) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedParties3.DiscardUnknown(m)
}

var xxx_messageInfo_NestedParties3 proto.InternalMessageInfo

func (m *NestedParties3) GetNested3PartyId() string {
	if m != nil {
		return m.Nested3PartyId
	}
	return ""
}

func (m *NestedParties3) GetNested3PartyIdSource() Nested3PartyIDSourceEnum {
	if m != nil {
		return m.Nested3PartyIdSource
	}
	return Nested3PartyIDSourceEnum_NESTED3PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *NestedParties3) GetNested3PartyRole() Nested3PartyRoleEnum {
	if m != nil {
		return m.Nested3PartyRole
	}
	return Nested3PartyRoleEnum_NESTED3PARTY_ROLE_UNSPECIFIED
}

func (m *NestedParties3) GetNstdPtys3SubGrp() []*NstdPtys3SubGrp {
	if m != nil {
		return m.NstdPtys3SubGrp
	}
	return nil
}

type ClrInstGrp struct {
	ClearingInstruction  ClearingInstructionEnum `protobuf:"varint,1,opt,name=clearing_instruction,json=clearingInstruction,proto3,enum=Common.ClearingInstructionEnum" json:"clearing_instruction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClrInstGrp) Reset()         { *m = ClrInstGrp{} }
func (m *ClrInstGrp) String() string { return proto.CompactTextString(m) }
func (*ClrInstGrp) ProtoMessage()    {}
func (*ClrInstGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}

func (m *ClrInstGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClrInstGrp.Unmarshal(m, b)
}
func (m *ClrInstGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClrInstGrp.Marshal(b, m, deterministic)
}
func (m *ClrInstGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClrInstGrp.Merge(m, src)
}
func (m *ClrInstGrp) XXX_Size() int {
	return xxx_messageInfo_ClrInstGrp.Size(m)
}
func (m *ClrInstGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClrInstGrp.DiscardUnknown(m)
}

var xxx_messageInfo_ClrInstGrp proto.InternalMessageInfo

func (m *ClrInstGrp) GetClearingInstruction() ClearingInstructionEnum {
	if m != nil {
		return m.ClearingInstruction
	}
	return ClearingInstructionEnum_CLEARING_INSTRUCTION_UNSPECIFIED
}

type CompIDReqGrp struct {
	DeskId               string   `protobuf:"bytes,1,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"`
	LocationId           string   `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	RefCompId            string   `protobuf:"bytes,3,opt,name=ref_comp_id,json=refCompId,proto3" json:"ref_comp_id,omitempty"`
	RefSubId             string   `protobuf:"bytes,4,opt,name=ref_sub_id,json=refSubId,proto3" json:"ref_sub_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompIDReqGrp) Reset()         { *m = CompIDReqGrp{} }
func (m *CompIDReqGrp) String() string { return proto.CompactTextString(m) }
func (*CompIDReqGrp) ProtoMessage()    {}
func (*CompIDReqGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}

func (m *CompIDReqGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompIDReqGrp.Unmarshal(m, b)
}
func (m *CompIDReqGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompIDReqGrp.Marshal(b, m, deterministic)
}
func (m *CompIDReqGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompIDReqGrp.Merge(m, src)
}
func (m *CompIDReqGrp) XXX_Size() int {
	return xxx_messageInfo_CompIDReqGrp.Size(m)
}
func (m *CompIDReqGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_CompIDReqGrp.DiscardUnknown(m)
}

var xxx_messageInfo_CompIDReqGrp proto.InternalMessageInfo

func (m *CompIDReqGrp) GetDeskId() string {
	if m != nil {
		return m.DeskId
	}
	return ""
}

func (m *CompIDReqGrp) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *CompIDReqGrp) GetRefCompId() string {
	if m != nil {
		return m.RefCompId
	}
	return ""
}

func (m *CompIDReqGrp) GetRefSubId() string {
	if m != nil {
		return m.RefSubId
	}
	return ""
}

type CompIDStatGrp struct {
	DeskId               string          `protobuf:"bytes,1,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"`
	LocationId           string          `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	RefCompId            string          `protobuf:"bytes,3,opt,name=ref_comp_id,json=refCompId,proto3" json:"ref_comp_id,omitempty"`
	RefSubId             string          `protobuf:"bytes,4,opt,name=ref_sub_id,json=refSubId,proto3" json:"ref_sub_id,omitempty"`
	StatusText           string          `protobuf:"bytes,5,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	StatusValue          StatusValueEnum `protobuf:"varint,6,opt,name=status_value,json=statusValue,proto3,enum=Common.StatusValueEnum" json:"status_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompIDStatGrp) Reset()         { *m = CompIDStatGrp{} }
func (m *CompIDStatGrp) String() string { return proto.CompactTextString(m) }
func (*CompIDStatGrp) ProtoMessage()    {}
func (*CompIDStatGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}

func (m *CompIDStatGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompIDStatGrp.Unmarshal(m, b)
}
func (m *CompIDStatGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompIDStatGrp.Marshal(b, m, deterministic)
}
func (m *CompIDStatGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompIDStatGrp.Merge(m, src)
}
func (m *CompIDStatGrp) XXX_Size() int {
	return xxx_messageInfo_CompIDStatGrp.Size(m)
}
func (m *CompIDStatGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_CompIDStatGrp.DiscardUnknown(m)
}

var xxx_messageInfo_CompIDStatGrp proto.InternalMessageInfo

func (m *CompIDStatGrp) GetDeskId() string {
	if m != nil {
		return m.DeskId
	}
	return ""
}

func (m *CompIDStatGrp) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *CompIDStatGrp) GetRefCompId() string {
	if m != nil {
		return m.RefCompId
	}
	return ""
}

func (m *CompIDStatGrp) GetRefSubId() string {
	if m != nil {
		return m.RefSubId
	}
	return ""
}

func (m *CompIDStatGrp) GetStatusText() string {
	if m != nil {
		return m.StatusText
	}
	return ""
}

func (m *CompIDStatGrp) GetStatusValue() StatusValueEnum {
	if m != nil {
		return m.StatusValue
	}
	return StatusValueEnum_STATUS_VALUE_UNSPECIFIED
}

type ContAmtGrp struct {
	ContAmtCurr          string          `protobuf:"bytes,1,opt,name=cont_amt_curr,json=contAmtCurr,proto3" json:"cont_amt_curr,omitempty"`
	ContAmtType          ContAmtTypeEnum `protobuf:"varint,2,opt,name=cont_amt_type,json=contAmtType,proto3,enum=Common.ContAmtTypeEnum" json:"cont_amt_type,omitempty"`
	ContAmtValue         *fix.Decimal64      `protobuf:"bytes,3,opt,name=cont_amt_value,json=contAmtValue,proto3" json:"cont_amt_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContAmtGrp) Reset()         { *m = ContAmtGrp{} }
func (m *ContAmtGrp) String() string { return proto.CompactTextString(m) }
func (*ContAmtGrp) ProtoMessage()    {}
func (*ContAmtGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{27}
}

func (m *ContAmtGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContAmtGrp.Unmarshal(m, b)
}
func (m *ContAmtGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContAmtGrp.Marshal(b, m, deterministic)
}
func (m *ContAmtGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContAmtGrp.Merge(m, src)
}
func (m *ContAmtGrp) XXX_Size() int {
	return xxx_messageInfo_ContAmtGrp.Size(m)
}
func (m *ContAmtGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_ContAmtGrp.DiscardUnknown(m)
}

var xxx_messageInfo_ContAmtGrp proto.InternalMessageInfo

func (m *ContAmtGrp) GetContAmtCurr() string {
	if m != nil {
		return m.ContAmtCurr
	}
	return ""
}

func (m *ContAmtGrp) GetContAmtType() ContAmtTypeEnum {
	if m != nil {
		return m.ContAmtType
	}
	return ContAmtTypeEnum_CONT_AMT_TYPE_UNSPECIFIED
}

func (m *ContAmtGrp) GetContAmtValue() *fix.Decimal64 {
	if m != nil {
		return m.ContAmtValue
	}
	return nil
}

type ContraGrp struct {
	ContraBroker         string     `protobuf:"bytes,1,opt,name=contra_broker,json=contraBroker,proto3" json:"contra_broker,omitempty"`
	ContraLegRefId       string     `protobuf:"bytes,2,opt,name=contra_leg_ref_id,json=contraLegRefId,proto3" json:"contra_leg_ref_id,omitempty"`
	ContraTradeQty       *fix.Decimal64 `protobuf:"bytes,3,opt,name=contra_trade_qty,json=contraTradeQty,proto3" json:"contra_trade_qty,omitempty"`
	ContraTradeTime      *fix.Timestamp `protobuf:"bytes,4,opt,name=contra_trade_time,json=contraTradeTime,proto3" json:"contra_trade_time,omitempty"`
	ContraTrader         string     `protobuf:"bytes,5,opt,name=contra_trader,json=contraTrader,proto3" json:"contra_trader,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ContraGrp) Reset()         { *m = ContraGrp{} }
func (m *ContraGrp) String() string { return proto.CompactTextString(m) }
func (*ContraGrp) ProtoMessage()    {}
func (*ContraGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{28}
}

func (m *ContraGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContraGrp.Unmarshal(m, b)
}
func (m *ContraGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContraGrp.Marshal(b, m, deterministic)
}
func (m *ContraGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContraGrp.Merge(m, src)
}
func (m *ContraGrp) XXX_Size() int {
	return xxx_messageInfo_ContraGrp.Size(m)
}
func (m *ContraGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_ContraGrp.DiscardUnknown(m)
}

var xxx_messageInfo_ContraGrp proto.InternalMessageInfo

func (m *ContraGrp) GetContraBroker() string {
	if m != nil {
		return m.ContraBroker
	}
	return ""
}

func (m *ContraGrp) GetContraLegRefId() string {
	if m != nil {
		return m.ContraLegRefId
	}
	return ""
}

func (m *ContraGrp) GetContraTradeQty() *fix.Decimal64 {
	if m != nil {
		return m.ContraTradeQty
	}
	return nil
}

func (m *ContraGrp) GetContraTradeTime() *fix.Timestamp {
	if m != nil {
		return m.ContraTradeTime
	}
	return nil
}

func (m *ContraGrp) GetContraTrader() string {
	if m != nil {
		return m.ContraTrader
	}
	return ""
}

type InstrmtGrp struct {
	Instrument           *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InstrmtGrp) Reset()         { *m = InstrmtGrp{} }
func (m *InstrmtGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtGrp) ProtoMessage()    {}
func (*InstrmtGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{29}
}

func (m *InstrmtGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtGrp.Unmarshal(m, b)
}
func (m *InstrmtGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtGrp.Merge(m, src)
}
func (m *InstrmtGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtGrp.Size(m)
}
func (m *InstrmtGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtGrp proto.InternalMessageInfo

func (m *InstrmtGrp) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

type InstrmtLegExecGrp struct {
	InstrumentLeg           *InstrumentLeg            `protobuf:"bytes,1,opt,name=instrument_leg,json=instrumentLeg,proto3" json:"instrument_leg,omitempty"`
	LegCalculatedCcyLastQty *fix.Decimal64                `protobuf:"bytes,2,opt,name=leg_calculated_ccy_last_qty,json=legCalculatedCcyLastQty,proto3" json:"leg_calculated_ccy_last_qty,omitempty"`
	LegCoveredOrUncovered   LegCoveredOrUncoveredEnum `protobuf:"varint,3,opt,name=leg_covered_or_uncovered,json=legCoveredOrUncovered,proto3,enum=Common.LegCoveredOrUncoveredEnum" json:"leg_covered_or_uncovered,omitempty"`
	LegGrossTradeAmt        *fix.Decimal64                `protobuf:"bytes,4,opt,name=leg_gross_trade_amt,json=legGrossTradeAmt,proto3" json:"leg_gross_trade_amt,omitempty"`
	LegLastForwardPoints    *fix.Decimal64                `protobuf:"bytes,5,opt,name=leg_last_forward_points,json=legLastForwardPoints,proto3" json:"leg_last_forward_points,omitempty"`
	LegLastPx               *fix.Decimal64                `protobuf:"bytes,6,opt,name=leg_last_px,json=legLastPx,proto3" json:"leg_last_px,omitempty"`
	LegOrderQty             *fix.Decimal64                `protobuf:"bytes,7,opt,name=leg_order_qty,json=legOrderQty,proto3" json:"leg_order_qty,omitempty"`
	LegPositionEffect       LegPositionEffectEnum     `protobuf:"varint,8,opt,name=leg_position_effect,json=legPositionEffect,proto3,enum=Common.LegPositionEffectEnum" json:"leg_position_effect,omitempty"`
	LegQty                  *fix.Decimal64                `protobuf:"bytes,9,opt,name=leg_qty,json=legQty,proto3" json:"leg_qty,omitempty"`
	LegRefId                string                    `protobuf:"bytes,10,opt,name=leg_ref_id,json=legRefId,proto3" json:"leg_ref_id,omitempty"`
	LegSettlCurrency        string                    `protobuf:"bytes,11,opt,name=leg_settl_currency,json=legSettlCurrency,proto3" json:"leg_settl_currency,omitempty"`
	LegSettlDate            int32                     `protobuf:"fixed32,12,opt,name=leg_settl_date,json=legSettlDate,proto3" json:"leg_settl_date,omitempty"`
	LegSettlType            LegSettlTypeEnum          `protobuf:"varint,13,opt,name=leg_settl_type,json=legSettlType,proto3,enum=Common.LegSettlTypeEnum" json:"leg_settl_type,omitempty"`
	LegStipulations         []*LegStipulations        `protobuf:"bytes,14,rep,name=leg_stipulations,json=legStipulations,proto3" json:"leg_stipulations,omitempty"`
	LegSwapType             LegSwapTypeEnum           `protobuf:"varint,15,opt,name=leg_swap_type,json=legSwapType,proto3,enum=Common.LegSwapTypeEnum" json:"leg_swap_type,omitempty"`
	LegAllocId              string                    `protobuf:"bytes,16,opt,name=leg_alloc_id,json=legAllocId,proto3" json:"leg_alloc_id,omitempty"`
	LegCurrencyRatio        *fix.Decimal64                `protobuf:"bytes,17,opt,name=leg_currency_ratio,json=legCurrencyRatio,proto3" json:"leg_currency_ratio,omitempty"`
	LegDividendYield        *fix.Decimal64                `protobuf:"bytes,18,opt,name=leg_dividend_yield,json=legDividendYield,proto3" json:"leg_dividend_yield,omitempty"`
	LegExecInst             []LegExecInstEnum         `protobuf:"varint,19,rep,packed,name=leg_exec_inst,json=legExecInst,proto3,enum=Common.LegExecInstEnum" json:"leg_exec_inst,omitempty"`
	LegLastQty              *fix.Decimal64                `protobuf:"bytes,20,opt,name=leg_last_qty,json=legLastQty,proto3" json:"leg_last_qty,omitempty"`
	LegPreAllocGrp          []*LegPreAllocGrp         `protobuf:"bytes,21,rep,name=leg_pre_alloc_grp,json=legPreAllocGrp,proto3" json:"leg_pre_alloc_grp,omitempty"`
	LegVolatility           *fix.Decimal64                `protobuf:"bytes,22,opt,name=leg_volatility,json=legVolatility,proto3" json:"leg_volatility,omitempty"`
	NestedParties3          []*NestedParties3         `protobuf:"bytes,23,rep,name=nested_parties3,json=nestedParties3,proto3" json:"nested_parties3,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                  `json:"-"`
	XXX_unrecognized        []byte                    `json:"-"`
	XXX_sizecache           int32                     `json:"-"`
}

func (m *InstrmtLegExecGrp) Reset()         { *m = InstrmtLegExecGrp{} }
func (m *InstrmtLegExecGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtLegExecGrp) ProtoMessage()    {}
func (*InstrmtLegExecGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{30}
}

func (m *InstrmtLegExecGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtLegExecGrp.Unmarshal(m, b)
}
func (m *InstrmtLegExecGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtLegExecGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtLegExecGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtLegExecGrp.Merge(m, src)
}
func (m *InstrmtLegExecGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtLegExecGrp.Size(m)
}
func (m *InstrmtLegExecGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtLegExecGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtLegExecGrp proto.InternalMessageInfo

func (m *InstrmtLegExecGrp) GetInstrumentLeg() *InstrumentLeg {
	if m != nil {
		return m.InstrumentLeg
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegCalculatedCcyLastQty() *fix.Decimal64 {
	if m != nil {
		return m.LegCalculatedCcyLastQty
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegCoveredOrUncovered() LegCoveredOrUncoveredEnum {
	if m != nil {
		return m.LegCoveredOrUncovered
	}
	return LegCoveredOrUncoveredEnum_LEG_COVERED_OR_UNCOVERED_UNSPECIFIED
}

func (m *InstrmtLegExecGrp) GetLegGrossTradeAmt() *fix.Decimal64 {
	if m != nil {
		return m.LegGrossTradeAmt
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegLastForwardPoints() *fix.Decimal64 {
	if m != nil {
		return m.LegLastForwardPoints
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegLastPx() *fix.Decimal64 {
	if m != nil {
		return m.LegLastPx
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegOrderQty() *fix.Decimal64 {
	if m != nil {
		return m.LegOrderQty
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegPositionEffect() LegPositionEffectEnum {
	if m != nil {
		return m.LegPositionEffect
	}
	return LegPositionEffectEnum_LEG_POSITION_EFFECT_UNSPECIFIED
}

func (m *InstrmtLegExecGrp) GetLegQty() *fix.Decimal64 {
	if m != nil {
		return m.LegQty
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegRefId() string {
	if m != nil {
		return m.LegRefId
	}
	return ""
}

func (m *InstrmtLegExecGrp) GetLegSettlCurrency() string {
	if m != nil {
		return m.LegSettlCurrency
	}
	return ""
}

func (m *InstrmtLegExecGrp) GetLegSettlDate() int32 {
	if m != nil {
		return m.LegSettlDate
	}
	return 0
}

func (m *InstrmtLegExecGrp) GetLegSettlType() LegSettlTypeEnum {
	if m != nil {
		return m.LegSettlType
	}
	return LegSettlTypeEnum_LEG_SETTL_TYPE_UNSPECIFIED
}

func (m *InstrmtLegExecGrp) GetLegStipulations() []*LegStipulations {
	if m != nil {
		return m.LegStipulations
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegSwapType() LegSwapTypeEnum {
	if m != nil {
		return m.LegSwapType
	}
	return LegSwapTypeEnum_LEG_SWAP_TYPE_UNSPECIFIED
}

func (m *InstrmtLegExecGrp) GetLegAllocId() string {
	if m != nil {
		return m.LegAllocId
	}
	return ""
}

func (m *InstrmtLegExecGrp) GetLegCurrencyRatio() *fix.Decimal64 {
	if m != nil {
		return m.LegCurrencyRatio
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegDividendYield() *fix.Decimal64 {
	if m != nil {
		return m.LegDividendYield
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegExecInst() []LegExecInstEnum {
	if m != nil {
		return m.LegExecInst
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegLastQty() *fix.Decimal64 {
	if m != nil {
		return m.LegLastQty
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegPreAllocGrp() []*LegPreAllocGrp {
	if m != nil {
		return m.LegPreAllocGrp
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetLegVolatility() *fix.Decimal64 {
	if m != nil {
		return m.LegVolatility
	}
	return nil
}

func (m *InstrmtLegExecGrp) GetNestedParties3() []*NestedParties3 {
	if m != nil {
		return m.NestedParties3
	}
	return nil
}

type InstrmtLegGrp struct {
	InstrumentLeg        *InstrumentLeg `protobuf:"bytes,1,opt,name=instrument_leg,json=instrumentLeg,proto3" json:"instrument_leg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InstrmtLegGrp) Reset()         { *m = InstrmtLegGrp{} }
func (m *InstrmtLegGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtLegGrp) ProtoMessage()    {}
func (*InstrmtLegGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{31}
}

func (m *InstrmtLegGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtLegGrp.Unmarshal(m, b)
}
func (m *InstrmtLegGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtLegGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtLegGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtLegGrp.Merge(m, src)
}
func (m *InstrmtLegGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtLegGrp.Size(m)
}
func (m *InstrmtLegGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtLegGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtLegGrp proto.InternalMessageInfo

func (m *InstrmtLegGrp) GetInstrumentLeg() *InstrumentLeg {
	if m != nil {
		return m.InstrumentLeg
	}
	return nil
}

type InstrmtLegIOIGrp struct {
	InstrumentLeg        *InstrumentLeg     `protobuf:"bytes,1,opt,name=instrument_leg,json=instrumentLeg,proto3" json:"instrument_leg,omitempty"`
	LegIoiQty            LegIOIQtyEnum      `protobuf:"varint,2,opt,name=leg_ioi_qty,json=legIoiQty,proto3,enum=Common.LegIOIQtyEnum" json:"leg_ioi_qty,omitempty"`
	LegStipulations      []*LegStipulations `protobuf:"bytes,3,rep,name=leg_stipulations,json=legStipulations,proto3" json:"leg_stipulations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InstrmtLegIOIGrp) Reset()         { *m = InstrmtLegIOIGrp{} }
func (m *InstrmtLegIOIGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtLegIOIGrp) ProtoMessage()    {}
func (*InstrmtLegIOIGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{32}
}

func (m *InstrmtLegIOIGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtLegIOIGrp.Unmarshal(m, b)
}
func (m *InstrmtLegIOIGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtLegIOIGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtLegIOIGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtLegIOIGrp.Merge(m, src)
}
func (m *InstrmtLegIOIGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtLegIOIGrp.Size(m)
}
func (m *InstrmtLegIOIGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtLegIOIGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtLegIOIGrp proto.InternalMessageInfo

func (m *InstrmtLegIOIGrp) GetInstrumentLeg() *InstrumentLeg {
	if m != nil {
		return m.InstrumentLeg
	}
	return nil
}

func (m *InstrmtLegIOIGrp) GetLegIoiQty() LegIOIQtyEnum {
	if m != nil {
		return m.LegIoiQty
	}
	return LegIOIQtyEnum_LEG_IOI_QTY_UNSPECIFIED
}

func (m *InstrmtLegIOIGrp) GetLegStipulations() []*LegStipulations {
	if m != nil {
		return m.LegStipulations
	}
	return nil
}

type InstrmtLegSecListGrp struct {
	InstrumentLeg         *InstrumentLeg         `protobuf:"bytes,1,opt,name=instrument_leg,json=instrumentLeg,proto3" json:"instrument_leg,omitempty"`
	LegBenchmarkCurveData *LegBenchmarkCurveData `protobuf:"bytes,2,opt,name=leg_benchmark_curve_data,json=legBenchmarkCurveData,proto3" json:"leg_benchmark_curve_data,omitempty"`
	LegSettlType          LegSettlTypeEnum       `protobuf:"varint,3,opt,name=leg_settl_type,json=legSettlType,proto3,enum=Common.LegSettlTypeEnum" json:"leg_settl_type,omitempty"`
	LegStipulations       []*LegStipulations     `protobuf:"bytes,4,rep,name=leg_stipulations,json=legStipulations,proto3" json:"leg_stipulations,omitempty"`
	LegSwapType           LegSwapTypeEnum        `protobuf:"varint,5,opt,name=leg_swap_type,json=legSwapType,proto3,enum=Common.LegSwapTypeEnum" json:"leg_swap_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *InstrmtLegSecListGrp) Reset()         { *m = InstrmtLegSecListGrp{} }
func (m *InstrmtLegSecListGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtLegSecListGrp) ProtoMessage()    {}
func (*InstrmtLegSecListGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{33}
}

func (m *InstrmtLegSecListGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtLegSecListGrp.Unmarshal(m, b)
}
func (m *InstrmtLegSecListGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtLegSecListGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtLegSecListGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtLegSecListGrp.Merge(m, src)
}
func (m *InstrmtLegSecListGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtLegSecListGrp.Size(m)
}
func (m *InstrmtLegSecListGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtLegSecListGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtLegSecListGrp proto.InternalMessageInfo

func (m *InstrmtLegSecListGrp) GetInstrumentLeg() *InstrumentLeg {
	if m != nil {
		return m.InstrumentLeg
	}
	return nil
}

func (m *InstrmtLegSecListGrp) GetLegBenchmarkCurveData() *LegBenchmarkCurveData {
	if m != nil {
		return m.LegBenchmarkCurveData
	}
	return nil
}

func (m *InstrmtLegSecListGrp) GetLegSettlType() LegSettlTypeEnum {
	if m != nil {
		return m.LegSettlType
	}
	return LegSettlTypeEnum_LEG_SETTL_TYPE_UNSPECIFIED
}

func (m *InstrmtLegSecListGrp) GetLegStipulations() []*LegStipulations {
	if m != nil {
		return m.LegStipulations
	}
	return nil
}

func (m *InstrmtLegSecListGrp) GetLegSwapType() LegSwapTypeEnum {
	if m != nil {
		return m.LegSwapType
	}
	return LegSwapTypeEnum_LEG_SWAP_TYPE_UNSPECIFIED
}

type InstrmtMDReqGrp struct {
	Currency      string           `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	InstrmtLegGrp []*InstrmtLegGrp `protobuf:"bytes,2,rep,name=instrmt_leg_grp,json=instrmtLegGrp,proto3" json:"instrmt_leg_grp,omitempty"`
	Instrument    *Instrument      `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
	MdEntrySize   *fix.Decimal64       `protobuf:"bytes,4,opt,name=md_entry_size,json=mdEntrySize,proto3" json:"md_entry_size,omitempty"`
	QuoteType     QuoteTypeEnum    `protobuf:"varint,5,opt,name=quote_type,json=quoteType,proto3,enum=Common.QuoteTypeEnum" json:"quote_type,omitempty"`
	SettlDate     int32            `protobuf:"fixed32,6,opt,name=settl_date,json=settlDate,proto3" json:"settl_date,omitempty"`
	// Types that are valid to be assigned to SettlTypeUnion:
	//	*InstrmtMDReqGrp_SettlType
	//	*InstrmtMDReqGrp_SettlTypeTenor
	SettlTypeUnion       isInstrmtMDReqGrp_SettlTypeUnion `protobuf_oneof:"settl_type_union"`
	UndInstrmtGrp        []*UndInstrmtGrp                 `protobuf:"bytes,9,rep,name=und_instrmt_grp,json=undInstrmtGrp,proto3" json:"und_instrmt_grp,omitempty"`
	MdStreamId           string                           `protobuf:"bytes,10,opt,name=md_stream_id,json=mdStreamId,proto3" json:"md_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *InstrmtMDReqGrp) Reset()         { *m = InstrmtMDReqGrp{} }
func (m *InstrmtMDReqGrp) String() string { return proto.CompactTextString(m) }
func (*InstrmtMDReqGrp) ProtoMessage()    {}
func (*InstrmtMDReqGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{34}
}

func (m *InstrmtMDReqGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrmtMDReqGrp.Unmarshal(m, b)
}
func (m *InstrmtMDReqGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrmtMDReqGrp.Marshal(b, m, deterministic)
}
func (m *InstrmtMDReqGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrmtMDReqGrp.Merge(m, src)
}
func (m *InstrmtMDReqGrp) XXX_Size() int {
	return xxx_messageInfo_InstrmtMDReqGrp.Size(m)
}
func (m *InstrmtMDReqGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrmtMDReqGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrmtMDReqGrp proto.InternalMessageInfo

func (m *InstrmtMDReqGrp) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *InstrmtMDReqGrp) GetInstrmtLegGrp() []*InstrmtLegGrp {
	if m != nil {
		return m.InstrmtLegGrp
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetMdEntrySize() *fix.Decimal64 {
	if m != nil {
		return m.MdEntrySize
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetQuoteType() QuoteTypeEnum {
	if m != nil {
		return m.QuoteType
	}
	return QuoteTypeEnum_QUOTE_TYPE_UNSPECIFIED
}

func (m *InstrmtMDReqGrp) GetSettlDate() int32 {
	if m != nil {
		return m.SettlDate
	}
	return 0
}

type isInstrmtMDReqGrp_SettlTypeUnion interface {
	isInstrmtMDReqGrp_SettlTypeUnion()
}

type InstrmtMDReqGrp_SettlType struct {
	SettlType SettlTypeEnum `protobuf:"varint,7,opt,name=settl_type,json=settlType,proto3,enum=Common.SettlTypeEnum,oneof"`
}

type InstrmtMDReqGrp_SettlTypeTenor struct {
	SettlTypeTenor *fix.Tenor `protobuf:"bytes,8,opt,name=settl_type_tenor,json=settlTypeTenor,proto3,oneof"`
}

func (*InstrmtMDReqGrp_SettlType) isInstrmtMDReqGrp_SettlTypeUnion() {}

func (*InstrmtMDReqGrp_SettlTypeTenor) isInstrmtMDReqGrp_SettlTypeUnion() {}

func (m *InstrmtMDReqGrp) GetSettlTypeUnion() isInstrmtMDReqGrp_SettlTypeUnion {
	if m != nil {
		return m.SettlTypeUnion
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetSettlType() SettlTypeEnum {
	if x, ok := m.GetSettlTypeUnion().(*InstrmtMDReqGrp_SettlType); ok {
		return x.SettlType
	}
	return SettlTypeEnum_SETTL_TYPE_UNSPECIFIED
}

func (m *InstrmtMDReqGrp) GetSettlTypeTenor() *fix.Tenor {
	if x, ok := m.GetSettlTypeUnion().(*InstrmtMDReqGrp_SettlTypeTenor); ok {
		return x.SettlTypeTenor
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetUndInstrmtGrp() []*UndInstrmtGrp {
	if m != nil {
		return m.UndInstrmtGrp
	}
	return nil
}

func (m *InstrmtMDReqGrp) GetMdStreamId() string {
	if m != nil {
		return m.MdStreamId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstrmtMDReqGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstrmtMDReqGrp_SettlType)(nil),
		(*InstrmtMDReqGrp_SettlTypeTenor)(nil),
	}
}

type LegPreAllocGrp struct {
	LegAllocAccount       string            `protobuf:"bytes,1,opt,name=leg_alloc_account,json=legAllocAccount,proto3" json:"leg_alloc_account,omitempty"`
	LegAllocAcctIdSource  string            `protobuf:"bytes,2,opt,name=leg_alloc_acct_id_source,json=legAllocAcctIdSource,proto3" json:"leg_alloc_acct_id_source,omitempty"`
	LegAllocQty           *fix.Decimal64        `protobuf:"bytes,3,opt,name=leg_alloc_qty,json=legAllocQty,proto3" json:"leg_alloc_qty,omitempty"`
	LegIndividualAllocId  string            `protobuf:"bytes,4,opt,name=leg_individual_alloc_id,json=legIndividualAllocId,proto3" json:"leg_individual_alloc_id,omitempty"`
	NestedParties2        []*NestedParties2 `protobuf:"bytes,5,rep,name=nested_parties2,json=nestedParties2,proto3" json:"nested_parties2,omitempty"`
	LegAllocSettlCurrency string            `protobuf:"bytes,6,opt,name=leg_alloc_settl_currency,json=legAllocSettlCurrency,proto3" json:"leg_alloc_settl_currency,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *LegPreAllocGrp) Reset()         { *m = LegPreAllocGrp{} }
func (m *LegPreAllocGrp) String() string { return proto.CompactTextString(m) }
func (*LegPreAllocGrp) ProtoMessage()    {}
func (*LegPreAllocGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{35}
}

func (m *LegPreAllocGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegPreAllocGrp.Unmarshal(m, b)
}
func (m *LegPreAllocGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegPreAllocGrp.Marshal(b, m, deterministic)
}
func (m *LegPreAllocGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegPreAllocGrp.Merge(m, src)
}
func (m *LegPreAllocGrp) XXX_Size() int {
	return xxx_messageInfo_LegPreAllocGrp.Size(m)
}
func (m *LegPreAllocGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_LegPreAllocGrp.DiscardUnknown(m)
}

var xxx_messageInfo_LegPreAllocGrp proto.InternalMessageInfo

func (m *LegPreAllocGrp) GetLegAllocAccount() string {
	if m != nil {
		return m.LegAllocAccount
	}
	return ""
}

func (m *LegPreAllocGrp) GetLegAllocAcctIdSource() string {
	if m != nil {
		return m.LegAllocAcctIdSource
	}
	return ""
}

func (m *LegPreAllocGrp) GetLegAllocQty() *fix.Decimal64 {
	if m != nil {
		return m.LegAllocQty
	}
	return nil
}

func (m *LegPreAllocGrp) GetLegIndividualAllocId() string {
	if m != nil {
		return m.LegIndividualAllocId
	}
	return ""
}

func (m *LegPreAllocGrp) GetNestedParties2() []*NestedParties2 {
	if m != nil {
		return m.NestedParties2
	}
	return nil
}

func (m *LegPreAllocGrp) GetLegAllocSettlCurrency() string {
	if m != nil {
		return m.LegAllocSettlCurrency
	}
	return ""
}

type LinesOfTextGrp struct {
	EncodedText          string   `protobuf:"bytes,1,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen       int64    `protobuf:"fixed64,2,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinesOfTextGrp) Reset()         { *m = LinesOfTextGrp{} }
func (m *LinesOfTextGrp) String() string { return proto.CompactTextString(m) }
func (*LinesOfTextGrp) ProtoMessage()    {}
func (*LinesOfTextGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{36}
}

func (m *LinesOfTextGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinesOfTextGrp.Unmarshal(m, b)
}
func (m *LinesOfTextGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinesOfTextGrp.Marshal(b, m, deterministic)
}
func (m *LinesOfTextGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinesOfTextGrp.Merge(m, src)
}
func (m *LinesOfTextGrp) XXX_Size() int {
	return xxx_messageInfo_LinesOfTextGrp.Size(m)
}
func (m *LinesOfTextGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_LinesOfTextGrp.DiscardUnknown(m)
}

var xxx_messageInfo_LinesOfTextGrp proto.InternalMessageInfo

func (m *LinesOfTextGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *LinesOfTextGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *LinesOfTextGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MiscFeesGrp struct {
	MiscFeeAmt           *fix.Decimal64       `protobuf:"bytes,1,opt,name=misc_fee_amt,json=miscFeeAmt,proto3" json:"misc_fee_amt,omitempty"`
	MiscFeeBasis         MiscFeeBasisEnum `protobuf:"varint,2,opt,name=misc_fee_basis,json=miscFeeBasis,proto3,enum=Common.MiscFeeBasisEnum" json:"misc_fee_basis,omitempty"`
	MiscFeeCurr          string           `protobuf:"bytes,3,opt,name=misc_fee_curr,json=miscFeeCurr,proto3" json:"misc_fee_curr,omitempty"`
	MiscFeeType          MiscFeeTypeEnum  `protobuf:"varint,4,opt,name=misc_fee_type,json=miscFeeType,proto3,enum=Common.MiscFeeTypeEnum" json:"misc_fee_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MiscFeesGrp) Reset()         { *m = MiscFeesGrp{} }
func (m *MiscFeesGrp) String() string { return proto.CompactTextString(m) }
func (*MiscFeesGrp) ProtoMessage()    {}
func (*MiscFeesGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{37}
}

func (m *MiscFeesGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiscFeesGrp.Unmarshal(m, b)
}
func (m *MiscFeesGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiscFeesGrp.Marshal(b, m, deterministic)
}
func (m *MiscFeesGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiscFeesGrp.Merge(m, src)
}
func (m *MiscFeesGrp) XXX_Size() int {
	return xxx_messageInfo_MiscFeesGrp.Size(m)
}
func (m *MiscFeesGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MiscFeesGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MiscFeesGrp proto.InternalMessageInfo

func (m *MiscFeesGrp) GetMiscFeeAmt() *fix.Decimal64 {
	if m != nil {
		return m.MiscFeeAmt
	}
	return nil
}

func (m *MiscFeesGrp) GetMiscFeeBasis() MiscFeeBasisEnum {
	if m != nil {
		return m.MiscFeeBasis
	}
	return MiscFeeBasisEnum_MISC_FEE_BASIS_UNSPECIFIED
}

func (m *MiscFeesGrp) GetMiscFeeCurr() string {
	if m != nil {
		return m.MiscFeeCurr
	}
	return ""
}

func (m *MiscFeesGrp) GetMiscFeeType() MiscFeeTypeEnum {
	if m != nil {
		return m.MiscFeeType
	}
	return MiscFeeTypeEnum_MISC_FEE_TYPE_UNSPECIFIED
}

type OrdAllocGrp struct {
	ClOrdId              string            `protobuf:"bytes,1,opt,name=cl_ord_id,json=clOrdId,proto3" json:"cl_ord_id,omitempty"`
	ListId               string            `protobuf:"bytes,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	NestedParties2       []*NestedParties2 `protobuf:"bytes,3,rep,name=nested_parties2,json=nestedParties2,proto3" json:"nested_parties2,omitempty"`
	OrderAvgPx           *fix.Decimal64        `protobuf:"bytes,4,opt,name=order_avg_px,json=orderAvgPx,proto3" json:"order_avg_px,omitempty"`
	OrderBookingQty      *fix.Decimal64        `protobuf:"bytes,5,opt,name=order_booking_qty,json=orderBookingQty,proto3" json:"order_booking_qty,omitempty"`
	OrderId              string            `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderQty             *fix.Decimal64        `protobuf:"bytes,7,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	SecondaryClOrdId     string            `protobuf:"bytes,8,opt,name=secondary_cl_ord_id,json=secondaryClOrdId,proto3" json:"secondary_cl_ord_id,omitempty"`
	SecondaryOrderId     string            `protobuf:"bytes,9,opt,name=secondary_order_id,json=secondaryOrderId,proto3" json:"secondary_order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OrdAllocGrp) Reset()         { *m = OrdAllocGrp{} }
func (m *OrdAllocGrp) String() string { return proto.CompactTextString(m) }
func (*OrdAllocGrp) ProtoMessage()    {}
func (*OrdAllocGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{38}
}

func (m *OrdAllocGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdAllocGrp.Unmarshal(m, b)
}
func (m *OrdAllocGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdAllocGrp.Marshal(b, m, deterministic)
}
func (m *OrdAllocGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdAllocGrp.Merge(m, src)
}
func (m *OrdAllocGrp) XXX_Size() int {
	return xxx_messageInfo_OrdAllocGrp.Size(m)
}
func (m *OrdAllocGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdAllocGrp.DiscardUnknown(m)
}

var xxx_messageInfo_OrdAllocGrp proto.InternalMessageInfo

func (m *OrdAllocGrp) GetClOrdId() string {
	if m != nil {
		return m.ClOrdId
	}
	return ""
}

func (m *OrdAllocGrp) GetListId() string {
	if m != nil {
		return m.ListId
	}
	return ""
}

func (m *OrdAllocGrp) GetNestedParties2() []*NestedParties2 {
	if m != nil {
		return m.NestedParties2
	}
	return nil
}

func (m *OrdAllocGrp) GetOrderAvgPx() *fix.Decimal64 {
	if m != nil {
		return m.OrderAvgPx
	}
	return nil
}

func (m *OrdAllocGrp) GetOrderBookingQty() *fix.Decimal64 {
	if m != nil {
		return m.OrderBookingQty
	}
	return nil
}

func (m *OrdAllocGrp) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrdAllocGrp) GetOrderQty() *fix.Decimal64 {
	if m != nil {
		return m.OrderQty
	}
	return nil
}

func (m *OrdAllocGrp) GetSecondaryClOrdId() string {
	if m != nil {
		return m.SecondaryClOrdId
	}
	return ""
}

func (m *OrdAllocGrp) GetSecondaryOrderId() string {
	if m != nil {
		return m.SecondaryOrderId
	}
	return ""
}

type PreAllocGrp struct {
	AllocAccount         string                `protobuf:"bytes,1,opt,name=alloc_account,json=allocAccount,proto3" json:"alloc_account,omitempty"`
	AllocAcctIdSource    AllocAcctIDSourceEnum `protobuf:"varint,2,opt,name=alloc_acct_id_source,json=allocAcctIdSource,proto3,enum=Common.AllocAcctIDSourceEnum" json:"alloc_acct_id_source,omitempty"`
	AllocQty             *fix.Decimal64            `protobuf:"bytes,3,opt,name=alloc_qty,json=allocQty,proto3" json:"alloc_qty,omitempty"`
	AllocSettlCurrency   string                `protobuf:"bytes,4,opt,name=alloc_settl_currency,json=allocSettlCurrency,proto3" json:"alloc_settl_currency,omitempty"`
	IndividualAllocId    string                `protobuf:"bytes,5,opt,name=individual_alloc_id,json=individualAllocId,proto3" json:"individual_alloc_id,omitempty"`
	NestedParties        []*NestedParties      `protobuf:"bytes,6,rep,name=nested_parties,json=nestedParties,proto3" json:"nested_parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PreAllocGrp) Reset()         { *m = PreAllocGrp{} }
func (m *PreAllocGrp) String() string { return proto.CompactTextString(m) }
func (*PreAllocGrp) ProtoMessage()    {}
func (*PreAllocGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{39}
}

func (m *PreAllocGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreAllocGrp.Unmarshal(m, b)
}
func (m *PreAllocGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreAllocGrp.Marshal(b, m, deterministic)
}
func (m *PreAllocGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreAllocGrp.Merge(m, src)
}
func (m *PreAllocGrp) XXX_Size() int {
	return xxx_messageInfo_PreAllocGrp.Size(m)
}
func (m *PreAllocGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_PreAllocGrp.DiscardUnknown(m)
}

var xxx_messageInfo_PreAllocGrp proto.InternalMessageInfo

func (m *PreAllocGrp) GetAllocAccount() string {
	if m != nil {
		return m.AllocAccount
	}
	return ""
}

func (m *PreAllocGrp) GetAllocAcctIdSource() AllocAcctIDSourceEnum {
	if m != nil {
		return m.AllocAcctIdSource
	}
	return AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_UNSPECIFIED
}

func (m *PreAllocGrp) GetAllocQty() *fix.Decimal64 {
	if m != nil {
		return m.AllocQty
	}
	return nil
}

func (m *PreAllocGrp) GetAllocSettlCurrency() string {
	if m != nil {
		return m.AllocSettlCurrency
	}
	return ""
}

func (m *PreAllocGrp) GetIndividualAllocId() string {
	if m != nil {
		return m.IndividualAllocId
	}
	return ""
}

func (m *PreAllocGrp) GetNestedParties() []*NestedParties {
	if m != nil {
		return m.NestedParties
	}
	return nil
}

type PreAllocMlegGrp struct {
	AllocAccount         string                `protobuf:"bytes,1,opt,name=alloc_account,json=allocAccount,proto3" json:"alloc_account,omitempty"`
	AllocAcctIdSource    AllocAcctIDSourceEnum `protobuf:"varint,2,opt,name=alloc_acct_id_source,json=allocAcctIdSource,proto3,enum=Common.AllocAcctIDSourceEnum" json:"alloc_acct_id_source,omitempty"`
	AllocQty             *fix.Decimal64            `protobuf:"bytes,3,opt,name=alloc_qty,json=allocQty,proto3" json:"alloc_qty,omitempty"`
	AllocSettlCurrency   string                `protobuf:"bytes,4,opt,name=alloc_settl_currency,json=allocSettlCurrency,proto3" json:"alloc_settl_currency,omitempty"`
	IndividualAllocId    string                `protobuf:"bytes,5,opt,name=individual_alloc_id,json=individualAllocId,proto3" json:"individual_alloc_id,omitempty"`
	NestedParties3       []*NestedParties3     `protobuf:"bytes,6,rep,name=nested_parties3,json=nestedParties3,proto3" json:"nested_parties3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PreAllocMlegGrp) Reset()         { *m = PreAllocMlegGrp{} }
func (m *PreAllocMlegGrp) String() string { return proto.CompactTextString(m) }
func (*PreAllocMlegGrp) ProtoMessage()    {}
func (*PreAllocMlegGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{40}
}

func (m *PreAllocMlegGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreAllocMlegGrp.Unmarshal(m, b)
}
func (m *PreAllocMlegGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreAllocMlegGrp.Marshal(b, m, deterministic)
}
func (m *PreAllocMlegGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreAllocMlegGrp.Merge(m, src)
}
func (m *PreAllocMlegGrp) XXX_Size() int {
	return xxx_messageInfo_PreAllocMlegGrp.Size(m)
}
func (m *PreAllocMlegGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_PreAllocMlegGrp.DiscardUnknown(m)
}

var xxx_messageInfo_PreAllocMlegGrp proto.InternalMessageInfo

func (m *PreAllocMlegGrp) GetAllocAccount() string {
	if m != nil {
		return m.AllocAccount
	}
	return ""
}

func (m *PreAllocMlegGrp) GetAllocAcctIdSource() AllocAcctIDSourceEnum {
	if m != nil {
		return m.AllocAcctIdSource
	}
	return AllocAcctIDSourceEnum_ALLOC_ACCT_ID_SOURCE_UNSPECIFIED
}

func (m *PreAllocMlegGrp) GetAllocQty() *fix.Decimal64 {
	if m != nil {
		return m.AllocQty
	}
	return nil
}

func (m *PreAllocMlegGrp) GetAllocSettlCurrency() string {
	if m != nil {
		return m.AllocSettlCurrency
	}
	return ""
}

func (m *PreAllocMlegGrp) GetIndividualAllocId() string {
	if m != nil {
		return m.IndividualAllocId
	}
	return ""
}

func (m *PreAllocMlegGrp) GetNestedParties3() []*NestedParties3 {
	if m != nil {
		return m.NestedParties3
	}
	return nil
}

type RoutingGrp struct {
	RoutingId            string          `protobuf:"bytes,1,opt,name=routing_id,json=routingId,proto3" json:"routing_id,omitempty"`
	RoutingType          RoutingTypeEnum `protobuf:"varint,2,opt,name=routing_type,json=routingType,proto3,enum=Common.RoutingTypeEnum" json:"routing_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RoutingGrp) Reset()         { *m = RoutingGrp{} }
func (m *RoutingGrp) String() string { return proto.CompactTextString(m) }
func (*RoutingGrp) ProtoMessage()    {}
func (*RoutingGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{41}
}

func (m *RoutingGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingGrp.Unmarshal(m, b)
}
func (m *RoutingGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingGrp.Marshal(b, m, deterministic)
}
func (m *RoutingGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingGrp.Merge(m, src)
}
func (m *RoutingGrp) XXX_Size() int {
	return xxx_messageInfo_RoutingGrp.Size(m)
}
func (m *RoutingGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingGrp.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingGrp proto.InternalMessageInfo

func (m *RoutingGrp) GetRoutingId() string {
	if m != nil {
		return m.RoutingId
	}
	return ""
}

func (m *RoutingGrp) GetRoutingType() RoutingTypeEnum {
	if m != nil {
		return m.RoutingType
	}
	return RoutingTypeEnum_ROUTING_TYPE_UNSPECIFIED
}

type TrdgSesGrp struct {
	// Types that are valid to be assigned to TradingSessionIdUnion:
	//	*TrdgSesGrp_TradingSessionId
	//	*TrdgSesGrp_TradingSessionIdReserved100Plus
	TradingSessionIdUnion isTrdgSesGrp_TradingSessionIdUnion `protobuf_oneof:"trading_session_id_union"`
	// Types that are valid to be assigned to TradingSessionSubIdUnion:
	//	*TrdgSesGrp_TradingSessionSubId
	//	*TrdgSesGrp_TradingSessionSubIdReserved100Plus
	TradingSessionSubIdUnion isTrdgSesGrp_TradingSessionSubIdUnion `protobuf_oneof:"trading_session_sub_id_union"`
	XXX_NoUnkeyedLiteral     struct{}                              `json:"-"`
	XXX_unrecognized         []byte                                `json:"-"`
	XXX_sizecache            int32                                 `json:"-"`
}

func (m *TrdgSesGrp) Reset()         { *m = TrdgSesGrp{} }
func (m *TrdgSesGrp) String() string { return proto.CompactTextString(m) }
func (*TrdgSesGrp) ProtoMessage()    {}
func (*TrdgSesGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{42}
}

func (m *TrdgSesGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdgSesGrp.Unmarshal(m, b)
}
func (m *TrdgSesGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdgSesGrp.Marshal(b, m, deterministic)
}
func (m *TrdgSesGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdgSesGrp.Merge(m, src)
}
func (m *TrdgSesGrp) XXX_Size() int {
	return xxx_messageInfo_TrdgSesGrp.Size(m)
}
func (m *TrdgSesGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdgSesGrp.DiscardUnknown(m)
}

var xxx_messageInfo_TrdgSesGrp proto.InternalMessageInfo

type isTrdgSesGrp_TradingSessionIdUnion interface {
	isTrdgSesGrp_TradingSessionIdUnion()
}

type TrdgSesGrp_TradingSessionId struct {
	TradingSessionId TradingSessionIDEnum `protobuf:"varint,1,opt,name=trading_session_id,json=tradingSessionId,proto3,enum=Common.TradingSessionIDEnum,oneof"`
}

type TrdgSesGrp_TradingSessionIdReserved100Plus struct {
	TradingSessionIdReserved100Plus uint32 `protobuf:"fixed32,2,opt,name=trading_session_id_reserved100plus,json=tradingSessionIdReserved100plus,proto3,oneof"`
}

func (*TrdgSesGrp_TradingSessionId) isTrdgSesGrp_TradingSessionIdUnion() {}

func (*TrdgSesGrp_TradingSessionIdReserved100Plus) isTrdgSesGrp_TradingSessionIdUnion() {}

func (m *TrdgSesGrp) GetTradingSessionIdUnion() isTrdgSesGrp_TradingSessionIdUnion {
	if m != nil {
		return m.TradingSessionIdUnion
	}
	return nil
}

func (m *TrdgSesGrp) GetTradingSessionId() TradingSessionIDEnum {
	if x, ok := m.GetTradingSessionIdUnion().(*TrdgSesGrp_TradingSessionId); ok {
		return x.TradingSessionId
	}
	return TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED
}

func (m *TrdgSesGrp) GetTradingSessionIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionIdUnion().(*TrdgSesGrp_TradingSessionIdReserved100Plus); ok {
		return x.TradingSessionIdReserved100Plus
	}
	return 0
}

type isTrdgSesGrp_TradingSessionSubIdUnion interface {
	isTrdgSesGrp_TradingSessionSubIdUnion()
}

type TrdgSesGrp_TradingSessionSubId struct {
	TradingSessionSubId TradingSessionSubIDEnum `protobuf:"varint,3,opt,name=trading_session_sub_id,json=tradingSessionSubId,proto3,enum=Common.TradingSessionSubIDEnum,oneof"`
}

type TrdgSesGrp_TradingSessionSubIdReserved100Plus struct {
	TradingSessionSubIdReserved100Plus uint32 `protobuf:"fixed32,4,opt,name=trading_session_sub_id_reserved100plus,json=tradingSessionSubIdReserved100plus,proto3,oneof"`
}

func (*TrdgSesGrp_TradingSessionSubId) isTrdgSesGrp_TradingSessionSubIdUnion() {}

func (*TrdgSesGrp_TradingSessionSubIdReserved100Plus) isTrdgSesGrp_TradingSessionSubIdUnion() {}

func (m *TrdgSesGrp) GetTradingSessionSubIdUnion() isTrdgSesGrp_TradingSessionSubIdUnion {
	if m != nil {
		return m.TradingSessionSubIdUnion
	}
	return nil
}

func (m *TrdgSesGrp) GetTradingSessionSubId() TradingSessionSubIDEnum {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TrdgSesGrp_TradingSessionSubId); ok {
		return x.TradingSessionSubId
	}
	return TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED
}

func (m *TrdgSesGrp) GetTradingSessionSubIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TrdgSesGrp_TradingSessionSubIdReserved100Plus); ok {
		return x.TradingSessionSubIdReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrdgSesGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrdgSesGrp_TradingSessionId)(nil),
		(*TrdgSesGrp_TradingSessionIdReserved100Plus)(nil),
		(*TrdgSesGrp_TradingSessionSubId)(nil),
		(*TrdgSesGrp_TradingSessionSubIdReserved100Plus)(nil),
	}
}

type UndInstrmtGrp struct {
	UnderlyingInstrument *UnderlyingInstrument `protobuf:"bytes,1,opt,name=underlying_instrument,json=underlyingInstrument,proto3" json:"underlying_instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UndInstrmtGrp) Reset()         { *m = UndInstrmtGrp{} }
func (m *UndInstrmtGrp) String() string { return proto.CompactTextString(m) }
func (*UndInstrmtGrp) ProtoMessage()    {}
func (*UndInstrmtGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{43}
}

func (m *UndInstrmtGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndInstrmtGrp.Unmarshal(m, b)
}
func (m *UndInstrmtGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndInstrmtGrp.Marshal(b, m, deterministic)
}
func (m *UndInstrmtGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndInstrmtGrp.Merge(m, src)
}
func (m *UndInstrmtGrp) XXX_Size() int {
	return xxx_messageInfo_UndInstrmtGrp.Size(m)
}
func (m *UndInstrmtGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_UndInstrmtGrp.DiscardUnknown(m)
}

var xxx_messageInfo_UndInstrmtGrp proto.InternalMessageInfo

func (m *UndInstrmtGrp) GetUnderlyingInstrument() *UnderlyingInstrument {
	if m != nil {
		return m.UnderlyingInstrument
	}
	return nil
}

type EvntGrp struct {
	EventDate int32      `protobuf:"fixed32,1,opt,name=event_date,json=eventDate,proto3" json:"event_date,omitempty"`
	EventPx   *fix.Decimal64 `protobuf:"bytes,2,opt,name=event_px,json=eventPx,proto3" json:"event_px,omitempty"`
	EventText string     `protobuf:"bytes,3,opt,name=event_text,json=eventText,proto3" json:"event_text,omitempty"`
	// Types that are valid to be assigned to EventTypeUnion:
	//	*EvntGrp_EventType
	//	*EvntGrp_EventTypeReserved100Plus
	EventTypeUnion       isEvntGrp_EventTypeUnion `protobuf_oneof:"event_type_union"`
	EventTime            *fix.Timestamp               `protobuf:"bytes,6,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EvntGrp) Reset()         { *m = EvntGrp{} }
func (m *EvntGrp) String() string { return proto.CompactTextString(m) }
func (*EvntGrp) ProtoMessage()    {}
func (*EvntGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{44}
}

func (m *EvntGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvntGrp.Unmarshal(m, b)
}
func (m *EvntGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvntGrp.Marshal(b, m, deterministic)
}
func (m *EvntGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvntGrp.Merge(m, src)
}
func (m *EvntGrp) XXX_Size() int {
	return xxx_messageInfo_EvntGrp.Size(m)
}
func (m *EvntGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvntGrp.DiscardUnknown(m)
}

var xxx_messageInfo_EvntGrp proto.InternalMessageInfo

func (m *EvntGrp) GetEventDate() int32 {
	if m != nil {
		return m.EventDate
	}
	return 0
}

func (m *EvntGrp) GetEventPx() *fix.Decimal64 {
	if m != nil {
		return m.EventPx
	}
	return nil
}

func (m *EvntGrp) GetEventText() string {
	if m != nil {
		return m.EventText
	}
	return ""
}

type isEvntGrp_EventTypeUnion interface {
	isEvntGrp_EventTypeUnion()
}

type EvntGrp_EventType struct {
	EventType EventTypeEnum `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=Common.EventTypeEnum,oneof"`
}

type EvntGrp_EventTypeReserved100Plus struct {
	EventTypeReserved100Plus uint32 `protobuf:"fixed32,5,opt,name=event_type_reserved100plus,json=eventTypeReserved100plus,proto3,oneof"`
}

func (*EvntGrp_EventType) isEvntGrp_EventTypeUnion() {}

func (*EvntGrp_EventTypeReserved100Plus) isEvntGrp_EventTypeUnion() {}

func (m *EvntGrp) GetEventTypeUnion() isEvntGrp_EventTypeUnion {
	if m != nil {
		return m.EventTypeUnion
	}
	return nil
}

func (m *EvntGrp) GetEventType() EventTypeEnum {
	if x, ok := m.GetEventTypeUnion().(*EvntGrp_EventType); ok {
		return x.EventType
	}
	return EventTypeEnum_EVENT_TYPE_UNSPECIFIED
}

func (m *EvntGrp) GetEventTypeReserved100Plus() uint32 {
	if x, ok := m.GetEventTypeUnion().(*EvntGrp_EventTypeReserved100Plus); ok {
		return x.EventTypeReserved100Plus
	}
	return 0
}

func (m *EvntGrp) GetEventTime() *fix.Timestamp {
	if m != nil {
		return m.EventTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EvntGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EvntGrp_EventType)(nil),
		(*EvntGrp_EventTypeReserved100Plus)(nil),
	}
}

type SecAltIDGrp struct {
	SecurityAltId        string                  `protobuf:"bytes,1,opt,name=security_alt_id,json=securityAltId,proto3" json:"security_alt_id,omitempty"`
	SecurityAltIdSource  SecurityAltIDSourceEnum `protobuf:"varint,2,opt,name=security_alt_id_source,json=securityAltIdSource,proto3,enum=Common.SecurityAltIDSourceEnum" json:"security_alt_id_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SecAltIDGrp) Reset()         { *m = SecAltIDGrp{} }
func (m *SecAltIDGrp) String() string { return proto.CompactTextString(m) }
func (*SecAltIDGrp) ProtoMessage()    {}
func (*SecAltIDGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{45}
}

func (m *SecAltIDGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecAltIDGrp.Unmarshal(m, b)
}
func (m *SecAltIDGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecAltIDGrp.Marshal(b, m, deterministic)
}
func (m *SecAltIDGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecAltIDGrp.Merge(m, src)
}
func (m *SecAltIDGrp) XXX_Size() int {
	return xxx_messageInfo_SecAltIDGrp.Size(m)
}
func (m *SecAltIDGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_SecAltIDGrp.DiscardUnknown(m)
}

var xxx_messageInfo_SecAltIDGrp proto.InternalMessageInfo

func (m *SecAltIDGrp) GetSecurityAltId() string {
	if m != nil {
		return m.SecurityAltId
	}
	return ""
}

func (m *SecAltIDGrp) GetSecurityAltIdSource() SecurityAltIDSourceEnum {
	if m != nil {
		return m.SecurityAltIdSource
	}
	return SecurityAltIDSourceEnum_SECURITY_ALT_ID_SOURCE_UNSPECIFIED
}

type LegSecAltIDGrp struct {
	LegSecurityAltId       string                     `protobuf:"bytes,1,opt,name=leg_security_alt_id,json=legSecurityAltId,proto3" json:"leg_security_alt_id,omitempty"`
	LegSecurityAltIdSource LegSecurityAltIDSourceEnum `protobuf:"varint,2,opt,name=leg_security_alt_id_source,json=legSecurityAltIdSource,proto3,enum=Common.LegSecurityAltIDSourceEnum" json:"leg_security_alt_id_source,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                   `json:"-"`
	XXX_unrecognized       []byte                     `json:"-"`
	XXX_sizecache          int32                      `json:"-"`
}

func (m *LegSecAltIDGrp) Reset()         { *m = LegSecAltIDGrp{} }
func (m *LegSecAltIDGrp) String() string { return proto.CompactTextString(m) }
func (*LegSecAltIDGrp) ProtoMessage()    {}
func (*LegSecAltIDGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{46}
}

func (m *LegSecAltIDGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LegSecAltIDGrp.Unmarshal(m, b)
}
func (m *LegSecAltIDGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LegSecAltIDGrp.Marshal(b, m, deterministic)
}
func (m *LegSecAltIDGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegSecAltIDGrp.Merge(m, src)
}
func (m *LegSecAltIDGrp) XXX_Size() int {
	return xxx_messageInfo_LegSecAltIDGrp.Size(m)
}
func (m *LegSecAltIDGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_LegSecAltIDGrp.DiscardUnknown(m)
}

var xxx_messageInfo_LegSecAltIDGrp proto.InternalMessageInfo

func (m *LegSecAltIDGrp) GetLegSecurityAltId() string {
	if m != nil {
		return m.LegSecurityAltId
	}
	return ""
}

func (m *LegSecAltIDGrp) GetLegSecurityAltIdSource() LegSecurityAltIDSourceEnum {
	if m != nil {
		return m.LegSecurityAltIdSource
	}
	return LegSecurityAltIDSourceEnum_LEG_SECURITY_ALT_ID_SOURCE_UNSPECIFIED
}

type UndSecAltIDGrp struct {
	UnderlyingSecurityAltId       string                            `protobuf:"bytes,1,opt,name=underlying_security_alt_id,json=underlyingSecurityAltId,proto3" json:"underlying_security_alt_id,omitempty"`
	UnderlyingSecurityAltIdSource UnderlyingSecurityAltIDSourceEnum `protobuf:"varint,2,opt,name=underlying_security_alt_id_source,json=underlyingSecurityAltIdSource,proto3,enum=Common.UnderlyingSecurityAltIDSourceEnum" json:"underlying_security_alt_id_source,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                          `json:"-"`
	XXX_unrecognized              []byte                            `json:"-"`
	XXX_sizecache                 int32                             `json:"-"`
}

func (m *UndSecAltIDGrp) Reset()         { *m = UndSecAltIDGrp{} }
func (m *UndSecAltIDGrp) String() string { return proto.CompactTextString(m) }
func (*UndSecAltIDGrp) ProtoMessage()    {}
func (*UndSecAltIDGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{47}
}

func (m *UndSecAltIDGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndSecAltIDGrp.Unmarshal(m, b)
}
func (m *UndSecAltIDGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndSecAltIDGrp.Marshal(b, m, deterministic)
}
func (m *UndSecAltIDGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndSecAltIDGrp.Merge(m, src)
}
func (m *UndSecAltIDGrp) XXX_Size() int {
	return xxx_messageInfo_UndSecAltIDGrp.Size(m)
}
func (m *UndSecAltIDGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_UndSecAltIDGrp.DiscardUnknown(m)
}

var xxx_messageInfo_UndSecAltIDGrp proto.InternalMessageInfo

func (m *UndSecAltIDGrp) GetUnderlyingSecurityAltId() string {
	if m != nil {
		return m.UnderlyingSecurityAltId
	}
	return ""
}

func (m *UndSecAltIDGrp) GetUnderlyingSecurityAltIdSource() UnderlyingSecurityAltIDSourceEnum {
	if m != nil {
		return m.UnderlyingSecurityAltIdSource
	}
	return UnderlyingSecurityAltIDSourceEnum_UNDERLYING_SECURITY_ALT_ID_SOURCE_UNSPECIFIED
}

type AttrbGrp struct {
	// Types that are valid to be assigned to InstrAttribTypeUnion:
	//	*AttrbGrp_InstrAttribType
	//	*AttrbGrp_InstrAttribTypeReserved100Plus
	InstrAttribTypeUnion isAttrbGrp_InstrAttribTypeUnion `protobuf_oneof:"instr_attrib_type_union"`
	InstrAttribValue     string                          `protobuf:"bytes,3,opt,name=instr_attrib_value,json=instrAttribValue,proto3" json:"instr_attrib_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AttrbGrp) Reset()         { *m = AttrbGrp{} }
func (m *AttrbGrp) String() string { return proto.CompactTextString(m) }
func (*AttrbGrp) ProtoMessage()    {}
func (*AttrbGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{48}
}

func (m *AttrbGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttrbGrp.Unmarshal(m, b)
}
func (m *AttrbGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttrbGrp.Marshal(b, m, deterministic)
}
func (m *AttrbGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrbGrp.Merge(m, src)
}
func (m *AttrbGrp) XXX_Size() int {
	return xxx_messageInfo_AttrbGrp.Size(m)
}
func (m *AttrbGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrbGrp.DiscardUnknown(m)
}

var xxx_messageInfo_AttrbGrp proto.InternalMessageInfo

type isAttrbGrp_InstrAttribTypeUnion interface {
	isAttrbGrp_InstrAttribTypeUnion()
}

type AttrbGrp_InstrAttribType struct {
	InstrAttribType InstrAttribTypeEnum `protobuf:"varint,1,opt,name=instr_attrib_type,json=instrAttribType,proto3,enum=Common.InstrAttribTypeEnum,oneof"`
}

type AttrbGrp_InstrAttribTypeReserved100Plus struct {
	InstrAttribTypeReserved100Plus uint32 `protobuf:"fixed32,2,opt,name=instr_attrib_type_reserved100plus,json=instrAttribTypeReserved100plus,proto3,oneof"`
}

func (*AttrbGrp_InstrAttribType) isAttrbGrp_InstrAttribTypeUnion() {}

func (*AttrbGrp_InstrAttribTypeReserved100Plus) isAttrbGrp_InstrAttribTypeUnion() {}

func (m *AttrbGrp) GetInstrAttribTypeUnion() isAttrbGrp_InstrAttribTypeUnion {
	if m != nil {
		return m.InstrAttribTypeUnion
	}
	return nil
}

func (m *AttrbGrp) GetInstrAttribType() InstrAttribTypeEnum {
	if x, ok := m.GetInstrAttribTypeUnion().(*AttrbGrp_InstrAttribType); ok {
		return x.InstrAttribType
	}
	return InstrAttribTypeEnum_INSTR_ATTRIB_TYPE_UNSPECIFIED
}

func (m *AttrbGrp) GetInstrAttribTypeReserved100Plus() uint32 {
	if x, ok := m.GetInstrAttribTypeUnion().(*AttrbGrp_InstrAttribTypeReserved100Plus); ok {
		return x.InstrAttribTypeReserved100Plus
	}
	return 0
}

func (m *AttrbGrp) GetInstrAttribValue() string {
	if m != nil {
		return m.InstrAttribValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttrbGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttrbGrp_InstrAttribType)(nil),
		(*AttrbGrp_InstrAttribTypeReserved100Plus)(nil),
	}
}

type DlvyInstGrp struct {
	DlvyInstType         DlvyInstTypeEnum    `protobuf:"varint,1,opt,name=dlvy_inst_type,json=dlvyInstType,proto3,enum=Common.DlvyInstTypeEnum" json:"dlvy_inst_type,omitempty"`
	SettlInstSource      SettlInstSourceEnum `protobuf:"varint,2,opt,name=settl_inst_source,json=settlInstSource,proto3,enum=Common.SettlInstSourceEnum" json:"settl_inst_source,omitempty"`
	SettlParties         []*SettlParties     `protobuf:"bytes,3,rep,name=settl_parties,json=settlParties,proto3" json:"settl_parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DlvyInstGrp) Reset()         { *m = DlvyInstGrp{} }
func (m *DlvyInstGrp) String() string { return proto.CompactTextString(m) }
func (*DlvyInstGrp) ProtoMessage()    {}
func (*DlvyInstGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{49}
}

func (m *DlvyInstGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DlvyInstGrp.Unmarshal(m, b)
}
func (m *DlvyInstGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DlvyInstGrp.Marshal(b, m, deterministic)
}
func (m *DlvyInstGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DlvyInstGrp.Merge(m, src)
}
func (m *DlvyInstGrp) XXX_Size() int {
	return xxx_messageInfo_DlvyInstGrp.Size(m)
}
func (m *DlvyInstGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_DlvyInstGrp.DiscardUnknown(m)
}

var xxx_messageInfo_DlvyInstGrp proto.InternalMessageInfo

func (m *DlvyInstGrp) GetDlvyInstType() DlvyInstTypeEnum {
	if m != nil {
		return m.DlvyInstType
	}
	return DlvyInstTypeEnum_DLVY_INST_TYPE_UNSPECIFIED
}

func (m *DlvyInstGrp) GetSettlInstSource() SettlInstSourceEnum {
	if m != nil {
		return m.SettlInstSource
	}
	return SettlInstSourceEnum_SETTL_INST_SOURCE_UNSPECIFIED
}

func (m *DlvyInstGrp) GetSettlParties() []*SettlParties {
	if m != nil {
		return m.SettlParties
	}
	return nil
}

type SettlPtysSubGrp struct {
	SettlPartySubId      string                  `protobuf:"bytes,1,opt,name=settl_party_sub_id,json=settlPartySubId,proto3" json:"settl_party_sub_id,omitempty"`
	SettlPartySubIdType  SettlPartySubIDTypeEnum `protobuf:"varint,2,opt,name=settl_party_sub_id_type,json=settlPartySubIdType,proto3,enum=Common.SettlPartySubIDTypeEnum" json:"settl_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SettlPtysSubGrp) Reset()         { *m = SettlPtysSubGrp{} }
func (m *SettlPtysSubGrp) String() string { return proto.CompactTextString(m) }
func (*SettlPtysSubGrp) ProtoMessage()    {}
func (*SettlPtysSubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{50}
}

func (m *SettlPtysSubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlPtysSubGrp.Unmarshal(m, b)
}
func (m *SettlPtysSubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlPtysSubGrp.Marshal(b, m, deterministic)
}
func (m *SettlPtysSubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlPtysSubGrp.Merge(m, src)
}
func (m *SettlPtysSubGrp) XXX_Size() int {
	return xxx_messageInfo_SettlPtysSubGrp.Size(m)
}
func (m *SettlPtysSubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlPtysSubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_SettlPtysSubGrp proto.InternalMessageInfo

func (m *SettlPtysSubGrp) GetSettlPartySubId() string {
	if m != nil {
		return m.SettlPartySubId
	}
	return ""
}

func (m *SettlPtysSubGrp) GetSettlPartySubIdType() SettlPartySubIDTypeEnum {
	if m != nil {
		return m.SettlPartySubIdType
	}
	return SettlPartySubIDTypeEnum_SETTL_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type PtysSubGrp struct {
	PartySubId string `protobuf:"bytes,1,opt,name=party_sub_id,json=partySubId,proto3" json:"party_sub_id,omitempty"`
	// Types that are valid to be assigned to PartySubIdTypeUnion:
	//	*PtysSubGrp_PartySubIdType
	//	*PtysSubGrp_PartySubIdTypeReserved4000Plus
	PartySubIdTypeUnion  isPtysSubGrp_PartySubIdTypeUnion `protobuf_oneof:"party_sub_id_type_union"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PtysSubGrp) Reset()         { *m = PtysSubGrp{} }
func (m *PtysSubGrp) String() string { return proto.CompactTextString(m) }
func (*PtysSubGrp) ProtoMessage()    {}
func (*PtysSubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{51}
}

func (m *PtysSubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtysSubGrp.Unmarshal(m, b)
}
func (m *PtysSubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtysSubGrp.Marshal(b, m, deterministic)
}
func (m *PtysSubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtysSubGrp.Merge(m, src)
}
func (m *PtysSubGrp) XXX_Size() int {
	return xxx_messageInfo_PtysSubGrp.Size(m)
}
func (m *PtysSubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_PtysSubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_PtysSubGrp proto.InternalMessageInfo

func (m *PtysSubGrp) GetPartySubId() string {
	if m != nil {
		return m.PartySubId
	}
	return ""
}

type isPtysSubGrp_PartySubIdTypeUnion interface {
	isPtysSubGrp_PartySubIdTypeUnion()
}

type PtysSubGrp_PartySubIdType struct {
	PartySubIdType PartySubIDTypeEnum `protobuf:"varint,2,opt,name=party_sub_id_type,json=partySubIdType,proto3,enum=Common.PartySubIDTypeEnum,oneof"`
}

type PtysSubGrp_PartySubIdTypeReserved4000Plus struct {
	PartySubIdTypeReserved4000Plus uint32 `protobuf:"fixed32,3,opt,name=party_sub_id_type_reserved4000plus,json=partySubIdTypeReserved4000plus,proto3,oneof"`
}

func (*PtysSubGrp_PartySubIdType) isPtysSubGrp_PartySubIdTypeUnion() {}

func (*PtysSubGrp_PartySubIdTypeReserved4000Plus) isPtysSubGrp_PartySubIdTypeUnion() {}

func (m *PtysSubGrp) GetPartySubIdTypeUnion() isPtysSubGrp_PartySubIdTypeUnion {
	if m != nil {
		return m.PartySubIdTypeUnion
	}
	return nil
}

func (m *PtysSubGrp) GetPartySubIdType() PartySubIDTypeEnum {
	if x, ok := m.GetPartySubIdTypeUnion().(*PtysSubGrp_PartySubIdType); ok {
		return x.PartySubIdType
	}
	return PartySubIDTypeEnum_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

func (m *PtysSubGrp) GetPartySubIdTypeReserved4000Plus() uint32 {
	if x, ok := m.GetPartySubIdTypeUnion().(*PtysSubGrp_PartySubIdTypeReserved4000Plus); ok {
		return x.PartySubIdTypeReserved4000Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PtysSubGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PtysSubGrp_PartySubIdType)(nil),
		(*PtysSubGrp_PartySubIdTypeReserved4000Plus)(nil),
	}
}

type NstdPtysSubGrp struct {
	NestedPartySubId     string                   `protobuf:"bytes,1,opt,name=nested_party_sub_id,json=nestedPartySubId,proto3" json:"nested_party_sub_id,omitempty"`
	NestedPartySubIdType NestedPartySubIDTypeEnum `protobuf:"varint,2,opt,name=nested_party_sub_id_type,json=nestedPartySubIdType,proto3,enum=Common.NestedPartySubIDTypeEnum" json:"nested_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NstdPtysSubGrp) Reset()         { *m = NstdPtysSubGrp{} }
func (m *NstdPtysSubGrp) String() string { return proto.CompactTextString(m) }
func (*NstdPtysSubGrp) ProtoMessage()    {}
func (*NstdPtysSubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{52}
}

func (m *NstdPtysSubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NstdPtysSubGrp.Unmarshal(m, b)
}
func (m *NstdPtysSubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NstdPtysSubGrp.Marshal(b, m, deterministic)
}
func (m *NstdPtysSubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NstdPtysSubGrp.Merge(m, src)
}
func (m *NstdPtysSubGrp) XXX_Size() int {
	return xxx_messageInfo_NstdPtysSubGrp.Size(m)
}
func (m *NstdPtysSubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_NstdPtysSubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_NstdPtysSubGrp proto.InternalMessageInfo

func (m *NstdPtysSubGrp) GetNestedPartySubId() string {
	if m != nil {
		return m.NestedPartySubId
	}
	return ""
}

func (m *NstdPtysSubGrp) GetNestedPartySubIdType() NestedPartySubIDTypeEnum {
	if m != nil {
		return m.NestedPartySubIdType
	}
	return NestedPartySubIDTypeEnum_NESTED_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type NstdPtys2SubGrp struct {
	Nested2PartySubId     string                    `protobuf:"bytes,1,opt,name=nested2party_sub_id,json=nested2partySubId,proto3" json:"nested2party_sub_id,omitempty"`
	Nested2PartySubIdType Nested2PartySubIDTypeEnum `protobuf:"varint,2,opt,name=nested2party_sub_id_type,json=nested2partySubIdType,proto3,enum=Common.Nested2PartySubIDTypeEnum" json:"nested2party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *NstdPtys2SubGrp) Reset()         { *m = NstdPtys2SubGrp{} }
func (m *NstdPtys2SubGrp) String() string { return proto.CompactTextString(m) }
func (*NstdPtys2SubGrp) ProtoMessage()    {}
func (*NstdPtys2SubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{53}
}

func (m *NstdPtys2SubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NstdPtys2SubGrp.Unmarshal(m, b)
}
func (m *NstdPtys2SubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NstdPtys2SubGrp.Marshal(b, m, deterministic)
}
func (m *NstdPtys2SubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NstdPtys2SubGrp.Merge(m, src)
}
func (m *NstdPtys2SubGrp) XXX_Size() int {
	return xxx_messageInfo_NstdPtys2SubGrp.Size(m)
}
func (m *NstdPtys2SubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_NstdPtys2SubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_NstdPtys2SubGrp proto.InternalMessageInfo

func (m *NstdPtys2SubGrp) GetNested2PartySubId() string {
	if m != nil {
		return m.Nested2PartySubId
	}
	return ""
}

func (m *NstdPtys2SubGrp) GetNested2PartySubIdType() Nested2PartySubIDTypeEnum {
	if m != nil {
		return m.Nested2PartySubIdType
	}
	return Nested2PartySubIDTypeEnum_NESTED2PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type NstdPtys3SubGrp struct {
	Nested3PartySubId     string                    `protobuf:"bytes,1,opt,name=nested3party_sub_id,json=nested3partySubId,proto3" json:"nested3party_sub_id,omitempty"`
	Nested3PartySubIdType Nested3PartySubIDTypeEnum `protobuf:"varint,2,opt,name=nested3party_sub_id_type,json=nested3partySubIdType,proto3,enum=Common.Nested3PartySubIDTypeEnum" json:"nested3party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *NstdPtys3SubGrp) Reset()         { *m = NstdPtys3SubGrp{} }
func (m *NstdPtys3SubGrp) String() string { return proto.CompactTextString(m) }
func (*NstdPtys3SubGrp) ProtoMessage()    {}
func (*NstdPtys3SubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{54}
}

func (m *NstdPtys3SubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NstdPtys3SubGrp.Unmarshal(m, b)
}
func (m *NstdPtys3SubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NstdPtys3SubGrp.Marshal(b, m, deterministic)
}
func (m *NstdPtys3SubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NstdPtys3SubGrp.Merge(m, src)
}
func (m *NstdPtys3SubGrp) XXX_Size() int {
	return xxx_messageInfo_NstdPtys3SubGrp.Size(m)
}
func (m *NstdPtys3SubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_NstdPtys3SubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_NstdPtys3SubGrp proto.InternalMessageInfo

func (m *NstdPtys3SubGrp) GetNested3PartySubId() string {
	if m != nil {
		return m.Nested3PartySubId
	}
	return ""
}

func (m *NstdPtys3SubGrp) GetNested3PartySubIdType() Nested3PartySubIDTypeEnum {
	if m != nil {
		return m.Nested3PartySubIdType
	}
	return Nested3PartySubIDTypeEnum_NESTED3PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type StrategyParametersGrp struct {
	StrategyParameterName  string                    `protobuf:"bytes,1,opt,name=strategy_parameter_name,json=strategyParameterName,proto3" json:"strategy_parameter_name,omitempty"`
	StrategyParameterType  StrategyParameterTypeEnum `protobuf:"varint,2,opt,name=strategy_parameter_type,json=strategyParameterType,proto3,enum=Common.StrategyParameterTypeEnum" json:"strategy_parameter_type,omitempty"`
	StrategyParameterValue string                    `protobuf:"bytes,3,opt,name=strategy_parameter_value,json=strategyParameterValue,proto3" json:"strategy_parameter_value,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_unrecognized       []byte                    `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *StrategyParametersGrp) Reset()         { *m = StrategyParametersGrp{} }
func (m *StrategyParametersGrp) String() string { return proto.CompactTextString(m) }
func (*StrategyParametersGrp) ProtoMessage()    {}
func (*StrategyParametersGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{55}
}

func (m *StrategyParametersGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrategyParametersGrp.Unmarshal(m, b)
}
func (m *StrategyParametersGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrategyParametersGrp.Marshal(b, m, deterministic)
}
func (m *StrategyParametersGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyParametersGrp.Merge(m, src)
}
func (m *StrategyParametersGrp) XXX_Size() int {
	return xxx_messageInfo_StrategyParametersGrp.Size(m)
}
func (m *StrategyParametersGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyParametersGrp.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyParametersGrp proto.InternalMessageInfo

func (m *StrategyParametersGrp) GetStrategyParameterName() string {
	if m != nil {
		return m.StrategyParameterName
	}
	return ""
}

func (m *StrategyParametersGrp) GetStrategyParameterType() StrategyParameterTypeEnum {
	if m != nil {
		return m.StrategyParameterType
	}
	return StrategyParameterTypeEnum_STRATEGY_PARAMETER_TYPE_UNSPECIFIED
}

func (m *StrategyParametersGrp) GetStrategyParameterValue() string {
	if m != nil {
		return m.StrategyParameterValue
	}
	return ""
}

type InstrumentParties struct {
	InstrumentPartyId       string                      `protobuf:"bytes,1,opt,name=instrument_party_id,json=instrumentPartyId,proto3" json:"instrument_party_id,omitempty"`
	InstrumentPartyIdSource InstrumentPartyIDSourceEnum `protobuf:"varint,2,opt,name=instrument_party_id_source,json=instrumentPartyIdSource,proto3,enum=Common.InstrumentPartyIDSourceEnum" json:"instrument_party_id_source,omitempty"`
	InstrumentPartyRole     InstrumentPartyRoleEnum     `protobuf:"varint,3,opt,name=instrument_party_role,json=instrumentPartyRole,proto3,enum=Common.InstrumentPartyRoleEnum" json:"instrument_party_role,omitempty"`
	InstrumentPtysSubGrp    []*InstrumentPtysSubGrp     `protobuf:"bytes,4,rep,name=instrument_ptys_sub_grp,json=instrumentPtysSubGrp,proto3" json:"instrument_ptys_sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                    `json:"-"`
	XXX_unrecognized        []byte                      `json:"-"`
	XXX_sizecache           int32                       `json:"-"`
}

func (m *InstrumentParties) Reset()         { *m = InstrumentParties{} }
func (m *InstrumentParties) String() string { return proto.CompactTextString(m) }
func (*InstrumentParties) ProtoMessage()    {}
func (*InstrumentParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{56}
}

func (m *InstrumentParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentParties.Unmarshal(m, b)
}
func (m *InstrumentParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentParties.Marshal(b, m, deterministic)
}
func (m *InstrumentParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentParties.Merge(m, src)
}
func (m *InstrumentParties) XXX_Size() int {
	return xxx_messageInfo_InstrumentParties.Size(m)
}
func (m *InstrumentParties) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentParties.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentParties proto.InternalMessageInfo

func (m *InstrumentParties) GetInstrumentPartyId() string {
	if m != nil {
		return m.InstrumentPartyId
	}
	return ""
}

func (m *InstrumentParties) GetInstrumentPartyIdSource() InstrumentPartyIDSourceEnum {
	if m != nil {
		return m.InstrumentPartyIdSource
	}
	return InstrumentPartyIDSourceEnum_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *InstrumentParties) GetInstrumentPartyRole() InstrumentPartyRoleEnum {
	if m != nil {
		return m.InstrumentPartyRole
	}
	return InstrumentPartyRoleEnum_INSTRUMENT_PARTY_ROLE_UNSPECIFIED
}

func (m *InstrumentParties) GetInstrumentPtysSubGrp() []*InstrumentPtysSubGrp {
	if m != nil {
		return m.InstrumentPtysSubGrp
	}
	return nil
}

type InstrumentPtysSubGrp struct {
	InstrumentPartySubId     string                       `protobuf:"bytes,1,opt,name=instrument_party_sub_id,json=instrumentPartySubId,proto3" json:"instrument_party_sub_id,omitempty"`
	InstrumentPartySubIdType InstrumentPartySubIDTypeEnum `protobuf:"varint,2,opt,name=instrument_party_sub_id_type,json=instrumentPartySubIdType,proto3,enum=Common.InstrumentPartySubIDTypeEnum" json:"instrument_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                     `json:"-"`
	XXX_unrecognized         []byte                       `json:"-"`
	XXX_sizecache            int32                        `json:"-"`
}

func (m *InstrumentPtysSubGrp) Reset()         { *m = InstrumentPtysSubGrp{} }
func (m *InstrumentPtysSubGrp) String() string { return proto.CompactTextString(m) }
func (*InstrumentPtysSubGrp) ProtoMessage()    {}
func (*InstrumentPtysSubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{57}
}

func (m *InstrumentPtysSubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentPtysSubGrp.Unmarshal(m, b)
}
func (m *InstrumentPtysSubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentPtysSubGrp.Marshal(b, m, deterministic)
}
func (m *InstrumentPtysSubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentPtysSubGrp.Merge(m, src)
}
func (m *InstrumentPtysSubGrp) XXX_Size() int {
	return xxx_messageInfo_InstrumentPtysSubGrp.Size(m)
}
func (m *InstrumentPtysSubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentPtysSubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentPtysSubGrp proto.InternalMessageInfo

func (m *InstrumentPtysSubGrp) GetInstrumentPartySubId() string {
	if m != nil {
		return m.InstrumentPartySubId
	}
	return ""
}

func (m *InstrumentPtysSubGrp) GetInstrumentPartySubIdType() InstrumentPartySubIDTypeEnum {
	if m != nil {
		return m.InstrumentPartySubIdType
	}
	return InstrumentPartySubIDTypeEnum_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type UndlyInstrumentParties struct {
	UnderlyingInstrumentPartyId       string                                `protobuf:"bytes,1,opt,name=underlying_instrument_party_id,json=underlyingInstrumentPartyId,proto3" json:"underlying_instrument_party_id,omitempty"`
	UnderlyingInstrumentPartyIdSource UnderlyingInstrumentPartyIDSourceEnum `protobuf:"varint,2,opt,name=underlying_instrument_party_id_source,json=underlyingInstrumentPartyIdSource,proto3,enum=Common.UnderlyingInstrumentPartyIDSourceEnum" json:"underlying_instrument_party_id_source,omitempty"`
	UnderlyingInstrumentPartyRole     UnderlyingInstrumentPartyRoleEnum     `protobuf:"varint,3,opt,name=underlying_instrument_party_role,json=underlyingInstrumentPartyRole,proto3,enum=Common.UnderlyingInstrumentPartyRoleEnum" json:"underlying_instrument_party_role,omitempty"`
	UndlyInstrumentPtysSubGrp         []*UndlyInstrumentPtysSubGrp          `protobuf:"bytes,4,rep,name=undly_instrument_ptys_sub_grp,json=undlyInstrumentPtysSubGrp,proto3" json:"undly_instrument_ptys_sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}                              `json:"-"`
	XXX_unrecognized                  []byte                                `json:"-"`
	XXX_sizecache                     int32                                 `json:"-"`
}

func (m *UndlyInstrumentParties) Reset()         { *m = UndlyInstrumentParties{} }
func (m *UndlyInstrumentParties) String() string { return proto.CompactTextString(m) }
func (*UndlyInstrumentParties) ProtoMessage()    {}
func (*UndlyInstrumentParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{58}
}

func (m *UndlyInstrumentParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndlyInstrumentParties.Unmarshal(m, b)
}
func (m *UndlyInstrumentParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndlyInstrumentParties.Marshal(b, m, deterministic)
}
func (m *UndlyInstrumentParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndlyInstrumentParties.Merge(m, src)
}
func (m *UndlyInstrumentParties) XXX_Size() int {
	return xxx_messageInfo_UndlyInstrumentParties.Size(m)
}
func (m *UndlyInstrumentParties) XXX_DiscardUnknown() {
	xxx_messageInfo_UndlyInstrumentParties.DiscardUnknown(m)
}

var xxx_messageInfo_UndlyInstrumentParties proto.InternalMessageInfo

func (m *UndlyInstrumentParties) GetUnderlyingInstrumentPartyId() string {
	if m != nil {
		return m.UnderlyingInstrumentPartyId
	}
	return ""
}

func (m *UndlyInstrumentParties) GetUnderlyingInstrumentPartyIdSource() UnderlyingInstrumentPartyIDSourceEnum {
	if m != nil {
		return m.UnderlyingInstrumentPartyIdSource
	}
	return UnderlyingInstrumentPartyIDSourceEnum_UNDERLYING_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *UndlyInstrumentParties) GetUnderlyingInstrumentPartyRole() UnderlyingInstrumentPartyRoleEnum {
	if m != nil {
		return m.UnderlyingInstrumentPartyRole
	}
	return UnderlyingInstrumentPartyRoleEnum_UNDERLYING_INSTRUMENT_PARTY_ROLE_UNSPECIFIED
}

func (m *UndlyInstrumentParties) GetUndlyInstrumentPtysSubGrp() []*UndlyInstrumentPtysSubGrp {
	if m != nil {
		return m.UndlyInstrumentPtysSubGrp
	}
	return nil
}

type UndlyInstrumentPtysSubGrp struct {
	UnderlyingInstrumentPartySubId     string                                 `protobuf:"bytes,1,opt,name=underlying_instrument_party_sub_id,json=underlyingInstrumentPartySubId,proto3" json:"underlying_instrument_party_sub_id,omitempty"`
	UnderlyingInstrumentPartySubIdType UnderlyingInstrumentPartySubIDTypeEnum `protobuf:"varint,2,opt,name=underlying_instrument_party_sub_id_type,json=underlyingInstrumentPartySubIdType,proto3,enum=Common.UnderlyingInstrumentPartySubIDTypeEnum" json:"underlying_instrument_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                               `json:"-"`
	XXX_unrecognized                   []byte                                 `json:"-"`
	XXX_sizecache                      int32                                  `json:"-"`
}

func (m *UndlyInstrumentPtysSubGrp) Reset()         { *m = UndlyInstrumentPtysSubGrp{} }
func (m *UndlyInstrumentPtysSubGrp) String() string { return proto.CompactTextString(m) }
func (*UndlyInstrumentPtysSubGrp) ProtoMessage()    {}
func (*UndlyInstrumentPtysSubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{59}
}

func (m *UndlyInstrumentPtysSubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndlyInstrumentPtysSubGrp.Unmarshal(m, b)
}
func (m *UndlyInstrumentPtysSubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndlyInstrumentPtysSubGrp.Marshal(b, m, deterministic)
}
func (m *UndlyInstrumentPtysSubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndlyInstrumentPtysSubGrp.Merge(m, src)
}
func (m *UndlyInstrumentPtysSubGrp) XXX_Size() int {
	return xxx_messageInfo_UndlyInstrumentPtysSubGrp.Size(m)
}
func (m *UndlyInstrumentPtysSubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_UndlyInstrumentPtysSubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_UndlyInstrumentPtysSubGrp proto.InternalMessageInfo

func (m *UndlyInstrumentPtysSubGrp) GetUnderlyingInstrumentPartySubId() string {
	if m != nil {
		return m.UnderlyingInstrumentPartySubId
	}
	return ""
}

func (m *UndlyInstrumentPtysSubGrp) GetUnderlyingInstrumentPartySubIdType() UnderlyingInstrumentPartySubIDTypeEnum {
	if m != nil {
		return m.UnderlyingInstrumentPartySubIdType
	}
	return UnderlyingInstrumentPartySubIDTypeEnum_UNDERLYING_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type DisplayInstruction struct {
	DisplayHighQty       *fix.Decimal64        `protobuf:"bytes,1,opt,name=display_high_qty,json=displayHighQty,proto3" json:"display_high_qty,omitempty"`
	DisplayLowQty        *fix.Decimal64        `protobuf:"bytes,2,opt,name=display_low_qty,json=displayLowQty,proto3" json:"display_low_qty,omitempty"`
	DisplayMethod        DisplayMethodEnum `protobuf:"varint,3,opt,name=display_method,json=displayMethod,proto3,enum=Common.DisplayMethodEnum" json:"display_method,omitempty"`
	DisplayMinIncr       *fix.Decimal64        `protobuf:"bytes,4,opt,name=display_min_incr,json=displayMinIncr,proto3" json:"display_min_incr,omitempty"`
	DisplayQty           *fix.Decimal64        `protobuf:"bytes,5,opt,name=display_qty,json=displayQty,proto3" json:"display_qty,omitempty"`
	DisplayWhen          DisplayWhenEnum   `protobuf:"varint,6,opt,name=display_when,json=displayWhen,proto3,enum=Common.DisplayWhenEnum" json:"display_when,omitempty"`
	RefreshQty           *fix.Decimal64        `protobuf:"bytes,7,opt,name=refresh_qty,json=refreshQty,proto3" json:"refresh_qty,omitempty"`
	SecondaryDisplayQty  *fix.Decimal64        `protobuf:"bytes,8,opt,name=secondary_display_qty,json=secondaryDisplayQty,proto3" json:"secondary_display_qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DisplayInstruction) Reset()         { *m = DisplayInstruction{} }
func (m *DisplayInstruction) String() string { return proto.CompactTextString(m) }
func (*DisplayInstruction) ProtoMessage()    {}
func (*DisplayInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{60}
}

func (m *DisplayInstruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayInstruction.Unmarshal(m, b)
}
func (m *DisplayInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayInstruction.Marshal(b, m, deterministic)
}
func (m *DisplayInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayInstruction.Merge(m, src)
}
func (m *DisplayInstruction) XXX_Size() int {
	return xxx_messageInfo_DisplayInstruction.Size(m)
}
func (m *DisplayInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayInstruction proto.InternalMessageInfo

func (m *DisplayInstruction) GetDisplayHighQty() *fix.Decimal64 {
	if m != nil {
		return m.DisplayHighQty
	}
	return nil
}

func (m *DisplayInstruction) GetDisplayLowQty() *fix.Decimal64 {
	if m != nil {
		return m.DisplayLowQty
	}
	return nil
}

func (m *DisplayInstruction) GetDisplayMethod() DisplayMethodEnum {
	if m != nil {
		return m.DisplayMethod
	}
	return DisplayMethodEnum_DISPLAY_METHOD_UNSPECIFIED
}

func (m *DisplayInstruction) GetDisplayMinIncr() *fix.Decimal64 {
	if m != nil {
		return m.DisplayMinIncr
	}
	return nil
}

func (m *DisplayInstruction) GetDisplayQty() *fix.Decimal64 {
	if m != nil {
		return m.DisplayQty
	}
	return nil
}

func (m *DisplayInstruction) GetDisplayWhen() DisplayWhenEnum {
	if m != nil {
		return m.DisplayWhen
	}
	return DisplayWhenEnum_DISPLAY_WHEN_UNSPECIFIED
}

func (m *DisplayInstruction) GetRefreshQty() *fix.Decimal64 {
	if m != nil {
		return m.RefreshQty
	}
	return nil
}

func (m *DisplayInstruction) GetSecondaryDisplayQty() *fix.Decimal64 {
	if m != nil {
		return m.SecondaryDisplayQty
	}
	return nil
}

type TriggeringInstruction struct {
	TriggerAction              TriggerActionEnum           `protobuf:"varint,1,opt,name=trigger_action,json=triggerAction,proto3,enum=Common.TriggerActionEnum" json:"trigger_action,omitempty"`
	TriggerNewPrice            *fix.Decimal64                  `protobuf:"bytes,2,opt,name=trigger_new_price,json=triggerNewPrice,proto3" json:"trigger_new_price,omitempty"`
	TriggerNewQty              *fix.Decimal64                  `protobuf:"bytes,3,opt,name=trigger_new_qty,json=triggerNewQty,proto3" json:"trigger_new_qty,omitempty"`
	TriggerOrderType           TriggerOrderTypeEnum        `protobuf:"varint,4,opt,name=trigger_order_type,json=triggerOrderType,proto3,enum=Common.TriggerOrderTypeEnum" json:"trigger_order_type,omitempty"`
	TriggerPrice               *fix.Decimal64                  `protobuf:"bytes,5,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	TriggerPriceDirection      TriggerPriceDirectionEnum   `protobuf:"varint,6,opt,name=trigger_price_direction,json=triggerPriceDirection,proto3,enum=Common.TriggerPriceDirectionEnum" json:"trigger_price_direction,omitempty"`
	TriggerPriceType           TriggerPriceTypeEnum        `protobuf:"varint,7,opt,name=trigger_price_type,json=triggerPriceType,proto3,enum=Common.TriggerPriceTypeEnum" json:"trigger_price_type,omitempty"`
	TriggerPriceTypeScope      TriggerPriceTypeScopeEnum   `protobuf:"varint,8,opt,name=trigger_price_type_scope,json=triggerPriceTypeScope,proto3,enum=Common.TriggerPriceTypeScopeEnum" json:"trigger_price_type_scope,omitempty"`
	TriggerSecurityDesc        string                      `protobuf:"bytes,9,opt,name=trigger_security_desc,json=triggerSecurityDesc,proto3" json:"trigger_security_desc,omitempty"`
	TriggerSecurityId          string                      `protobuf:"bytes,10,opt,name=trigger_security_id,json=triggerSecurityId,proto3" json:"trigger_security_id,omitempty"`
	TriggerSecurityIdSource    TriggerSecurityIDSourceEnum `protobuf:"varint,11,opt,name=trigger_security_id_source,json=triggerSecurityIdSource,proto3,enum=Common.TriggerSecurityIDSourceEnum" json:"trigger_security_id_source,omitempty"`
	TriggerSymbol              string                      `protobuf:"bytes,12,opt,name=trigger_symbol,json=triggerSymbol,proto3" json:"trigger_symbol,omitempty"`
	TriggerTradingSessionId    string                      `protobuf:"bytes,13,opt,name=trigger_trading_session_id,json=triggerTradingSessionId,proto3" json:"trigger_trading_session_id,omitempty"`
	TriggerTradingSessionSubId string                      `protobuf:"bytes,14,opt,name=trigger_trading_session_sub_id,json=triggerTradingSessionSubId,proto3" json:"trigger_trading_session_sub_id,omitempty"`
	TriggerType                TriggerTypeEnum             `protobuf:"varint,15,opt,name=trigger_type,json=triggerType,proto3,enum=Common.TriggerTypeEnum" json:"trigger_type,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *TriggeringInstruction) Reset()         { *m = TriggeringInstruction{} }
func (m *TriggeringInstruction) String() string { return proto.CompactTextString(m) }
func (*TriggeringInstruction) ProtoMessage()    {}
func (*TriggeringInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{61}
}

func (m *TriggeringInstruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggeringInstruction.Unmarshal(m, b)
}
func (m *TriggeringInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggeringInstruction.Marshal(b, m, deterministic)
}
func (m *TriggeringInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggeringInstruction.Merge(m, src)
}
func (m *TriggeringInstruction) XXX_Size() int {
	return xxx_messageInfo_TriggeringInstruction.Size(m)
}
func (m *TriggeringInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggeringInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_TriggeringInstruction proto.InternalMessageInfo

func (m *TriggeringInstruction) GetTriggerAction() TriggerActionEnum {
	if m != nil {
		return m.TriggerAction
	}
	return TriggerActionEnum_TRIGGER_ACTION_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerNewPrice() *fix.Decimal64 {
	if m != nil {
		return m.TriggerNewPrice
	}
	return nil
}

func (m *TriggeringInstruction) GetTriggerNewQty() *fix.Decimal64 {
	if m != nil {
		return m.TriggerNewQty
	}
	return nil
}

func (m *TriggeringInstruction) GetTriggerOrderType() TriggerOrderTypeEnum {
	if m != nil {
		return m.TriggerOrderType
	}
	return TriggerOrderTypeEnum_TRIGGER_ORDER_TYPE_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerPrice() *fix.Decimal64 {
	if m != nil {
		return m.TriggerPrice
	}
	return nil
}

func (m *TriggeringInstruction) GetTriggerPriceDirection() TriggerPriceDirectionEnum {
	if m != nil {
		return m.TriggerPriceDirection
	}
	return TriggerPriceDirectionEnum_TRIGGER_PRICE_DIRECTION_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerPriceType() TriggerPriceTypeEnum {
	if m != nil {
		return m.TriggerPriceType
	}
	return TriggerPriceTypeEnum_TRIGGER_PRICE_TYPE_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerPriceTypeScope() TriggerPriceTypeScopeEnum {
	if m != nil {
		return m.TriggerPriceTypeScope
	}
	return TriggerPriceTypeScopeEnum_TRIGGER_PRICE_TYPE_SCOPE_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerSecurityDesc() string {
	if m != nil {
		return m.TriggerSecurityDesc
	}
	return ""
}

func (m *TriggeringInstruction) GetTriggerSecurityId() string {
	if m != nil {
		return m.TriggerSecurityId
	}
	return ""
}

func (m *TriggeringInstruction) GetTriggerSecurityIdSource() TriggerSecurityIDSourceEnum {
	if m != nil {
		return m.TriggerSecurityIdSource
	}
	return TriggerSecurityIDSourceEnum_TRIGGER_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *TriggeringInstruction) GetTriggerSymbol() string {
	if m != nil {
		return m.TriggerSymbol
	}
	return ""
}

func (m *TriggeringInstruction) GetTriggerTradingSessionId() string {
	if m != nil {
		return m.TriggerTradingSessionId
	}
	return ""
}

func (m *TriggeringInstruction) GetTriggerTradingSessionSubId() string {
	if m != nil {
		return m.TriggerTradingSessionSubId
	}
	return ""
}

func (m *TriggeringInstruction) GetTriggerType() TriggerTypeEnum {
	if m != nil {
		return m.TriggerType
	}
	return TriggerTypeEnum_TRIGGER_TYPE_UNSPECIFIED
}

type RootParties struct {
	RootPartyId          string                `protobuf:"bytes,1,opt,name=root_party_id,json=rootPartyId,proto3" json:"root_party_id,omitempty"`
	RootPartyIdSource    RootPartyIDSourceEnum `protobuf:"varint,2,opt,name=root_party_id_source,json=rootPartyIdSource,proto3,enum=Common.RootPartyIDSourceEnum" json:"root_party_id_source,omitempty"`
	RootPartyRole        RootPartyRoleEnum     `protobuf:"varint,3,opt,name=root_party_role,json=rootPartyRole,proto3,enum=Common.RootPartyRoleEnum" json:"root_party_role,omitempty"`
	RootSubParties       []*RootSubParties     `protobuf:"bytes,4,rep,name=root_sub_parties,json=rootSubParties,proto3" json:"root_sub_parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RootParties) Reset()         { *m = RootParties{} }
func (m *RootParties) String() string { return proto.CompactTextString(m) }
func (*RootParties) ProtoMessage()    {}
func (*RootParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{62}
}

func (m *RootParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootParties.Unmarshal(m, b)
}
func (m *RootParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootParties.Marshal(b, m, deterministic)
}
func (m *RootParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootParties.Merge(m, src)
}
func (m *RootParties) XXX_Size() int {
	return xxx_messageInfo_RootParties.Size(m)
}
func (m *RootParties) XXX_DiscardUnknown() {
	xxx_messageInfo_RootParties.DiscardUnknown(m)
}

var xxx_messageInfo_RootParties proto.InternalMessageInfo

func (m *RootParties) GetRootPartyId() string {
	if m != nil {
		return m.RootPartyId
	}
	return ""
}

func (m *RootParties) GetRootPartyIdSource() RootPartyIDSourceEnum {
	if m != nil {
		return m.RootPartyIdSource
	}
	return RootPartyIDSourceEnum_ROOT_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *RootParties) GetRootPartyRole() RootPartyRoleEnum {
	if m != nil {
		return m.RootPartyRole
	}
	return RootPartyRoleEnum_ROOT_PARTY_ROLE_UNSPECIFIED
}

func (m *RootParties) GetRootSubParties() []*RootSubParties {
	if m != nil {
		return m.RootSubParties
	}
	return nil
}

type RootSubParties struct {
	RootPartySubId       string                 `protobuf:"bytes,1,opt,name=root_party_sub_id,json=rootPartySubId,proto3" json:"root_party_sub_id,omitempty"`
	RootPartySubIdType   RootPartySubIDTypeEnum `protobuf:"varint,2,opt,name=root_party_sub_id_type,json=rootPartySubIdType,proto3,enum=Common.RootPartySubIDTypeEnum" json:"root_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RootSubParties) Reset()         { *m = RootSubParties{} }
func (m *RootSubParties) String() string { return proto.CompactTextString(m) }
func (*RootSubParties) ProtoMessage()    {}
func (*RootSubParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{63}
}

func (m *RootSubParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootSubParties.Unmarshal(m, b)
}
func (m *RootSubParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootSubParties.Marshal(b, m, deterministic)
}
func (m *RootSubParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootSubParties.Merge(m, src)
}
func (m *RootSubParties) XXX_Size() int {
	return xxx_messageInfo_RootSubParties.Size(m)
}
func (m *RootSubParties) XXX_DiscardUnknown() {
	xxx_messageInfo_RootSubParties.DiscardUnknown(m)
}

var xxx_messageInfo_RootSubParties proto.InternalMessageInfo

func (m *RootSubParties) GetRootPartySubId() string {
	if m != nil {
		return m.RootPartySubId
	}
	return ""
}

func (m *RootSubParties) GetRootPartySubIdType() RootPartySubIDTypeEnum {
	if m != nil {
		return m.RootPartySubIdType
	}
	return RootPartySubIDTypeEnum_ROOT_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type TrdSessLstGrp struct {
	EncodedText         string            `protobuf:"bytes,1,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen      int64             `protobuf:"fixed64,2,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	SecurityExchange    string            `protobuf:"bytes,3,opt,name=security_exchange,json=securityExchange,proto3" json:"security_exchange,omitempty"`
	Text                string            `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	TotalVolumeTraded   *fix.Decimal64        `protobuf:"bytes,5,opt,name=total_volume_traded,json=totalVolumeTraded,proto3" json:"total_volume_traded,omitempty"`
	TradSesCloseTime    *fix.Timestamp        `protobuf:"bytes,6,opt,name=trad_ses_close_time,json=tradSesCloseTime,proto3" json:"trad_ses_close_time,omitempty"`
	TradSesEndTime      *fix.Timestamp        `protobuf:"bytes,7,opt,name=trad_ses_end_time,json=tradSesEndTime,proto3" json:"trad_ses_end_time,omitempty"`
	TradSesMethod       TradSesMethodEnum `protobuf:"varint,8,opt,name=trad_ses_method,json=tradSesMethod,proto3,enum=Common.TradSesMethodEnum" json:"trad_ses_method,omitempty"`
	TradSesMode         TradSesModeEnum   `protobuf:"varint,9,opt,name=trad_ses_mode,json=tradSesMode,proto3,enum=Common.TradSesModeEnum" json:"trad_ses_mode,omitempty"`
	TradSesOpenTime     *fix.Timestamp        `protobuf:"bytes,10,opt,name=trad_ses_open_time,json=tradSesOpenTime,proto3" json:"trad_ses_open_time,omitempty"`
	TradSesPreCloseTime *fix.Timestamp        `protobuf:"bytes,11,opt,name=trad_ses_pre_close_time,json=tradSesPreCloseTime,proto3" json:"trad_ses_pre_close_time,omitempty"`
	TradSesStartTime    *fix.Timestamp        `protobuf:"bytes,12,opt,name=trad_ses_start_time,json=tradSesStartTime,proto3" json:"trad_ses_start_time,omitempty"`
	// Types that are valid to be assigned to TradSesStatusUnion:
	//	*TrdSessLstGrp_TradSesStatus
	//	*TrdSessLstGrp_TradSesStatusReserved100Plus
	TradSesStatusUnion isTrdSessLstGrp_TradSesStatusUnion `protobuf_oneof:"trad_ses_status_union"`
	// Types that are valid to be assigned to TradSesStatusRejReasonUnion:
	//	*TrdSessLstGrp_TradSesStatusRejReason
	//	*TrdSessLstGrp_TradSesStatusRejReasonReserved100Plus
	TradSesStatusRejReasonUnion isTrdSessLstGrp_TradSesStatusRejReasonUnion `protobuf_oneof:"trad_ses_status_rej_reason_union"`
	// Types that are valid to be assigned to TradingSessionIdUnion:
	//	*TrdSessLstGrp_TradingSessionId
	//	*TrdSessLstGrp_TradingSessionIdReserved100Plus
	TradingSessionIdUnion isTrdSessLstGrp_TradingSessionIdUnion `protobuf_oneof:"trading_session_id_union"`
	// Types that are valid to be assigned to TradingSessionSubIdUnion:
	//	*TrdSessLstGrp_TradingSessionSubId
	//	*TrdSessLstGrp_TradingSessionSubIdReserved100Plus
	TradingSessionSubIdUnion isTrdSessLstGrp_TradingSessionSubIdUnion `protobuf_oneof:"trading_session_sub_id_union"`
	UnsolicitedIndicator     bool                                     `protobuf:"varint,21,opt,name=unsolicited_indicator,json=unsolicitedIndicator,proto3" json:"unsolicited_indicator,omitempty"`
	MarketId                 string                                   `protobuf:"bytes,22,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	MarketSegmentId          string                                   `protobuf:"bytes,23,opt,name=market_segment_id,json=marketSegmentId,proto3" json:"market_segment_id,omitempty"`
	TradingSessionDesc       string                                   `protobuf:"bytes,24,opt,name=trading_session_desc,json=tradingSessionDesc,proto3" json:"trading_session_desc,omitempty"`
	TradingSessionRules      *TradingSessionRules                     `protobuf:"bytes,25,opt,name=trading_session_rules,json=tradingSessionRules,proto3" json:"trading_session_rules,omitempty"`
	TradSesUpdateAction      TradSesUpdateActionEnum                  `protobuf:"varint,26,opt,name=trad_ses_update_action,json=tradSesUpdateAction,proto3,enum=Common.TradSesUpdateActionEnum" json:"trad_ses_update_action,omitempty"`
	TransactTime             *fix.Timestamp                               `protobuf:"bytes,27,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                 `json:"-"`
	XXX_unrecognized         []byte                                   `json:"-"`
	XXX_sizecache            int32                                    `json:"-"`
}

func (m *TrdSessLstGrp) Reset()         { *m = TrdSessLstGrp{} }
func (m *TrdSessLstGrp) String() string { return proto.CompactTextString(m) }
func (*TrdSessLstGrp) ProtoMessage()    {}
func (*TrdSessLstGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{64}
}

func (m *TrdSessLstGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdSessLstGrp.Unmarshal(m, b)
}
func (m *TrdSessLstGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdSessLstGrp.Marshal(b, m, deterministic)
}
func (m *TrdSessLstGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdSessLstGrp.Merge(m, src)
}
func (m *TrdSessLstGrp) XXX_Size() int {
	return xxx_messageInfo_TrdSessLstGrp.Size(m)
}
func (m *TrdSessLstGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdSessLstGrp.DiscardUnknown(m)
}

var xxx_messageInfo_TrdSessLstGrp proto.InternalMessageInfo

func (m *TrdSessLstGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *TrdSessLstGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *TrdSessLstGrp) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *TrdSessLstGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TrdSessLstGrp) GetTotalVolumeTraded() *fix.Decimal64 {
	if m != nil {
		return m.TotalVolumeTraded
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesCloseTime() *fix.Timestamp {
	if m != nil {
		return m.TradSesCloseTime
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesEndTime() *fix.Timestamp {
	if m != nil {
		return m.TradSesEndTime
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesMethod() TradSesMethodEnum {
	if m != nil {
		return m.TradSesMethod
	}
	return TradSesMethodEnum_TRAD_SES_METHOD_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradSesMode() TradSesModeEnum {
	if m != nil {
		return m.TradSesMode
	}
	return TradSesModeEnum_TRAD_SES_MODE_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradSesOpenTime() *fix.Timestamp {
	if m != nil {
		return m.TradSesOpenTime
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesPreCloseTime() *fix.Timestamp {
	if m != nil {
		return m.TradSesPreCloseTime
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesStartTime() *fix.Timestamp {
	if m != nil {
		return m.TradSesStartTime
	}
	return nil
}

type isTrdSessLstGrp_TradSesStatusUnion interface {
	isTrdSessLstGrp_TradSesStatusUnion()
}

type TrdSessLstGrp_TradSesStatus struct {
	TradSesStatus TradSesStatusEnum `protobuf:"varint,13,opt,name=trad_ses_status,json=tradSesStatus,proto3,enum=Common.TradSesStatusEnum,oneof"`
}

type TrdSessLstGrp_TradSesStatusReserved100Plus struct {
	TradSesStatusReserved100Plus uint32 `protobuf:"fixed32,16,opt,name=trad_ses_status_reserved100plus,json=tradSesStatusReserved100plus,proto3,oneof"`
}

func (*TrdSessLstGrp_TradSesStatus) isTrdSessLstGrp_TradSesStatusUnion() {}

func (*TrdSessLstGrp_TradSesStatusReserved100Plus) isTrdSessLstGrp_TradSesStatusUnion() {}

func (m *TrdSessLstGrp) GetTradSesStatusUnion() isTrdSessLstGrp_TradSesStatusUnion {
	if m != nil {
		return m.TradSesStatusUnion
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesStatus() TradSesStatusEnum {
	if x, ok := m.GetTradSesStatusUnion().(*TrdSessLstGrp_TradSesStatus); ok {
		return x.TradSesStatus
	}
	return TradSesStatusEnum_TRAD_SES_STATUS_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradSesStatusReserved100Plus() uint32 {
	if x, ok := m.GetTradSesStatusUnion().(*TrdSessLstGrp_TradSesStatusReserved100Plus); ok {
		return x.TradSesStatusReserved100Plus
	}
	return 0
}

type isTrdSessLstGrp_TradSesStatusRejReasonUnion interface {
	isTrdSessLstGrp_TradSesStatusRejReasonUnion()
}

type TrdSessLstGrp_TradSesStatusRejReason struct {
	TradSesStatusRejReason TradSesStatusRejReasonEnum `protobuf:"varint,14,opt,name=trad_ses_status_rej_reason,json=tradSesStatusRejReason,proto3,enum=Common.TradSesStatusRejReasonEnum,oneof"`
}

type TrdSessLstGrp_TradSesStatusRejReasonReserved100Plus struct {
	TradSesStatusRejReasonReserved100Plus uint32 `protobuf:"fixed32,15,opt,name=trad_ses_status_rej_reason_reserved100plus,json=tradSesStatusRejReasonReserved100plus,proto3,oneof"`
}

func (*TrdSessLstGrp_TradSesStatusRejReason) isTrdSessLstGrp_TradSesStatusRejReasonUnion() {}

func (*TrdSessLstGrp_TradSesStatusRejReasonReserved100Plus) isTrdSessLstGrp_TradSesStatusRejReasonUnion() {
}

func (m *TrdSessLstGrp) GetTradSesStatusRejReasonUnion() isTrdSessLstGrp_TradSesStatusRejReasonUnion {
	if m != nil {
		return m.TradSesStatusRejReasonUnion
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesStatusRejReason() TradSesStatusRejReasonEnum {
	if x, ok := m.GetTradSesStatusRejReasonUnion().(*TrdSessLstGrp_TradSesStatusRejReason); ok {
		return x.TradSesStatusRejReason
	}
	return TradSesStatusRejReasonEnum_TRAD_SES_STATUS_REJ_REASON_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradSesStatusRejReasonReserved100Plus() uint32 {
	if x, ok := m.GetTradSesStatusRejReasonUnion().(*TrdSessLstGrp_TradSesStatusRejReasonReserved100Plus); ok {
		return x.TradSesStatusRejReasonReserved100Plus
	}
	return 0
}

type isTrdSessLstGrp_TradingSessionIdUnion interface {
	isTrdSessLstGrp_TradingSessionIdUnion()
}

type TrdSessLstGrp_TradingSessionId struct {
	TradingSessionId TradingSessionIDEnum `protobuf:"varint,17,opt,name=trading_session_id,json=tradingSessionId,proto3,enum=Common.TradingSessionIDEnum,oneof"`
}

type TrdSessLstGrp_TradingSessionIdReserved100Plus struct {
	TradingSessionIdReserved100Plus uint32 `protobuf:"fixed32,18,opt,name=trading_session_id_reserved100plus,json=tradingSessionIdReserved100plus,proto3,oneof"`
}

func (*TrdSessLstGrp_TradingSessionId) isTrdSessLstGrp_TradingSessionIdUnion() {}

func (*TrdSessLstGrp_TradingSessionIdReserved100Plus) isTrdSessLstGrp_TradingSessionIdUnion() {}

func (m *TrdSessLstGrp) GetTradingSessionIdUnion() isTrdSessLstGrp_TradingSessionIdUnion {
	if m != nil {
		return m.TradingSessionIdUnion
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradingSessionId() TradingSessionIDEnum {
	if x, ok := m.GetTradingSessionIdUnion().(*TrdSessLstGrp_TradingSessionId); ok {
		return x.TradingSessionId
	}
	return TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradingSessionIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionIdUnion().(*TrdSessLstGrp_TradingSessionIdReserved100Plus); ok {
		return x.TradingSessionIdReserved100Plus
	}
	return 0
}

type isTrdSessLstGrp_TradingSessionSubIdUnion interface {
	isTrdSessLstGrp_TradingSessionSubIdUnion()
}

type TrdSessLstGrp_TradingSessionSubId struct {
	TradingSessionSubId TradingSessionSubIDEnum `protobuf:"varint,19,opt,name=trading_session_sub_id,json=tradingSessionSubId,proto3,enum=Common.TradingSessionSubIDEnum,oneof"`
}

type TrdSessLstGrp_TradingSessionSubIdReserved100Plus struct {
	TradingSessionSubIdReserved100Plus uint32 `protobuf:"fixed32,20,opt,name=trading_session_sub_id_reserved100plus,json=tradingSessionSubIdReserved100plus,proto3,oneof"`
}

func (*TrdSessLstGrp_TradingSessionSubId) isTrdSessLstGrp_TradingSessionSubIdUnion() {}

func (*TrdSessLstGrp_TradingSessionSubIdReserved100Plus) isTrdSessLstGrp_TradingSessionSubIdUnion() {}

func (m *TrdSessLstGrp) GetTradingSessionSubIdUnion() isTrdSessLstGrp_TradingSessionSubIdUnion {
	if m != nil {
		return m.TradingSessionSubIdUnion
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradingSessionSubId() TradingSessionSubIDEnum {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TrdSessLstGrp_TradingSessionSubId); ok {
		return x.TradingSessionSubId
	}
	return TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTradingSessionSubIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TrdSessLstGrp_TradingSessionSubIdReserved100Plus); ok {
		return x.TradingSessionSubIdReserved100Plus
	}
	return 0
}

func (m *TrdSessLstGrp) GetUnsolicitedIndicator() bool {
	if m != nil {
		return m.UnsolicitedIndicator
	}
	return false
}

func (m *TrdSessLstGrp) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TrdSessLstGrp) GetMarketSegmentId() string {
	if m != nil {
		return m.MarketSegmentId
	}
	return ""
}

func (m *TrdSessLstGrp) GetTradingSessionDesc() string {
	if m != nil {
		return m.TradingSessionDesc
	}
	return ""
}

func (m *TrdSessLstGrp) GetTradingSessionRules() *TradingSessionRules {
	if m != nil {
		return m.TradingSessionRules
	}
	return nil
}

func (m *TrdSessLstGrp) GetTradSesUpdateAction() TradSesUpdateActionEnum {
	if m != nil {
		return m.TradSesUpdateAction
	}
	return TradSesUpdateActionEnum_TRAD_SES_UPDATE_ACTION_UNSPECIFIED
}

func (m *TrdSessLstGrp) GetTransactTime() *fix.Timestamp {
	if m != nil {
		return m.TransactTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrdSessLstGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrdSessLstGrp_TradSesStatus)(nil),
		(*TrdSessLstGrp_TradSesStatusReserved100Plus)(nil),
		(*TrdSessLstGrp_TradSesStatusRejReason)(nil),
		(*TrdSessLstGrp_TradSesStatusRejReasonReserved100Plus)(nil),
		(*TrdSessLstGrp_TradingSessionId)(nil),
		(*TrdSessLstGrp_TradingSessionIdReserved100Plus)(nil),
		(*TrdSessLstGrp_TradingSessionSubId)(nil),
		(*TrdSessLstGrp_TradingSessionSubIdReserved100Plus)(nil),
	}
}

type MsgTypeGrp struct {
	MsgDirection         MsgDirectionEnum `protobuf:"varint,1,opt,name=msg_direction,json=msgDirection,proto3,enum=Common.MsgDirectionEnum" json:"msg_direction,omitempty"`
	RefApplVerId         RefApplVerIDEnum `protobuf:"varint,2,opt,name=ref_appl_ver_id,json=refApplVerId,proto3,enum=Common.RefApplVerIDEnum" json:"ref_appl_ver_id,omitempty"`
	RefCstmApplVerId     string           `protobuf:"bytes,3,opt,name=ref_cstm_appl_ver_id,json=refCstmApplVerId,proto3" json:"ref_cstm_appl_ver_id,omitempty"`
	RefMsgType           RefMsgTypeEnum   `protobuf:"varint,4,opt,name=ref_msg_type,json=refMsgType,proto3,enum=Common.RefMsgTypeEnum" json:"ref_msg_type,omitempty"`
	DefaultVerIndicator  bool             `protobuf:"varint,5,opt,name=default_ver_indicator,json=defaultVerIndicator,proto3" json:"default_ver_indicator,omitempty"`
	RefApplExtId         int64            `protobuf:"fixed64,6,opt,name=ref_appl_ext_id,json=refApplExtId,proto3" json:"ref_appl_ext_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MsgTypeGrp) Reset()         { *m = MsgTypeGrp{} }
func (m *MsgTypeGrp) String() string { return proto.CompactTextString(m) }
func (*MsgTypeGrp) ProtoMessage()    {}
func (*MsgTypeGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{65}
}

func (m *MsgTypeGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgTypeGrp.Unmarshal(m, b)
}
func (m *MsgTypeGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgTypeGrp.Marshal(b, m, deterministic)
}
func (m *MsgTypeGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTypeGrp.Merge(m, src)
}
func (m *MsgTypeGrp) XXX_Size() int {
	return xxx_messageInfo_MsgTypeGrp.Size(m)
}
func (m *MsgTypeGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTypeGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTypeGrp proto.InternalMessageInfo

func (m *MsgTypeGrp) GetMsgDirection() MsgDirectionEnum {
	if m != nil {
		return m.MsgDirection
	}
	return MsgDirectionEnum_MSG_DIRECTION_UNSPECIFIED
}

func (m *MsgTypeGrp) GetRefApplVerId() RefApplVerIDEnum {
	if m != nil {
		return m.RefApplVerId
	}
	return RefApplVerIDEnum_REF_APPL_VER_ID_UNSPECIFIED
}

func (m *MsgTypeGrp) GetRefCstmApplVerId() string {
	if m != nil {
		return m.RefCstmApplVerId
	}
	return ""
}

func (m *MsgTypeGrp) GetRefMsgType() RefMsgTypeEnum {
	if m != nil {
		return m.RefMsgType
	}
	return RefMsgTypeEnum_REF_MSG_TYPE_ADJUSTED_POSITION_REPORT
}

func (m *MsgTypeGrp) GetDefaultVerIndicator() bool {
	if m != nil {
		return m.DefaultVerIndicator
	}
	return false
}

func (m *MsgTypeGrp) GetRefApplExtId() int64 {
	if m != nil {
		return m.RefApplExtId
	}
	return 0
}

type SecurityTradingRules struct {
	BaseTradingRules          *BaseTradingRules            `protobuf:"bytes,1,opt,name=base_trading_rules,json=baseTradingRules,proto3" json:"base_trading_rules,omitempty"`
	NestedInstrumentAttribute []*NestedInstrumentAttribute `protobuf:"bytes,2,rep,name=nested_instrument_attribute,json=nestedInstrumentAttribute,proto3" json:"nested_instrument_attribute,omitempty"`
	TradingSessionRulesGrp    []*TradingSessionRulesGrp    `protobuf:"bytes,3,rep,name=trading_session_rules_grp,json=tradingSessionRulesGrp,proto3" json:"trading_session_rules_grp,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                     `json:"-"`
	XXX_unrecognized          []byte                       `json:"-"`
	XXX_sizecache             int32                        `json:"-"`
}

func (m *SecurityTradingRules) Reset()         { *m = SecurityTradingRules{} }
func (m *SecurityTradingRules) String() string { return proto.CompactTextString(m) }
func (*SecurityTradingRules) ProtoMessage()    {}
func (*SecurityTradingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{66}
}

func (m *SecurityTradingRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityTradingRules.Unmarshal(m, b)
}
func (m *SecurityTradingRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityTradingRules.Marshal(b, m, deterministic)
}
func (m *SecurityTradingRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityTradingRules.Merge(m, src)
}
func (m *SecurityTradingRules) XXX_Size() int {
	return xxx_messageInfo_SecurityTradingRules.Size(m)
}
func (m *SecurityTradingRules) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityTradingRules.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityTradingRules proto.InternalMessageInfo

func (m *SecurityTradingRules) GetBaseTradingRules() *BaseTradingRules {
	if m != nil {
		return m.BaseTradingRules
	}
	return nil
}

func (m *SecurityTradingRules) GetNestedInstrumentAttribute() []*NestedInstrumentAttribute {
	if m != nil {
		return m.NestedInstrumentAttribute
	}
	return nil
}

func (m *SecurityTradingRules) GetTradingSessionRulesGrp() []*TradingSessionRulesGrp {
	if m != nil {
		return m.TradingSessionRulesGrp
	}
	return nil
}

type SettlDetails struct {
	SettlObligSource     SettlObligSourceEnum `protobuf:"varint,1,opt,name=settl_oblig_source,json=settlObligSource,proto3,enum=Common.SettlObligSourceEnum" json:"settl_oblig_source,omitempty"`
	SettlParties         []*SettlParties      `protobuf:"bytes,2,rep,name=settl_parties,json=settlParties,proto3" json:"settl_parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SettlDetails) Reset()         { *m = SettlDetails{} }
func (m *SettlDetails) String() string { return proto.CompactTextString(m) }
func (*SettlDetails) ProtoMessage()    {}
func (*SettlDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{67}
}

func (m *SettlDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlDetails.Unmarshal(m, b)
}
func (m *SettlDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlDetails.Marshal(b, m, deterministic)
}
func (m *SettlDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlDetails.Merge(m, src)
}
func (m *SettlDetails) XXX_Size() int {
	return xxx_messageInfo_SettlDetails.Size(m)
}
func (m *SettlDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SettlDetails proto.InternalMessageInfo

func (m *SettlDetails) GetSettlObligSource() SettlObligSourceEnum {
	if m != nil {
		return m.SettlObligSource
	}
	return SettlObligSourceEnum_SETTL_OBLIG_SOURCE_UNSPECIFIED
}

func (m *SettlDetails) GetSettlParties() []*SettlParties {
	if m != nil {
		return m.SettlParties
	}
	return nil
}

type SecurityXML struct {
	SecurityXml          string   `protobuf:"bytes,1,opt,name=security_xml,json=securityXml,proto3" json:"security_xml,omitempty"`
	SecurityXmlLen       int64    `protobuf:"fixed64,2,opt,name=security_xml_len,json=securityXmlLen,proto3" json:"security_xml_len,omitempty"`
	SecurityXmlSchema    string   `protobuf:"bytes,3,opt,name=security_xml_schema,json=securityXmlSchema,proto3" json:"security_xml_schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecurityXML) Reset()         { *m = SecurityXML{} }
func (m *SecurityXML) String() string { return proto.CompactTextString(m) }
func (*SecurityXML) ProtoMessage()    {}
func (*SecurityXML) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{68}
}

func (m *SecurityXML) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityXML.Unmarshal(m, b)
}
func (m *SecurityXML) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityXML.Marshal(b, m, deterministic)
}
func (m *SecurityXML) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityXML.Merge(m, src)
}
func (m *SecurityXML) XXX_Size() int {
	return xxx_messageInfo_SecurityXML.Size(m)
}
func (m *SecurityXML) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityXML.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityXML proto.InternalMessageInfo

func (m *SecurityXML) GetSecurityXml() string {
	if m != nil {
		return m.SecurityXml
	}
	return ""
}

func (m *SecurityXML) GetSecurityXmlLen() int64 {
	if m != nil {
		return m.SecurityXmlLen
	}
	return 0
}

func (m *SecurityXML) GetSecurityXmlSchema() string {
	if m != nil {
		return m.SecurityXmlSchema
	}
	return ""
}

type TickRules struct {
	EndTickPriceRange    *fix.Decimal64       `protobuf:"bytes,1,opt,name=end_tick_price_range,json=endTickPriceRange,proto3" json:"end_tick_price_range,omitempty"`
	StartTickPriceRange  *fix.Decimal64       `protobuf:"bytes,2,opt,name=start_tick_price_range,json=startTickPriceRange,proto3" json:"start_tick_price_range,omitempty"`
	TickIncrement        *fix.Decimal64       `protobuf:"bytes,3,opt,name=tick_increment,json=tickIncrement,proto3" json:"tick_increment,omitempty"`
	TickRuleType         TickRuleTypeEnum `protobuf:"varint,4,opt,name=tick_rule_type,json=tickRuleType,proto3,enum=Common.TickRuleTypeEnum" json:"tick_rule_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TickRules) Reset()         { *m = TickRules{} }
func (m *TickRules) String() string { return proto.CompactTextString(m) }
func (*TickRules) ProtoMessage()    {}
func (*TickRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{69}
}

func (m *TickRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickRules.Unmarshal(m, b)
}
func (m *TickRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickRules.Marshal(b, m, deterministic)
}
func (m *TickRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickRules.Merge(m, src)
}
func (m *TickRules) XXX_Size() int {
	return xxx_messageInfo_TickRules.Size(m)
}
func (m *TickRules) XXX_DiscardUnknown() {
	xxx_messageInfo_TickRules.DiscardUnknown(m)
}

var xxx_messageInfo_TickRules proto.InternalMessageInfo

func (m *TickRules) GetEndTickPriceRange() *fix.Decimal64 {
	if m != nil {
		return m.EndTickPriceRange
	}
	return nil
}

func (m *TickRules) GetStartTickPriceRange() *fix.Decimal64 {
	if m != nil {
		return m.StartTickPriceRange
	}
	return nil
}

func (m *TickRules) GetTickIncrement() *fix.Decimal64 {
	if m != nil {
		return m.TickIncrement
	}
	return nil
}

func (m *TickRules) GetTickRuleType() TickRuleTypeEnum {
	if m != nil {
		return m.TickRuleType
	}
	return TickRuleTypeEnum_TICK_RULE_TYPE_UNSPECIFIED
}

type StrikeRules struct {
	EndStrikePxRange     *fix.Decimal64              `protobuf:"bytes,1,opt,name=end_strike_px_range,json=endStrikePxRange,proto3" json:"end_strike_px_range,omitempty"`
	MaturityRules        []*MaturityRules        `protobuf:"bytes,2,rep,name=maturity_rules,json=maturityRules,proto3" json:"maturity_rules,omitempty"`
	StartStrikePxRange   *fix.Decimal64              `protobuf:"bytes,3,opt,name=start_strike_px_range,json=startStrikePxRange,proto3" json:"start_strike_px_range,omitempty"`
	StrikeExerciseStyle  StrikeExerciseStyleEnum `protobuf:"varint,4,opt,name=strike_exercise_style,json=strikeExerciseStyle,proto3,enum=Common.StrikeExerciseStyleEnum" json:"strike_exercise_style,omitempty"`
	StrikeIncrement      *fix.Decimal64              `protobuf:"bytes,5,opt,name=strike_increment,json=strikeIncrement,proto3" json:"strike_increment,omitempty"`
	StrikeRuleId         string                  `protobuf:"bytes,6,opt,name=strike_rule_id,json=strikeRuleId,proto3" json:"strike_rule_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StrikeRules) Reset()         { *m = StrikeRules{} }
func (m *StrikeRules) String() string { return proto.CompactTextString(m) }
func (*StrikeRules) ProtoMessage()    {}
func (*StrikeRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{70}
}

func (m *StrikeRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrikeRules.Unmarshal(m, b)
}
func (m *StrikeRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrikeRules.Marshal(b, m, deterministic)
}
func (m *StrikeRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrikeRules.Merge(m, src)
}
func (m *StrikeRules) XXX_Size() int {
	return xxx_messageInfo_StrikeRules.Size(m)
}
func (m *StrikeRules) XXX_DiscardUnknown() {
	xxx_messageInfo_StrikeRules.DiscardUnknown(m)
}

var xxx_messageInfo_StrikeRules proto.InternalMessageInfo

func (m *StrikeRules) GetEndStrikePxRange() *fix.Decimal64 {
	if m != nil {
		return m.EndStrikePxRange
	}
	return nil
}

func (m *StrikeRules) GetMaturityRules() []*MaturityRules {
	if m != nil {
		return m.MaturityRules
	}
	return nil
}

func (m *StrikeRules) GetStartStrikePxRange() *fix.Decimal64 {
	if m != nil {
		return m.StartStrikePxRange
	}
	return nil
}

func (m *StrikeRules) GetStrikeExerciseStyle() StrikeExerciseStyleEnum {
	if m != nil {
		return m.StrikeExerciseStyle
	}
	return StrikeExerciseStyleEnum_STRIKE_EXERCISE_STYLE_UNSPECIFIED
}

func (m *StrikeRules) GetStrikeIncrement() *fix.Decimal64 {
	if m != nil {
		return m.StrikeIncrement
	}
	return nil
}

func (m *StrikeRules) GetStrikeRuleId() string {
	if m != nil {
		return m.StrikeRuleId
	}
	return ""
}

type MaturityRules struct {
	EndMaturityMonthYear            int32                               `protobuf:"fixed32,1,opt,name=end_maturity_month_year,json=endMaturityMonthYear,proto3" json:"end_maturity_month_year,omitempty"`
	MaturityMonthYearFormat         MaturityMonthYearFormatEnum         `protobuf:"varint,2,opt,name=maturity_month_year_format,json=maturityMonthYearFormat,proto3,enum=Common.MaturityMonthYearFormatEnum" json:"maturity_month_year_format,omitempty"`
	MaturityMonthYearIncrement      int64                               `protobuf:"fixed64,3,opt,name=maturity_month_year_increment,json=maturityMonthYearIncrement,proto3" json:"maturity_month_year_increment,omitempty"`
	MaturityMonthYearIncrementUnits MaturityMonthYearIncrementUnitsEnum `protobuf:"varint,4,opt,name=maturity_month_year_increment_units,json=maturityMonthYearIncrementUnits,proto3,enum=Common.MaturityMonthYearIncrementUnitsEnum" json:"maturity_month_year_increment_units,omitempty"`
	MaturityRuleId                  string                              `protobuf:"bytes,5,opt,name=maturity_rule_id,json=maturityRuleId,proto3" json:"maturity_rule_id,omitempty"`
	StartMaturityMonthYear          int32                               `protobuf:"fixed32,6,opt,name=start_maturity_month_year,json=startMaturityMonthYear,proto3" json:"start_maturity_month_year,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                            `json:"-"`
	XXX_unrecognized                []byte                              `json:"-"`
	XXX_sizecache                   int32                               `json:"-"`
}

func (m *MaturityRules) Reset()         { *m = MaturityRules{} }
func (m *MaturityRules) String() string { return proto.CompactTextString(m) }
func (*MaturityRules) ProtoMessage()    {}
func (*MaturityRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{71}
}

func (m *MaturityRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaturityRules.Unmarshal(m, b)
}
func (m *MaturityRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaturityRules.Marshal(b, m, deterministic)
}
func (m *MaturityRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaturityRules.Merge(m, src)
}
func (m *MaturityRules) XXX_Size() int {
	return xxx_messageInfo_MaturityRules.Size(m)
}
func (m *MaturityRules) XXX_DiscardUnknown() {
	xxx_messageInfo_MaturityRules.DiscardUnknown(m)
}

var xxx_messageInfo_MaturityRules proto.InternalMessageInfo

func (m *MaturityRules) GetEndMaturityMonthYear() int32 {
	if m != nil {
		return m.EndMaturityMonthYear
	}
	return 0
}

func (m *MaturityRules) GetMaturityMonthYearFormat() MaturityMonthYearFormatEnum {
	if m != nil {
		return m.MaturityMonthYearFormat
	}
	return MaturityMonthYearFormatEnum_MATURITY_MONTH_YEAR_FORMAT_UNSPECIFIED
}

func (m *MaturityRules) GetMaturityMonthYearIncrement() int64 {
	if m != nil {
		return m.MaturityMonthYearIncrement
	}
	return 0
}

func (m *MaturityRules) GetMaturityMonthYearIncrementUnits() MaturityMonthYearIncrementUnitsEnum {
	if m != nil {
		return m.MaturityMonthYearIncrementUnits
	}
	return MaturityMonthYearIncrementUnitsEnum_MATURITY_MONTH_YEAR_INCREMENT_UNITS_UNSPECIFIED
}

func (m *MaturityRules) GetMaturityRuleId() string {
	if m != nil {
		return m.MaturityRuleId
	}
	return ""
}

func (m *MaturityRules) GetStartMaturityMonthYear() int32 {
	if m != nil {
		return m.StartMaturityMonthYear
	}
	return 0
}

type SecondaryPriceLimits struct {
	SecondaryHighLimitPrice        *fix.Decimal64                  `protobuf:"bytes,1,opt,name=secondary_high_limit_price,json=secondaryHighLimitPrice,proto3" json:"secondary_high_limit_price,omitempty"`
	SecondaryLowLimitPrice         *fix.Decimal64                  `protobuf:"bytes,2,opt,name=secondary_low_limit_price,json=secondaryLowLimitPrice,proto3" json:"secondary_low_limit_price,omitempty"`
	SecondaryPriceLimitType        SecondaryPriceLimitTypeEnum `protobuf:"varint,3,opt,name=secondary_price_limit_type,json=secondaryPriceLimitType,proto3,enum=Common.SecondaryPriceLimitTypeEnum" json:"secondary_price_limit_type,omitempty"`
	SecondaryTradingReferencePrice *fix.Decimal64                  `protobuf:"bytes,4,opt,name=secondary_trading_reference_price,json=secondaryTradingReferencePrice,proto3" json:"secondary_trading_reference_price,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                    `json:"-"`
	XXX_unrecognized               []byte                      `json:"-"`
	XXX_sizecache                  int32                       `json:"-"`
}

func (m *SecondaryPriceLimits) Reset()         { *m = SecondaryPriceLimits{} }
func (m *SecondaryPriceLimits) String() string { return proto.CompactTextString(m) }
func (*SecondaryPriceLimits) ProtoMessage()    {}
func (*SecondaryPriceLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{72}
}

func (m *SecondaryPriceLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecondaryPriceLimits.Unmarshal(m, b)
}
func (m *SecondaryPriceLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecondaryPriceLimits.Marshal(b, m, deterministic)
}
func (m *SecondaryPriceLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondaryPriceLimits.Merge(m, src)
}
func (m *SecondaryPriceLimits) XXX_Size() int {
	return xxx_messageInfo_SecondaryPriceLimits.Size(m)
}
func (m *SecondaryPriceLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondaryPriceLimits.DiscardUnknown(m)
}

var xxx_messageInfo_SecondaryPriceLimits proto.InternalMessageInfo

func (m *SecondaryPriceLimits) GetSecondaryHighLimitPrice() *fix.Decimal64 {
	if m != nil {
		return m.SecondaryHighLimitPrice
	}
	return nil
}

func (m *SecondaryPriceLimits) GetSecondaryLowLimitPrice() *fix.Decimal64 {
	if m != nil {
		return m.SecondaryLowLimitPrice
	}
	return nil
}

func (m *SecondaryPriceLimits) GetSecondaryPriceLimitType() SecondaryPriceLimitTypeEnum {
	if m != nil {
		return m.SecondaryPriceLimitType
	}
	return SecondaryPriceLimitTypeEnum_SECONDARY_PRICE_LIMIT_TYPE_UNSPECIFIED
}

func (m *SecondaryPriceLimits) GetSecondaryTradingReferencePrice() *fix.Decimal64 {
	if m != nil {
		return m.SecondaryTradingReferencePrice
	}
	return nil
}

type PriceLimits struct {
	HighLimitPrice        *fix.Decimal64         `protobuf:"bytes,1,opt,name=high_limit_price,json=highLimitPrice,proto3" json:"high_limit_price,omitempty"`
	LowLimitPrice         *fix.Decimal64         `protobuf:"bytes,2,opt,name=low_limit_price,json=lowLimitPrice,proto3" json:"low_limit_price,omitempty"`
	PriceLimitType        PriceLimitTypeEnum `protobuf:"varint,3,opt,name=price_limit_type,json=priceLimitType,proto3,enum=Common.PriceLimitTypeEnum" json:"price_limit_type,omitempty"`
	TradingReferencePrice *fix.Decimal64         `protobuf:"bytes,4,opt,name=trading_reference_price,json=tradingReferencePrice,proto3" json:"trading_reference_price,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *PriceLimits) Reset()         { *m = PriceLimits{} }
func (m *PriceLimits) String() string { return proto.CompactTextString(m) }
func (*PriceLimits) ProtoMessage()    {}
func (*PriceLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{73}
}

func (m *PriceLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceLimits.Unmarshal(m, b)
}
func (m *PriceLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceLimits.Marshal(b, m, deterministic)
}
func (m *PriceLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceLimits.Merge(m, src)
}
func (m *PriceLimits) XXX_Size() int {
	return xxx_messageInfo_PriceLimits.Size(m)
}
func (m *PriceLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceLimits.DiscardUnknown(m)
}

var xxx_messageInfo_PriceLimits proto.InternalMessageInfo

func (m *PriceLimits) GetHighLimitPrice() *fix.Decimal64 {
	if m != nil {
		return m.HighLimitPrice
	}
	return nil
}

func (m *PriceLimits) GetLowLimitPrice() *fix.Decimal64 {
	if m != nil {
		return m.LowLimitPrice
	}
	return nil
}

func (m *PriceLimits) GetPriceLimitType() PriceLimitTypeEnum {
	if m != nil {
		return m.PriceLimitType
	}
	return PriceLimitTypeEnum_PRICE_LIMIT_TYPE_UNSPECIFIED
}

func (m *PriceLimits) GetTradingReferencePrice() *fix.Decimal64 {
	if m != nil {
		return m.TradingReferencePrice
	}
	return nil
}

type MarketDataFeedTypes struct {
	MarketDepth          int64          `protobuf:"fixed64,1,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	MdBookType           MDBookTypeEnum `protobuf:"varint,2,opt,name=md_book_type,json=mdBookType,proto3,enum=Common.MDBookTypeEnum" json:"md_book_type,omitempty"`
	MdFeedType           string         `protobuf:"bytes,3,opt,name=md_feed_type,json=mdFeedType,proto3" json:"md_feed_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MarketDataFeedTypes) Reset()         { *m = MarketDataFeedTypes{} }
func (m *MarketDataFeedTypes) String() string { return proto.CompactTextString(m) }
func (*MarketDataFeedTypes) ProtoMessage()    {}
func (*MarketDataFeedTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{74}
}

func (m *MarketDataFeedTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataFeedTypes.Unmarshal(m, b)
}
func (m *MarketDataFeedTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataFeedTypes.Marshal(b, m, deterministic)
}
func (m *MarketDataFeedTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataFeedTypes.Merge(m, src)
}
func (m *MarketDataFeedTypes) XXX_Size() int {
	return xxx_messageInfo_MarketDataFeedTypes.Size(m)
}
func (m *MarketDataFeedTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataFeedTypes.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataFeedTypes proto.InternalMessageInfo

func (m *MarketDataFeedTypes) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MarketDataFeedTypes) GetMdBookType() MDBookTypeEnum {
	if m != nil {
		return m.MdBookType
	}
	return MDBookTypeEnum_MD_BOOK_TYPE_UNSPECIFIED
}

func (m *MarketDataFeedTypes) GetMdFeedType() string {
	if m != nil {
		return m.MdFeedType
	}
	return ""
}

type LotTypeRules struct {
	LotType              LotTypeEnum `protobuf:"varint,1,opt,name=lot_type,json=lotType,proto3,enum=Common.LotTypeEnum" json:"lot_type,omitempty"`
	MinLotSize           *fix.Decimal64  `protobuf:"bytes,2,opt,name=min_lot_size,json=minLotSize,proto3" json:"min_lot_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LotTypeRules) Reset()         { *m = LotTypeRules{} }
func (m *LotTypeRules) String() string { return proto.CompactTextString(m) }
func (*LotTypeRules) ProtoMessage()    {}
func (*LotTypeRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{75}
}

func (m *LotTypeRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LotTypeRules.Unmarshal(m, b)
}
func (m *LotTypeRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LotTypeRules.Marshal(b, m, deterministic)
}
func (m *LotTypeRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotTypeRules.Merge(m, src)
}
func (m *LotTypeRules) XXX_Size() int {
	return xxx_messageInfo_LotTypeRules.Size(m)
}
func (m *LotTypeRules) XXX_DiscardUnknown() {
	xxx_messageInfo_LotTypeRules.DiscardUnknown(m)
}

var xxx_messageInfo_LotTypeRules proto.InternalMessageInfo

func (m *LotTypeRules) GetLotType() LotTypeEnum {
	if m != nil {
		return m.LotType
	}
	return LotTypeEnum_LOT_TYPE_UNSPECIFIED
}

func (m *LotTypeRules) GetMinLotSize() *fix.Decimal64 {
	if m != nil {
		return m.MinLotSize
	}
	return nil
}

type MatchRules struct {
	MatchAlgorithm       string        `protobuf:"bytes,1,opt,name=match_algorithm,json=matchAlgorithm,proto3" json:"match_algorithm,omitempty"`
	MatchType            MatchTypeEnum `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=Common.MatchTypeEnum" json:"match_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MatchRules) Reset()         { *m = MatchRules{} }
func (m *MatchRules) String() string { return proto.CompactTextString(m) }
func (*MatchRules) ProtoMessage()    {}
func (*MatchRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{76}
}

func (m *MatchRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchRules.Unmarshal(m, b)
}
func (m *MatchRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchRules.Marshal(b, m, deterministic)
}
func (m *MatchRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRules.Merge(m, src)
}
func (m *MatchRules) XXX_Size() int {
	return xxx_messageInfo_MatchRules.Size(m)
}
func (m *MatchRules) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRules.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRules proto.InternalMessageInfo

func (m *MatchRules) GetMatchAlgorithm() string {
	if m != nil {
		return m.MatchAlgorithm
	}
	return ""
}

func (m *MatchRules) GetMatchType() MatchTypeEnum {
	if m != nil {
		return m.MatchType
	}
	return MatchTypeEnum_MATCH_TYPE_UNSPECIFIED
}

type ExecInstRules struct {
	ExecInstValue        ExecInstValueEnum `protobuf:"varint,1,opt,name=exec_inst_value,json=execInstValue,proto3,enum=Common.ExecInstValueEnum" json:"exec_inst_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExecInstRules) Reset()         { *m = ExecInstRules{} }
func (m *ExecInstRules) String() string { return proto.CompactTextString(m) }
func (*ExecInstRules) ProtoMessage()    {}
func (*ExecInstRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{77}
}

func (m *ExecInstRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecInstRules.Unmarshal(m, b)
}
func (m *ExecInstRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecInstRules.Marshal(b, m, deterministic)
}
func (m *ExecInstRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecInstRules.Merge(m, src)
}
func (m *ExecInstRules) XXX_Size() int {
	return xxx_messageInfo_ExecInstRules.Size(m)
}
func (m *ExecInstRules) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecInstRules.DiscardUnknown(m)
}

var xxx_messageInfo_ExecInstRules proto.InternalMessageInfo

func (m *ExecInstRules) GetExecInstValue() ExecInstValueEnum {
	if m != nil {
		return m.ExecInstValue
	}
	return ExecInstValueEnum_EXEC_INST_VALUE_UNSPECIFIED
}

type TimeInForceRules struct {
	TimeInForce          TimeInForceEnum `protobuf:"varint,1,opt,name=time_in_force,json=timeInForce,proto3,enum=Common.TimeInForceEnum" json:"time_in_force,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TimeInForceRules) Reset()         { *m = TimeInForceRules{} }
func (m *TimeInForceRules) String() string { return proto.CompactTextString(m) }
func (*TimeInForceRules) ProtoMessage()    {}
func (*TimeInForceRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{78}
}

func (m *TimeInForceRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeInForceRules.Unmarshal(m, b)
}
func (m *TimeInForceRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeInForceRules.Marshal(b, m, deterministic)
}
func (m *TimeInForceRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeInForceRules.Merge(m, src)
}
func (m *TimeInForceRules) XXX_Size() int {
	return xxx_messageInfo_TimeInForceRules.Size(m)
}
func (m *TimeInForceRules) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeInForceRules.DiscardUnknown(m)
}

var xxx_messageInfo_TimeInForceRules proto.InternalMessageInfo

func (m *TimeInForceRules) GetTimeInForce() TimeInForceEnum {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForceEnum_TIME_IN_FORCE_UNSPECIFIED
}

type OrdTypeRules struct {
	OrdType              OrdTypeEnum `protobuf:"varint,1,opt,name=ord_type,json=ordType,proto3,enum=Common.OrdTypeEnum" json:"ord_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdTypeRules) Reset()         { *m = OrdTypeRules{} }
func (m *OrdTypeRules) String() string { return proto.CompactTextString(m) }
func (*OrdTypeRules) ProtoMessage()    {}
func (*OrdTypeRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{79}
}

func (m *OrdTypeRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdTypeRules.Unmarshal(m, b)
}
func (m *OrdTypeRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdTypeRules.Marshal(b, m, deterministic)
}
func (m *OrdTypeRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdTypeRules.Merge(m, src)
}
func (m *OrdTypeRules) XXX_Size() int {
	return xxx_messageInfo_OrdTypeRules.Size(m)
}
func (m *OrdTypeRules) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdTypeRules.DiscardUnknown(m)
}

var xxx_messageInfo_OrdTypeRules proto.InternalMessageInfo

func (m *OrdTypeRules) GetOrdType() OrdTypeEnum {
	if m != nil {
		return m.OrdType
	}
	return OrdTypeEnum_ORD_TYPE_UNSPECIFIED
}

type TradingSessionRules struct {
	ExecInstRules        []*ExecInstRules       `protobuf:"bytes,1,rep,name=exec_inst_rules,json=execInstRules,proto3" json:"exec_inst_rules,omitempty"`
	MarketDataFeedTypes  []*MarketDataFeedTypes `protobuf:"bytes,2,rep,name=market_data_feed_types,json=marketDataFeedTypes,proto3" json:"market_data_feed_types,omitempty"`
	MatchRules           []*MatchRules          `protobuf:"bytes,3,rep,name=match_rules,json=matchRules,proto3" json:"match_rules,omitempty"`
	OrdTypeRules         []*OrdTypeRules        `protobuf:"bytes,4,rep,name=ord_type_rules,json=ordTypeRules,proto3" json:"ord_type_rules,omitempty"`
	TimeInForceRules     []*TimeInForceRules    `protobuf:"bytes,5,rep,name=time_in_force_rules,json=timeInForceRules,proto3" json:"time_in_force_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TradingSessionRules) Reset()         { *m = TradingSessionRules{} }
func (m *TradingSessionRules) String() string { return proto.CompactTextString(m) }
func (*TradingSessionRules) ProtoMessage()    {}
func (*TradingSessionRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{80}
}

func (m *TradingSessionRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingSessionRules.Unmarshal(m, b)
}
func (m *TradingSessionRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingSessionRules.Marshal(b, m, deterministic)
}
func (m *TradingSessionRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSessionRules.Merge(m, src)
}
func (m *TradingSessionRules) XXX_Size() int {
	return xxx_messageInfo_TradingSessionRules.Size(m)
}
func (m *TradingSessionRules) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSessionRules.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSessionRules proto.InternalMessageInfo

func (m *TradingSessionRules) GetExecInstRules() []*ExecInstRules {
	if m != nil {
		return m.ExecInstRules
	}
	return nil
}

func (m *TradingSessionRules) GetMarketDataFeedTypes() []*MarketDataFeedTypes {
	if m != nil {
		return m.MarketDataFeedTypes
	}
	return nil
}

func (m *TradingSessionRules) GetMatchRules() []*MatchRules {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *TradingSessionRules) GetOrdTypeRules() []*OrdTypeRules {
	if m != nil {
		return m.OrdTypeRules
	}
	return nil
}

func (m *TradingSessionRules) GetTimeInForceRules() []*TimeInForceRules {
	if m != nil {
		return m.TimeInForceRules
	}
	return nil
}

type TradingSessionRulesGrp struct {
	// Types that are valid to be assigned to TradingSessionIdUnion:
	//	*TradingSessionRulesGrp_TradingSessionId
	//	*TradingSessionRulesGrp_TradingSessionIdReserved100Plus
	TradingSessionIdUnion isTradingSessionRulesGrp_TradingSessionIdUnion `protobuf_oneof:"trading_session_id_union"`
	TradingSessionRules   *TradingSessionRules                           `protobuf:"bytes,3,opt,name=trading_session_rules,json=tradingSessionRules,proto3" json:"trading_session_rules,omitempty"`
	// Types that are valid to be assigned to TradingSessionSubIdUnion:
	//	*TradingSessionRulesGrp_TradingSessionSubId
	//	*TradingSessionRulesGrp_TradingSessionSubIdReserved100Plus
	TradingSessionSubIdUnion isTradingSessionRulesGrp_TradingSessionSubIdUnion `protobuf_oneof:"trading_session_sub_id_union"`
	XXX_NoUnkeyedLiteral     struct{}                                          `json:"-"`
	XXX_unrecognized         []byte                                            `json:"-"`
	XXX_sizecache            int32                                             `json:"-"`
}

func (m *TradingSessionRulesGrp) Reset()         { *m = TradingSessionRulesGrp{} }
func (m *TradingSessionRulesGrp) String() string { return proto.CompactTextString(m) }
func (*TradingSessionRulesGrp) ProtoMessage()    {}
func (*TradingSessionRulesGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{81}
}

func (m *TradingSessionRulesGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingSessionRulesGrp.Unmarshal(m, b)
}
func (m *TradingSessionRulesGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingSessionRulesGrp.Marshal(b, m, deterministic)
}
func (m *TradingSessionRulesGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSessionRulesGrp.Merge(m, src)
}
func (m *TradingSessionRulesGrp) XXX_Size() int {
	return xxx_messageInfo_TradingSessionRulesGrp.Size(m)
}
func (m *TradingSessionRulesGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSessionRulesGrp.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSessionRulesGrp proto.InternalMessageInfo

type isTradingSessionRulesGrp_TradingSessionIdUnion interface {
	isTradingSessionRulesGrp_TradingSessionIdUnion()
}

type TradingSessionRulesGrp_TradingSessionId struct {
	TradingSessionId TradingSessionIDEnum `protobuf:"varint,1,opt,name=trading_session_id,json=tradingSessionId,proto3,enum=Common.TradingSessionIDEnum,oneof"`
}

type TradingSessionRulesGrp_TradingSessionIdReserved100Plus struct {
	TradingSessionIdReserved100Plus uint32 `protobuf:"fixed32,2,opt,name=trading_session_id_reserved100plus,json=tradingSessionIdReserved100plus,proto3,oneof"`
}

func (*TradingSessionRulesGrp_TradingSessionId) isTradingSessionRulesGrp_TradingSessionIdUnion() {}

func (*TradingSessionRulesGrp_TradingSessionIdReserved100Plus) isTradingSessionRulesGrp_TradingSessionIdUnion() {
}

func (m *TradingSessionRulesGrp) GetTradingSessionIdUnion() isTradingSessionRulesGrp_TradingSessionIdUnion {
	if m != nil {
		return m.TradingSessionIdUnion
	}
	return nil
}

func (m *TradingSessionRulesGrp) GetTradingSessionId() TradingSessionIDEnum {
	if x, ok := m.GetTradingSessionIdUnion().(*TradingSessionRulesGrp_TradingSessionId); ok {
		return x.TradingSessionId
	}
	return TradingSessionIDEnum_TRADING_SESSION_ID_UNSPECIFIED
}

func (m *TradingSessionRulesGrp) GetTradingSessionIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionIdUnion().(*TradingSessionRulesGrp_TradingSessionIdReserved100Plus); ok {
		return x.TradingSessionIdReserved100Plus
	}
	return 0
}

func (m *TradingSessionRulesGrp) GetTradingSessionRules() *TradingSessionRules {
	if m != nil {
		return m.TradingSessionRules
	}
	return nil
}

type isTradingSessionRulesGrp_TradingSessionSubIdUnion interface {
	isTradingSessionRulesGrp_TradingSessionSubIdUnion()
}

type TradingSessionRulesGrp_TradingSessionSubId struct {
	TradingSessionSubId TradingSessionSubIDEnum `protobuf:"varint,4,opt,name=trading_session_sub_id,json=tradingSessionSubId,proto3,enum=Common.TradingSessionSubIDEnum,oneof"`
}

type TradingSessionRulesGrp_TradingSessionSubIdReserved100Plus struct {
	TradingSessionSubIdReserved100Plus uint32 `protobuf:"fixed32,5,opt,name=trading_session_sub_id_reserved100plus,json=tradingSessionSubIdReserved100plus,proto3,oneof"`
}

func (*TradingSessionRulesGrp_TradingSessionSubId) isTradingSessionRulesGrp_TradingSessionSubIdUnion() {
}

func (*TradingSessionRulesGrp_TradingSessionSubIdReserved100Plus) isTradingSessionRulesGrp_TradingSessionSubIdUnion() {
}

func (m *TradingSessionRulesGrp) GetTradingSessionSubIdUnion() isTradingSessionRulesGrp_TradingSessionSubIdUnion {
	if m != nil {
		return m.TradingSessionSubIdUnion
	}
	return nil
}

func (m *TradingSessionRulesGrp) GetTradingSessionSubId() TradingSessionSubIDEnum {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TradingSessionRulesGrp_TradingSessionSubId); ok {
		return x.TradingSessionSubId
	}
	return TradingSessionSubIDEnum_TRADING_SESSION_SUB_ID_UNSPECIFIED
}

func (m *TradingSessionRulesGrp) GetTradingSessionSubIdReserved100Plus() uint32 {
	if x, ok := m.GetTradingSessionSubIdUnion().(*TradingSessionRulesGrp_TradingSessionSubIdReserved100Plus); ok {
		return x.TradingSessionSubIdReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TradingSessionRulesGrp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TradingSessionRulesGrp_TradingSessionId)(nil),
		(*TradingSessionRulesGrp_TradingSessionIdReserved100Plus)(nil),
		(*TradingSessionRulesGrp_TradingSessionSubId)(nil),
		(*TradingSessionRulesGrp_TradingSessionSubIdReserved100Plus)(nil),
	}
}

type BaseTradingRules struct {
	ExpirationCycle        ExpirationCycleEnum        `protobuf:"varint,1,opt,name=expiration_cycle,json=expirationCycle,proto3,enum=Common.ExpirationCycleEnum" json:"expiration_cycle,omitempty"`
	ImpliedMarketIndicator ImpliedMarketIndicatorEnum `protobuf:"varint,2,opt,name=implied_market_indicator,json=impliedMarketIndicator,proto3,enum=Common.ImpliedMarketIndicatorEnum" json:"implied_market_indicator,omitempty"`
	LotTypeRules           []*LotTypeRules            `protobuf:"bytes,3,rep,name=lot_type_rules,json=lotTypeRules,proto3" json:"lot_type_rules,omitempty"`
	MaxPriceVariation      *fix.Decimal64                 `protobuf:"bytes,4,opt,name=max_price_variation,json=maxPriceVariation,proto3" json:"max_price_variation,omitempty"`
	MaxTradeVol            *fix.Decimal64                 `protobuf:"bytes,5,opt,name=max_trade_vol,json=maxTradeVol,proto3" json:"max_trade_vol,omitempty"`
	MinTradeVol            *fix.Decimal64                 `protobuf:"bytes,6,opt,name=min_trade_vol,json=minTradeVol,proto3" json:"min_trade_vol,omitempty"`
	MultilegModel          MultilegModelEnum          `protobuf:"varint,7,opt,name=multileg_model,json=multilegModel,proto3,enum=Common.MultilegModelEnum" json:"multileg_model,omitempty"`
	MultilegPriceMethod    MultilegPriceMethodEnum    `protobuf:"varint,8,opt,name=multileg_price_method,json=multilegPriceMethod,proto3,enum=Common.MultilegPriceMethodEnum" json:"multileg_price_method,omitempty"`
	PriceLimits            *PriceLimits               `protobuf:"bytes,9,opt,name=price_limits,json=priceLimits,proto3" json:"price_limits,omitempty"`
	PriceType              PriceTypeEnum              `protobuf:"varint,10,opt,name=price_type,json=priceType,proto3,enum=Common.PriceTypeEnum" json:"price_type,omitempty"`
	RoundLot               *fix.Decimal64                 `protobuf:"bytes,11,opt,name=round_lot,json=roundLot,proto3" json:"round_lot,omitempty"`
	TickRules              []*TickRules               `protobuf:"bytes,12,rep,name=tick_rules,json=tickRules,proto3" json:"tick_rules,omitempty"`
	TradingCurrency        string                     `protobuf:"bytes,13,opt,name=trading_currency,json=tradingCurrency,proto3" json:"trading_currency,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                   `json:"-"`
	XXX_unrecognized       []byte                     `json:"-"`
	XXX_sizecache          int32                      `json:"-"`
}

func (m *BaseTradingRules) Reset()         { *m = BaseTradingRules{} }
func (m *BaseTradingRules) String() string { return proto.CompactTextString(m) }
func (*BaseTradingRules) ProtoMessage()    {}
func (*BaseTradingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{82}
}

func (m *BaseTradingRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseTradingRules.Unmarshal(m, b)
}
func (m *BaseTradingRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseTradingRules.Marshal(b, m, deterministic)
}
func (m *BaseTradingRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseTradingRules.Merge(m, src)
}
func (m *BaseTradingRules) XXX_Size() int {
	return xxx_messageInfo_BaseTradingRules.Size(m)
}
func (m *BaseTradingRules) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseTradingRules.DiscardUnknown(m)
}

var xxx_messageInfo_BaseTradingRules proto.InternalMessageInfo

func (m *BaseTradingRules) GetExpirationCycle() ExpirationCycleEnum {
	if m != nil {
		return m.ExpirationCycle
	}
	return ExpirationCycleEnum_EXPIRATION_CYCLE_UNSPECIFIED
}

func (m *BaseTradingRules) GetImpliedMarketIndicator() ImpliedMarketIndicatorEnum {
	if m != nil {
		return m.ImpliedMarketIndicator
	}
	return ImpliedMarketIndicatorEnum_IMPLIED_MARKET_INDICATOR_UNSPECIFIED
}

func (m *BaseTradingRules) GetLotTypeRules() []*LotTypeRules {
	if m != nil {
		return m.LotTypeRules
	}
	return nil
}

func (m *BaseTradingRules) GetMaxPriceVariation() *fix.Decimal64 {
	if m != nil {
		return m.MaxPriceVariation
	}
	return nil
}

func (m *BaseTradingRules) GetMaxTradeVol() *fix.Decimal64 {
	if m != nil {
		return m.MaxTradeVol
	}
	return nil
}

func (m *BaseTradingRules) GetMinTradeVol() *fix.Decimal64 {
	if m != nil {
		return m.MinTradeVol
	}
	return nil
}

func (m *BaseTradingRules) GetMultilegModel() MultilegModelEnum {
	if m != nil {
		return m.MultilegModel
	}
	return MultilegModelEnum_MULTILEG_MODEL_UNSPECIFIED
}

func (m *BaseTradingRules) GetMultilegPriceMethod() MultilegPriceMethodEnum {
	if m != nil {
		return m.MultilegPriceMethod
	}
	return MultilegPriceMethodEnum_MULTILEG_PRICE_METHOD_UNSPECIFIED
}

func (m *BaseTradingRules) GetPriceLimits() *PriceLimits {
	if m != nil {
		return m.PriceLimits
	}
	return nil
}

func (m *BaseTradingRules) GetPriceType() PriceTypeEnum {
	if m != nil {
		return m.PriceType
	}
	return PriceTypeEnum_PRICE_TYPE_UNSPECIFIED
}

func (m *BaseTradingRules) GetRoundLot() *fix.Decimal64 {
	if m != nil {
		return m.RoundLot
	}
	return nil
}

func (m *BaseTradingRules) GetTickRules() []*TickRules {
	if m != nil {
		return m.TickRules
	}
	return nil
}

func (m *BaseTradingRules) GetTradingCurrency() string {
	if m != nil {
		return m.TradingCurrency
	}
	return ""
}

type MarketSegmentGrp struct {
	MarketId             string                `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	MarketSegmentId      string                `protobuf:"bytes,2,opt,name=market_segment_id,json=marketSegmentId,proto3" json:"market_segment_id,omitempty"`
	SecurityTradingRules *SecurityTradingRules `protobuf:"bytes,3,opt,name=security_trading_rules,json=securityTradingRules,proto3" json:"security_trading_rules,omitempty"`
	StrikeRules          []*StrikeRules        `protobuf:"bytes,4,rep,name=strike_rules,json=strikeRules,proto3" json:"strike_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MarketSegmentGrp) Reset()         { *m = MarketSegmentGrp{} }
func (m *MarketSegmentGrp) String() string { return proto.CompactTextString(m) }
func (*MarketSegmentGrp) ProtoMessage()    {}
func (*MarketSegmentGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{83}
}

func (m *MarketSegmentGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSegmentGrp.Unmarshal(m, b)
}
func (m *MarketSegmentGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSegmentGrp.Marshal(b, m, deterministic)
}
func (m *MarketSegmentGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSegmentGrp.Merge(m, src)
}
func (m *MarketSegmentGrp) XXX_Size() int {
	return xxx_messageInfo_MarketSegmentGrp.Size(m)
}
func (m *MarketSegmentGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSegmentGrp.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSegmentGrp proto.InternalMessageInfo

func (m *MarketSegmentGrp) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketSegmentGrp) GetMarketSegmentId() string {
	if m != nil {
		return m.MarketSegmentId
	}
	return ""
}

func (m *MarketSegmentGrp) GetSecurityTradingRules() *SecurityTradingRules {
	if m != nil {
		return m.SecurityTradingRules
	}
	return nil
}

func (m *MarketSegmentGrp) GetStrikeRules() []*StrikeRules {
	if m != nil {
		return m.StrikeRules
	}
	return nil
}

type DerivativeInstrumentPartySubIDsGrp struct {
	DerivativeInstrumentPartySubId     string                                 `protobuf:"bytes,1,opt,name=derivative_instrument_party_sub_id,json=derivativeInstrumentPartySubId,proto3" json:"derivative_instrument_party_sub_id,omitempty"`
	DerivativeInstrumentPartySubIdType DerivativeInstrumentPartySubIDTypeEnum `protobuf:"varint,2,opt,name=derivative_instrument_party_sub_id_type,json=derivativeInstrumentPartySubIdType,proto3,enum=Common.DerivativeInstrumentPartySubIDTypeEnum" json:"derivative_instrument_party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                               `json:"-"`
	XXX_unrecognized                   []byte                                 `json:"-"`
	XXX_sizecache                      int32                                  `json:"-"`
}

func (m *DerivativeInstrumentPartySubIDsGrp) Reset()         { *m = DerivativeInstrumentPartySubIDsGrp{} }
func (m *DerivativeInstrumentPartySubIDsGrp) String() string { return proto.CompactTextString(m) }
func (*DerivativeInstrumentPartySubIDsGrp) ProtoMessage()    {}
func (*DerivativeInstrumentPartySubIDsGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{84}
}

func (m *DerivativeInstrumentPartySubIDsGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp.Unmarshal(m, b)
}
func (m *DerivativeInstrumentPartySubIDsGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp.Marshal(b, m, deterministic)
}
func (m *DerivativeInstrumentPartySubIDsGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp.Merge(m, src)
}
func (m *DerivativeInstrumentPartySubIDsGrp) XXX_Size() int {
	return xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp.Size(m)
}
func (m *DerivativeInstrumentPartySubIDsGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeInstrumentPartySubIDsGrp proto.InternalMessageInfo

func (m *DerivativeInstrumentPartySubIDsGrp) GetDerivativeInstrumentPartySubId() string {
	if m != nil {
		return m.DerivativeInstrumentPartySubId
	}
	return ""
}

func (m *DerivativeInstrumentPartySubIDsGrp) GetDerivativeInstrumentPartySubIdType() DerivativeInstrumentPartySubIDTypeEnum {
	if m != nil {
		return m.DerivativeInstrumentPartySubIdType
	}
	return DerivativeInstrumentPartySubIDTypeEnum_DERIVATIVE_INSTRUMENT_PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type DerivativeInstrumentParties struct {
	DerivativeInstrumentPartyId        string                                `protobuf:"bytes,1,opt,name=derivative_instrument_party_id,json=derivativeInstrumentPartyId,proto3" json:"derivative_instrument_party_id,omitempty"`
	DerivativeInstrumentPartyIdSource  DerivativeInstrumentPartyIDSourceEnum `protobuf:"varint,2,opt,name=derivative_instrument_party_id_source,json=derivativeInstrumentPartyIdSource,proto3,enum=Common.DerivativeInstrumentPartyIDSourceEnum" json:"derivative_instrument_party_id_source,omitempty"`
	DerivativeInstrumentPartyRole      DerivativeInstrumentPartyRoleEnum     `protobuf:"varint,3,opt,name=derivative_instrument_party_role,json=derivativeInstrumentPartyRole,proto3,enum=Common.DerivativeInstrumentPartyRoleEnum" json:"derivative_instrument_party_role,omitempty"`
	DerivativeInstrumentPartySubIdsGrp []*DerivativeInstrumentPartySubIDsGrp `protobuf:"bytes,4,rep,name=derivative_instrument_party_sub_ids_grp,json=derivativeInstrumentPartySubIdsGrp,proto3" json:"derivative_instrument_party_sub_ids_grp,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                              `json:"-"`
	XXX_unrecognized                   []byte                                `json:"-"`
	XXX_sizecache                      int32                                 `json:"-"`
}

func (m *DerivativeInstrumentParties) Reset()         { *m = DerivativeInstrumentParties{} }
func (m *DerivativeInstrumentParties) String() string { return proto.CompactTextString(m) }
func (*DerivativeInstrumentParties) ProtoMessage()    {}
func (*DerivativeInstrumentParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{85}
}

func (m *DerivativeInstrumentParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeInstrumentParties.Unmarshal(m, b)
}
func (m *DerivativeInstrumentParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeInstrumentParties.Marshal(b, m, deterministic)
}
func (m *DerivativeInstrumentParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeInstrumentParties.Merge(m, src)
}
func (m *DerivativeInstrumentParties) XXX_Size() int {
	return xxx_messageInfo_DerivativeInstrumentParties.Size(m)
}
func (m *DerivativeInstrumentParties) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeInstrumentParties.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeInstrumentParties proto.InternalMessageInfo

func (m *DerivativeInstrumentParties) GetDerivativeInstrumentPartyId() string {
	if m != nil {
		return m.DerivativeInstrumentPartyId
	}
	return ""
}

func (m *DerivativeInstrumentParties) GetDerivativeInstrumentPartyIdSource() DerivativeInstrumentPartyIDSourceEnum {
	if m != nil {
		return m.DerivativeInstrumentPartyIdSource
	}
	return DerivativeInstrumentPartyIDSourceEnum_DERIVATIVE_INSTRUMENT_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *DerivativeInstrumentParties) GetDerivativeInstrumentPartyRole() DerivativeInstrumentPartyRoleEnum {
	if m != nil {
		return m.DerivativeInstrumentPartyRole
	}
	return DerivativeInstrumentPartyRoleEnum_DERIVATIVE_INSTRUMENT_PARTY_ROLE_UNSPECIFIED
}

func (m *DerivativeInstrumentParties) GetDerivativeInstrumentPartySubIdsGrp() []*DerivativeInstrumentPartySubIDsGrp {
	if m != nil {
		return m.DerivativeInstrumentPartySubIdsGrp
	}
	return nil
}

type DerivativeInstrumentAttribute struct {
	DerivativeInstrAttribType  DerivativeInstrAttribTypeEnum `protobuf:"varint,1,opt,name=derivative_instr_attrib_type,json=derivativeInstrAttribType,proto3,enum=Common.DerivativeInstrAttribTypeEnum" json:"derivative_instr_attrib_type,omitempty"`
	DerivativeInstrAttribValue string                        `protobuf:"bytes,2,opt,name=derivative_instr_attrib_value,json=derivativeInstrAttribValue,proto3" json:"derivative_instr_attrib_value,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                      `json:"-"`
	XXX_unrecognized           []byte                        `json:"-"`
	XXX_sizecache              int32                         `json:"-"`
}

func (m *DerivativeInstrumentAttribute) Reset()         { *m = DerivativeInstrumentAttribute{} }
func (m *DerivativeInstrumentAttribute) String() string { return proto.CompactTextString(m) }
func (*DerivativeInstrumentAttribute) ProtoMessage()    {}
func (*DerivativeInstrumentAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{86}
}

func (m *DerivativeInstrumentAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeInstrumentAttribute.Unmarshal(m, b)
}
func (m *DerivativeInstrumentAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeInstrumentAttribute.Marshal(b, m, deterministic)
}
func (m *DerivativeInstrumentAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeInstrumentAttribute.Merge(m, src)
}
func (m *DerivativeInstrumentAttribute) XXX_Size() int {
	return xxx_messageInfo_DerivativeInstrumentAttribute.Size(m)
}
func (m *DerivativeInstrumentAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeInstrumentAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeInstrumentAttribute proto.InternalMessageInfo

func (m *DerivativeInstrumentAttribute) GetDerivativeInstrAttribType() DerivativeInstrAttribTypeEnum {
	if m != nil {
		return m.DerivativeInstrAttribType
	}
	return DerivativeInstrAttribTypeEnum_DERIVATIVE_INSTR_ATTRIB_TYPE_UNSPECIFIED
}

func (m *DerivativeInstrumentAttribute) GetDerivativeInstrAttribValue() string {
	if m != nil {
		return m.DerivativeInstrAttribValue
	}
	return ""
}

type NestedInstrumentAttribute struct {
	NestedInstrAttribType  NestedInstrAttribTypeEnum `protobuf:"varint,1,opt,name=nested_instr_attrib_type,json=nestedInstrAttribType,proto3,enum=Common.NestedInstrAttribTypeEnum" json:"nested_instr_attrib_type,omitempty"`
	NestedInstrAttribValue string                    `protobuf:"bytes,2,opt,name=nested_instr_attrib_value,json=nestedInstrAttribValue,proto3" json:"nested_instr_attrib_value,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_unrecognized       []byte                    `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *NestedInstrumentAttribute) Reset()         { *m = NestedInstrumentAttribute{} }
func (m *NestedInstrumentAttribute) String() string { return proto.CompactTextString(m) }
func (*NestedInstrumentAttribute) ProtoMessage()    {}
func (*NestedInstrumentAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{87}
}

func (m *NestedInstrumentAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedInstrumentAttribute.Unmarshal(m, b)
}
func (m *NestedInstrumentAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedInstrumentAttribute.Marshal(b, m, deterministic)
}
func (m *NestedInstrumentAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedInstrumentAttribute.Merge(m, src)
}
func (m *NestedInstrumentAttribute) XXX_Size() int {
	return xxx_messageInfo_NestedInstrumentAttribute.Size(m)
}
func (m *NestedInstrumentAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedInstrumentAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_NestedInstrumentAttribute proto.InternalMessageInfo

func (m *NestedInstrumentAttribute) GetNestedInstrAttribType() NestedInstrAttribTypeEnum {
	if m != nil {
		return m.NestedInstrAttribType
	}
	return NestedInstrAttribTypeEnum_NESTED_INSTR_ATTRIB_TYPE_UNSPECIFIED
}

func (m *NestedInstrumentAttribute) GetNestedInstrAttribValue() string {
	if m != nil {
		return m.NestedInstrAttribValue
	}
	return ""
}

type DerivativeInstrument struct {
	DerivFlexProductEligibilityIndicator bool                                  `protobuf:"varint,1,opt,name=deriv_flex_product_eligibility_indicator,json=derivFlexProductEligibilityIndicator,proto3" json:"deriv_flex_product_eligibility_indicator,omitempty"`
	DerivativeCapPrice                   *fix.Decimal64                            `protobuf:"bytes,2,opt,name=derivative_cap_price,json=derivativeCapPrice,proto3" json:"derivative_cap_price,omitempty"`
	DerivativeCfiCode                    string                                `protobuf:"bytes,3,opt,name=derivative_cfi_code,json=derivativeCfiCode,proto3" json:"derivative_cfi_code,omitempty"`
	DerivativeContractMultiplier         *fix.Decimal64                            `protobuf:"bytes,4,opt,name=derivative_contract_multiplier,json=derivativeContractMultiplier,proto3" json:"derivative_contract_multiplier,omitempty"`
	DerivativeContractSettlMonth         int32                                 `protobuf:"fixed32,5,opt,name=derivative_contract_settl_month,json=derivativeContractSettlMonth,proto3" json:"derivative_contract_settl_month,omitempty"`
	DerivativeCountryOfIssue             string                                `protobuf:"bytes,6,opt,name=derivative_country_of_issue,json=derivativeCountryOfIssue,proto3" json:"derivative_country_of_issue,omitempty"`
	DerivativeEncodedIssuer              string                                `protobuf:"bytes,7,opt,name=derivative_encoded_issuer,json=derivativeEncodedIssuer,proto3" json:"derivative_encoded_issuer,omitempty"`
	DerivativeEncodedIssuerLen           int64                                 `protobuf:"fixed64,8,opt,name=derivative_encoded_issuer_len,json=derivativeEncodedIssuerLen,proto3" json:"derivative_encoded_issuer_len,omitempty"`
	DerivativeEncodedSecurityDesc        string                                `protobuf:"bytes,9,opt,name=derivative_encoded_security_desc,json=derivativeEncodedSecurityDesc,proto3" json:"derivative_encoded_security_desc,omitempty"`
	DerivativeEncodedSecurityDescLen     int64                                 `protobuf:"fixed64,10,opt,name=derivative_encoded_security_desc_len,json=derivativeEncodedSecurityDescLen,proto3" json:"derivative_encoded_security_desc_len,omitempty"`
	DerivativeEventsGrp                  []*DerivativeEventsGrp                `protobuf:"bytes,11,rep,name=derivative_events_grp,json=derivativeEventsGrp,proto3" json:"derivative_events_grp,omitempty"`
	DerivativeExerciseStyle              DerivativeExerciseStyleEnum           `protobuf:"varint,12,opt,name=derivative_exercise_style,json=derivativeExerciseStyle,proto3,enum=Common.DerivativeExerciseStyleEnum" json:"derivative_exercise_style,omitempty"`
	DerivativeFloorPrice                 *fix.Decimal64                            `protobuf:"bytes,13,opt,name=derivative_floor_price,json=derivativeFloorPrice,proto3" json:"derivative_floor_price,omitempty"`
	DerivativeInstrRegistry              string                                `protobuf:"bytes,14,opt,name=derivative_instr_registry,json=derivativeInstrRegistry,proto3" json:"derivative_instr_registry,omitempty"`
	DerivativeInstrmtAssignmentMethod    DerivativeInstrmtAssignmentMethodEnum `protobuf:"varint,15,opt,name=derivative_instrmt_assignment_method,json=derivativeInstrmtAssignmentMethod,proto3,enum=Common.DerivativeInstrmtAssignmentMethodEnum" json:"derivative_instrmt_assignment_method,omitempty"`
	DerivativeInstrumentParties          []*DerivativeInstrumentParties        `protobuf:"bytes,16,rep,name=derivative_instrument_parties,json=derivativeInstrumentParties,proto3" json:"derivative_instrument_parties,omitempty"`
	DerivativeIssueDate                  int32                                 `protobuf:"fixed32,17,opt,name=derivative_issue_date,json=derivativeIssueDate,proto3" json:"derivative_issue_date,omitempty"`
	DerivativeIssuer                     string                                `protobuf:"bytes,18,opt,name=derivative_issuer,json=derivativeIssuer,proto3" json:"derivative_issuer,omitempty"`
	DerivativeListMethod                 DerivativeListMethodEnum              `protobuf:"varint,19,opt,name=derivative_list_method,json=derivativeListMethod,proto3,enum=Common.DerivativeListMethodEnum" json:"derivative_list_method,omitempty"`
	DerivativeLocaleOfIssue              string                                `protobuf:"bytes,20,opt,name=derivative_locale_of_issue,json=derivativeLocaleOfIssue,proto3" json:"derivative_locale_of_issue,omitempty"`
	DerivativeMaturityDate               int32                                 `protobuf:"fixed32,21,opt,name=derivative_maturity_date,json=derivativeMaturityDate,proto3" json:"derivative_maturity_date,omitempty"`
	DerivativeMaturityMonthYear          int32                                 `protobuf:"fixed32,22,opt,name=derivative_maturity_month_year,json=derivativeMaturityMonthYear,proto3" json:"derivative_maturity_month_year,omitempty"`
	DerivativeMaturityTime               *fix.LocalTimeOnly                        `protobuf:"bytes,23,opt,name=derivative_maturity_time,json=derivativeMaturityTime,proto3" json:"derivative_maturity_time,omitempty"`
	DerivativeMinPriceIncrement          *fix.Decimal64                            `protobuf:"bytes,24,opt,name=derivative_min_price_increment,json=derivativeMinPriceIncrement,proto3" json:"derivative_min_price_increment,omitempty"`
	DerivativeMinPriceIncrementAmount    *fix.Decimal64                            `protobuf:"bytes,25,opt,name=derivative_min_price_increment_amount,json=derivativeMinPriceIncrementAmount,proto3" json:"derivative_min_price_increment_amount,omitempty"`
	DerivativeNtPositionLimit            int64                                 `protobuf:"fixed64,26,opt,name=derivative_nt_position_limit,json=derivativeNtPositionLimit,proto3" json:"derivative_nt_position_limit,omitempty"`
	DerivativeOptAttribute               []byte                                `protobuf:"bytes,27,opt,name=derivative_opt_attribute,json=derivativeOptAttribute,proto3" json:"derivative_opt_attribute,omitempty"`
	DerivativeOptPayAmount               *fix.Decimal64                            `protobuf:"bytes,28,opt,name=derivative_opt_pay_amount,json=derivativeOptPayAmount,proto3" json:"derivative_opt_pay_amount,omitempty"`
	DerivativePositionLimit              int64                                 `protobuf:"fixed64,29,opt,name=derivative_position_limit,json=derivativePositionLimit,proto3" json:"derivative_position_limit,omitempty"`
	DerivativePriceQuoteMethod           DerivativePriceQuoteMethodEnum        `protobuf:"varint,30,opt,name=derivative_price_quote_method,json=derivativePriceQuoteMethod,proto3,enum=Common.DerivativePriceQuoteMethodEnum" json:"derivative_price_quote_method,omitempty"`
	DerivativePriceUnitOfMeasure         DerivativePriceUnitOfMeasureEnum      `protobuf:"varint,31,opt,name=derivative_price_unit_of_measure,json=derivativePriceUnitOfMeasure,proto3,enum=Common.DerivativePriceUnitOfMeasureEnum" json:"derivative_price_unit_of_measure,omitempty"`
	DerivativePriceUnitOfMeasureQty      *fix.Decimal64                            `protobuf:"bytes,32,opt,name=derivative_price_unit_of_measure_qty,json=derivativePriceUnitOfMeasureQty,proto3" json:"derivative_price_unit_of_measure_qty,omitempty"`
	DerivativeProduct                    DerivativeProductEnum                 `protobuf:"varint,33,opt,name=derivative_product,json=derivativeProduct,proto3,enum=Common.DerivativeProductEnum" json:"derivative_product,omitempty"`
	DerivativeProductComplex             string                                `protobuf:"bytes,34,opt,name=derivative_product_complex,json=derivativeProductComplex,proto3" json:"derivative_product_complex,omitempty"`
	DerivativePutOrCall                  DerivativePutOrCallEnum               `protobuf:"varint,35,opt,name=derivative_put_or_call,json=derivativePutOrCall,proto3,enum=Common.DerivativePutOrCallEnum" json:"derivative_put_or_call,omitempty"`
	DerivativeSecurityAltIdGrp           []*DerivativeSecurityAltIDGrp         `protobuf:"bytes,36,rep,name=derivative_security_alt_id_grp,json=derivativeSecurityAltIdGrp,proto3" json:"derivative_security_alt_id_grp,omitempty"`
	DerivativeSecurityDesc               string                                `protobuf:"bytes,37,opt,name=derivative_security_desc,json=derivativeSecurityDesc,proto3" json:"derivative_security_desc,omitempty"`
	DerivativeSecurityExchange           string                                `protobuf:"bytes,38,opt,name=derivative_security_exchange,json=derivativeSecurityExchange,proto3" json:"derivative_security_exchange,omitempty"`
	DerivativeSecurityGroup              string                                `protobuf:"bytes,39,opt,name=derivative_security_group,json=derivativeSecurityGroup,proto3" json:"derivative_security_group,omitempty"`
	DerivativeSecurityId                 string                                `protobuf:"bytes,40,opt,name=derivative_security_id,json=derivativeSecurityId,proto3" json:"derivative_security_id,omitempty"`
	DerivativeSecurityIdSource           DerivativeSecurityIDSourceEnum        `protobuf:"varint,41,opt,name=derivative_security_id_source,json=derivativeSecurityIdSource,proto3,enum=Common.DerivativeSecurityIDSourceEnum" json:"derivative_security_id_source,omitempty"`
	DerivativeSecurityStatus             DerivativeSecurityStatusEnum          `protobuf:"varint,42,opt,name=derivative_security_status,json=derivativeSecurityStatus,proto3,enum=Common.DerivativeSecurityStatusEnum" json:"derivative_security_status,omitempty"`
	DerivativeSecuritySubType            string                                `protobuf:"bytes,43,opt,name=derivative_security_sub_type,json=derivativeSecuritySubType,proto3" json:"derivative_security_sub_type,omitempty"`
	DerivativeSecurityType               DerivativeSecurityTypeEnum            `protobuf:"varint,44,opt,name=derivative_security_type,json=derivativeSecurityType,proto3,enum=Common.DerivativeSecurityTypeEnum" json:"derivative_security_type,omitempty"`
	DerivativeSecurityXml                *DerivativeSecurityXML                `protobuf:"bytes,45,opt,name=derivative_security_xml,json=derivativeSecurityXml,proto3" json:"derivative_security_xml,omitempty"`
	DerivativeSettlMethod                DerivativeSettlMethodEnum             `protobuf:"varint,46,opt,name=derivative_settl_method,json=derivativeSettlMethod,proto3,enum=Common.DerivativeSettlMethodEnum" json:"derivative_settl_method,omitempty"`
	DerivativeSettleOnOpenFlag           string                                `protobuf:"bytes,47,opt,name=derivative_settle_on_open_flag,json=derivativeSettleOnOpenFlag,proto3" json:"derivative_settle_on_open_flag,omitempty"`
	DerivativeStateOrProvinceOfIssue     string                                `protobuf:"bytes,48,opt,name=derivative_state_or_province_of_issue,json=derivativeStateOrProvinceOfIssue,proto3" json:"derivative_state_or_province_of_issue,omitempty"`
	DerivativeStrikeCurrency             string                                `protobuf:"bytes,49,opt,name=derivative_strike_currency,json=derivativeStrikeCurrency,proto3" json:"derivative_strike_currency,omitempty"`
	DerivativeStrikeMultiplier           *fix.Decimal64                            `protobuf:"bytes,50,opt,name=derivative_strike_multiplier,json=derivativeStrikeMultiplier,proto3" json:"derivative_strike_multiplier,omitempty"`
	DerivativeStrikePrice                *fix.Decimal64                            `protobuf:"bytes,51,opt,name=derivative_strike_price,json=derivativeStrikePrice,proto3" json:"derivative_strike_price,omitempty"`
	DerivativeStrikeValue                *fix.Decimal64                            `protobuf:"bytes,52,opt,name=derivative_strike_value,json=derivativeStrikeValue,proto3" json:"derivative_strike_value,omitempty"`
	DerivativeSymbol                     string                                `protobuf:"bytes,53,opt,name=derivative_symbol,json=derivativeSymbol,proto3" json:"derivative_symbol,omitempty"`
	DerivativeSymbolSfx                  DerivativeSymbolSfxEnum               `protobuf:"varint,54,opt,name=derivative_symbol_sfx,json=derivativeSymbolSfx,proto3,enum=Common.DerivativeSymbolSfxEnum" json:"derivative_symbol_sfx,omitempty"`
	DerivativeTimeUnit                   DerivativeTimeUnitEnum                `protobuf:"varint,55,opt,name=derivative_time_unit,json=derivativeTimeUnit,proto3,enum=Common.DerivativeTimeUnitEnum" json:"derivative_time_unit,omitempty"`
	DerivativeUnitOfMeasure              DerivativeUnitOfMeasureEnum           `protobuf:"varint,56,opt,name=derivative_unit_of_measure,json=derivativeUnitOfMeasure,proto3,enum=Common.DerivativeUnitOfMeasureEnum" json:"derivative_unit_of_measure,omitempty"`
	DerivativeUnitOfMeasureQty           *fix.Decimal64                            `protobuf:"bytes,57,opt,name=derivative_unit_of_measure_qty,json=derivativeUnitOfMeasureQty,proto3" json:"derivative_unit_of_measure_qty,omitempty"`
	DerivativeValuationMethod            DerivativeValuationMethodEnum         `protobuf:"varint,58,opt,name=derivative_valuation_method,json=derivativeValuationMethod,proto3,enum=Common.DerivativeValuationMethodEnum" json:"derivative_valuation_method,omitempty"`
	DerivativeContractMultiplierUnit     DerivativeContractMultiplierUnitEnum  `protobuf:"varint,59,opt,name=derivative_contract_multiplier_unit,json=derivativeContractMultiplierUnit,proto3,enum=Common.DerivativeContractMultiplierUnitEnum" json:"derivative_contract_multiplier_unit,omitempty"`
	// Types that are valid to be assigned to DerivativeFlowScheduleTypeUnion:
	//	*DerivativeInstrument_DerivativeFlowScheduleType
	//	*DerivativeInstrument_DerivativeFlowScheduleTypeReserved100Plus
	DerivativeFlowScheduleTypeUnion isDerivativeInstrument_DerivativeFlowScheduleTypeUnion `protobuf_oneof:"derivative_flow_schedule_type_union"`
	XXX_NoUnkeyedLiteral            struct{}                                               `json:"-"`
	XXX_unrecognized                []byte                                                 `json:"-"`
	XXX_sizecache                   int32                                                  `json:"-"`
}

func (m *DerivativeInstrument) Reset()         { *m = DerivativeInstrument{} }
func (m *DerivativeInstrument) String() string { return proto.CompactTextString(m) }
func (*DerivativeInstrument) ProtoMessage()    {}
func (*DerivativeInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{88}
}

func (m *DerivativeInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeInstrument.Unmarshal(m, b)
}
func (m *DerivativeInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeInstrument.Marshal(b, m, deterministic)
}
func (m *DerivativeInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeInstrument.Merge(m, src)
}
func (m *DerivativeInstrument) XXX_Size() int {
	return xxx_messageInfo_DerivativeInstrument.Size(m)
}
func (m *DerivativeInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeInstrument proto.InternalMessageInfo

func (m *DerivativeInstrument) GetDerivFlexProductEligibilityIndicator() bool {
	if m != nil {
		return m.DerivFlexProductEligibilityIndicator
	}
	return false
}

func (m *DerivativeInstrument) GetDerivativeCapPrice() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeCapPrice
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeCfiCode() string {
	if m != nil {
		return m.DerivativeCfiCode
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeContractMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeContractMultiplier
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeContractSettlMonth() int32 {
	if m != nil {
		return m.DerivativeContractSettlMonth
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeCountryOfIssue() string {
	if m != nil {
		return m.DerivativeCountryOfIssue
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeEncodedIssuer() string {
	if m != nil {
		return m.DerivativeEncodedIssuer
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeEncodedIssuerLen() int64 {
	if m != nil {
		return m.DerivativeEncodedIssuerLen
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeEncodedSecurityDesc() string {
	if m != nil {
		return m.DerivativeEncodedSecurityDesc
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeEncodedSecurityDescLen() int64 {
	if m != nil {
		return m.DerivativeEncodedSecurityDescLen
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeEventsGrp() []*DerivativeEventsGrp {
	if m != nil {
		return m.DerivativeEventsGrp
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeExerciseStyle() DerivativeExerciseStyleEnum {
	if m != nil {
		return m.DerivativeExerciseStyle
	}
	return DerivativeExerciseStyleEnum_DERIVATIVE_EXERCISE_STYLE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeFloorPrice() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeFloorPrice
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeInstrRegistry() string {
	if m != nil {
		return m.DerivativeInstrRegistry
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeInstrmtAssignmentMethod() DerivativeInstrmtAssignmentMethodEnum {
	if m != nil {
		return m.DerivativeInstrmtAssignmentMethod
	}
	return DerivativeInstrmtAssignmentMethodEnum_DERIVATIVE_INSTRMT_ASSIGNMENT_METHOD_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeInstrumentParties() []*DerivativeInstrumentParties {
	if m != nil {
		return m.DerivativeInstrumentParties
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeIssueDate() int32 {
	if m != nil {
		return m.DerivativeIssueDate
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeIssuer() string {
	if m != nil {
		return m.DerivativeIssuer
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeListMethod() DerivativeListMethodEnum {
	if m != nil {
		return m.DerivativeListMethod
	}
	return DerivativeListMethodEnum_DERIVATIVE_LIST_METHOD_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeLocaleOfIssue() string {
	if m != nil {
		return m.DerivativeLocaleOfIssue
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeMaturityDate() int32 {
	if m != nil {
		return m.DerivativeMaturityDate
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeMaturityMonthYear() int32 {
	if m != nil {
		return m.DerivativeMaturityMonthYear
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeMaturityTime() *fix.LocalTimeOnly {
	if m != nil {
		return m.DerivativeMaturityTime
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeMinPriceIncrement() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeMinPriceIncrement
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeMinPriceIncrementAmount() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeMinPriceIncrementAmount
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeNtPositionLimit() int64 {
	if m != nil {
		return m.DerivativeNtPositionLimit
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativeOptAttribute() []byte {
	if m != nil {
		return m.DerivativeOptAttribute
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeOptPayAmount() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeOptPayAmount
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativePositionLimit() int64 {
	if m != nil {
		return m.DerivativePositionLimit
	}
	return 0
}

func (m *DerivativeInstrument) GetDerivativePriceQuoteMethod() DerivativePriceQuoteMethodEnum {
	if m != nil {
		return m.DerivativePriceQuoteMethod
	}
	return DerivativePriceQuoteMethodEnum_DERIVATIVE_PRICE_QUOTE_METHOD_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativePriceUnitOfMeasure() DerivativePriceUnitOfMeasureEnum {
	if m != nil {
		return m.DerivativePriceUnitOfMeasure
	}
	return DerivativePriceUnitOfMeasureEnum_DERIVATIVE_PRICE_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativePriceUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.DerivativePriceUnitOfMeasureQty
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeProduct() DerivativeProductEnum {
	if m != nil {
		return m.DerivativeProduct
	}
	return DerivativeProductEnum_DERIVATIVE_PRODUCT_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeProductComplex() string {
	if m != nil {
		return m.DerivativeProductComplex
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativePutOrCall() DerivativePutOrCallEnum {
	if m != nil {
		return m.DerivativePutOrCall
	}
	return DerivativePutOrCallEnum_DERIVATIVE_PUT_OR_CALL_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeSecurityAltIdGrp() []*DerivativeSecurityAltIDGrp {
	if m != nil {
		return m.DerivativeSecurityAltIdGrp
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeSecurityDesc() string {
	if m != nil {
		return m.DerivativeSecurityDesc
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSecurityExchange() string {
	if m != nil {
		return m.DerivativeSecurityExchange
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSecurityGroup() string {
	if m != nil {
		return m.DerivativeSecurityGroup
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSecurityId() string {
	if m != nil {
		return m.DerivativeSecurityId
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSecurityIdSource() DerivativeSecurityIDSourceEnum {
	if m != nil {
		return m.DerivativeSecurityIdSource
	}
	return DerivativeSecurityIDSourceEnum_DERIVATIVE_SECURITY_ID_SOURCE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeSecurityStatus() DerivativeSecurityStatusEnum {
	if m != nil {
		return m.DerivativeSecurityStatus
	}
	return DerivativeSecurityStatusEnum_DERIVATIVE_SECURITY_STATUS_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeSecuritySubType() string {
	if m != nil {
		return m.DerivativeSecuritySubType
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSecurityType() DerivativeSecurityTypeEnum {
	if m != nil {
		return m.DerivativeSecurityType
	}
	return DerivativeSecurityTypeEnum_DERIVATIVE_SECURITY_TYPE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeSecurityXml() *DerivativeSecurityXML {
	if m != nil {
		return m.DerivativeSecurityXml
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeSettlMethod() DerivativeSettlMethodEnum {
	if m != nil {
		return m.DerivativeSettlMethod
	}
	return DerivativeSettlMethodEnum_DERIVATIVE_SETTL_METHOD_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeSettleOnOpenFlag() string {
	if m != nil {
		return m.DerivativeSettleOnOpenFlag
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeStateOrProvinceOfIssue() string {
	if m != nil {
		return m.DerivativeStateOrProvinceOfIssue
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeStrikeCurrency() string {
	if m != nil {
		return m.DerivativeStrikeCurrency
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeStrikeMultiplier() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeStrikeMultiplier
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeStrikePrice() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeStrikePrice
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeStrikeValue() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeStrikeValue
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeSymbol() string {
	if m != nil {
		return m.DerivativeSymbol
	}
	return ""
}

func (m *DerivativeInstrument) GetDerivativeSymbolSfx() DerivativeSymbolSfxEnum {
	if m != nil {
		return m.DerivativeSymbolSfx
	}
	return DerivativeSymbolSfxEnum_DERIVATIVE_SYMBOL_SFX_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeTimeUnit() DerivativeTimeUnitEnum {
	if m != nil {
		return m.DerivativeTimeUnit
	}
	return DerivativeTimeUnitEnum_DERIVATIVE_TIME_UNIT_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeUnitOfMeasure() DerivativeUnitOfMeasureEnum {
	if m != nil {
		return m.DerivativeUnitOfMeasure
	}
	return DerivativeUnitOfMeasureEnum_DERIVATIVE_UNIT_OF_MEASURE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeUnitOfMeasureQty() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeUnitOfMeasureQty
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeValuationMethod() DerivativeValuationMethodEnum {
	if m != nil {
		return m.DerivativeValuationMethod
	}
	return DerivativeValuationMethodEnum_DERIVATIVE_VALUATION_METHOD_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeContractMultiplierUnit() DerivativeContractMultiplierUnitEnum {
	if m != nil {
		return m.DerivativeContractMultiplierUnit
	}
	return DerivativeContractMultiplierUnitEnum_DERIVATIVE_CONTRACT_MULTIPLIER_UNIT_UNSPECIFIED
}

type isDerivativeInstrument_DerivativeFlowScheduleTypeUnion interface {
	isDerivativeInstrument_DerivativeFlowScheduleTypeUnion()
}

type DerivativeInstrument_DerivativeFlowScheduleType struct {
	DerivativeFlowScheduleType DerivativeFlowScheduleTypeEnum `protobuf:"varint,60,opt,name=derivative_flow_schedule_type,json=derivativeFlowScheduleType,proto3,enum=Common.DerivativeFlowScheduleTypeEnum,oneof"`
}

type DerivativeInstrument_DerivativeFlowScheduleTypeReserved100Plus struct {
	DerivativeFlowScheduleTypeReserved100Plus uint32 `protobuf:"fixed32,61,opt,name=derivative_flow_schedule_type_reserved100plus,json=derivativeFlowScheduleTypeReserved100plus,proto3,oneof"`
}

func (*DerivativeInstrument_DerivativeFlowScheduleType) isDerivativeInstrument_DerivativeFlowScheduleTypeUnion() {
}

func (*DerivativeInstrument_DerivativeFlowScheduleTypeReserved100Plus) isDerivativeInstrument_DerivativeFlowScheduleTypeUnion() {
}

func (m *DerivativeInstrument) GetDerivativeFlowScheduleTypeUnion() isDerivativeInstrument_DerivativeFlowScheduleTypeUnion {
	if m != nil {
		return m.DerivativeFlowScheduleTypeUnion
	}
	return nil
}

func (m *DerivativeInstrument) GetDerivativeFlowScheduleType() DerivativeFlowScheduleTypeEnum {
	if x, ok := m.GetDerivativeFlowScheduleTypeUnion().(*DerivativeInstrument_DerivativeFlowScheduleType); ok {
		return x.DerivativeFlowScheduleType
	}
	return DerivativeFlowScheduleTypeEnum_DERIVATIVE_FLOW_SCHEDULE_TYPE_UNSPECIFIED
}

func (m *DerivativeInstrument) GetDerivativeFlowScheduleTypeReserved100Plus() uint32 {
	if x, ok := m.GetDerivativeFlowScheduleTypeUnion().(*DerivativeInstrument_DerivativeFlowScheduleTypeReserved100Plus); ok {
		return x.DerivativeFlowScheduleTypeReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DerivativeInstrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DerivativeInstrument_DerivativeFlowScheduleType)(nil),
		(*DerivativeInstrument_DerivativeFlowScheduleTypeReserved100Plus)(nil),
	}
}

type DerivativeSecurityAltIDGrp struct {
	DerivativeSecurityAltId       string                            `protobuf:"bytes,1,opt,name=derivative_security_alt_id,json=derivativeSecurityAltId,proto3" json:"derivative_security_alt_id,omitempty"`
	DerivativeSecurityAltIdSource DerivativeSecurityAltIDSourceEnum `protobuf:"varint,2,opt,name=derivative_security_alt_id_source,json=derivativeSecurityAltIdSource,proto3,enum=Common.DerivativeSecurityAltIDSourceEnum" json:"derivative_security_alt_id_source,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                          `json:"-"`
	XXX_unrecognized              []byte                            `json:"-"`
	XXX_sizecache                 int32                             `json:"-"`
}

func (m *DerivativeSecurityAltIDGrp) Reset()         { *m = DerivativeSecurityAltIDGrp{} }
func (m *DerivativeSecurityAltIDGrp) String() string { return proto.CompactTextString(m) }
func (*DerivativeSecurityAltIDGrp) ProtoMessage()    {}
func (*DerivativeSecurityAltIDGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{89}
}

func (m *DerivativeSecurityAltIDGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeSecurityAltIDGrp.Unmarshal(m, b)
}
func (m *DerivativeSecurityAltIDGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeSecurityAltIDGrp.Marshal(b, m, deterministic)
}
func (m *DerivativeSecurityAltIDGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeSecurityAltIDGrp.Merge(m, src)
}
func (m *DerivativeSecurityAltIDGrp) XXX_Size() int {
	return xxx_messageInfo_DerivativeSecurityAltIDGrp.Size(m)
}
func (m *DerivativeSecurityAltIDGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeSecurityAltIDGrp.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeSecurityAltIDGrp proto.InternalMessageInfo

func (m *DerivativeSecurityAltIDGrp) GetDerivativeSecurityAltId() string {
	if m != nil {
		return m.DerivativeSecurityAltId
	}
	return ""
}

func (m *DerivativeSecurityAltIDGrp) GetDerivativeSecurityAltIdSource() DerivativeSecurityAltIDSourceEnum {
	if m != nil {
		return m.DerivativeSecurityAltIdSource
	}
	return DerivativeSecurityAltIDSourceEnum_DERIVATIVE_SECURITY_ALT_ID_SOURCE_UNSPECIFIED
}

type DerivativeEventsGrp struct {
	DerivativeEventDate  int32                   `protobuf:"fixed32,1,opt,name=derivative_event_date,json=derivativeEventDate,proto3" json:"derivative_event_date,omitempty"`
	DerivativeEventPx    *fix.Decimal64              `protobuf:"bytes,2,opt,name=derivative_event_px,json=derivativeEventPx,proto3" json:"derivative_event_px,omitempty"`
	DerivativeEventText  string                  `protobuf:"bytes,3,opt,name=derivative_event_text,json=derivativeEventText,proto3" json:"derivative_event_text,omitempty"`
	DerivativeEventTime  *fix.Timestamp              `protobuf:"bytes,4,opt,name=derivative_event_time,json=derivativeEventTime,proto3" json:"derivative_event_time,omitempty"`
	DerivativeEventType  DerivativeEventTypeEnum `protobuf:"varint,5,opt,name=derivative_event_type,json=derivativeEventType,proto3,enum=Common.DerivativeEventTypeEnum" json:"derivative_event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DerivativeEventsGrp) Reset()         { *m = DerivativeEventsGrp{} }
func (m *DerivativeEventsGrp) String() string { return proto.CompactTextString(m) }
func (*DerivativeEventsGrp) ProtoMessage()    {}
func (*DerivativeEventsGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{90}
}

func (m *DerivativeEventsGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeEventsGrp.Unmarshal(m, b)
}
func (m *DerivativeEventsGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeEventsGrp.Marshal(b, m, deterministic)
}
func (m *DerivativeEventsGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeEventsGrp.Merge(m, src)
}
func (m *DerivativeEventsGrp) XXX_Size() int {
	return xxx_messageInfo_DerivativeEventsGrp.Size(m)
}
func (m *DerivativeEventsGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeEventsGrp.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeEventsGrp proto.InternalMessageInfo

func (m *DerivativeEventsGrp) GetDerivativeEventDate() int32 {
	if m != nil {
		return m.DerivativeEventDate
	}
	return 0
}

func (m *DerivativeEventsGrp) GetDerivativeEventPx() *fix.Decimal64 {
	if m != nil {
		return m.DerivativeEventPx
	}
	return nil
}

func (m *DerivativeEventsGrp) GetDerivativeEventText() string {
	if m != nil {
		return m.DerivativeEventText
	}
	return ""
}

func (m *DerivativeEventsGrp) GetDerivativeEventTime() *fix.Timestamp {
	if m != nil {
		return m.DerivativeEventTime
	}
	return nil
}

func (m *DerivativeEventsGrp) GetDerivativeEventType() DerivativeEventTypeEnum {
	if m != nil {
		return m.DerivativeEventType
	}
	return DerivativeEventTypeEnum_DERIVATIVE_EVENT_TYPE_UNSPECIFIED
}

type DerivativeSecurityDefinition struct {
	DerivativeInstrument          *DerivativeInstrument            `protobuf:"bytes,1,opt,name=derivative_instrument,json=derivativeInstrument,proto3" json:"derivative_instrument,omitempty"`
	DerivativeInstrumentAttribute []*DerivativeInstrumentAttribute `protobuf:"bytes,2,rep,name=derivative_instrument_attribute,json=derivativeInstrumentAttribute,proto3" json:"derivative_instrument_attribute,omitempty"`
	MarketSegmentGrp              []*MarketSegmentGrp              `protobuf:"bytes,3,rep,name=market_segment_grp,json=marketSegmentGrp,proto3" json:"market_segment_grp,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                         `json:"-"`
	XXX_unrecognized              []byte                           `json:"-"`
	XXX_sizecache                 int32                            `json:"-"`
}

func (m *DerivativeSecurityDefinition) Reset()         { *m = DerivativeSecurityDefinition{} }
func (m *DerivativeSecurityDefinition) String() string { return proto.CompactTextString(m) }
func (*DerivativeSecurityDefinition) ProtoMessage()    {}
func (*DerivativeSecurityDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{91}
}

func (m *DerivativeSecurityDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeSecurityDefinition.Unmarshal(m, b)
}
func (m *DerivativeSecurityDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeSecurityDefinition.Marshal(b, m, deterministic)
}
func (m *DerivativeSecurityDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeSecurityDefinition.Merge(m, src)
}
func (m *DerivativeSecurityDefinition) XXX_Size() int {
	return xxx_messageInfo_DerivativeSecurityDefinition.Size(m)
}
func (m *DerivativeSecurityDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeSecurityDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeSecurityDefinition proto.InternalMessageInfo

func (m *DerivativeSecurityDefinition) GetDerivativeInstrument() *DerivativeInstrument {
	if m != nil {
		return m.DerivativeInstrument
	}
	return nil
}

func (m *DerivativeSecurityDefinition) GetDerivativeInstrumentAttribute() []*DerivativeInstrumentAttribute {
	if m != nil {
		return m.DerivativeInstrumentAttribute
	}
	return nil
}

func (m *DerivativeSecurityDefinition) GetMarketSegmentGrp() []*MarketSegmentGrp {
	if m != nil {
		return m.MarketSegmentGrp
	}
	return nil
}

type RelSymDerivSecUpdGrp struct {
	CorporateAction      []CorporateActionEnum `protobuf:"varint,1,rep,packed,name=corporate_action,json=corporateAction,proto3,enum=Common.CorporateActionEnum" json:"corporate_action,omitempty"`
	Currency             string                `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	EncodedText          string                `protobuf:"bytes,3,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen       int64                 `protobuf:"fixed64,4,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	InstrmtLegGrp        []*InstrmtLegGrp      `protobuf:"bytes,5,rep,name=instrmt_leg_grp,json=instrmtLegGrp,proto3" json:"instrmt_leg_grp,omitempty"`
	Instrument           *Instrument           `protobuf:"bytes,6,opt,name=instrument,proto3" json:"instrument,omitempty"`
	InstrumentExtension  *InstrumentExtension  `protobuf:"bytes,7,opt,name=instrument_extension,json=instrumentExtension,proto3" json:"instrument_extension,omitempty"`
	ListUpdateAction     ListUpdateActionEnum  `protobuf:"varint,8,opt,name=list_update_action,json=listUpdateAction,proto3,enum=Common.ListUpdateActionEnum" json:"list_update_action,omitempty"`
	SecondaryPriceLimits *SecondaryPriceLimits `protobuf:"bytes,9,opt,name=secondary_price_limits,json=secondaryPriceLimits,proto3" json:"secondary_price_limits,omitempty"`
	Text                 string                `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	RelSymTransactTime   *fix.Timestamp            `protobuf:"bytes,11,opt,name=rel_sym_transact_time,json=relSymTransactTime,proto3" json:"rel_sym_transact_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RelSymDerivSecUpdGrp) Reset()         { *m = RelSymDerivSecUpdGrp{} }
func (m *RelSymDerivSecUpdGrp) String() string { return proto.CompactTextString(m) }
func (*RelSymDerivSecUpdGrp) ProtoMessage()    {}
func (*RelSymDerivSecUpdGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{92}
}

func (m *RelSymDerivSecUpdGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelSymDerivSecUpdGrp.Unmarshal(m, b)
}
func (m *RelSymDerivSecUpdGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelSymDerivSecUpdGrp.Marshal(b, m, deterministic)
}
func (m *RelSymDerivSecUpdGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelSymDerivSecUpdGrp.Merge(m, src)
}
func (m *RelSymDerivSecUpdGrp) XXX_Size() int {
	return xxx_messageInfo_RelSymDerivSecUpdGrp.Size(m)
}
func (m *RelSymDerivSecUpdGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_RelSymDerivSecUpdGrp.DiscardUnknown(m)
}

var xxx_messageInfo_RelSymDerivSecUpdGrp proto.InternalMessageInfo

func (m *RelSymDerivSecUpdGrp) GetCorporateAction() []CorporateActionEnum {
	if m != nil {
		return m.CorporateAction
	}
	return nil
}

func (m *RelSymDerivSecUpdGrp) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *RelSymDerivSecUpdGrp) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *RelSymDerivSecUpdGrp) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *RelSymDerivSecUpdGrp) GetInstrmtLegGrp() []*InstrmtLegGrp {
	if m != nil {
		return m.InstrmtLegGrp
	}
	return nil
}

func (m *RelSymDerivSecUpdGrp) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *RelSymDerivSecUpdGrp) GetInstrumentExtension() *InstrumentExtension {
	if m != nil {
		return m.InstrumentExtension
	}
	return nil
}

func (m *RelSymDerivSecUpdGrp) GetListUpdateAction() ListUpdateActionEnum {
	if m != nil {
		return m.ListUpdateAction
	}
	return ListUpdateActionEnum_LIST_UPDATE_ACTION_UNSPECIFIED
}

func (m *RelSymDerivSecUpdGrp) GetSecondaryPriceLimits() *SecondaryPriceLimits {
	if m != nil {
		return m.SecondaryPriceLimits
	}
	return nil
}

func (m *RelSymDerivSecUpdGrp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RelSymDerivSecUpdGrp) GetRelSymTransactTime() *fix.Timestamp {
	if m != nil {
		return m.RelSymTransactTime
	}
	return nil
}

type DerivativeSecurityXML struct {
	DerivativeSecurityXml       string   `protobuf:"bytes,1,opt,name=derivative_security_xml,json=derivativeSecurityXml,proto3" json:"derivative_security_xml,omitempty"`
	DerivativeSecurityXmlLen    int64    `protobuf:"fixed64,2,opt,name=derivative_security_xml_len,json=derivativeSecurityXmlLen,proto3" json:"derivative_security_xml_len,omitempty"`
	DerivativeSecurityXmlSchema string   `protobuf:"bytes,3,opt,name=derivative_security_xml_schema,json=derivativeSecurityXmlSchema,proto3" json:"derivative_security_xml_schema,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *DerivativeSecurityXML) Reset()         { *m = DerivativeSecurityXML{} }
func (m *DerivativeSecurityXML) String() string { return proto.CompactTextString(m) }
func (*DerivativeSecurityXML) ProtoMessage()    {}
func (*DerivativeSecurityXML) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{93}
}

func (m *DerivativeSecurityXML) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivativeSecurityXML.Unmarshal(m, b)
}
func (m *DerivativeSecurityXML) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivativeSecurityXML.Marshal(b, m, deterministic)
}
func (m *DerivativeSecurityXML) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeSecurityXML.Merge(m, src)
}
func (m *DerivativeSecurityXML) XXX_Size() int {
	return xxx_messageInfo_DerivativeSecurityXML.Size(m)
}
func (m *DerivativeSecurityXML) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeSecurityXML.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeSecurityXML proto.InternalMessageInfo

func (m *DerivativeSecurityXML) GetDerivativeSecurityXml() string {
	if m != nil {
		return m.DerivativeSecurityXml
	}
	return ""
}

func (m *DerivativeSecurityXML) GetDerivativeSecurityXmlLen() int64 {
	if m != nil {
		return m.DerivativeSecurityXmlLen
	}
	return 0
}

func (m *DerivativeSecurityXML) GetDerivativeSecurityXmlSchema() string {
	if m != nil {
		return m.DerivativeSecurityXmlSchema
	}
	return ""
}

type ApplicationSequenceControl struct {
	ApplId               string   `protobuf:"bytes,1,opt,name=appl_id,json=applId,proto3" json:"appl_id,omitempty"`
	ApplLastSeqNum       int64    `protobuf:"fixed64,2,opt,name=appl_last_seq_num,json=applLastSeqNum,proto3" json:"appl_last_seq_num,omitempty"`
	ApplResendFlag       bool     `protobuf:"varint,3,opt,name=appl_resend_flag,json=applResendFlag,proto3" json:"appl_resend_flag,omitempty"`
	ApplSeqNum           int64    `protobuf:"fixed64,4,opt,name=appl_seq_num,json=applSeqNum,proto3" json:"appl_seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSequenceControl) Reset()         { *m = ApplicationSequenceControl{} }
func (m *ApplicationSequenceControl) String() string { return proto.CompactTextString(m) }
func (*ApplicationSequenceControl) ProtoMessage()    {}
func (*ApplicationSequenceControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{94}
}

func (m *ApplicationSequenceControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationSequenceControl.Unmarshal(m, b)
}
func (m *ApplicationSequenceControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationSequenceControl.Marshal(b, m, deterministic)
}
func (m *ApplicationSequenceControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSequenceControl.Merge(m, src)
}
func (m *ApplicationSequenceControl) XXX_Size() int {
	return xxx_messageInfo_ApplicationSequenceControl.Size(m)
}
func (m *ApplicationSequenceControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSequenceControl.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSequenceControl proto.InternalMessageInfo

func (m *ApplicationSequenceControl) GetApplId() string {
	if m != nil {
		return m.ApplId
	}
	return ""
}

func (m *ApplicationSequenceControl) GetApplLastSeqNum() int64 {
	if m != nil {
		return m.ApplLastSeqNum
	}
	return 0
}

func (m *ApplicationSequenceControl) GetApplResendFlag() bool {
	if m != nil {
		return m.ApplResendFlag
	}
	return false
}

func (m *ApplicationSequenceControl) GetApplSeqNum() int64 {
	if m != nil {
		return m.ApplSeqNum
	}
	return 0
}

type NstdPtys4SubGrp struct {
	Nested4PartySubId     string                    `protobuf:"bytes,1,opt,name=nested4party_sub_id,json=nested4partySubId,proto3" json:"nested4party_sub_id,omitempty"`
	Nested4PartySubIdType Nested4PartySubIDTypeEnum `protobuf:"varint,2,opt,name=nested4party_sub_id_type,json=nested4partySubIdType,proto3,enum=Common.Nested4PartySubIDTypeEnum" json:"nested4party_sub_id_type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *NstdPtys4SubGrp) Reset()         { *m = NstdPtys4SubGrp{} }
func (m *NstdPtys4SubGrp) String() string { return proto.CompactTextString(m) }
func (*NstdPtys4SubGrp) ProtoMessage()    {}
func (*NstdPtys4SubGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{95}
}

func (m *NstdPtys4SubGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NstdPtys4SubGrp.Unmarshal(m, b)
}
func (m *NstdPtys4SubGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NstdPtys4SubGrp.Marshal(b, m, deterministic)
}
func (m *NstdPtys4SubGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NstdPtys4SubGrp.Merge(m, src)
}
func (m *NstdPtys4SubGrp) XXX_Size() int {
	return xxx_messageInfo_NstdPtys4SubGrp.Size(m)
}
func (m *NstdPtys4SubGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_NstdPtys4SubGrp.DiscardUnknown(m)
}

var xxx_messageInfo_NstdPtys4SubGrp proto.InternalMessageInfo

func (m *NstdPtys4SubGrp) GetNested4PartySubId() string {
	if m != nil {
		return m.Nested4PartySubId
	}
	return ""
}

func (m *NstdPtys4SubGrp) GetNested4PartySubIdType() Nested4PartySubIDTypeEnum {
	if m != nil {
		return m.Nested4PartySubIdType
	}
	return Nested4PartySubIDTypeEnum_NESTED4PARTY_SUB_ID_TYPE_UNSPECIFIED
}

type NestedParties4 struct {
	Nested4PartyId       string                   `protobuf:"bytes,1,opt,name=nested4party_id,json=nested4partyId,proto3" json:"nested4party_id,omitempty"`
	Nested4PartyIdSource Nested4PartyIDSourceEnum `protobuf:"varint,2,opt,name=nested4party_id_source,json=nested4partyIdSource,proto3,enum=Common.Nested4PartyIDSourceEnum" json:"nested4party_id_source,omitempty"`
	Nested4PartyRole     Nested4PartyRoleEnum     `protobuf:"varint,3,opt,name=nested4party_role,json=nested4partyRole,proto3,enum=Common.Nested4PartyRoleEnum" json:"nested4party_role,omitempty"`
	NstdPtys4SubGrp      []*NstdPtys4SubGrp       `protobuf:"bytes,4,rep,name=nstd_ptys4sub_grp,json=nstdPtys4subGrp,proto3" json:"nstd_ptys4sub_grp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NestedParties4) Reset()         { *m = NestedParties4{} }
func (m *NestedParties4) String() string { return proto.CompactTextString(m) }
func (*NestedParties4) ProtoMessage()    {}
func (*NestedParties4) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{96}
}

func (m *NestedParties4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedParties4.Unmarshal(m, b)
}
func (m *NestedParties4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedParties4.Marshal(b, m, deterministic)
}
func (m *NestedParties4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedParties4.Merge(m, src)
}
func (m *NestedParties4) XXX_Size() int {
	return xxx_messageInfo_NestedParties4.Size(m)
}
func (m *NestedParties4) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedParties4.DiscardUnknown(m)
}

var xxx_messageInfo_NestedParties4 proto.InternalMessageInfo

func (m *NestedParties4) GetNested4PartyId() string {
	if m != nil {
		return m.Nested4PartyId
	}
	return ""
}

func (m *NestedParties4) GetNested4PartyIdSource() Nested4PartyIDSourceEnum {
	if m != nil {
		return m.Nested4PartyIdSource
	}
	return Nested4PartyIDSourceEnum_NESTED4PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *NestedParties4) GetNested4PartyRole() Nested4PartyRoleEnum {
	if m != nil {
		return m.Nested4PartyRole
	}
	return Nested4PartyRoleEnum_NESTED4PARTY_ROLE_UNSPECIFIED
}

func (m *NestedParties4) GetNstdPtys4SubGrp() []*NstdPtys4SubGrp {
	if m != nil {
		return m.NstdPtys4SubGrp
	}
	return nil
}

type RateSource struct {
	RateSource           RateSourceEnum     `protobuf:"varint,1,opt,name=rate_source,json=rateSource,proto3,enum=Common.RateSourceEnum" json:"rate_source,omitempty"`
	RateSourceType       RateSourceTypeEnum `protobuf:"varint,2,opt,name=rate_source_type,json=rateSourceType,proto3,enum=Common.RateSourceTypeEnum" json:"rate_source_type,omitempty"`
	ReferencePage        string             `protobuf:"bytes,3,opt,name=reference_page,json=referencePage,proto3" json:"reference_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RateSource) Reset()         { *m = RateSource{} }
func (m *RateSource) String() string { return proto.CompactTextString(m) }
func (*RateSource) ProtoMessage()    {}
func (*RateSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{97}
}

func (m *RateSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateSource.Unmarshal(m, b)
}
func (m *RateSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateSource.Marshal(b, m, deterministic)
}
func (m *RateSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateSource.Merge(m, src)
}
func (m *RateSource) XXX_Size() int {
	return xxx_messageInfo_RateSource.Size(m)
}
func (m *RateSource) XXX_DiscardUnknown() {
	xxx_messageInfo_RateSource.DiscardUnknown(m)
}

var xxx_messageInfo_RateSource proto.InternalMessageInfo

func (m *RateSource) GetRateSource() RateSourceEnum {
	if m != nil {
		return m.RateSource
	}
	return RateSourceEnum_RATE_SOURCE_UNSPECIFIED
}

func (m *RateSource) GetRateSourceType() RateSourceTypeEnum {
	if m != nil {
		return m.RateSourceType
	}
	return RateSourceTypeEnum_RATE_SOURCE_TYPE_UNSPECIFIED
}

func (m *RateSource) GetReferencePage() string {
	if m != nil {
		return m.ReferencePage
	}
	return ""
}

type TargetParties struct {
	TargetPartyId        string                  `protobuf:"bytes,1,opt,name=target_party_id,json=targetPartyId,proto3" json:"target_party_id,omitempty"`
	TargetPartyIdSource  TargetPartyIDSourceEnum `protobuf:"varint,2,opt,name=target_party_id_source,json=targetPartyIdSource,proto3,enum=Common.TargetPartyIDSourceEnum" json:"target_party_id_source,omitempty"`
	TargetPartyRole      TargetPartyRoleEnum     `protobuf:"varint,3,opt,name=target_party_role,json=targetPartyRole,proto3,enum=Common.TargetPartyRoleEnum" json:"target_party_role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TargetParties) Reset()         { *m = TargetParties{} }
func (m *TargetParties) String() string { return proto.CompactTextString(m) }
func (*TargetParties) ProtoMessage()    {}
func (*TargetParties) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{98}
}

func (m *TargetParties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetParties.Unmarshal(m, b)
}
func (m *TargetParties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetParties.Marshal(b, m, deterministic)
}
func (m *TargetParties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetParties.Merge(m, src)
}
func (m *TargetParties) XXX_Size() int {
	return xxx_messageInfo_TargetParties.Size(m)
}
func (m *TargetParties) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetParties.DiscardUnknown(m)
}

var xxx_messageInfo_TargetParties proto.InternalMessageInfo

func (m *TargetParties) GetTargetPartyId() string {
	if m != nil {
		return m.TargetPartyId
	}
	return ""
}

func (m *TargetParties) GetTargetPartyIdSource() TargetPartyIDSourceEnum {
	if m != nil {
		return m.TargetPartyIdSource
	}
	return TargetPartyIDSourceEnum_TARGET_PARTY_ID_SOURCE_UNSPECIFIED
}

func (m *TargetParties) GetTargetPartyRole() TargetPartyRoleEnum {
	if m != nil {
		return m.TargetPartyRole
	}
	return TargetPartyRoleEnum_TARGET_PARTY_ROLE_UNSPECIFIED
}

type ComplexEvents struct {
	ComplexEventDates                  []*ComplexEventDates                `protobuf:"bytes,1,rep,name=complex_event_dates,json=complexEventDates,proto3" json:"complex_event_dates,omitempty"`
	ComplexEventCondition              ComplexEventConditionEnum           `protobuf:"varint,2,opt,name=complex_event_condition,json=complexEventCondition,proto3,enum=Common.ComplexEventConditionEnum" json:"complex_event_condition,omitempty"`
	ComplexEventPrice                  *fix.Decimal64                          `protobuf:"bytes,3,opt,name=complex_event_price,json=complexEventPrice,proto3" json:"complex_event_price,omitempty"`
	ComplexEventPriceBoundaryMethod    ComplexEventPriceBoundaryMethodEnum `protobuf:"varint,4,opt,name=complex_event_price_boundary_method,json=complexEventPriceBoundaryMethod,proto3,enum=Common.ComplexEventPriceBoundaryMethodEnum" json:"complex_event_price_boundary_method,omitempty"`
	ComplexEventPriceBoundaryPrecision *fix.Decimal64                          `protobuf:"bytes,5,opt,name=complex_event_price_boundary_precision,json=complexEventPriceBoundaryPrecision,proto3" json:"complex_event_price_boundary_precision,omitempty"`
	ComplexEventPriceTimeType          ComplexEventPriceTimeTypeEnum       `protobuf:"varint,6,opt,name=complex_event_price_time_type,json=complexEventPriceTimeType,proto3,enum=Common.ComplexEventPriceTimeTypeEnum" json:"complex_event_price_time_type,omitempty"`
	ComplexEventType                   ComplexEventTypeEnum                `protobuf:"varint,7,opt,name=complex_event_type,json=complexEventType,proto3,enum=Common.ComplexEventTypeEnum" json:"complex_event_type,omitempty"`
	ComplexOptPayoutAmount             *fix.Decimal64                          `protobuf:"bytes,8,opt,name=complex_opt_payout_amount,json=complexOptPayoutAmount,proto3" json:"complex_opt_payout_amount,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                            `json:"-"`
	XXX_unrecognized                   []byte                              `json:"-"`
	XXX_sizecache                      int32                               `json:"-"`
}

func (m *ComplexEvents) Reset()         { *m = ComplexEvents{} }
func (m *ComplexEvents) String() string { return proto.CompactTextString(m) }
func (*ComplexEvents) ProtoMessage()    {}
func (*ComplexEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{99}
}

func (m *ComplexEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexEvents.Unmarshal(m, b)
}
func (m *ComplexEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexEvents.Marshal(b, m, deterministic)
}
func (m *ComplexEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexEvents.Merge(m, src)
}
func (m *ComplexEvents) XXX_Size() int {
	return xxx_messageInfo_ComplexEvents.Size(m)
}
func (m *ComplexEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexEvents proto.InternalMessageInfo

func (m *ComplexEvents) GetComplexEventDates() []*ComplexEventDates {
	if m != nil {
		return m.ComplexEventDates
	}
	return nil
}

func (m *ComplexEvents) GetComplexEventCondition() ComplexEventConditionEnum {
	if m != nil {
		return m.ComplexEventCondition
	}
	return ComplexEventConditionEnum_COMPLEX_EVENT_CONDITION_UNSPECIFIED
}

func (m *ComplexEvents) GetComplexEventPrice() *fix.Decimal64 {
	if m != nil {
		return m.ComplexEventPrice
	}
	return nil
}

func (m *ComplexEvents) GetComplexEventPriceBoundaryMethod() ComplexEventPriceBoundaryMethodEnum {
	if m != nil {
		return m.ComplexEventPriceBoundaryMethod
	}
	return ComplexEventPriceBoundaryMethodEnum_COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_UNSPECIFIED
}

func (m *ComplexEvents) GetComplexEventPriceBoundaryPrecision() *fix.Decimal64 {
	if m != nil {
		return m.ComplexEventPriceBoundaryPrecision
	}
	return nil
}

func (m *ComplexEvents) GetComplexEventPriceTimeType() ComplexEventPriceTimeTypeEnum {
	if m != nil {
		return m.ComplexEventPriceTimeType
	}
	return ComplexEventPriceTimeTypeEnum_COMPLEX_EVENT_PRICE_TIME_TYPE_UNSPECIFIED
}

func (m *ComplexEvents) GetComplexEventType() ComplexEventTypeEnum {
	if m != nil {
		return m.ComplexEventType
	}
	return ComplexEventTypeEnum_COMPLEX_EVENT_TYPE_UNSPECIFIED
}

func (m *ComplexEvents) GetComplexOptPayoutAmount() *fix.Decimal64 {
	if m != nil {
		return m.ComplexOptPayoutAmount
	}
	return nil
}

type ComplexEventDates struct {
	ComplexEventTimes     []*ComplexEventTimes `protobuf:"bytes,1,rep,name=complex_event_times,json=complexEventTimes,proto3" json:"complex_event_times,omitempty"`
	ComplexEventEndDate   *fix.Timestamp           `protobuf:"bytes,2,opt,name=complex_event_end_date,json=complexEventEndDate,proto3" json:"complex_event_end_date,omitempty"`
	ComplexEventStartDate *fix.Timestamp           `protobuf:"bytes,3,opt,name=complex_event_start_date,json=complexEventStartDate,proto3" json:"complex_event_start_date,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *ComplexEventDates) Reset()         { *m = ComplexEventDates{} }
func (m *ComplexEventDates) String() string { return proto.CompactTextString(m) }
func (*ComplexEventDates) ProtoMessage()    {}
func (*ComplexEventDates) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{100}
}

func (m *ComplexEventDates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexEventDates.Unmarshal(m, b)
}
func (m *ComplexEventDates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexEventDates.Marshal(b, m, deterministic)
}
func (m *ComplexEventDates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexEventDates.Merge(m, src)
}
func (m *ComplexEventDates) XXX_Size() int {
	return xxx_messageInfo_ComplexEventDates.Size(m)
}
func (m *ComplexEventDates) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexEventDates.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexEventDates proto.InternalMessageInfo

func (m *ComplexEventDates) GetComplexEventTimes() []*ComplexEventTimes {
	if m != nil {
		return m.ComplexEventTimes
	}
	return nil
}

func (m *ComplexEventDates) GetComplexEventEndDate() *fix.Timestamp {
	if m != nil {
		return m.ComplexEventEndDate
	}
	return nil
}

func (m *ComplexEventDates) GetComplexEventStartDate() *fix.Timestamp {
	if m != nil {
		return m.ComplexEventStartDate
	}
	return nil
}

type ComplexEventTimes struct {
	ComplexEventEndTime   *fix.TimeOnly `protobuf:"bytes,1,opt,name=complex_event_end_time,json=complexEventEndTime,proto3" json:"complex_event_end_time,omitempty"`
	ComplexEventStartTime *fix.TimeOnly `protobuf:"bytes,2,opt,name=complex_event_start_time,json=complexEventStartTime,proto3" json:"complex_event_start_time,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *ComplexEventTimes) Reset()         { *m = ComplexEventTimes{} }
func (m *ComplexEventTimes) String() string { return proto.CompactTextString(m) }
func (*ComplexEventTimes) ProtoMessage()    {}
func (*ComplexEventTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{101}
}

func (m *ComplexEventTimes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexEventTimes.Unmarshal(m, b)
}
func (m *ComplexEventTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexEventTimes.Marshal(b, m, deterministic)
}
func (m *ComplexEventTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexEventTimes.Merge(m, src)
}
func (m *ComplexEventTimes) XXX_Size() int {
	return xxx_messageInfo_ComplexEventTimes.Size(m)
}
func (m *ComplexEventTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexEventTimes.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexEventTimes proto.InternalMessageInfo

func (m *ComplexEventTimes) GetComplexEventEndTime() *fix.TimeOnly {
	if m != nil {
		return m.ComplexEventEndTime
	}
	return nil
}

func (m *ComplexEventTimes) GetComplexEventStartTime() *fix.TimeOnly {
	if m != nil {
		return m.ComplexEventStartTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("Common.CommTypeEnum", CommTypeEnum_name, CommTypeEnum_value)
	proto.RegisterEnum("Common.FundRenewWaivEnum", FundRenewWaivEnum_name, FundRenewWaivEnum_value)
	proto.RegisterEnum("Common.DiscretionInstEnum", DiscretionInstEnum_name, DiscretionInstEnum_value)
	proto.RegisterEnum("Common.DiscretionMoveTypeEnum", DiscretionMoveTypeEnum_name, DiscretionMoveTypeEnum_value)
	proto.RegisterEnum("Common.DiscretionOffsetTypeEnum", DiscretionOffsetTypeEnum_name, DiscretionOffsetTypeEnum_value)
	proto.RegisterEnum("Common.DiscretionLimitTypeEnum", DiscretionLimitTypeEnum_name, DiscretionLimitTypeEnum_value)
	proto.RegisterEnum("Common.DiscretionRoundDirectionEnum", DiscretionRoundDirectionEnum_name, DiscretionRoundDirectionEnum_value)
	proto.RegisterEnum("Common.DiscretionScopeEnum", DiscretionScopeEnum_name, DiscretionScopeEnum_value)
	proto.RegisterEnum("Common.TerminationTypeEnum", TerminationTypeEnum_name, TerminationTypeEnum_value)
	proto.RegisterEnum("Common.DeliveryTypeEnum", DeliveryTypeEnum_name, DeliveryTypeEnum_value)
	proto.RegisterEnum("Common.SymbolSfxEnum", SymbolSfxEnum_name, SymbolSfxEnum_value)
	proto.RegisterEnum("Common.SecurityIDSourceEnum", SecurityIDSourceEnum_name, SecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.ProductEnum", ProductEnum_name, ProductEnum_value)
	proto.RegisterEnum("Common.SecurityTypeEnum", SecurityTypeEnum_name, SecurityTypeEnum_value)
	proto.RegisterEnum("Common.SecurityStatusEnum", SecurityStatusEnum_name, SecurityStatusEnum_value)
	proto.RegisterEnum("Common.RestructuringTypeEnum", RestructuringTypeEnum_name, RestructuringTypeEnum_value)
	proto.RegisterEnum("Common.SeniorityEnum", SeniorityEnum_name, SeniorityEnum_value)
	proto.RegisterEnum("Common.StrikePriceDeterminationMethodEnum", StrikePriceDeterminationMethodEnum_name, StrikePriceDeterminationMethodEnum_value)
	proto.RegisterEnum("Common.StrikePriceBoundaryMethodEnum", StrikePriceBoundaryMethodEnum_name, StrikePriceBoundaryMethodEnum_value)
	proto.RegisterEnum("Common.UnderlyingPriceDeterminationMethodEnum", UnderlyingPriceDeterminationMethodEnum_name, UnderlyingPriceDeterminationMethodEnum_value)
	proto.RegisterEnum("Common.ContractMultiplierUnitEnum", ContractMultiplierUnitEnum_name, ContractMultiplierUnitEnum_value)
	proto.RegisterEnum("Common.FlowScheduleTypeEnum", FlowScheduleTypeEnum_name, FlowScheduleTypeEnum_value)
	proto.RegisterEnum("Common.UnitOfMeasureEnum", UnitOfMeasureEnum_name, UnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.PriceUnitOfMeasureEnum", PriceUnitOfMeasureEnum_name, PriceUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.SettlMethodEnum", SettlMethodEnum_name, SettlMethodEnum_value)
	proto.RegisterEnum("Common.ExerciseStyleEnum", ExerciseStyleEnum_name, ExerciseStyleEnum_value)
	proto.RegisterEnum("Common.OptPayoutTypeEnum", OptPayoutTypeEnum_name, OptPayoutTypeEnum_value)
	proto.RegisterEnum("Common.PriceQuoteMethodEnum", PriceQuoteMethodEnum_name, PriceQuoteMethodEnum_value)
	proto.RegisterEnum("Common.ValuationMethodEnum", ValuationMethodEnum_name, ValuationMethodEnum_value)
	proto.RegisterEnum("Common.ListMethodEnum", ListMethodEnum_name, ListMethodEnum_value)
	proto.RegisterEnum("Common.PutOrCallEnum", PutOrCallEnum_name, PutOrCallEnum_value)
	proto.RegisterEnum("Common.TimeUnitEnum", TimeUnitEnum_name, TimeUnitEnum_value)
	proto.RegisterEnum("Common.CPProgramEnum", CPProgramEnum_name, CPProgramEnum_value)
	proto.RegisterEnum("Common.DeliveryFormEnum", DeliveryFormEnum_name, DeliveryFormEnum_value)
	proto.RegisterEnum("Common.LegSymbolSfxEnum", LegSymbolSfxEnum_name, LegSymbolSfxEnum_value)
	proto.RegisterEnum("Common.LegSecurityIDSourceEnum", LegSecurityIDSourceEnum_name, LegSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.LegProductEnum", LegProductEnum_name, LegProductEnum_value)
	proto.RegisterEnum("Common.LegSecurityTypeEnum", LegSecurityTypeEnum_name, LegSecurityTypeEnum_value)
	proto.RegisterEnum("Common.LegContractMultiplierUnitEnum", LegContractMultiplierUnitEnum_name, LegContractMultiplierUnitEnum_value)
	proto.RegisterEnum("Common.LegFlowScheduleTypeEnum", LegFlowScheduleTypeEnum_name, LegFlowScheduleTypeEnum_value)
	proto.RegisterEnum("Common.LegUnitOfMeasureEnum", LegUnitOfMeasureEnum_name, LegUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.LegPriceUnitOfMeasureEnum", LegPriceUnitOfMeasureEnum_name, LegPriceUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.LegTimeUnitEnum", LegTimeUnitEnum_name, LegTimeUnitEnum_value)
	proto.RegisterEnum("Common.LegExerciseStyleEnum", LegExerciseStyleEnum_name, LegExerciseStyleEnum_value)
	proto.RegisterEnum("Common.LegSideEnum", LegSideEnum_name, LegSideEnum_value)
	proto.RegisterEnum("Common.LegBenchmarkCurveNameEnum", LegBenchmarkCurveNameEnum_name, LegBenchmarkCurveNameEnum_value)
	proto.RegisterEnum("Common.LegStipulationTypeEnum", LegStipulationTypeEnum_name, LegStipulationTypeEnum_value)
	proto.RegisterEnum("Common.NestedPartyIDSourceEnum", NestedPartyIDSourceEnum_name, NestedPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.NestedPartyRoleEnum", NestedPartyRoleEnum_name, NestedPartyRoleEnum_value)
	proto.RegisterEnum("Common.RoundingDirectionEnum", RoundingDirectionEnum_name, RoundingDirectionEnum_value)
	proto.RegisterEnum("Common.PartyIDSourceEnum", PartyIDSourceEnum_name, PartyIDSourceEnum_value)
	proto.RegisterEnum("Common.PartyRoleEnum", PartyRoleEnum_name, PartyRoleEnum_value)
	proto.RegisterEnum("Common.PegPriceTypeEnum", PegPriceTypeEnum_name, PegPriceTypeEnum_value)
	proto.RegisterEnum("Common.PegMoveTypeEnum", PegMoveTypeEnum_name, PegMoveTypeEnum_value)
	proto.RegisterEnum("Common.PegOffsetTypeEnum", PegOffsetTypeEnum_name, PegOffsetTypeEnum_value)
	proto.RegisterEnum("Common.PegLimitTypeEnum", PegLimitTypeEnum_name, PegLimitTypeEnum_value)
	proto.RegisterEnum("Common.PegRoundDirectionEnum", PegRoundDirectionEnum_name, PegRoundDirectionEnum_value)
	proto.RegisterEnum("Common.PegScopeEnum", PegScopeEnum_name, PegScopeEnum_value)
	proto.RegisterEnum("Common.PegSecurityIDSourceEnum", PegSecurityIDSourceEnum_name, PegSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.PosAmtTypeEnum", PosAmtTypeEnum_name, PosAmtTypeEnum_value)
	proto.RegisterEnum("Common.PosTypeEnum", PosTypeEnum_name, PosTypeEnum_value)
	proto.RegisterEnum("Common.PosQtyStatusEnum", PosQtyStatusEnum_name, PosQtyStatusEnum_value)
	proto.RegisterEnum("Common.SettlDeliveryTypeEnum", SettlDeliveryTypeEnum_name, SettlDeliveryTypeEnum_value)
	proto.RegisterEnum("Common.StandInstDbTypeEnum", StandInstDbTypeEnum_name, StandInstDbTypeEnum_value)
	proto.RegisterEnum("Common.SettlPartyIDSourceEnum", SettlPartyIDSourceEnum_name, SettlPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.SettlPartyRoleEnum", SettlPartyRoleEnum_name, SettlPartyRoleEnum_value)
	proto.RegisterEnum("Common.BenchmarkCurveNameEnum", BenchmarkCurveNameEnum_name, BenchmarkCurveNameEnum_value)
	proto.RegisterEnum("Common.BenchmarkPriceTypeEnum", BenchmarkPriceTypeEnum_name, BenchmarkPriceTypeEnum_value)
	proto.RegisterEnum("Common.BenchmarkSecurityIDSourceEnum", BenchmarkSecurityIDSourceEnum_name, BenchmarkSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.StipulationTypeEnum", StipulationTypeEnum_name, StipulationTypeEnum_value)
	proto.RegisterEnum("Common.TrdRegTimestampTypeEnum", TrdRegTimestampTypeEnum_name, TrdRegTimestampTypeEnum_value)
	proto.RegisterEnum("Common.DeskTypeEnum", DeskTypeEnum_name, DeskTypeEnum_value)
	proto.RegisterEnum("Common.DeskTypeSourceEnum", DeskTypeSourceEnum_name, DeskTypeSourceEnum_value)
	proto.RegisterEnum("Common.DeskOrderHandlingInstEnum", DeskOrderHandlingInstEnum_name, DeskOrderHandlingInstEnum_value)
	proto.RegisterEnum("Common.UnderlyingSymbolSfxEnum", UnderlyingSymbolSfxEnum_name, UnderlyingSymbolSfxEnum_value)
	proto.RegisterEnum("Common.UnderlyingSecurityIDSourceEnum", UnderlyingSecurityIDSourceEnum_name, UnderlyingSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.UnderlyingProductEnum", UnderlyingProductEnum_name, UnderlyingProductEnum_value)
	proto.RegisterEnum("Common.UnderlyingSecurityTypeEnum", UnderlyingSecurityTypeEnum_name, UnderlyingSecurityTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingRestructuringTypeEnum", UnderlyingRestructuringTypeEnum_name, UnderlyingRestructuringTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingSeniorityEnum", UnderlyingSeniorityEnum_name, UnderlyingSeniorityEnum_value)
	proto.RegisterEnum("Common.UnderlyingContractMultiplierUnitEnum", UnderlyingContractMultiplierUnitEnum_name, UnderlyingContractMultiplierUnitEnum_value)
	proto.RegisterEnum("Common.UnderlyingFlowScheduleTypeEnum", UnderlyingFlowScheduleTypeEnum_name, UnderlyingFlowScheduleTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingUnitOfMeasureEnum", UnderlyingUnitOfMeasureEnum_name, UnderlyingUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.UnderlyingPriceUnitOfMeasureEnum", UnderlyingPriceUnitOfMeasureEnum_name, UnderlyingPriceUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.UnderlyingTimeUnitEnum", UnderlyingTimeUnitEnum_name, UnderlyingTimeUnitEnum_value)
	proto.RegisterEnum("Common.UnderlyingExerciseStyleEnum", UnderlyingExerciseStyleEnum_name, UnderlyingExerciseStyleEnum_value)
	proto.RegisterEnum("Common.UnderlyingSettlementTypeEnum", UnderlyingSettlementTypeEnum_name, UnderlyingSettlementTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingCashTypeEnum", UnderlyingCashTypeEnum_name, UnderlyingCashTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingFXRateCalcEnum", UnderlyingFXRateCalcEnum_name, UnderlyingFXRateCalcEnum_value)
	proto.RegisterEnum("Common.YieldTypeEnum", YieldTypeEnum_name, YieldTypeEnum_value)
	proto.RegisterEnum("Common.YieldRedemptionPriceTypeEnum", YieldRedemptionPriceTypeEnum_name, YieldRedemptionPriceTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingStipTypeEnum", UnderlyingStipTypeEnum_name, UnderlyingStipTypeEnum_value)
	proto.RegisterEnum("Common.Nested2PartyIDSourceEnum", Nested2PartyIDSourceEnum_name, Nested2PartyIDSourceEnum_value)
	proto.RegisterEnum("Common.Nested2PartyRoleEnum", Nested2PartyRoleEnum_name, Nested2PartyRoleEnum_value)
	proto.RegisterEnum("Common.Nested3PartyIDSourceEnum", Nested3PartyIDSourceEnum_name, Nested3PartyIDSourceEnum_value)
	proto.RegisterEnum("Common.Nested3PartyRoleEnum", Nested3PartyRoleEnum_name, Nested3PartyRoleEnum_value)
	proto.RegisterEnum("Common.ClearingInstructionEnum", ClearingInstructionEnum_name, ClearingInstructionEnum_value)
	proto.RegisterEnum("Common.StatusValueEnum", StatusValueEnum_name, StatusValueEnum_value)
	proto.RegisterEnum("Common.ContAmtTypeEnum", ContAmtTypeEnum_name, ContAmtTypeEnum_value)
	proto.RegisterEnum("Common.LegSwapTypeEnum", LegSwapTypeEnum_name, LegSwapTypeEnum_value)
	proto.RegisterEnum("Common.LegPositionEffectEnum", LegPositionEffectEnum_name, LegPositionEffectEnum_value)
	proto.RegisterEnum("Common.LegCoveredOrUncoveredEnum", LegCoveredOrUncoveredEnum_name, LegCoveredOrUncoveredEnum_value)
	proto.RegisterEnum("Common.LegSettlTypeEnum", LegSettlTypeEnum_name, LegSettlTypeEnum_value)
	proto.RegisterEnum("Common.LegExecInstEnum", LegExecInstEnum_name, LegExecInstEnum_value)
	proto.RegisterEnum("Common.LegIOIQtyEnum", LegIOIQtyEnum_name, LegIOIQtyEnum_value)
	proto.RegisterEnum("Common.QuoteTypeEnum", QuoteTypeEnum_name, QuoteTypeEnum_value)
	proto.RegisterEnum("Common.SettlTypeEnum", SettlTypeEnum_name, SettlTypeEnum_value)
	proto.RegisterEnum("Common.MiscFeeTypeEnum", MiscFeeTypeEnum_name, MiscFeeTypeEnum_value)
	proto.RegisterEnum("Common.MiscFeeBasisEnum", MiscFeeBasisEnum_name, MiscFeeBasisEnum_value)
	proto.RegisterEnum("Common.AllocAcctIDSourceEnum", AllocAcctIDSourceEnum_name, AllocAcctIDSourceEnum_value)
	proto.RegisterEnum("Common.RoutingTypeEnum", RoutingTypeEnum_name, RoutingTypeEnum_value)
	proto.RegisterEnum("Common.TradingSessionIDEnum", TradingSessionIDEnum_name, TradingSessionIDEnum_value)
	proto.RegisterEnum("Common.TradingSessionSubIDEnum", TradingSessionSubIDEnum_name, TradingSessionSubIDEnum_value)
	proto.RegisterEnum("Common.EventTypeEnum", EventTypeEnum_name, EventTypeEnum_value)
	proto.RegisterEnum("Common.SecurityAltIDSourceEnum", SecurityAltIDSourceEnum_name, SecurityAltIDSourceEnum_value)
	proto.RegisterEnum("Common.LegSecurityAltIDSourceEnum", LegSecurityAltIDSourceEnum_name, LegSecurityAltIDSourceEnum_value)
	proto.RegisterEnum("Common.UnderlyingSecurityAltIDSourceEnum", UnderlyingSecurityAltIDSourceEnum_name, UnderlyingSecurityAltIDSourceEnum_value)
	proto.RegisterEnum("Common.InstrAttribTypeEnum", InstrAttribTypeEnum_name, InstrAttribTypeEnum_value)
	proto.RegisterEnum("Common.SettlInstSourceEnum", SettlInstSourceEnum_name, SettlInstSourceEnum_value)
	proto.RegisterEnum("Common.DlvyInstTypeEnum", DlvyInstTypeEnum_name, DlvyInstTypeEnum_value)
	proto.RegisterEnum("Common.SettlPartySubIDTypeEnum", SettlPartySubIDTypeEnum_name, SettlPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.PartySubIDTypeEnum", PartySubIDTypeEnum_name, PartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.NestedPartySubIDTypeEnum", NestedPartySubIDTypeEnum_name, NestedPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.Nested2PartySubIDTypeEnum", Nested2PartySubIDTypeEnum_name, Nested2PartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.Nested3PartySubIDTypeEnum", Nested3PartySubIDTypeEnum_name, Nested3PartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.StrategyParameterTypeEnum", StrategyParameterTypeEnum_name, StrategyParameterTypeEnum_value)
	proto.RegisterEnum("Common.InstrumentPartyIDSourceEnum", InstrumentPartyIDSourceEnum_name, InstrumentPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.InstrumentPartyRoleEnum", InstrumentPartyRoleEnum_name, InstrumentPartyRoleEnum_value)
	proto.RegisterEnum("Common.InstrumentPartySubIDTypeEnum", InstrumentPartySubIDTypeEnum_name, InstrumentPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.UnderlyingInstrumentPartyIDSourceEnum", UnderlyingInstrumentPartyIDSourceEnum_name, UnderlyingInstrumentPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.UnderlyingInstrumentPartyRoleEnum", UnderlyingInstrumentPartyRoleEnum_name, UnderlyingInstrumentPartyRoleEnum_value)
	proto.RegisterEnum("Common.UnderlyingInstrumentPartySubIDTypeEnum", UnderlyingInstrumentPartySubIDTypeEnum_name, UnderlyingInstrumentPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.DisplayWhenEnum", DisplayWhenEnum_name, DisplayWhenEnum_value)
	proto.RegisterEnum("Common.DisplayMethodEnum", DisplayMethodEnum_name, DisplayMethodEnum_value)
	proto.RegisterEnum("Common.TriggerTypeEnum", TriggerTypeEnum_name, TriggerTypeEnum_value)
	proto.RegisterEnum("Common.TriggerActionEnum", TriggerActionEnum_name, TriggerActionEnum_value)
	proto.RegisterEnum("Common.TriggerSecurityIDSourceEnum", TriggerSecurityIDSourceEnum_name, TriggerSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.TriggerPriceTypeEnum", TriggerPriceTypeEnum_name, TriggerPriceTypeEnum_value)
	proto.RegisterEnum("Common.TriggerPriceTypeScopeEnum", TriggerPriceTypeScopeEnum_name, TriggerPriceTypeScopeEnum_value)
	proto.RegisterEnum("Common.TriggerPriceDirectionEnum", TriggerPriceDirectionEnum_name, TriggerPriceDirectionEnum_value)
	proto.RegisterEnum("Common.TriggerOrderTypeEnum", TriggerOrderTypeEnum_name, TriggerOrderTypeEnum_value)
	proto.RegisterEnum("Common.RootPartyIDSourceEnum", RootPartyIDSourceEnum_name, RootPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.RootPartyRoleEnum", RootPartyRoleEnum_name, RootPartyRoleEnum_value)
	proto.RegisterEnum("Common.RootPartySubIDTypeEnum", RootPartySubIDTypeEnum_name, RootPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.TradSesUpdateActionEnum", TradSesUpdateActionEnum_name, TradSesUpdateActionEnum_value)
	proto.RegisterEnum("Common.TradSesMethodEnum", TradSesMethodEnum_name, TradSesMethodEnum_value)
	proto.RegisterEnum("Common.TradSesModeEnum", TradSesModeEnum_name, TradSesModeEnum_value)
	proto.RegisterEnum("Common.TradSesStatusEnum", TradSesStatusEnum_name, TradSesStatusEnum_value)
	proto.RegisterEnum("Common.TradSesStatusRejReasonEnum", TradSesStatusRejReasonEnum_name, TradSesStatusRejReasonEnum_value)
	proto.RegisterEnum("Common.RefMsgTypeEnum", RefMsgTypeEnum_name, RefMsgTypeEnum_value)
	proto.RegisterEnum("Common.MsgDirectionEnum", MsgDirectionEnum_name, MsgDirectionEnum_value)
	proto.RegisterEnum("Common.RefApplVerIDEnum", RefApplVerIDEnum_name, RefApplVerIDEnum_value)
	proto.RegisterEnum("Common.SettlObligSourceEnum", SettlObligSourceEnum_name, SettlObligSourceEnum_value)
	proto.RegisterEnum("Common.TickRuleTypeEnum", TickRuleTypeEnum_name, TickRuleTypeEnum_value)
	proto.RegisterEnum("Common.StrikeExerciseStyleEnum", StrikeExerciseStyleEnum_name, StrikeExerciseStyleEnum_value)
	proto.RegisterEnum("Common.MaturityMonthYearFormatEnum", MaturityMonthYearFormatEnum_name, MaturityMonthYearFormatEnum_value)
	proto.RegisterEnum("Common.MaturityMonthYearIncrementUnitsEnum", MaturityMonthYearIncrementUnitsEnum_name, MaturityMonthYearIncrementUnitsEnum_value)
	proto.RegisterEnum("Common.SecondaryPriceLimitTypeEnum", SecondaryPriceLimitTypeEnum_name, SecondaryPriceLimitTypeEnum_value)
	proto.RegisterEnum("Common.PriceLimitTypeEnum", PriceLimitTypeEnum_name, PriceLimitTypeEnum_value)
	proto.RegisterEnum("Common.MDBookTypeEnum", MDBookTypeEnum_name, MDBookTypeEnum_value)
	proto.RegisterEnum("Common.LotTypeEnum", LotTypeEnum_name, LotTypeEnum_value)
	proto.RegisterEnum("Common.MatchTypeEnum", MatchTypeEnum_name, MatchTypeEnum_value)
	proto.RegisterEnum("Common.ExecInstValueEnum", ExecInstValueEnum_name, ExecInstValueEnum_value)
	proto.RegisterEnum("Common.TimeInForceEnum", TimeInForceEnum_name, TimeInForceEnum_value)
	proto.RegisterEnum("Common.OrdTypeEnum", OrdTypeEnum_name, OrdTypeEnum_value)
	proto.RegisterEnum("Common.ExpirationCycleEnum", ExpirationCycleEnum_name, ExpirationCycleEnum_value)
	proto.RegisterEnum("Common.ImpliedMarketIndicatorEnum", ImpliedMarketIndicatorEnum_name, ImpliedMarketIndicatorEnum_value)
	proto.RegisterEnum("Common.MultilegModelEnum", MultilegModelEnum_name, MultilegModelEnum_value)
	proto.RegisterEnum("Common.MultilegPriceMethodEnum", MultilegPriceMethodEnum_name, MultilegPriceMethodEnum_value)
	proto.RegisterEnum("Common.PriceTypeEnum", PriceTypeEnum_name, PriceTypeEnum_value)
	proto.RegisterEnum("Common.DerivativeInstrumentPartySubIDTypeEnum", DerivativeInstrumentPartySubIDTypeEnum_name, DerivativeInstrumentPartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.DerivativeInstrumentPartyIDSourceEnum", DerivativeInstrumentPartyIDSourceEnum_name, DerivativeInstrumentPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.DerivativeInstrumentPartyRoleEnum", DerivativeInstrumentPartyRoleEnum_name, DerivativeInstrumentPartyRoleEnum_value)
	proto.RegisterEnum("Common.DerivativeInstrAttribTypeEnum", DerivativeInstrAttribTypeEnum_name, DerivativeInstrAttribTypeEnum_value)
	proto.RegisterEnum("Common.NestedInstrAttribTypeEnum", NestedInstrAttribTypeEnum_name, NestedInstrAttribTypeEnum_value)
	proto.RegisterEnum("Common.DerivativeSymbolSfxEnum", DerivativeSymbolSfxEnum_name, DerivativeSymbolSfxEnum_value)
	proto.RegisterEnum("Common.DerivativeSecurityIDSourceEnum", DerivativeSecurityIDSourceEnum_name, DerivativeSecurityIDSourceEnum_value)
	proto.RegisterEnum("Common.DerivativeProductEnum", DerivativeProductEnum_name, DerivativeProductEnum_value)
	proto.RegisterEnum("Common.DerivativeSecurityTypeEnum", DerivativeSecurityTypeEnum_name, DerivativeSecurityTypeEnum_value)
	proto.RegisterEnum("Common.DerivativeInstrmtAssignmentMethodEnum", DerivativeInstrmtAssignmentMethodEnum_name, DerivativeInstrmtAssignmentMethodEnum_value)
	proto.RegisterEnum("Common.DerivativeSecurityStatusEnum", DerivativeSecurityStatusEnum_name, DerivativeSecurityStatusEnum_value)
	proto.RegisterEnum("Common.DerivativeContractMultiplierUnitEnum", DerivativeContractMultiplierUnitEnum_name, DerivativeContractMultiplierUnitEnum_value)
	proto.RegisterEnum("Common.DerivativeFlowScheduleTypeEnum", DerivativeFlowScheduleTypeEnum_name, DerivativeFlowScheduleTypeEnum_value)
	proto.RegisterEnum("Common.DerivativeUnitOfMeasureEnum", DerivativeUnitOfMeasureEnum_name, DerivativeUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.DerivativePriceUnitOfMeasureEnum", DerivativePriceUnitOfMeasureEnum_name, DerivativePriceUnitOfMeasureEnum_value)
	proto.RegisterEnum("Common.DerivativeSettlMethodEnum", DerivativeSettlMethodEnum_name, DerivativeSettlMethodEnum_value)
	proto.RegisterEnum("Common.DerivativePriceQuoteMethodEnum", DerivativePriceQuoteMethodEnum_name, DerivativePriceQuoteMethodEnum_value)
	proto.RegisterEnum("Common.DerivativeValuationMethodEnum", DerivativeValuationMethodEnum_name, DerivativeValuationMethodEnum_value)
	proto.RegisterEnum("Common.DerivativeListMethodEnum", DerivativeListMethodEnum_name, DerivativeListMethodEnum_value)
	proto.RegisterEnum("Common.DerivativePutOrCallEnum", DerivativePutOrCallEnum_name, DerivativePutOrCallEnum_value)
	proto.RegisterEnum("Common.DerivativeExerciseStyleEnum", DerivativeExerciseStyleEnum_name, DerivativeExerciseStyleEnum_value)
	proto.RegisterEnum("Common.DerivativeTimeUnitEnum", DerivativeTimeUnitEnum_name, DerivativeTimeUnitEnum_value)
	proto.RegisterEnum("Common.DerivativeSecurityAltIDSourceEnum", DerivativeSecurityAltIDSourceEnum_name, DerivativeSecurityAltIDSourceEnum_value)
	proto.RegisterEnum("Common.DerivativeEventTypeEnum", DerivativeEventTypeEnum_name, DerivativeEventTypeEnum_value)
	proto.RegisterEnum("Common.ListUpdateActionEnum", ListUpdateActionEnum_name, ListUpdateActionEnum_value)
	proto.RegisterEnum("Common.CorporateActionEnum", CorporateActionEnum_name, CorporateActionEnum_value)
	proto.RegisterEnum("Common.Nested4PartySubIDTypeEnum", Nested4PartySubIDTypeEnum_name, Nested4PartySubIDTypeEnum_value)
	proto.RegisterEnum("Common.Nested4PartyIDSourceEnum", Nested4PartyIDSourceEnum_name, Nested4PartyIDSourceEnum_value)
	proto.RegisterEnum("Common.Nested4PartyRoleEnum", Nested4PartyRoleEnum_name, Nested4PartyRoleEnum_value)
	proto.RegisterEnum("Common.RateSourceEnum", RateSourceEnum_name, RateSourceEnum_value)
	proto.RegisterEnum("Common.RateSourceTypeEnum", RateSourceTypeEnum_name, RateSourceTypeEnum_value)
	proto.RegisterEnum("Common.TargetPartyIDSourceEnum", TargetPartyIDSourceEnum_name, TargetPartyIDSourceEnum_value)
	proto.RegisterEnum("Common.TargetPartyRoleEnum", TargetPartyRoleEnum_name, TargetPartyRoleEnum_value)
	proto.RegisterEnum("Common.ComplexEventTypeEnum", ComplexEventTypeEnum_name, ComplexEventTypeEnum_value)
	proto.RegisterEnum("Common.ComplexEventPriceBoundaryMethodEnum", ComplexEventPriceBoundaryMethodEnum_name, ComplexEventPriceBoundaryMethodEnum_value)
	proto.RegisterEnum("Common.ComplexEventPriceTimeTypeEnum", ComplexEventPriceTimeTypeEnum_name, ComplexEventPriceTimeTypeEnum_value)
	proto.RegisterEnum("Common.ComplexEventConditionEnum", ComplexEventConditionEnum_name, ComplexEventConditionEnum_value)
	proto.RegisterType((*CommissionData)(nil), "Common.CommissionData")
	proto.RegisterType((*DiscretionInstructions)(nil), "Common.DiscretionInstructions")
	proto.RegisterType((*FinancingDetails)(nil), "Common.FinancingDetails")
	proto.RegisterType((*Instrument)(nil), "Common.Instrument")
	proto.RegisterType((*InstrumentExtension)(nil), "Common.InstrumentExtension")
	proto.RegisterType((*InstrumentLeg)(nil), "Common.InstrumentLeg")
	proto.RegisterType((*LegBenchmarkCurveData)(nil), "Common.LegBenchmarkCurveData")
	proto.RegisterType((*LegStipulations)(nil), "Common.LegStipulations")
	proto.RegisterType((*NestedParties)(nil), "Common.NestedParties")
	proto.RegisterType((*OrderQtyData)(nil), "Common.OrderQtyData")
	proto.RegisterType((*Parties)(nil), "Common.Parties")
	proto.RegisterType((*PegInstructions)(nil), "Common.PegInstructions")
	proto.RegisterType((*PositionAmountData)(nil), "Common.PositionAmountData")
	proto.RegisterType((*PositionQty)(nil), "Common.PositionQty")
	proto.RegisterType((*SettlInstructionsData)(nil), "Common.SettlInstructionsData")
	proto.RegisterType((*SettlParties)(nil), "Common.SettlParties")
	proto.RegisterType((*SpreadOrBenchmarkCurveData)(nil), "Common.SpreadOrBenchmarkCurveData")
	proto.RegisterType((*Stipulations)(nil), "Common.Stipulations")
	proto.RegisterType((*TrdRegTimestamps)(nil), "Common.TrdRegTimestamps")
	proto.RegisterType((*UnderlyingInstrument)(nil), "Common.UnderlyingInstrument")
	proto.RegisterType((*YieldData)(nil), "Common.YieldData")
	proto.RegisterType((*UnderlyingStipulations)(nil), "Common.UnderlyingStipulations")
	proto.RegisterType((*NestedParties2)(nil), "Common.NestedParties2")
	proto.RegisterType((*NestedParties3)(nil), "Common.NestedParties3")
	proto.RegisterType((*ClrInstGrp)(nil), "Common.ClrInstGrp")
	proto.RegisterType((*CompIDReqGrp)(nil), "Common.CompIDReqGrp")
	proto.RegisterType((*CompIDStatGrp)(nil), "Common.CompIDStatGrp")
	proto.RegisterType((*ContAmtGrp)(nil), "Common.ContAmtGrp")
	proto.RegisterType((*ContraGrp)(nil), "Common.ContraGrp")
	proto.RegisterType((*InstrmtGrp)(nil), "Common.InstrmtGrp")
	proto.RegisterType((*InstrmtLegExecGrp)(nil), "Common.InstrmtLegExecGrp")
	proto.RegisterType((*InstrmtLegGrp)(nil), "Common.InstrmtLegGrp")
	proto.RegisterType((*InstrmtLegIOIGrp)(nil), "Common.InstrmtLegIOIGrp")
	proto.RegisterType((*InstrmtLegSecListGrp)(nil), "Common.InstrmtLegSecListGrp")
	proto.RegisterType((*InstrmtMDReqGrp)(nil), "Common.InstrmtMDReqGrp")
	proto.RegisterType((*LegPreAllocGrp)(nil), "Common.LegPreAllocGrp")
	proto.RegisterType((*LinesOfTextGrp)(nil), "Common.LinesOfTextGrp")
	proto.RegisterType((*MiscFeesGrp)(nil), "Common.MiscFeesGrp")
	proto.RegisterType((*OrdAllocGrp)(nil), "Common.OrdAllocGrp")
	proto.RegisterType((*PreAllocGrp)(nil), "Common.PreAllocGrp")
	proto.RegisterType((*PreAllocMlegGrp)(nil), "Common.PreAllocMlegGrp")
	proto.RegisterType((*RoutingGrp)(nil), "Common.RoutingGrp")
	proto.RegisterType((*TrdgSesGrp)(nil), "Common.TrdgSesGrp")
	proto.RegisterType((*UndInstrmtGrp)(nil), "Common.UndInstrmtGrp")
	proto.RegisterType((*EvntGrp)(nil), "Common.EvntGrp")
	proto.RegisterType((*SecAltIDGrp)(nil), "Common.SecAltIDGrp")
	proto.RegisterType((*LegSecAltIDGrp)(nil), "Common.LegSecAltIDGrp")
	proto.RegisterType((*UndSecAltIDGrp)(nil), "Common.UndSecAltIDGrp")
	proto.RegisterType((*AttrbGrp)(nil), "Common.AttrbGrp")
	proto.RegisterType((*DlvyInstGrp)(nil), "Common.DlvyInstGrp")
	proto.RegisterType((*SettlPtysSubGrp)(nil), "Common.SettlPtysSubGrp")
	proto.RegisterType((*PtysSubGrp)(nil), "Common.PtysSubGrp")
	proto.RegisterType((*NstdPtysSubGrp)(nil), "Common.NstdPtysSubGrp")
	proto.RegisterType((*NstdPtys2SubGrp)(nil), "Common.NstdPtys2SubGrp")
	proto.RegisterType((*NstdPtys3SubGrp)(nil), "Common.NstdPtys3SubGrp")
	proto.RegisterType((*StrategyParametersGrp)(nil), "Common.StrategyParametersGrp")
	proto.RegisterType((*InstrumentParties)(nil), "Common.InstrumentParties")
	proto.RegisterType((*InstrumentPtysSubGrp)(nil), "Common.InstrumentPtysSubGrp")
	proto.RegisterType((*UndlyInstrumentParties)(nil), "Common.UndlyInstrumentParties")
	proto.RegisterType((*UndlyInstrumentPtysSubGrp)(nil), "Common.UndlyInstrumentPtysSubGrp")
	proto.RegisterType((*DisplayInstruction)(nil), "Common.DisplayInstruction")
	proto.RegisterType((*TriggeringInstruction)(nil), "Common.TriggeringInstruction")
	proto.RegisterType((*RootParties)(nil), "Common.RootParties")
	proto.RegisterType((*RootSubParties)(nil), "Common.RootSubParties")
	proto.RegisterType((*TrdSessLstGrp)(nil), "Common.TrdSessLstGrp")
	proto.RegisterType((*MsgTypeGrp)(nil), "Common.MsgTypeGrp")
	proto.RegisterType((*SecurityTradingRules)(nil), "Common.SecurityTradingRules")
	proto.RegisterType((*SettlDetails)(nil), "Common.SettlDetails")
	proto.RegisterType((*SecurityXML)(nil), "Common.SecurityXML")
	proto.RegisterType((*TickRules)(nil), "Common.TickRules")
	proto.RegisterType((*StrikeRules)(nil), "Common.StrikeRules")
	proto.RegisterType((*MaturityRules)(nil), "Common.MaturityRules")
	proto.RegisterType((*SecondaryPriceLimits)(nil), "Common.SecondaryPriceLimits")
	proto.RegisterType((*PriceLimits)(nil), "Common.PriceLimits")
	proto.RegisterType((*MarketDataFeedTypes)(nil), "Common.MarketDataFeedTypes")
	proto.RegisterType((*LotTypeRules)(nil), "Common.LotTypeRules")
	proto.RegisterType((*MatchRules)(nil), "Common.MatchRules")
	proto.RegisterType((*ExecInstRules)(nil), "Common.ExecInstRules")
	proto.RegisterType((*TimeInForceRules)(nil), "Common.TimeInForceRules")
	proto.RegisterType((*OrdTypeRules)(nil), "Common.OrdTypeRules")
	proto.RegisterType((*TradingSessionRules)(nil), "Common.TradingSessionRules")
	proto.RegisterType((*TradingSessionRulesGrp)(nil), "Common.TradingSessionRulesGrp")
	proto.RegisterType((*BaseTradingRules)(nil), "Common.BaseTradingRules")
	proto.RegisterType((*MarketSegmentGrp)(nil), "Common.MarketSegmentGrp")
	proto.RegisterType((*DerivativeInstrumentPartySubIDsGrp)(nil), "Common.DerivativeInstrumentPartySubIDsGrp")
	proto.RegisterType((*DerivativeInstrumentParties)(nil), "Common.DerivativeInstrumentParties")
	proto.RegisterType((*DerivativeInstrumentAttribute)(nil), "Common.DerivativeInstrumentAttribute")
	proto.RegisterType((*NestedInstrumentAttribute)(nil), "Common.NestedInstrumentAttribute")
	proto.RegisterType((*DerivativeInstrument)(nil), "Common.DerivativeInstrument")
	proto.RegisterType((*DerivativeSecurityAltIDGrp)(nil), "Common.DerivativeSecurityAltIDGrp")
	proto.RegisterType((*DerivativeEventsGrp)(nil), "Common.DerivativeEventsGrp")
	proto.RegisterType((*DerivativeSecurityDefinition)(nil), "Common.DerivativeSecurityDefinition")
	proto.RegisterType((*RelSymDerivSecUpdGrp)(nil), "Common.RelSymDerivSecUpdGrp")
	proto.RegisterType((*DerivativeSecurityXML)(nil), "Common.DerivativeSecurityXML")
	proto.RegisterType((*ApplicationSequenceControl)(nil), "Common.ApplicationSequenceControl")
	proto.RegisterType((*NstdPtys4SubGrp)(nil), "Common.NstdPtys4SubGrp")
	proto.RegisterType((*NestedParties4)(nil), "Common.NestedParties4")
	proto.RegisterType((*RateSource)(nil), "Common.RateSource")
	proto.RegisterType((*TargetParties)(nil), "Common.TargetParties")
	proto.RegisterType((*ComplexEvents)(nil), "Common.ComplexEvents")
	proto.RegisterType((*ComplexEventDates)(nil), "Common.ComplexEventDates")
	proto.RegisterType((*ComplexEventTimes)(nil), "Common.ComplexEventTimes")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 63009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xfd, 0x79, 0x98, 0x1c, 0x49,
	0x56, 0x20, 0x88, 0x2b, 0xf2, 0x50, 0x66, 0x5a, 0x5e, 0x91, 0x9e, 0x87, 0x42, 0xa9, 0x3b, 0x24,
	0x55, 0x49, 0x59, 0x25, 0x95, 0x8e, 0xd4, 0x59, 0x52, 0xa9, 0x3c, 0x23, 0x3c, 0x33, 0xa3, 0x14,
	0x11, 0x1e, 0x72, 0x8f, 0x50, 0x2a, 0xbb, 0xab, 0xda, 0x3b, 0x14, 0xe1, 0x99, 0x8a, 0xaa, 0xb8,
	0x2a, 0xc2, 0x43, 0x25, 0xf5, 0xfc, 0x06, 0xbe, 0xa1, 0xe1, 0xb7, 0xc3, 0x70, 0x43, 0x41, 0xb3,
	0xbb, 0x1c, 0xdd, 0x05, 0x0c, 0x0d, 0x54, 0x73, 0x35, 0xcd, 0xcd, 0x34, 0xec, 0x30, 0x34, 0x34,
	0x0d, 0x3d, 0x5c, 0x03, 0xc3, 0x30, 0xc0, 0x0c, 0x30, 0x1c, 0xc3, 0x2e, 0xd7, 0x00, 0xc3, 0x39,
	0xfb, 0xd9, 0xe1, 0xe6, 0xcf, 0xcc, 0xcd, 0x23, 0x53, 0xd5, 0xbd, 0xbb, 0xdf, 0x7e, 0xdf, 0xfe,
	0x53, 0xa5, 0x0c, 0x7f, 0xef, 0x99, 0xd9, 0xb3, 0x67, 0xcf, 0x9e, 0xbd, 0xc3, 0x0c, 0x4d, 0x54,
	0x5a, 0x8d, 0x46, 0xab, 0x79, 0xb6, 0xdd, 0x69, 0x79, 0x2d, 0x6d, 0x6f, 0x8a, 0xfc, 0xb5, 0x88,
	0x1a, 0xae, 0x57, 0xa6, 0xbf, 0x2d, 0x8e, 0x6d, 0xd5, 0x1e, 0xd1, 0x7f, 0x26, 0xbf, 0x71, 0x00,
	0x4d, 0x61, 0x88, 0x5a, 0xb7, 0x5b, 0x6b, 0x35, 0xd3, 0x65, 0xaf, 0xac, 0x2d, 0xa3, 0x49, 0x4c,
	0xc1, 0xa9, 0xf4, 0x3a, 0x1d, 0xb7, 0x59, 0x79, 0x9c, 0x88, 0x1d, 0x8d, 0x9d, 0x1a, 0x5b, 0x99,
	0xfe, 0xfa, 0xb7, 0x0f, 0xfc, 0x56, 0x6c, 0xcf, 0x9e, 0x0f, 0xbe, 0x7d, 0x60, 0xec, 0xc3, 0x6f,
	0x1f, 0xd8, 0x6b, 0x91, 0x76, 0x52, 0x0c, 0x48, 0x5b, 0x41, 0x63, 0x04, 0xcb, 0x7b, 0xdc, 0x76,
	0x13, 0x03, 0x47, 0x63, 0xa7, 0xa6, 0x2e, 0xcc, 0x9d, 0xa5, 0x6d, 0x93, 0xff, 0x15, 0x1f, 0xb7,
	0x5d, 0xa3, 0xd9, 0x6b, 0x10, 0x3a, 0x93, 0x7b, 0x08, 0x9d, 0x18, 0xa1, 0x33, 0x5a, 0x61, 0x9f,
	0xb5, 0x5b, 0x08, 0x55, 0x78, 0x5f, 0x12, 0x83, 0x47, 0x63, 0xa7, 0xc6, 0x2f, 0x4c, 0x9d, 0xc5,
	0x9d, 0x4d, 0xbb, 0x95, 0x5a, 0xa3, 0x5c, 0xbf, 0xbc, 0x4c, 0xd0, 0x27, 0x28, 0xfa, 0x08, 0x41,
	0x07, 0x28, 0x9a, 0x85, 0xa6, 0xb7, 0x7a, 0xcd, 0xaa, 0xd3, 0x71, 0x9b, 0xee, 0x1b, 0xce, 0x1b,
	0xe5, 0xda, 0xc3, 0xc4, 0x10, 0xe9, 0xca, 0x7e, 0xbf, 0x2b, 0xab, 0xbd, 0x66, 0xd5, 0xc2, 0x5f,
	0x37, 0xca, 0xb5, 0x87, 0xbc, 0x3f, 0x7f, 0x16, 0x03, 0xfd, 0x99, 0xdc, 0x82, 0x30, 0xc9, 0x4f,
	0x0c, 0xa3, 0x85, 0x74, 0xad, 0x5b, 0xe9, 0xb8, 0x5e, 0xad, 0xd5, 0xcc, 0x34, 0xbb, 0x5e, 0xa7,
	0x57, 0xc1, 0xff, 0xec, 0x6a, 0x45, 0x34, 0x5d, 0xe5, 0x5f, 0x9c, 0x5a, 0xb3, 0xeb, 0x11, 0x5e,
	0x4d, 0x5d, 0x58, 0xf4, 0x9b, 0x13, 0x11, 0x79, 0x7b, 0x9f, 0x1f, 0xb4, 0x37, 0x62, 0x4d, 0x55,
	0x05, 0x20, 0xad, 0x8a, 0xe6, 0x01, 0xd5, 0x7a, 0xad, 0x51, 0xf3, 0x20, 0x57, 0x8f, 0x84, 0x69,
	0x67, 0x31, 0x8c, 0xc0, 0xe0, 0xdb, 0x83, 0xa4, 0x81, 0x21, 0xd2, 0xc0, 0x6c, 0x35, 0x0c, 0xa9,
	0x95, 0xd1, 0x1c, 0x68, 0xa5, 0xd1, 0x7a, 0xe8, 0xd2, 0x46, 0x06, 0x49, 0x23, 0x87, 0xc3, 0x8d,
	0xe4, 0x5a, 0x0f, 0x5d, 0xa1, 0x8d, 0x0c, 0x6c, 0x43, 0xab, 0x86, 0x00, 0xb5, 0x6d, 0xb4, 0x00,
	0x9a, 0x68, 0x6d, 0x6d, 0x75, 0x5d, 0x36, 0x12, 0x3a, 0x29, 0x47, 0xc3, 0x8d, 0x98, 0x04, 0x48,
	0x68, 0xe6, 0x25, 0xd8, 0x0c, 0xe8, 0x73, 0x00, 0xaa, 0x6d, 0xa0, 0x7d, 0xe1, 0x86, 0x1e, 0x96,
	0xeb, 0x3d, 0x37, 0x31, 0x1c, 0x29, 0x44, 0x5f, 0x40, 0xe7, 0x60, 0x90, 0xd0, 0x9d, 0x97, 0xe9,
	0xde, 0xc5, 0xd8, 0x5a, 0x17, 0x2d, 0x02, 0xc2, 0x9d, 0x16, 0x96, 0xad, 0x6a, 0xad, 0xe3, 0x92,
	0xf9, 0x4f, 0xec, 0x25, 0xa3, 0x38, 0x11, 0x1e, 0x85, 0x85, 0x01, 0xd3, 0x3e, 0x1c, 0x1f, 0x49,
	0x16, 0x8e, 0x24, 0x51, 0x8d, 0x00, 0xd7, 0x36, 0x50, 0x1c, 0x34, 0xda, 0xad, 0xb4, 0xda, 0x6e,
	0x62, 0x84, 0x34, 0x75, 0x20, 0xdc, 0x94, 0x8d, 0x3f, 0xf3, 0x16, 0xf2, 0xb0, 0x05, 0x20, 0x9b,
	0x04, 0x2a, 0xf9, 0xf1, 0x21, 0x14, 0x5f, 0xad, 0x35, 0xcb, 0xcd, 0x4a, 0xad, 0xb9, 0x9d, 0x76,
	0xbd, 0x72, 0xad, 0xde, 0xd5, 0x5e, 0x40, 0x5a, 0x79, 0xbb, 0xe3, 0xba, 0x0d, 0xb7, 0xe9, 0xa9,
	0x96, 0xfc, 0xd7, 0x0c, 0xf2, 0x25, 0x3f, 0x62, 0xcd, 0x70, 0x50, 0xbe, 0xee, 0x2f, 0xa3, 0xa9,
	0x00, 0xbf, 0x5a, 0xf6, 0xa8, 0x98, 0x4e, 0x13, 0xdc, 0xaf, 0xa2, 0xb8, 0xe3, 0x04, 0x77, 0x92,
	0x83, 0xa5, 0xcb, 0x9e, 0x2b, 0xe1, 0xb9, 0xdd, 0x0a, 0x91, 0x3c, 0xda, 0xe6, 0x57, 0x50, 0xbc,
	0xb8, 0x8c, 0xe7, 0x76, 0x2b, 0xda, 0x05, 0x34, 0x11, 0xe0, 0xd5, 0xaa, 0x44, 0x94, 0x28, 0xd6,
	0x57, 0x42, 0xac, 0x71, 0x0e, 0x94, 0xa9, 0x6a, 0x79, 0x34, 0x59, 0x75, 0xeb, 0xb5, 0x87, 0x6e,
	0xe7, 0x31, 0x95, 0xbf, 0x61, 0xc2, 0xce, 0x04, 0x67, 0x27, 0xfb, 0x28, 0xc8, 0xdd, 0x07, 0x20,
	0x2f, 0x27, 0xaa, 0x00, 0x44, 0x5b, 0x42, 0xa3, 0x2e, 0x96, 0x04, 0x3c, 0xda, 0xbd, 0x7c, 0xb4,
	0x5f, 0x0d, 0x47, 0x3b, 0xe2, 0x36, 0xab, 0x64, 0x9c, 0x2b, 0x68, 0xa2, 0x51, 0xee, 0x6c, 0xd7,
	0x9a, 0x4e, 0xa7, 0xec, 0xd5, 0x5a, 0x64, 0x26, 0xd5, 0x02, 0xf9, 0x79, 0x14, 0x7f, 0x9e, 0xf6,
	0x9f, 0x22, 0x59, 0x18, 0x47, 0x3b, 0x8b, 0x50, 0xd7, 0x2b, 0x77, 0x18, 0x7f, 0x47, 0x79, 0x8b,
	0x6f, 0xc2, 0x16, 0xc7, 0x08, 0x08, 0x69, 0x73, 0x03, 0xc5, 0x3d, 0xb7, 0xd3, 0xa8, 0x35, 0xcb,
	0x44, 0x84, 0xc8, 0x90, 0xc7, 0x44, 0x09, 0x2a, 0x06, 0xdf, 0x85, 0x51, 0xcf, 0x09, 0x12, 0xe4,
	0x89, 0x50, 0xc9, 0xbf, 0x58, 0x46, 0x88, 0x6a, 0x40, 0xcc, 0x59, 0xcc, 0x87, 0xca, 0x56, 0xcd,
	0xa9, 0xb4, 0xaa, 0x2e, 0x90, 0x98, 0x9f, 0x8b, 0xf1, 0x79, 0xd8, 0x6b, 0x8d, 0x54, 0xb6, 0x6a,
	0xa9, 0x56, 0xd5, 0xd5, 0x0a, 0x68, 0xb6, 0xd2, 0x6a, 0x7a, 0x9d, 0x72, 0xc5, 0x73, 0x1a, 0xbd,
	0xba, 0x57, 0x6b, 0xd7, 0x6b, 0x6e, 0x87, 0x08, 0x8b, 0x9a, 0x1d, 0xbf, 0xbf, 0x87, 0xaf, 0xcf,
	0xbd, 0x96, 0xe6, 0xe3, 0xe6, 0x38, 0xaa, 0x76, 0x0d, 0xc5, 0x2b, 0xad, 0x5e, 0xd3, 0xeb, 0x3c,
	0x76, 0x5a, 0x5b, 0x4e, 0xad, 0xdb, 0xed, 0xb9, 0x40, 0x86, 0xfe, 0x1d, 0xed, 0x45, 0x82, 0xa0,
	0x4f, 0x31, 0x40, 0x73, 0x2b, 0x83, 0xc1, 0xb4, 0x5b, 0xb8, 0x33, 0xbd, 0x76, 0xab, 0xe9, 0xb4,
	0xcb, 0x8f, 0x03, 0xc9, 0x1d, 0xe2, 0x9c, 0xfd, 0xed, 0x3d, 0x9c, 0xb3, 0x7b, 0xad, 0x19, 0x0a,
	0x5b, 0xa0, 0xa0, 0x84, 0xc3, 0x2f, 0xa2, 0x71, 0x46, 0xa0, 0x83, 0x11, 0xa3, 0xb5, 0xcc, 0x6f,
	0xed, 0xe1, 0x93, 0x4a, 0xb6, 0x2a, 0x8c, 0x63, 0x61, 0x0a, 0x78, 0x97, 0xed, 0xb8, 0xd5, 0x9a,
	0x47, 0xe4, 0xa2, 0xb9, 0x4d, 0x04, 0x89, 0x76, 0xfd, 0x7f, 0xec, 0x01, 0x0c, 0x9c, 0xa0, 0x50,
	0x16, 0x01, 0xc2, 0xab, 0xc6, 0x6d, 0x62, 0x7e, 0x57, 0xe9, 0x80, 0x3b, 0x44, 0x9e, 0x28, 0xda,
	0x2b, 0x74, 0xc4, 0x03, 0x74, 0x13, 0x63, 0x60, 0x64, 0xbc, 0x1d, 0xed, 0x26, 0xd2, 0x44, 0x3c,
	0xa7, 0xee, 0x36, 0x89, 0x24, 0xc5, 0x09, 0xee, 0xcb, 0x14, 0x77, 0x96, 0xe0, 0xc6, 0x05, 0xdc,
	0xac, 0xdb, 0xd4, 0x52, 0x68, 0xde, 0x47, 0xef, 0xba, 0x95, 0x5e, 0xa7, 0xe6, 0x3d, 0xa6, 0x6b,
	0x76, 0x8c, 0xb7, 0xee, 0xc0, 0xd6, 0x67, 0x19, 0xb4, 0xcd, 0x80, 0xc9, 0xca, 0x7d, 0x09, 0xed,
	0x57, 0x12, 0x21, 0x5d, 0x41, 0xbc, 0x2b, 0xef, 0x81, 0x5d, 0x59, 0x50, 0x10, 0xc2, 0x1d, 0xba,
	0x82, 0xf6, 0x6e, 0x95, 0x2b, 0x5e, 0xab, 0x93, 0x18, 0x8f, 0x64, 0xfd, 0xef, 0x42, 0x01, 0x62,
	0xe0, 0x98, 0x81, 0x78, 0x9f, 0xee, 0x38, 0x1d, 0x77, 0xbb, 0xd6, 0xf5, 0x3a, 0x8f, 0x13, 0x13,
	0x7c, 0x08, 0x47, 0x06, 0x00, 0xdf, 0x27, 0x09, 0x98, 0xc5, 0xa0, 0xf0, 0x12, 0x24, 0x8c, 0xa3,
	0x82, 0x32, 0xc9, 0x05, 0xe5, 0x3f, 0x41, 0x41, 0x19, 0x23, 0x20, 0x44, 0x40, 0x9e, 0x46, 0x7b,
	0xd9, 0x04, 0x4d, 0x71, 0xfa, 0xaf, 0xc2, 0x79, 0x65, 0x9f, 0xb5, 0x2b, 0x68, 0xba, 0xde, 0xaa,
	0x94, 0xeb, 0x6e, 0x20, 0xc4, 0xd3, 0x1c, 0xe3, 0xd7, 0xe0, 0x52, 0x9a, 0xa4, 0x70, 0xbe, 0x0c,
	0x2f, 0xa3, 0xc9, 0x46, 0xd9, 0x63, 0x6c, 0xc4, 0x9d, 0x8a, 0xf3, 0x4e, 0x1d, 0x1a, 0x00, 0x9d,
	0x9a, 0xf0, 0xa1, 0x48, 0xbf, 0x6e, 0xa1, 0x59, 0x8e, 0xd5, 0x68, 0x35, 0xbd, 0x07, 0xce, 0x63,
	0xb7, 0xdc, 0x49, 0xcc, 0x70, 0xdc, 0x9f, 0xa6, 0x9d, 0xdc, 0x4b, 0x25, 0xdf, 0x87, 0xcd, 0x61,
	0xd0, 0x4d, 0xb7, 0xdc, 0xc1, 0xcd, 0xb6, 0xda, 0x9e, 0x53, 0xf6, 0xbc, 0x4e, 0xed, 0x7e, 0xcf,
	0x73, 0x13, 0xda, 0xd1, 0xd8, 0xa9, 0x09, 0x82, 0xfa, 0xf3, 0xd0, 0xaa, 0x9b, 0x68, 0xb5, 0x3d,
	0xdd, 0x07, 0xd2, 0x5e, 0x40, 0x23, 0xed, 0x4e, 0xab, 0xda, 0xab, 0x78, 0x89, 0x59, 0xa2, 0x88,
	0x66, 0x7d, 0x45, 0x54, 0xa0, 0x3f, 0x73, 0x05, 0xf4, 0xa9, 0x18, 0x57, 0x40, 0x7b, 0x2d, 0x1f,
	0x49, 0xbb, 0x8a, 0xa6, 0x3b, 0x6e, 0xd5, 0x6d, 0xb4, 0x89, 0x42, 0x23, 0xc3, 0x9d, 0xe3, 0x5d,
	0xfe, 0x53, 0x38, 0x07, 0x53, 0x01, 0x1c, 0x19, 0xb0, 0x85, 0x0e, 0x75, 0xdc, 0x76, 0xcb, 0xa9,
	0xb4, 0xea, 0xf5, 0xb2, 0xe7, 0x76, 0xca, 0xf5, 0x40, 0xfa, 0x88, 0x62, 0x9c, 0xe7, 0xdc, 0xfe,
	0x13, 0x38, 0x3f, 0x8b, 0x18, 0x2b, 0xc5, 0x91, 0x7c, 0x01, 0x24, 0xfa, 0x7f, 0x1d, 0xf7, 0xa6,
	0xdd, 0xeb, 0x54, 0x1e, 0x94, 0xbb, 0x2e, 0xd5, 0x00, 0x0b, 0x91, 0x62, 0xf8, 0x3b, 0x50, 0x03,
	0x4c, 0x05, 0x78, 0x44, 0x0b, 0x5c, 0x15, 0x28, 0x61, 0x75, 0x9b, 0xd8, 0xc7, 0x57, 0xc2, 0x7f,
	0xde, 0x03, 0x58, 0x01, 0x30, 0xb1, 0xee, 0xc6, 0xf3, 0x20, 0x2e, 0xc5, 0x04, 0x1f, 0xc7, 0x6b,
	0x82, 0xfe, 0xe8, 0xc2, 0x35, 0x78, 0x03, 0xcd, 0x70, 0x2c, 0xf7, 0x51, 0xe5, 0x41, 0xb9, 0xb9,
	0xed, 0x26, 0xf6, 0x73, 0xcc, 0x4f, 0x53, 0x4c, 0x44, 0xd5, 0x80, 0x0f, 0x69, 0x30, 0x40, 0xed,
	0x1c, 0x1a, 0xe7, 0xd8, 0xb5, 0x6a, 0x62, 0x91, 0xe3, 0x9d, 0x83, 0x2d, 0x22, 0x1f, 0x26, 0x53,
	0xd5, 0xde, 0x8d, 0x34, 0x80, 0xe1, 0x74, 0x5b, 0xbd, 0x4e, 0xc5, 0x4d, 0x1c, 0x20, 0x22, 0x70,
	0xd0, 0x17, 0x01, 0x9f, 0xb7, 0x99, 0xb4, 0x4d, 0xbe, 0x73, 0x59, 0x58, 0x80, 0x64, 0xe3, 0x01,
	0x59, 0x0a, 0x86, 0xb7, 0x75, 0x71, 0x2a, 0x0f, 0x8a, 0xdb, 0x3a, 0x9c, 0x33, 0x4e, 0xf3, 0x5b,
	0x95, 0xcc, 0x21, 0xd3, 0x7a, 0x1b, 0x2d, 0x76, 0xbd, 0xb2, 0xe7, 0x3a, 0xad, 0x8e, 0xd3, 0xee,
	0xb4, 0x1e, 0xd6, 0x9a, 0x15, 0xb0, 0x2a, 0x0f, 0xf1, 0xd1, 0xfe, 0x2a, 0x5c, 0x95, 0x0b, 0x04,
	0xc5, 0xec, 0x14, 0x18, 0x82, 0xbf, 0x3c, 0x57, 0xd0, 0x44, 0xd7, 0xeb, 0xd4, 0x5e, 0x73, 0x9d,
	0x76, 0xa7, 0x56, 0x71, 0x13, 0x87, 0x23, 0x05, 0xe4, 0x93, 0xb4, 0x47, 0x93, 0x84, 0xdc, 0x38,
	0x45, 0x2a, 0x60, 0x1c, 0xac, 0x44, 0xba, 0x8f, 0x1b, 0xf7, 0x5b, 0xf5, 0xc4, 0x11, 0xde, 0xf8,
	0x15, 0x41, 0x89, 0xd0, 0xcf, 0x9a, 0x81, 0x10, 0xfd, 0x97, 0xd3, 0xdd, 0x7a, 0x94, 0x38, 0x4a,
	0xd8, 0x30, 0xcf, 0xd9, 0x40, 0xbe, 0xd8, 0x5b, 0x8f, 0x38, 0x0f, 0x74, 0x48, 0x63, 0xac, 0xeb,
	0x7f, 0xd7, 0x74, 0x34, 0xc7, 0xf7, 0xe8, 0xae, 0xeb, 0x79, 0x75, 0xaa, 0x22, 0x12, 0xc7, 0xf8,
	0x52, 0xfb, 0x5f, 0x07, 0xb8, 0x76, 0x18, 0x09, 0x36, 0x65, 0x1b, 0xc3, 0x12, 0x15, 0xa1, 0xad,
	0x21, 0x54, 0x69, 0x63, 0xee, 0x6d, 0x77, 0xca, 0x8d, 0x44, 0x52, 0xec, 0x49, 0xaa, 0x50, 0xa0,
	0x1f, 0x78, 0x4f, 0x5e, 0x03, 0xe6, 0xc6, 0xfa, 0x1e, 0x6b, 0xac, 0xd2, 0x66, 0x10, 0x9a, 0x89,
	0x16, 0x03, 0x42, 0x4e, 0xc7, 0xed, 0xba, 0x9d, 0x87, 0x6e, 0xf5, 0xfc, 0xb9, 0x73, 0xed, 0x7a,
	0xaf, 0x9b, 0x38, 0x7e, 0x34, 0x76, 0x6a, 0x04, 0x52, 0x38, 0xc8, 0x28, 0x24, 0x38, 0x05, 0x4b,
	0x44, 0xd1, 0x9e, 0x43, 0xe3, 0x95, 0x36, 0x56, 0xfb, 0x54, 0x56, 0x4e, 0x70, 0x8e, 0xd6, 0xa1,
	0xdd, 0x38, 0x56, 0x69, 0x5b, 0xee, 0x36, 0x11, 0x87, 0xb3, 0x08, 0x61, 0x45, 0xc3, 0xec, 0xbc,
	0x93, 0x9c, 0x07, 0x35, 0xc1, 0xea, 0x22, 0x20, 0x44, 0xd3, 0x9c, 0x43, 0xa3, 0xee, 0xc3, 0xa6,
	0xe7, 0x6c, 0x77, 0xda, 0x89, 0xa7, 0x8e, 0x0e, 0x9e, 0x1a, 0xbf, 0x30, 0xed, 0x0f, 0xdc, 0x78,
	0xd8, 0xf4, 0xd6, 0x3a, 0xed, 0x95, 0x21, 0x66, 0x1b, 0xd2, 0x3f, 0xb5, 0xdb, 0x68, 0x3f, 0xd9,
	0x65, 0x1a, 0x9e, 0x53, 0xee, 0x76, 0x6b, 0xdb, 0x4d, 0x62, 0x8a, 0x34, 0x5c, 0xef, 0x41, 0xab,
	0x9a, 0x78, 0x9a, 0xeb, 0xd5, 0xfd, 0x43, 0xe0, 0xb4, 0xb8, 0x8f, 0x61, 0xe8, 0x1c, 0x21, 0x47,
	0xe0, 0xb5, 0x3c, 0xd2, 0x6a, 0xdc, 0x34, 0x73, 0xda, 0xe5, 0x8e, 0x57, 0x73, 0xbb, 0x89, 0x53,
	0xa4, 0x23, 0xfc, 0xf8, 0x1b, 0x18, 0x6f, 0x05, 0x0a, 0xc0, 0xba, 0x34, 0x53, 0x93, 0x3f, 0xe0,
	0x3d, 0xbf, 0xd6, 0xf4, 0xdc, 0x8e, 0xdb, 0xf5, 0x9c, 0x72, 0xa5, 0xd2, 0xe9, 0x95, 0xeb, 0x94,
	0x13, 0xa7, 0x39, 0x27, 0x5e, 0x85, 0x9c, 0x98, 0xf5, 0xa1, 0x75, 0x0a, 0x4c, 0x78, 0xb2, 0x0e,
	0x36, 0x29, 0xaf, 0xd6, 0x70, 0x13, 0x4b, 0x64, 0x19, 0x68, 0x64, 0x19, 0x64, 0xf1, 0x7e, 0x56,
	0xac, 0x35, 0x5c, 0xb3, 0x59, 0x7f, 0x4c, 0x85, 0x9b, 0x8e, 0xf4, 0x28, 0xb5, 0xb9, 0x7d, 0x4c,
	0x0c, 0xa2, 0x99, 0x68, 0xb6, 0x51, 0x6b, 0xd2, 0xc5, 0xe4, 0xd4, 0x9a, 0x95, 0x0e, 0x31, 0xee,
	0x13, 0xcf, 0x44, 0x2e, 0xab, 0x9f, 0x19, 0x04, 0xe7, 0xbb, 0x99, 0x46, 0xad, 0x49, 0xd6, 0x54,
	0xc6, 0xc7, 0xd4, 0x9e, 0x47, 0x33, 0x98, 0x4f, 0xad, 0x6e, 0x2d, 0x38, 0x67, 0x27, 0x9e, 0xe5,
	0xca, 0xf7, 0x67, 0x05, 0x43, 0xb8, 0xe9, 0x15, 0x18, 0x20, 0x39, 0x41, 0x6b, 0xc7, 0xd1, 0x50,
	0xbb, 0xd5, 0xaa, 0x27, 0xce, 0x70, 0x29, 0xfa, 0xe8, 0x00, 0x90, 0x22, 0xf2, 0x11, 0xdb, 0x1a,
	0x12, 0xf9, 0xb3, 0x9c, 0xfc, 0x27, 0x21, 0xf9, 0xc9, 0xb6, 0x40, 0x7c, 0x15, 0x8d, 0xb7, 0x7b,
	0x1e, 0xd6, 0x42, 0x95, 0x72, 0xbd, 0x9e, 0x78, 0x4e, 0x5c, 0x44, 0x85, 0x9e, 0x67, 0x76, 0x52,
	0xe5, 0x7a, 0x9d, 0x2f, 0xa2, 0x9f, 0xd9, 0x03, 0x68, 0x8d, 0xb5, 0xfd, 0xef, 0xda, 0x0b, 0x68,
	0xaa, 0xeb, 0x56, 0x9c, 0x72, 0x1d, 0x1f, 0x94, 0x88, 0x58, 0x9e, 0x23, 0xd2, 0x30, 0x0b, 0x14,
	0xa4, 0x5e, 0xf7, 0x32, 0xe9, 0x40, 0x34, 0xb1, 0x7e, 0xc7, 0x3f, 0x55, 0xb1, 0x78, 0x16, 0xd1,
	0x34, 0xd7, 0xaf, 0x58, 0xcb, 0xf5, 0xba, 0x89, 0xf3, 0xa2, 0x7b, 0xc3, 0xd7, 0xb0, 0x36, 0xf9,
	0xca, 0x3b, 0xf4, 0x6f, 0xe0, 0x8a, 0x9a, 0xea, 0x0a, 0x40, 0x98, 0xef, 0x01, 0xd5, 0xde, 0x7d,
	0xba, 0x1a, 0x2f, 0x70, 0x3e, 0xfe, 0x2d, 0xe4, 0x23, 0x6f, 0xdf, 0xee, 0xdd, 0x27, 0x6b, 0xf2,
	0x05, 0x34, 0x4b, 0x14, 0x93, 0xeb, 0xe0, 0x83, 0x7e, 0xdb, 0x6d, 0x3a, 0x5b, 0xf5, 0xf2, 0x76,
	0xe2, 0x22, 0x47, 0xff, 0x29, 0xd8, 0x74, 0x9c, 0xc2, 0x9a, 0x4d, 0xb3, 0xed, 0x36, 0x57, 0xeb,
	0xe5, 0x6d, 0xbc, 0xdf, 0x32, 0xad, 0xcc, 0x8f, 0xba, 0xcb, 0xc1, 0x14, 0xc2, 0xa3, 0xee, 0x14,
	0x85, 0xe3, 0xe7, 0xdc, 0x2c, 0x9a, 0x61, 0x98, 0xe0, 0xf4, 0x72, 0x29, 0x52, 0xfa, 0x3e, 0x01,
	0xa5, 0x2f, 0x4e, 0x31, 0xc1, 0xd9, 0x25, 0xd8, 0x1d, 0xa8, 0x9b, 0xe2, 0x72, 0x24, 0xa1, 0x9f,
	0x86, 0x84, 0xd8, 0xee, 0x40, 0x9d, 0x13, 0x2b, 0x68, 0x0c, 0x2f, 0x29, 0xa7, 0xd7, 0xac, 0x79,
	0x89, 0x2b, 0xa2, 0xc7, 0x0d, 0x2f, 0x99, 0x52, 0xb3, 0x16, 0x98, 0x55, 0xbf, 0x07, 0xf9, 0x32,
	0xea, 0xb1, 0xcf, 0x9a, 0x85, 0xa6, 0x31, 0x3a, 0xde, 0xe5, 0x1a, 0x6e, 0xb9, 0xdb, 0xeb, 0xb8,
	0x89, 0xab, 0xa2, 0xc3, 0x0c, 0x83, 0x99, 0x5b, 0x39, 0xfa, 0x91, 0x93, 0xfb, 0x5d, 0xe1, 0x84,
	0xde, 0x83, 0x30, 0xda, 0x0d, 0x34, 0x56, 0x29, 0xb7, 0xd9, 0xb6, 0x77, 0x2d, 0x72, 0x60, 0xdf,
	0x35, 0xc4, 0xb7, 0xbd, 0x51, 0x6b, 0xb4, 0x52, 0x6e, 0xd3, 0x3d, 0xef, 0x0e, 0x9a, 0x72, 0x1f,
	0xb9, 0x9d, 0x4a, 0xad, 0xeb, 0x3a, 0x5d, 0xef, 0x71, 0xdd, 0x4d, 0x5c, 0x17, 0x3b, 0x64, 0xb0,
	0xaf, 0x36, 0xfe, 0xc8, 0x3b, 0xf4, 0xed, 0x43, 0x7c, 0x0d, 0x8c, 0x5a, 0x93, 0x2e, 0x84, 0xd1,
	0x5e, 0x46, 0xc9, 0xad, 0xba, 0xfb, 0xc8, 0x61, 0xc6, 0xa4, 0xe3, 0xd6, 0x6b, 0xdb, 0xb5, 0xfb,
	0xb5, 0x3a, 0x31, 0x4a, 0x9a, 0xd5, 0x5a, 0xa5, 0x8c, 0x0f, 0x12, 0xcf, 0x1f, 0x8d, 0x9d, 0x1a,
	0x25, 0xb4, 0x7e, 0x9d, 0xd2, 0x1a, 0x25, 0xb4, 0x8e, 0x60, 0x54, 0xdf, 0x48, 0x0d, 0x10, 0x33,
	0x3e, 0x9e, 0xf6, 0x02, 0xd2, 0x30, 0x48, 0xed, 0x7e, 0xdd, 0x05, 0xd4, 0x6e, 0x70, 0x6a, 0xbf,
	0x01, 0xa9, 0xcd, 0xf8, 0xa0, 0x01, 0xfe, 0x8b, 0x68, 0x7c, 0xab, 0xde, 0x22, 0x26, 0x07, 0x66,
	0xd8, 0xcd, 0x48, 0x86, 0x7d, 0x37, 0x64, 0x18, 0x22, 0x38, 0x94, 0x65, 0xeb, 0x68, 0xbc, 0x5e,
	0xeb, 0xf2, 0x8d, 0xe3, 0x05, 0xc2, 0xaf, 0x05, 0x9f, 0x5f, 0xd9, 0x5a, 0x97, 0x6d, 0x11, 0x9c,
	0x59, 0xdf, 0x09, 0x99, 0x85, 0xea, 0x1c, 0x40, 0x7b, 0x19, 0x2d, 0x2a, 0x94, 0xac, 0x53, 0x6e,
	0xe0, 0xe3, 0x73, 0xe2, 0x56, 0x64, 0xd7, 0xde, 0x37, 0xc4, 0x1d, 0xb2, 0xa3, 0xd6, 0xbe, 0x90,
	0xae, 0xd5, 0x09, 0xbe, 0x76, 0x1b, 0xcd, 0xe0, 0xa3, 0x43, 0xbb, 0xfc, 0xb8, 0xd5, 0xe3, 0x44,
	0x5f, 0x8c, 0x24, 0xfa, 0x1d, 0x90, 0xe8, 0x74, 0xab, 0xed, 0x15, 0x08, 0x22, 0x23, 0xf6, 0x6e,
	0xa4, 0xd1, 0x6e, 0xbe, 0xde, 0x6b, 0x79, 0xae, 0x3f, 0x76, 0x5d, 0xb4, 0x2c, 0x49, 0x37, 0xee,
	0x60, 0x00, 0x89, 0x03, 0x6f, 0x0f, 0x71, 0xf9, 0x1d, 0xb5, 0xe2, 0x6d, 0x09, 0x4c, 0xbb, 0x8f,
	0xe6, 0x29, 0x71, 0x79, 0x71, 0xac, 0x88, 0xde, 0x51, 0x42, 0x5f, 0xbd, 0x42, 0xbe, 0x15, 0xb6,
	0x40, 0xbb, 0x2a, 0x00, 0x6a, 0x9b, 0x68, 0xbf, 0xb2, 0x0d, 0xe7, 0x75, 0xef, 0x71, 0x22, 0x15,
	0xc9, 0x95, 0x0f, 0x53, 0xba, 0xd3, 0x84, 0xee, 0x7c, 0x98, 0xee, 0x1d, 0xef, 0x31, 0xd6, 0x72,
	0xbe, 0xac, 0x57, 0x5a, 0x8d, 0x76, 0xdd, 0x7d, 0x94, 0x48, 0x73, 0x2d, 0xf7, 0xb3, 0xb0, 0x63,
	0x53, 0x0c, 0x2e, 0x45, 0xc1, 0xf0, 0x96, 0xc5, 0x95, 0xf3, 0x76, 0xa7, 0xd5, 0x6b, 0x27, 0x0c,
	0x8e, 0xf8, 0xb9, 0x10, 0x91, 0x5b, 0xde, 0x6b, 0x18, 0x4a, 0xbb, 0x81, 0xb8, 0x29, 0xed, 0x3c,
	0x6a, 0xd4, 0x13, 0xab, 0xa4, 0xff, 0xb3, 0xf2, 0x3e, 0x71, 0x2f, 0x97, 0x5d, 0xa1, 0x52, 0xc7,
	0x0f, 0x12, 0xf7, 0x1a, 0x75, 0xed, 0x36, 0xc6, 0x26, 0xe6, 0x26, 0x9d, 0xc5, 0x35, 0xc2, 0xe5,
	0x7d, 0x01, 0x36, 0x36, 0x2f, 0xc5, 0x09, 0xfc, 0xb6, 0xc0, 0x26, 0x22, 0xc4, 0x38, 0x84, 0x96,
	0x47, 0xb3, 0x2a, 0x8e, 0xae, 0x47, 0x72, 0xf4, 0x9f, 0x40, 0x8e, 0xc6, 0x7b, 0x32, 0x33, 0x37,
	0x50, 0x1c, 0xeb, 0x68, 0xea, 0x4a, 0x63, 0x1d, 0xcc, 0x88, 0xce, 0xb4, 0xbb, 0xfe, 0x77, 0xa9,
	0x93, 0x1f, 0x81, 0x1c, 0x9b, 0x7e, 0x28, 0x42, 0x69, 0x2b, 0x68, 0x8a, 0xcd, 0x8e, 0xe3, 0x3e,
	0x74, 0x9b, 0x5e, 0x37, 0xf1, 0x12, 0xd9, 0x9e, 0xe7, 0x41, 0xd8, 0x04, 0x7f, 0x35, 0xc8, 0x47,
	0xc2, 0x37, 0x64, 0x4d, 0x56, 0xe0, 0x8f, 0x9a, 0x87, 0x12, 0x0a, 0xaf, 0x1a, 0xdd, 0x12, 0x6e,
	0x93, 0x4e, 0x26, 0x03, 0x6a, 0xb2, 0x07, 0x8d, 0x6f, 0x10, 0x0b, 0xd8, 0xb2, 0x1f, 0xe6, 0x3a,
	0x01, 0x7d, 0xec, 0xed, 0x03, 0x85, 0x3d, 0x7b, 0xf6, 0x58, 0x0b, 0x15, 0x25, 0x8e, 0x56, 0xc5,
	0x2a, 0xaf, 0xf5, 0x86, 0xd3, 0xad, 0x3c, 0x70, 0xab, 0xbd, 0x3a, 0x8b, 0x1c, 0x64, 0xc5, 0xb5,
	0xb7, 0x5a, 0x6f, 0xbd, 0x61, 0x33, 0x00, 0x7e, 0x02, 0xc3, 0x2d, 0x7d, 0x63, 0xb8, 0xa5, 0xf5,
	0x98, 0x15, 0xdf, 0x92, 0xe0, 0x35, 0x17, 0xab, 0x6d, 0xb9, 0x95, 0xd0, 0x49, 0x20, 0x47, 0x4e,
	0x02, 0x80, 0xee, 0x41, 0x91, 0xee, 0x11, 0x99, 0xae, 0x7c, 0x2e, 0xb8, 0x83, 0xe2, 0x65, 0xcf,
	0x2b, 0x57, 0x1e, 0x50, 0xbb, 0xb9, 0x55, 0x6b, 0x7a, 0x89, 0xbc, 0x52, 0x58, 0x70, 0x23, 0xdf,
	0x33, 0xcc, 0x4f, 0xf3, 0xb8, 0x11, 0x1b, 0xb3, 0x69, 0x3a, 0xc0, 0x2f, 0x60, 0x74, 0x4c, 0xb2,
	0xea, 0x4a, 0x24, 0xcd, 0x48, 0x92, 0xdf, 0xab, 0x22, 0x19, 0xe0, 0x53, 0x92, 0x4d, 0x74, 0xa4,
	0xd9, 0xc2, 0xc2, 0x53, 0xae, 0x3b, 0x6d, 0xb7, 0x53, 0x71, 0x9b, 0x5e, 0x79, 0xdb, 0x75, 0x5a,
	0x3d, 0xaf, 0xeb, 0x95, 0x9b, 0xd5, 0x5a, 0x73, 0x3b, 0x51, 0x88, 0x6c, 0xe1, 0x3b, 0x14, 0x2d,
	0x1c, 0xf2, 0xc9, 0x15, 0x38, 0x35, 0x33, 0x20, 0xa6, 0x7d, 0x2e, 0x3a, 0xd5, 0xea, 0xd4, 0xb6,
	0x6b, 0xb8, 0xbd, 0x9d, 0x1a, 0xbe, 0x13, 0xd9, 0xf0, 0xdb, 0x8a, 0x86, 0x4f, 0xfa, 0x74, 0xf3,
	0x7d, 0x3b, 0x50, 0x45, 0x1a, 0x3e, 0x4c, 0x74, 0x7a, 0x15, 0x7c, 0x08, 0x68, 0xb2, 0x53, 0x9b,
	0x45, 0x64, 0xec, 0x90, 0x2f, 0x63, 0x16, 0x84, 0x10, 0x84, 0xec, 0xdb, 0x86, 0xf9, 0xd2, 0xe3,
	0x2d, 0xcf, 0x74, 0x64, 0x70, 0xed, 0x36, 0x1a, 0xeb, 0xba, 0xcd, 0x5a, 0x0b, 0x6b, 0xa2, 0x84,
	0x2d, 0x9d, 0x9b, 0xfd, 0x0f, 0x9c, 0xe8, 0xb7, 0x2b, 0x88, 0x06, 0xf8, 0xda, 0x26, 0x9a, 0x06,
	0xfb, 0x1b, 0xe9, 0x6f, 0x51, 0xb4, 0x5d, 0x4c, 0x7f, 0x13, 0x13, 0xfa, 0xfa, 0x49, 0x71, 0x41,
	0xbc, 0x8c, 0xc9, 0x4e, 0xb6, 0x20, 0xa8, 0xf6, 0x39, 0xe8, 0x20, 0xf4, 0x26, 0x38, 0xf7, 0x5b,
	0xbd, 0x66, 0xb5, 0xdc, 0x79, 0xec, 0x2b, 0xa4, 0x12, 0x69, 0xe7, 0x24, 0xef, 0x7a, 0xe0, 0x44,
	0x58, 0x61, 0x90, 0x40, 0x35, 0xe1, 0x36, 0x3f, 0xa1, 0x68, 0x73, 0x7f, 0x37, 0x0a, 0x4d, 0x6b,
	0xa0, 0x23, 0xea, 0xf6, 0xdb, 0x1d, 0xb7, 0x52, 0x23, 0xe1, 0xda, 0xbb, 0x91, 0x52, 0xf0, 0xd3,
	0xa2, 0x14, 0x90, 0xb6, 0x0e, 0x2a, 0xda, 0x2a, 0xf8, 0xb4, 0xb4, 0x2f, 0x8b, 0xa1, 0x63, 0x42,
	0x7b, 0x55, 0x17, 0x06, 0x34, 0xd8, 0xa0, 0x37, 0xc8, 0xa0, 0x97, 0x14, 0x83, 0x4e, 0x43, 0x70,
	0x69, 0xe4, 0x3f, 0x15, 0x1e, 0xf9, 0xfa, 0x80, 0x75, 0xb8, 0xdb, 0x17, 0x5b, 0xfb, 0xbc, 0x18,
	0x3a, 0xbf, 0x63, 0x8f, 0x42, 0xca, 0xe9, 0x1e, 0x57, 0x4e, 0x3f, 0x25, 0x2a, 0x27, 0xd6, 0xea,
	0x99, 0xfe, 0xad, 0xca, 0xaa, 0xea, 0x7f, 0x8e, 0xa1, 0x93, 0xbd, 0x66, 0xd5, 0xed, 0xd4, 0x1f,
	0xe3, 0x15, 0xd1, 0x87, 0x35, 0x9b, 0x84, 0x35, 0x67, 0x03, 0x23, 0xde, 0x47, 0xda, 0x91, 0x3d,
	0x3f, 0xa3, 0x10, 0x8c, 0x64, 0x6f, 0x47, 0xfc, 0x15, 0x0d, 0xc5, 0x81, 0xbf, 0xa6, 0xd7, 0xac,
	0xb5, 0x9a, 0x2b, 0x8b, 0x28, 0xa1, 0xd0, 0xe0, 0xf4, 0xdb, 0x69, 0xf4, 0xf4, 0xce, 0xfc, 0x24,
	0xa0, 0xc9, 0xff, 0x10, 0x43, 0xb3, 0x81, 0xe3, 0xc2, 0x78, 0xe4, 0xb9, 0x4d, 0x22, 0x25, 0x17,
	0xd1, 0x58, 0xd9, 0xf3, 0x3a, 0xf7, 0xc9, 0xd1, 0x36, 0x46, 0xf6, 0xce, 0xb8, 0x3f, 0x62, 0x1d,
	0x7f, 0x08, 0xce, 0xb5, 0xa3, 0x65, 0xf6, 0xb7, 0x10, 0x0b, 0xdc, 0x6a, 0x75, 0x1a, 0x2c, 0xaa,
	0x1e, 0x8a, 0x05, 0xae, 0xb6, 0x3a, 0x81, 0x9b, 0xea, 0xeb, 0x06, 0x54, 0xb1, 0x40, 0x0c, 0xa2,
	0xdd, 0x42, 0xe3, 0xed, 0x8a, 0xe7, 0x94, 0x3d, 0xa7, 0x53, 0xeb, 0xbe, 0xd6, 0x27, 0x69, 0xc1,
	0x85, 0xe1, 0xbd, 0xb1, 0x76, 0xc5, 0xd3, 0x3d, 0xab, 0xd6, 0x7d, 0x2d, 0xf9, 0x25, 0x47, 0xd1,
	0x64, 0x30, 0xba, 0xac, 0xbb, 0x0d, 0x83, 0x35, 0x75, 0x77, 0xdb, 0x0f, 0xf4, 0x04, 0x01, 0xb6,
	0xd7, 0x06, 0x40, 0xa8, 0xc5, 0x0f, 0xd6, 0x64, 0xdd, 0x6d, 0x16, 0xeb, 0x49, 0xa3, 0x85, 0x30,
	0x3a, 0x09, 0xb2, 0x0c, 0x70, 0xf7, 0xc3, 0xab, 0x03, 0x20, 0xc8, 0x32, 0x2b, 0x93, 0xc8, 0xba,
	0x4d, 0x18, 0xad, 0xc1, 0x54, 0x44, 0x5f, 0x73, 0x10, 0x66, 0x6b, 0xc2, 0xbe, 0x2c, 0x04, 0x84,
	0x84, 0xc8, 0xcf, 0x1d, 0x74, 0x28, 0x92, 0x16, 0xe9, 0xd8, 0x10, 0xef, 0x58, 0x03, 0x76, 0x6c,
	0xbf, 0x9a, 0x1e, 0xee, 0xde, 0x79, 0x34, 0x81, 0x49, 0xf1, 0xf0, 0xe3, 0x30, 0xef, 0xd1, 0x7b,
	0x61, 0x14, 0x07, 0xd5, 0xdd, 0xed, 0x14, 0x8b, 0x40, 0x6e, 0xa0, 0x7d, 0x04, 0x45, 0x11, 0x85,
	0xdc, 0x1b, 0x39, 0x6b, 0x5b, 0x03, 0x20, 0x88, 0x34, 0x8f, 0xa9, 0x85, 0x03, 0x91, 0x2f, 0xa2,
	0x39, 0x4a, 0x58, 0x0a, 0x46, 0x06, 0xa1, 0xb9, 0xe2, 0x00, 0x08, 0x46, 0xce, 0x10, 0x2a, 0x42,
	0x3c, 0x72, 0xd5, 0xef, 0x5a, 0x38, 0x26, 0x19, 0x44, 0x7b, 0xff, 0x3b, 0x0c, 0x73, 0xcc, 0x51,
	0x22, 0x52, 0x58, 0x72, 0x0d, 0x4d, 0x03, 0x3a, 0x24, 0x30, 0x31, 0x16, 0x39, 0xb4, 0xed, 0x01,
	0x10, 0x98, 0x98, 0xe4, 0xf4, 0x48, 0x5c, 0xe2, 0x79, 0x34, 0x43, 0x08, 0x09, 0x11, 0x4a, 0xc4,
	0xc7, 0x13, 0x83, 0x1e, 0x70, 0xdc, 0x64, 0x0a, 0x06, 0x29, 0x5f, 0x40, 0x98, 0xed, 0xce, 0x8e,
	0x01, 0xba, 0x7f, 0x80, 0x01, 0xba, 0xb1, 0xba, 0xbb, 0xbd, 0x4a, 0x63, 0x74, 0x37, 0x91, 0x46,
	0x04, 0x37, 0x2a, 0x4e, 0xb7, 0x01, 0x67, 0x38, 0x5e, 0x77, 0xb7, 0x33, 0x42, 0xa8, 0xee, 0x12,
	0x9a, 0xe2, 0x72, 0x2f, 0x87, 0xeb, 0xfe, 0x06, 0xf2, 0x10, 0x4b, 0x50, 0x86, 0x47, 0xec, 0xce,
	0xd2, 0x5e, 0x87, 0xa2, 0x76, 0x35, 0xd8, 0xda, 0x58, 0x9d, 0x2f, 0xb3, 0x17, 0xd0, 0x2c, 0x86,
	0x8f, 0x0e, 0xde, 0xdd, 0x95, 0xbb, 0x99, 0x15, 0xe2, 0x77, 0x8c, 0xc5, 0x51, 0x31, 0xbc, 0x0a,
	0x8c, 0xe1, 0x61, 0x16, 0xe7, 0x60, 0x18, 0x8f, 0x09, 0x4c, 0xff, 0x50, 0xde, 0xfd, 0x01, 0x10,
	0xca, 0x9b, 0x03, 0x24, 0x82, 0x68, 0x1e, 0xeb, 0x44, 0x54, 0x44, 0xcf, 0x1d, 0x00, 0x11, 0x3d,
	0xdc, 0x09, 0x13, 0x06, 0xf5, 0xd6, 0xd1, 0x38, 0x46, 0x16, 0x03, 0x7b, 0x81, 0xdf, 0xc1, 0xdd,
	0x96, 0x63, 0x7b, 0xce, 0x00, 0x08, 0x68, 0x61, 0x6e, 0x33, 0x00, 0x2d, 0x85, 0xb0, 0xfc, 0xd1,
	0x0c, 0x09, 0x72, 0x5a, 0x9b, 0x8b, 0x14, 0x9a, 0x16, 0x5c, 0x90, 0xb8, 0x7d, 0x92, 0x22, 0x81,
	0x0f, 0x6a, 0xb7, 0xe8, 0x84, 0xc8, 0x71, 0xc2, 0x79, 0xce, 0x8f, 0x7f, 0x14, 0x82, 0xfa, 0x18,
	0x55, 0x0c, 0x15, 0x6e, 0xa2, 0x63, 0x94, 0x40, 0xbf, 0x70, 0xe1, 0x42, 0xe0, 0xa9, 0x84, 0x51,
	0x94, 0x43, 0x84, 0x5c, 0x64, 0xc4, 0xd0, 0xf4, 0xfb, 0x26, 0x46, 0x0d, 0xf7, 0x45, 0x0e, 0xf3,
	0xef, 0x61, 0xd4, 0x90, 0xf6, 0x55, 0x08, 0x1c, 0xde, 0x0a, 0x11, 0x24, 0xc1, 0xc3, 0x04, 0x57,
	0xa4, 0x7f, 0x07, 0x83, 0x87, 0x22, 0x01, 0x12, 0x3f, 0x64, 0x33, 0x2f, 0xea, 0xf5, 0x20, 0x12,
	0x58, 0x1f, 0x90, 0x56, 0xb8, 0xa0, 0xd0, 0x53, 0x68, 0x5e, 0x40, 0xe6, 0xa1, 0xc4, 0x20, 0x24,
	0xf8, 0x60, 0x00, 0x84, 0x12, 0x67, 0x01, 0x01, 0x1e, 0x4d, 0xbc, 0x42, 0x95, 0x15, 0x8c, 0x28,
	0x1e, 0xe0, 0xe8, 0xef, 0x12, 0x62, 0xf1, 0x00, 0x3d, 0x53, 0xd5, 0x5c, 0xb4, 0x20, 0x21, 0xfa,
	0x81, 0xc5, 0x83, 0x62, 0x86, 0x1c, 0xd8, 0x37, 0x42, 0xb1, 0xc5, 0x77, 0xc3, 0x06, 0x66, 0x85,
	0x06, 0x58, 0x78, 0xf1, 0x9e, 0xc4, 0x21, 0x32, 0xfd, 0x87, 0xc4, 0x93, 0x3f, 0x68, 0x41, 0x88,
	0x32, 0x96, 0xa3, 0xd8, 0xc7, 0xf2, 0x1c, 0x47, 0x09, 0xe5, 0x5a, 0x95, 0xc6, 0x05, 0x41, 0x38,
	0x1c, 0x13, 0xac, 0x55, 0x03, 0x42, 0x6d, 0xb8, 0x02, 0x47, 0xea, 0xf4, 0xab, 0x66, 0xa1, 0xc3,
	0x84, 0x40, 0x74, 0xb4, 0x32, 0x08, 0x18, 0x96, 0x60, 0x57, 0xf6, 0x63, 0x0a, 0xea, 0x80, 0x65,
	0x06, 0xc5, 0x29, 0x4d, 0x10, 0xb4, 0x3c, 0x1a, 0x29, 0x9f, 0xd5, 0x01, 0x10, 0xb4, 0x9c, 0x22,
	0x54, 0x83, 0xb8, 0x25, 0x53, 0xa5, 0x2c, 0x76, 0x79, 0x8c, 0x77, 0xe5, 0x9e, 0xac, 0x4a, 0x69,
	0x68, 0x52, 0x33, 0xa9, 0xc6, 0x06, 0x21, 0xcc, 0xa4, 0x68, 0x94, 0x65, 0x7d, 0x50, 0x18, 0xc5,
	0xdc, 0x84, 0xd4, 0x26, 0xea, 0x00, 0x44, 0x5b, 0x47, 0x09, 0x61, 0xab, 0x87, 0xc1, 0xcc, 0xe3,
	0x5c, 0x1f, 0xfc, 0xc8, 0x20, 0x08, 0x66, 0xc2, 0xbd, 0x1d, 0xc4, 0x33, 0x2f, 0x30, 0x3b, 0xc3,
	0x8f, 0x16, 0x04, 0x61, 0xc3, 0x67, 0x07, 0x40, 0xb4, 0x00, 0x2b, 0x22, 0x1e, 0x2a, 0x60, 0x1b,
	0x90, 0x32, 0x78, 0xf8, 0x3b, 0x03, 0x20, 0x64, 0x86, 0x49, 0xa7, 0x79, 0xfc, 0xf0, 0x25, 0xb4,
	0x9f, 0x6e, 0x7b, 0xaa, 0xa0, 0xdb, 0x53, 0x9c, 0xc2, 0x8f, 0xc2, 0xa0, 0xdb, 0x02, 0xd9, 0xfd,
	0xc2, 0x71, 0x37, 0x36, 0x99, 0x2d, 0xaa, 0x07, 0x69, 0xe6, 0xd9, 0xd3, 0x91, 0x93, 0xf9, 0x37,
	0x30, 0xc6, 0x30, 0x45, 0xd5, 0x7c, 0xad, 0xc5, 0x92, 0xcf, 0x96, 0xa8, 0xb0, 0x92, 0x70, 0xd7,
	0x29, 0x3e, 0xfa, 0xdf, 0x85, 0x61, 0x1a, 0x2c, 0x97, 0x85, 0x56, 0xab, 0xae, 0xdd, 0x40, 0x63,
	0x74, 0x47, 0xc0, 0xc2, 0x73, 0x3a, 0xb2, 0xbd, 0xcb, 0x81, 0xf0, 0x8c, 0x58, 0xa3, 0x64, 0x1f,
	0xa0, 0x7e, 0x6c, 0x8d, 0x2d, 0x38, 0x18, 0xb3, 0x5a, 0x22, 0x86, 0xfd, 0x82, 0xb8, 0xe2, 0xa4,
	0xb0, 0xd5, 0x54, 0x9d, 0xff, 0x4a, 0x22, 0x57, 0x2b, 0x92, 0x7e, 0xe2, 0x71, 0xa6, 0x67, 0xf8,
	0x00, 0xfe, 0x1e, 0x0e, 0x40, 0x03, 0x2b, 0xd4, 0x0f, 0x35, 0x31, 0x0d, 0x2b, 0x87, 0x8b, 0x9e,
	0xe5, 0x14, 0xbe, 0x53, 0xc8, 0x8c, 0xe4, 0x4b, 0x00, 0x44, 0x8c, 0xc8, 0xa6, 0x16, 0xc4, 0x68,
	0xce, 0x88, 0x6e, 0xcd, 0xac, 0xbb, 0x1d, 0x0a, 0xd3, 0xfc, 0xa1, 0x90, 0xc3, 0x58, 0x0f, 0x20,
	0xb4, 0x97, 0x69, 0x77, 0x64, 0x87, 0xf4, 0x59, 0xd1, 0xe9, 0x96, 0x75, 0xb7, 0xd5, 0xee, 0xe8,
	0xdf, 0x17, 0xe2, 0x62, 0x75, 0x09, 0x4c, 0x7b, 0x37, 0x65, 0xbd, 0x14, 0x79, 0x79, 0x2e, 0x44,
	0x5c, 0x1d, 0x7c, 0xf9, 0xe2, 0x61, 0x10, 0x4f, 0xc0, 0xc4, 0x05, 0x30, 0xcd, 0x94, 0x2c, 0x1d,
	0x12, 0x08, 0x3e, 0xd7, 0x37, 0x10, 0xfc, 0xa3, 0x41, 0x20, 0x78, 0x54, 0xb0, 0x7e, 0x48, 0x2c,
	0xb8, 0x4e, 0x57, 0x8a, 0xda, 0x45, 0x4f, 0x43, 0x94, 0xc7, 0x04, 0x33, 0x24, 0xd2, 0x4b, 0xff,
	0x25, 0xc3, 0xc0, 0x43, 0x3b, 0x5f, 0x57, 0xc1, 0x6a, 0xef, 0x45, 0x87, 0x22, 0x5b, 0x23, 0xc6,
	0xca, 0x85, 0x48, 0x41, 0xff, 0xd2, 0x61, 0xe0, 0x5a, 0x4e, 0x28, 0xc9, 0x63, 0xcb, 0xe5, 0x32,
	0xdd, 0x09, 0x61, 0xd0, 0xf7, 0x22, 0xdf, 0xc8, 0xf3, 0x90, 0xb9, 0x58, 0x63, 0xf0, 0x00, 0xb0,
	0x56, 0xa2, 0x56, 0xa0, 0xaa, 0x4f, 0xcb, 0xd1, 0x01, 0x45, 0xe8, 0xee, 0x9e, 0x95, 0x25, 0x01,
	0x77, 0xe7, 0x73, 0xd0, 0xc1, 0x88, 0x83, 0x12, 0x95, 0xe3, 0x4b, 0xa2, 0xb3, 0x29, 0xab, 0x3a,
	0x14, 0x09, 0xbe, 0xe5, 0xaf, 0x53, 0xf8, 0x96, 0xf7, 0xd7, 0xa3, 0xd0, 0xb4, 0x26, 0xdd, 0xdf,
	0x15, 0x2e, 0xe6, 0xcb, 0xa1, 0xfd, 0x3d, 0xd2, 0xcb, 0xfc, 0x41, 0x85, 0x97, 0x79, 0x0f, 0x19,
	0xaf, 0x8c, 0xa2, 0xd5, 0xd1, 0x53, 0xea, 0xf6, 0x42, 0xfe, 0x9c, 0x2b, 0xdc, 0x9f, 0xf3, 0x41,
	0x85, 0xb3, 0x79, 0x8f, 0x95, 0x54, 0x90, 0x97, 0x9c, 0x38, 0x2b, 0x87, 0x29, 0x77, 0xa3, 0x1c,
	0x23, 0xc9, 0x1f, 0x1b, 0x44, 0xf3, 0x59, 0x77, 0x7b, 0xc5, 0x6d, 0x56, 0x1e, 0x34, 0xca, 0x9d,
	0xd7, 0x52, 0xbd, 0xce, 0x43, 0x97, 0x14, 0x66, 0x14, 0x28, 0xe6, 0x7d, 0xff, 0x0b, 0x56, 0x4a,
	0x0f, 0x5d, 0x55, 0xd2, 0xf6, 0x37, 0xc3, 0xbd, 0x09, 0x73, 0x5a, 0xa4, 0xc6, 0x55, 0xd4, 0x6b,
	0x74, 0x9f, 0x94, 0x29, 0x36, 0xcb, 0x0d, 0xbf, 0xda, 0x00, 0xae, 0x23, 0x91, 0x48, 0xbe, 0xdc,
	0x08, 0xd6, 0xd1, 0xb7, 0x40, 0x6d, 0x3a, 0x5f, 0x57, 0xc1, 0xfa, 0xfb, 0x9b, 0xdc, 0x18, 0x75,
	0x8f, 0x07, 0x1e, 0x85, 0x7f, 0x09, 0x49, 0x2d, 0x84, 0x48, 0x51, 0x77, 0x38, 0xb3, 0xa7, 0x03,
	0x5a, 0x74, 0xcb, 0x19, 0x8a, 0x94, 0xfa, 0x6f, 0x85, 0x5b, 0xce, 0x0c, 0xa4, 0xea, 0xef, 0x3d,
	0x09, 0x05, 0xc1, 0x20, 0x5b, 0x9c, 0xae, 0xc5, 0x0f, 0x43, 0x3f, 0xd0, 0x7c, 0x88, 0x0a, 0xc9,
	0x91, 0xfe, 0xa1, 0x18, 0x9a, 0xc6, 0x9b, 0x94, 0x57, 0x6b, 0xf7, 0xea, 0x65, 0x5a, 0x28, 0x52,
	0xa6, 0x1e, 0x82, 0x6e, 0xf0, 0x1b, 0xa5, 0x1c, 0x13, 0xc3, 0x89, 0x22, 0x9a, 0x60, 0x50, 0x7e,
	0x77, 0x68, 0xbb, 0x12, 0x01, 0xb9, 0x49, 0x0e, 0x9a, 0xa0, 0xa9, 0x05, 0x03, 0x9c, 0xb3, 0xdf,
	0x03, 0x69, 0xcc, 0x8a, 0x34, 0x48, 0x4a, 0x41, 0xf2, 0x17, 0x07, 0xd0, 0x64, 0xde, 0xed, 0x7a,
	0x6e, 0xd5, 0xcf, 0x02, 0xba, 0x82, 0xa6, 0x9b, 0xe4, 0x07, 0x92, 0x51, 0x44, 0x8c, 0xf4, 0x40,
	0xcc, 0x26, 0x04, 0x23, 0xbd, 0xc9, 0x11, 0x99, 0x91, 0x2e, 0x21, 0xfa, 0x46, 0xba, 0x54, 0xc6,
	0x92, 0x07, 0x68, 0xb2, 0x91, 0x3e, 0x09, 0xad, 0xdf, 0x59, 0xa1, 0x81, 0xc0, 0x48, 0x17, 0x9a,
	0xe9, 0xb4, 0xea, 0x7e, 0x0d, 0xcb, 0x01, 0x45, 0x0b, 0x56, 0x0b, 0x6c, 0x5b, 0x8b, 0xf0, 0x38,
	0x3a, 0xdd, 0x14, 0xa1, 0xb4, 0x35, 0x34, 0xd3, 0xec, 0x7a, 0x55, 0xa7, 0xed, 0x3d, 0xee, 0x12,
	0x03, 0x02, 0x1b, 0x23, 0x43, 0xa2, 0x31, 0x92, 0xef, 0x7a, 0xd5, 0x82, 0xf7, 0xb8, 0x6b, 0xf7,
	0x80, 0xaf, 0x71, 0xaa, 0x29, 0xfc, 0x9a, 0xfc, 0xfc, 0x41, 0x34, 0x61, 0x76, 0xaa, 0x6e, 0xe7,
	0x0e, 0x39, 0xbc, 0x97, 0x35, 0x03, 0x4d, 0x55, 0xca, 0xdd, 0x07, 0x4e, 0x0b, 0xff, 0x48, 0xb4,
	0x75, 0x2c, 0x52, 0x6e, 0xbf, 0x76, 0x0f, 0xd7, 0xd6, 0x7b, 0xad, 0x09, 0x8c, 0xe6, 0x93, 0xd2,
	0xd2, 0x68, 0x92, 0x52, 0x60, 0x61, 0x99, 0x3e, 0xb9, 0xf4, 0x43, 0xd0, 0xd5, 0x33, 0x41, 0xb0,
	0x58, 0xd4, 0x05, 0x9b, 0x6c, 0x41, 0x3f, 0xa2, 0xbd, 0x97, 0x4f, 0xc1, 0x7e, 0x8c, 0xb6, 0xfc,
	0x3e, 0xbc, 0x82, 0x34, 0x52, 0x15, 0x53, 0x6b, 0x6e, 0x83, 0xc2, 0x98, 0x21, 0x29, 0x4a, 0xc3,
	0x20, 0xc2, 0x15, 0x31, 0xbf, 0x0c, 0xeb, 0xae, 0x66, 0x3a, 0x32, 0x9c, 0xf6, 0x12, 0x8a, 0x73,
	0xf2, 0x8d, 0x56, 0xb5, 0x87, 0x75, 0x70, 0x74, 0xae, 0xfd, 0xaf, 0xc4, 0x80, 0x6b, 0x60, 0xda,
	0x47, 0xcc, 0x51, 0xbc, 0xe4, 0x17, 0x0f, 0xa0, 0x11, 0x5f, 0xaa, 0x97, 0xd0, 0xa8, 0x42, 0x9c,
	0x7f, 0x5c, 0x28, 0x5c, 0x68, 0x33, 0x41, 0xb6, 0xd0, 0xb4, 0x5a, 0x82, 0x79, 0x54, 0x47, 0x2d,
	0xbb, 0x1f, 0x17, 0x6a, 0xca, 0xda, 0x82, 0xd4, 0x1a, 0x08, 0x85, 0xc4, 0x75, 0x5e, 0x20, 0x27,
	0x08, 0xea, 0x4f, 0xc2, 0x9c, 0xe8, 0xb1, 0x36, 0x17, 0xd1, 0xeb, 0x68, 0x42, 0x21, 0x9d, 0x1a,
	0x27, 0x24, 0x4b, 0x26, 0x6a, 0x07, 0x52, 0xf9, 0x0b, 0x7b, 0xd1, 0x74, 0x81, 0xb9, 0xce, 0xfc,
	0x7a, 0x36, 0x13, 0x4d, 0xb5, 0xdd, 0x6d, 0x58, 0x72, 0x16, 0x13, 0xcf, 0x61, 0x05, 0x77, 0x3b,
	0x5c, 0x6b, 0x66, 0x08, 0x85, 0x32, 0x6d, 0x00, 0x82, 0x4d, 0x60, 0x4c, 0x30, 0xa8, 0x2e, 0x1b,
	0x10, 0x4d, 0xe0, 0x82, 0xbb, 0x1d, 0x2a, 0x2b, 0x4b, 0x41, 0x72, 0xe3, 0xed, 0x00, 0x82, 0xcc,
	0x04, 0x3e, 0xd4, 0x80, 0x42, 0xb2, 0x41, 0x69, 0x26, 0xdc, 0x6d, 0x45, 0x05, 0x59, 0x5a, 0xcc,
	0xb5, 0x83, 0x30, 0xf8, 0xa0, 0x04, 0x68, 0x52, 0x8d, 0x19, 0xbd, 0x8b, 0xfc, 0xd2, 0x1e, 0x78,
	0x50, 0xe2, 0x94, 0x68, 0x3e, 0x16, 0xe3, 0x9e, 0xb4, 0x71, 0x88, 0xdc, 0xe3, 0xdb, 0x04, 0xef,
	0xdc, 0xea, 0x90, 0xc4, 0x3d, 0x0e, 0xa2, 0xbd, 0x07, 0xcd, 0x62, 0x82, 0xea, 0xb2, 0xb3, 0x43,
	0x80, 0x6a, 0x44, 0xbd, 0xd9, 0x2a, 0x1c, 0xf7, 0x4c, 0x5b, 0x86, 0xd3, 0x56, 0xd0, 0x18, 0xa6,
	0x0f, 0x2b, 0xcc, 0xe6, 0x00, 0x55, 0xb1, 0xb4, 0x6c, 0x1d, 0x12, 0x1b, 0x6d, 0xb3, 0xcf, 0xda,
	0xf3, 0x68, 0xa6, 0x1d, 0x72, 0x23, 0x8d, 0xf2, 0x25, 0x75, 0x7b, 0x08, 0x66, 0xf3, 0xb5, 0x25,
	0x37, 0xd2, 0x15, 0x3a, 0xa1, 0xd0, 0x03, 0x14, 0x14, 0x94, 0x64, 0x20, 0xea, 0x64, 0x5b, 0xf6,
	0x00, 0xb5, 0xd5, 0x1e, 0x20, 0x24, 0x6e, 0x2e, 0x85, 0x3e, 0x1e, 0xa0, 0x75, 0xd8, 0xc0, 0x6c,
	0x5b, 0xe1, 0x01, 0x3a, 0x8b, 0x50, 0x3b, 0xf0, 0x63, 0x8c, 0xf3, 0xae, 0xbd, 0x04, 0x31, 0x31,
	0x0f, 0xa9, 0xe7, 0x21, 0xf9, 0xab, 0x31, 0xa4, 0xf9, 0x79, 0xa2, 0x34, 0x4d, 0x89, 0xe8, 0xfb,
	0xab, 0x68, 0xa4, 0xdd, 0xea, 0x3a, 0xe5, 0x86, 0xd7, 0x47, 0xd1, 0xff, 0xe4, 0x00, 0xcf, 0x76,
	0x1a, 0xb1, 0xf6, 0xb6, 0x5b, 0x5d, 0xbd, 0xe1, 0x69, 0x19, 0x34, 0xc1, 0x30, 0xe1, 0xf2, 0xe1,
	0xdb, 0x4f, 0x81, 0x40, 0x09, 0xe2, 0xf4, 0xaf, 0xe1, 0x1e, 0x8f, 0xda, 0x1c, 0x40, 0xbb, 0x81,
	0x66, 0x78, 0x32, 0x2a, 0xb7, 0x18, 0x03, 0xab, 0xeb, 0x08, 0x1c, 0x52, 0xdc, 0x87, 0xf4, 0x0d,
	0xc5, 0xe4, 0x57, 0x0d, 0xa2, 0x71, 0x7f, 0x64, 0x58, 0xef, 0x5f, 0x47, 0xa3, 0xf5, 0x56, 0x73,
	0x7b, 0x87, 0xcd, 0xeb, 0xc7, 0x07, 0xf8, 0xa6, 0x31, 0x62, 0x8d, 0x60, 0x04, 0x8c, 0xbb, 0x82,
	0xa6, 0xc0, 0x96, 0x5d, 0x73, 0xbb, 0x89, 0x01, 0x31, 0xef, 0x45, 0xb0, 0x40, 0x98, 0xea, 0x02,
	0xd6, 0x05, 0x56, 0xe0, 0x26, 0x49, 0xad, 0xc5, 0xcd, 0xfb, 0x99, 0xa9, 0x83, 0xd2, 0x5a, 0x6b,
	0x75, 0xef, 0x84, 0xf2, 0x52, 0xff, 0x37, 0x21, 0x8c, 0xd7, 0x06, 0x20, 0xda, 0x2d, 0x34, 0x8a,
	0x09, 0x82, 0xea, 0xd4, 0x59, 0x40, 0x4a, 0x60, 0xf1, 0xc7, 0x05, 0xd7, 0x47, 0x9b, 0x7e, 0xd5,
	0x96, 0xd1, 0xe4, 0xeb, 0xbd, 0x72, 0xd3, 0xe3, 0xae, 0xfc, 0x61, 0xee, 0xb1, 0xf9, 0xb7, 0xd0,
	0x63, 0x33, 0xe1, 0x43, 0x11, 0x3f, 0xcd, 0x0d, 0x34, 0xd6, 0x7d, 0xd0, 0xea, 0x78, 0x84, 0x91,
	0xd1, 0x51, 0xa8, 0x9f, 0x80, 0x8c, 0x1c, 0x25, 0x18, 0x77, 0xbc, 0xc7, 0xc9, 0x2f, 0x1c, 0x44,
	0xf3, 0xc4, 0x57, 0x05, 0xb5, 0x38, 0x11, 0xb9, 0x9b, 0x68, 0xb2, 0x5a, 0x7f, 0xf8, 0x98, 0xc4,
	0x50, 0x40, 0x78, 0x94, 0x8f, 0x29, 0x5d, 0x7f, 0xf8, 0x18, 0x23, 0x81, 0xcc, 0xdf, 0x6a, 0xf0,
	0x13, 0xd6, 0x3c, 0xd4, 0x65, 0x26, 0x96, 0x4d, 0x0e, 0x88, 0x9a, 0x87, 0x34, 0xad, 0xac, 0x9d,
	0x7c, 0x1b, 0x66, 0x24, 0xcf, 0x74, 0x65, 0x38, 0xed, 0x2a, 0x8a, 0x93, 0x44, 0x0f, 0xda, 0xbf,
	0xea, 0x7d, 0xbc, 0xf2, 0x03, 0x59, 0xfc, 0x8e, 0x3d, 0x70, 0xe5, 0x13, 0x40, 0xdc, 0xb1, 0xf4,
	0xfd, 0x4c, 0x55, 0xbb, 0x81, 0x34, 0x11, 0x93, 0x9c, 0x55, 0x82, 0x22, 0xd0, 0x6f, 0xdf, 0x23,
	0xa4, 0x0f, 0x07, 0xb8, 0xe4, 0x08, 0xb2, 0x29, 0x63, 0x03, 0x35, 0x7d, 0x20, 0xc8, 0x23, 0xe0,
	0x48, 0xc2, 0xa0, 0xbe, 0x0d, 0x0e, 0x0a, 0x92, 0x26, 0x66, 0xff, 0xa7, 0x06, 0xd0, 0x04, 0x61,
	0x88, 0x2f, 0xa2, 0x97, 0xd0, 0x14, 0xe5, 0xa1, 0xc2, 0xd2, 0x98, 0x82, 0xde, 0x18, 0x9a, 0xfb,
	0xe6, 0xdb, 0xcd, 0xf7, 0xd1, 0xbc, 0x88, 0x26, 0x1a, 0x1d, 0x87, 0x05, 0xe6, 0xab, 0x2d, 0x8f,
	0xe9, 0x41, 0x50, 0x2f, 0xa0, 0x41, 0xea, 0x4c, 0xaf, 0x95, 0x50, 0x1c, 0xb6, 0x01, 0x8c, 0x90,
	0xc5, 0x30, 0x79, 0xc1, 0x12, 0x89, 0xc3, 0x5d, 0x60, 0xaa, 0x2b, 0x00, 0x69, 0x2f, 0x21, 0x8d,
	0x91, 0x0d, 0x1b, 0x25, 0x62, 0x32, 0x5f, 0xc8, 0x32, 0x99, 0xee, 0x8a, 0x3f, 0x27, 0x3f, 0x3a,
	0x8c, 0x16, 0xed, 0x76, 0xc7, 0x2d, 0x57, 0xcd, 0x8e, 0xe2, 0x28, 0x9c, 0x41, 0x89, 0x5d, 0x1c,
	0x83, 0x7f, 0x63, 0x0f, 0xb8, 0xae, 0x60, 0xe1, 0xbe, 0xfa, 0x0c, 0x5c, 0x46, 0x73, 0x7d, 0xce,
	0xbf, 0x9c, 0xdf, 0x7d, 0x0e, 0xbf, 0xff, 0x11, 0x06, 0x82, 0xb4, 0xfb, 0xe1, 0x93, 0x6f, 0x0a,
	0xcd, 0xef, 0x74, 0xea, 0xfd, 0x4d, 0x48, 0x63, 0xf6, 0xbe, 0xe2, 0xc8, 0x7b, 0x05, 0xed, 0xed,
	0x12, 0x86, 0xf4, 0xb1, 0x4f, 0x7e, 0x9d, 0x52, 0x99, 0x62, 0xc5, 0x41, 0x04, 0x5c, 0x5b, 0x47,
	0xd3, 0xf2, 0x39, 0x39, 0xda, 0x86, 0xfe, 0x1a, 0x78, 0x4e, 0x9e, 0xba, 0x2f, 0x1e, 0x92, 0x05,
	0x56, 0x01, 0x3b, 0x67, 0x6f, 0x04, 0xab, 0xc2, 0xd6, 0xce, 0x07, 0xa0, 0x06, 0xd6, 0xee, 0x87,
	0x00, 0x45, 0x56, 0x41, 0xc3, 0x20, 0x08, 0xa6, 0xff, 0x88, 0x70, 0x8c, 0xe5, 0xd0, 0xc0, 0x3c,
	0x78, 0x03, 0x1d, 0x54, 0x12, 0xf1, 0x97, 0xd2, 0xa8, 0xe8, 0xc0, 0x5a, 0x09, 0x91, 0x90, 0x57,
	0xd4, 0xdf, 0xc0, 0x26, 0xf7, 0x2b, 0x9a, 0xa4, 0xf0, 0xc9, 0x6f, 0x89, 0xa1, 0x09, 0xe1, 0xe0,
	0xbf, 0x81, 0x15, 0x9d, 0xf2, 0xd0, 0x0f, 0xd4, 0x8d, 0xfa, 0xc4, 0xff, 0x87, 0x50, 0x22, 0xa6,
	0xbb, 0xd2, 0x71, 0xff, 0x06, 0x9a, 0xe9, 0x77, 0xd4, 0xff, 0x23, 0xb1, 0x72, 0x4e, 0x3e, 0xe7,
	0x7f, 0xed, 0x10, 0x8a, 0x17, 0x3b, 0x55, 0x8b, 0xfa, 0x97, 0xbb, 0x5e, 0xb9, 0xd1, 0xee, 0x6a,
	0xaf, 0xa1, 0x44, 0xd5, 0xed, 0xbe, 0xc6, 0x8e, 0xa5, 0x0f, 0xca, 0xcd, 0x6a, 0x1d, 0x9f, 0xbb,
	0xd8, 0xb5, 0x16, 0x83, 0xd0, 0x19, 0x94, 0x76, 0xbb, 0xaf, 0x91, 0x73, 0xe8, 0x3a, 0x83, 0x12,
	0x6e, 0xb7, 0x18, 0xa7, 0xb6, 0xc4, 0x04, 0xbb, 0x59, 0x41, 0x05, 0x8b, 0x6d, 0x4f, 0xd2, 0x98,
	0xea, 0xba, 0x10, 0x4c, 0x5d, 0x60, 0xc5, 0x18, 0x34, 0x4e, 0x46, 0xab, 0xec, 0x33, 0x56, 0x63,
	0x9c, 0x86, 0x3f, 0xb5, 0x92, 0x1a, 0xf3, 0x49, 0x49, 0xf3, 0x89, 0xa0, 0xd1, 0x3d, 0x55, 0x15,
	0x80, 0xb4, 0xdb, 0x68, 0xc6, 0xeb, 0x54, 0x69, 0xa5, 0x98, 0xcf, 0x1d, 0x61, 0xcd, 0x71, 0x9e,
	0xd1, 0x5c, 0x08, 0xaa, 0x12, 0x67, 0x58, 0xc5, 0xbc, 0xc8, 0x55, 0x6d, 0x1d, 0x25, 0x42, 0xc4,
	0x1c, 0x9a, 0x01, 0x09, 0x72, 0x56, 0x06, 0xe1, 0x7e, 0x30, 0x2f, 0xd1, 0x30, 0x09, 0x34, 0xb6,
	0x79, 0xc3, 0x94, 0xc0, 0xf2, 0xe3, 0x36, 0xaf, 0x34, 0xb1, 0x02, 0x27, 0x07, 0x84, 0x7b, 0x41,
	0xbc, 0x30, 0x64, 0xf2, 0x2b, 0x2f, 0xa1, 0xb9, 0x20, 0x5d, 0x0c, 0x14, 0xfb, 0xdf, 0x0e, 0x12,
	0x82, 0x40, 0x0e, 0x5a, 0x38, 0x39, 0x09, 0xd6, 0x81, 0xef, 0x63, 0x18, 0x80, 0x20, 0x4d, 0x9e,
	0xb0, 0x82, 0x8c, 0xa0, 0x10, 0x31, 0x39, 0x55, 0x09, 0xd6, 0x83, 0x2f, 0x46, 0x10, 0xcc, 0xba,
	0x4d, 0xed, 0x1e, 0x3a, 0xaa, 0xa0, 0x19, 0x95, 0xb8, 0xd4, 0x80, 0xfd, 0x3c, 0x14, 0x22, 0x2b,
	0x9c, 0x53, 0x1c, 0x74, 0x62, 0x27, 0xca, 0x52, 0x1a, 0x53, 0x1d, 0x76, 0xfa, 0x68, 0x5f, 0xea,
	0xb8, 0xeb, 0xb7, 0xd0, 0x2c, 0x20, 0xac, 0x48, 0x6a, 0xfa, 0x34, 0x74, 0x4d, 0xcc, 0x04, 0xb0,
	0x7e, 0x6e, 0x93, 0x8b, 0x0e, 0x43, 0x02, 0x4f, 0x94, 0xe2, 0xf4, 0x7d, 0xd0, 0x6d, 0x72, 0x10,
	0xd0, 0x0e, 0x67, 0x3a, 0xe5, 0xd1, 0x01, 0xa1, 0x99, 0xc8, 0x84, 0xa7, 0x02, 0x4c, 0x78, 0x4a,
	0x40, 0x9a, 0x42, 0xde, 0x53, 0x51, 0xea, 0x76, 0xbf, 0xf4, 0xa7, 0x3f, 0x83, 0xd9, 0x1b, 0x07,
	0x04, 0x92, 0x52, 0x16, 0x54, 0x09, 0x2d, 0x84, 0xa9, 0xee, 0x90, 0x0c, 0xf5, 0xd1, 0x18, 0xf0,
	0x90, 0xcd, 0xc9, 0xd4, 0x2d, 0x1a, 0x53, 0x4d, 0x40, 0xb2, 0x11, 0xa9, 0x51, 0x7b, 0x84, 0xe2,
	0x60, 0x40, 0x08, 0x66, 0x48, 0x65, 0x11, 0x98, 0xc3, 0x9d, 0x13, 0xa5, 0xfe, 0x0a, 0x26, 0x4a,
	0xc5, 0x03, 0x4c, 0x96, 0x2f, 0x75, 0x1b, 0xed, 0x87, 0x8b, 0x28, 0x2a, 0x6d, 0xca, 0x86, 0xde,
	0xda, 0x7d, 0x3d, 0x71, 0x8d, 0xf3, 0xec, 0xa9, 0x14, 0x9a, 0x97, 0x57, 0xa4, 0x9c, 0x44, 0xf5,
	0xe7, 0x70, 0x26, 0x80, 0xe0, 0x06, 0xb9, 0x54, 0x37, 0x84, 0xf1, 0x85, 0x52, 0xaa, 0x2e, 0x40,
	0x1e, 0xc5, 0x7b, 0xb2, 0x72, 0xc8, 0xa2, 0x45, 0x80, 0x1d, 0x9d, 0x60, 0x65, 0x45, 0x0c, 0x48,
	0xcc, 0xb3, 0x12, 0xa7, 0x2d, 0x2a, 0xdd, 0xea, 0x30, 0x4c, 0xb7, 0x02, 0xd3, 0x26, 0x64, 0x5d,
	0x89, 0xe2, 0xda, 0x3f, 0xf9, 0xea, 0x5a, 0x0c, 0x24, 0x5f, 0x1d, 0x08, 0x13, 0x0c, 0x72, 0xb0,
	0xc4, 0x0e, 0x46, 0xa5, 0x62, 0xdd, 0x84, 0xee, 0x44, 0xd0, 0x41, 0x21, 0x23, 0xeb, 0x15, 0xa4,
	0x09, 0xf9, 0xc1, 0x30, 0x31, 0xeb, 0x90, 0x2a, 0x19, 0x58, 0xcc, 0xcf, 0xfa, 0x79, 0xe8, 0x67,
	0x9c, 0xe9, 0xc9, 0x70, 0x5a, 0x5a, 0x58, 0x58, 0x30, 0x5c, 0x39, 0xc7, 0x35, 0xdf, 0xf3, 0x90,
	0x06, 0x10, 0x8e, 0x20, 0x6a, 0x99, 0x13, 0xa6, 0x37, 0x3a, 0x5d, 0xeb, 0xaf, 0xa1, 0x98, 0x01,
	0x16, 0x49, 0x59, 0x5b, 0xdb, 0xe8, 0x94, 0x40, 0x6e, 0x77, 0xc9, 0x5b, 0x7f, 0x01, 0x0d, 0xa4,
	0x13, 0x90, 0x78, 0x64, 0x0e, 0xd7, 0x2b, 0x52, 0xbf, 0x77, 0x9b, 0xca, 0xf5, 0x97, 0x30, 0x95,
	0x4b, 0x18, 0x87, 0x90, 0xd1, 0x95, 0x8b, 0x22, 0x2f, 0x25, 0x76, 0xfd, 0x37, 0x98, 0xd8, 0xa5,
	0x24, 0x47, 0xf2, 0xbb, 0x44, 0xa9, 0x8a, 0x4a, 0xf3, 0xba, 0x18, 0xa1, 0xad, 0xa4, 0xf4, 0xdd,
	0x83, 0x2a, 0x52, 0x8a, 0xa4, 0xaf, 0xe5, 0x18, 0x48, 0xfa, 0x5a, 0x0c, 0x93, 0xe3, 0xb9, 0x5f,
	0x86, 0x20, 0x49, 0xea, 0x14, 0xb0, 0x4b, 0xb0, 0x6f, 0x73, 0x61, 0x62, 0x99, 0xaa, 0xf6, 0x3e,
	0x74, 0x48, 0x4d, 0x46, 0x4c, 0x08, 0x7b, 0x2a, 0x2c, 0xfa, 0x91, 0xa6, 0xfe, 0x79, 0xd8, 0xea,
	0xa2, 0xaa, 0x55, 0x66, 0x26, 0x36, 0xd4, 0x0c, 0x06, 0x59, 0x62, 0xc9, 0xe8, 0x66, 0x05, 0xa3,
	0xec, 0xf2, 0x0e, 0x93, 0x40, 0xa4, 0xef, 0xbd, 0x42, 0xea, 0x7f, 0x9f, 0xcc, 0xaf, 0xc3, 0x9c,
	0x81, 0x77, 0xa0, 0x7e, 0x3c, 0x0a, 0xe8, 0xaa, 0x13, 0xc0, 0x36, 0xd0, 0x3e, 0xa1, 0x05, 0x90,
	0x07, 0x76, 0x24, 0x52, 0xb8, 0x6f, 0xc4, 0x40, 0x1e, 0xd8, 0x3c, 0x6c, 0x23, 0x48, 0x07, 0x13,
	0x77, 0x03, 0xe6, 0x4d, 0x3d, 0x1a, 0xdc, 0x68, 0x11, 0xb1, 0x1b, 0xb0, 0xe4, 0xb0, 0xaa, 0xb0,
	0x21, 0x81, 0x1c, 0xb1, 0x63, 0xa2, 0xd9, 0x5b, 0x92, 0x10, 0x61, 0xaa, 0xd8, 0x55, 0xd8, 0xc4,
	0x6c, 0x2f, 0x0c, 0xa9, 0xad, 0x13, 0xcd, 0x29, 0xe7, 0x1e, 0x25, 0xc5, 0x70, 0x5f, 0xa9, 0x59,
	0x55, 0xe4, 0x1e, 0xf5, 0xf8, 0xaf, 0x24, 0xf7, 0xa8, 0x2c, 0xac, 0x96, 0x72, 0xf5, 0xd5, 0x1e,
	0xf1, 0x75, 0xfa, 0x6e, 0x3f, 0x92, 0x7f, 0xa6, 0xe6, 0xe5, 0xdc, 0x10, 0xf0, 0xf2, 0x01, 0xd1,
	0xd3, 0x19, 0x8d, 0x3b, 0x8c, 0x84, 0x56, 0x11, 0xc4, 0xbe, 0x5c, 0xc7, 0x5b, 0x24, 0xd1, 0xa0,
	0x7e, 0x24, 0xf0, 0x44, 0x64, 0x1b, 0x9f, 0x82, 0x55, 0x08, 0x60, 0x5b, 0xd2, 0x39, 0x11, 0x3f,
	0x30, 0x78, 0x07, 0xcd, 0x41, 0x73, 0xa7, 0xdc, 0x66, 0x87, 0xcc, 0x93, 0x91, 0xb4, 0xa7, 0x86,
	0x80, 0x0b, 0x1b, 0x6c, 0x44, 0xa9, 0x72, 0x9b, 0x46, 0x48, 0x24, 0xc3, 0xac, 0xdc, 0x7d, 0xe0,
	0x57, 0x01, 0x3f, 0x15, 0x49, 0xf4, 0xe7, 0x06, 0x01, 0x51, 0x68, 0x98, 0x95, 0xbb, 0x0f, 0x58,
	0x29, 0x70, 0x59, 0xea, 0x69, 0xf7, 0x01, 0x5d, 0x85, 0x4f, 0x8b, 0x6e, 0x89, 0x92, 0x80, 0x2b,
	0xac, 0xc0, 0x9f, 0x87, 0xe7, 0x2f, 0xad, 0x17, 0x02, 0x94, 0xac, 0x22, 0x70, 0xc3, 0x49, 0x90,
	0x11, 0xd7, 0x80, 0x34, 0x80, 0x8c, 0xa5, 0xf8, 0x95, 0x26, 0xe2, 0xf6, 0x09, 0x2f, 0x23, 0x39,
	0x1d, 0xd4, 0x53, 0x44, 0x52, 0xf1, 0xaf, 0x25, 0x79, 0x51, 0x3c, 0x2b, 0xf8, 0x5e, 0xaf, 0x25,
	0x4e, 0xe2, 0x85, 0x18, 0x48, 0xfe, 0x80, 0x83, 0xf1, 0x3d, 0x5e, 0x9b, 0xa2, 0x21, 0x4b, 0x7e,
	0xf6, 0x63, 0x5f, 0xd1, 0xf7, 0x69, 0xf4, 0xe0, 0x44, 0x2c, 0xc8, 0x64, 0x3d, 0xd5, 0x0c, 0x57,
	0x6b, 0x1d, 0xef, 0x31, 0x53, 0x21, 0xcf, 0x46, 0x12, 0xee, 0x0c, 0x02, 0x97, 0x13, 0x98, 0xc9,
	0x34, 0xc6, 0xf6, 0x2f, 0x05, 0x80, 0x33, 0xec, 0x36, 0xab, 0x8c, 0xe8, 0x99, 0x48, 0xa2, 0x5d,
	0x48, 0x14, 0x30, 0xc1, 0x68, 0x56, 0xa3, 0x48, 0x52, 0x06, 0x9c, 0x8d, 0x24, 0xf9, 0x70, 0x50,
	0x2d, 0xde, 0x46, 0xb3, 0x4a, 0x07, 0x9f, 0x13, 0xac, 0xaf, 0xad, 0x47, 0xd4, 0x30, 0x78, 0x2e,
	0x92, 0xe0, 0xfc, 0x10, 0xbc, 0x23, 0x02, 0x98, 0xf5, 0x8f, 0x88, 0x41, 0xf0, 0x40, 0xd0, 0xc7,
	0x8c, 0x1c, 0x36, 0xb7, 0x2a, 0x24, 0x79, 0x0e, 0xdc, 0x9f, 0x19, 0x48, 0xf6, 0xea, 0x3d, 0x8c,
	0x9a, 0x2a, 0xd7, 0x2b, 0xc1, 0x25, 0x4a, 0xf0, 0xf6, 0x98, 0x39, 0xb9, 0x15, 0x0c, 0xaa, 0xa5,
	0xd1, 0x24, 0xb4, 0xeb, 0x1e, 0x91, 0x1c, 0x3a, 0x75, 0x9f, 0x97, 0x20, 0x5f, 0x27, 0x80, 0x79,
	0xf7, 0x48, 0x5b, 0x45, 0x53, 0x80, 0x4a, 0xff, 0xc4, 0xb8, 0xd6, 0x20, 0x50, 0x75, 0xa0, 0xf1,
	0x3b, 0xde, 0x63, 0xad, 0xa0, 0x36, 0x37, 0x78, 0x0e, 0x67, 0x70, 0xd9, 0xc7, 0xdf, 0x09, 0x6e,
	0xb9, 0xf0, 0xc6, 0xe9, 0xa7, 0x72, 0xae, 0x89, 0x3b, 0x1b, 0x2c, 0x35, 0x0f, 0x6e, 0xff, 0x98,
	0x86, 0x4e, 0x26, 0xb8, 0x93, 0x81, 0xda, 0xf2, 0xae, 0x60, 0xa3, 0xd1, 0xdb, 0x45, 0xc8, 0x59,
	0x95, 0x74, 0xec, 0x92, 0x78, 0x1f, 0x68, 0x49, 0x24, 0x41, 0x00, 0x05, 0xad, 0xf3, 0x69, 0xe1,
	0x3e, 0xd0, 0x5e, 0x04, 0xb8, 0xb4, 0xa6, 0xe8, 0x45, 0x90, 0x3b, 0xdd, 0x1a, 0xe2, 0x45, 0x68,
	0x4d, 0x1b, 0x63, 0x53, 0x69, 0x7d, 0x45, 0xda, 0xee, 0x03, 0xaf, 0x65, 0xe2, 0x0a, 0xd9, 0xf6,
	0x14, 0x8a, 0x13, 0xfa, 0x36, 0xd9, 0xf6, 0x07, 0xed, 0x15, 0xe8, 0xf9, 0x14, 0xcd, 0x59, 0x39,
	0x8b, 0xf6, 0x2a, 0x67, 0xfb, 0x47, 0x60, 0x16, 0x6d, 0x42, 0x36, 0x20, 0xa0, 0x97, 0x1e, 0x90,
	0x0b, 0x72, 0x6a, 0xaf, 0x45, 0xe9, 0xf8, 0x50, 0x6a, 0xed, 0x1f, 0x44, 0xe8, 0x78, 0x9e, 0x61,
	0xfb, 0xba, 0xd0, 0x63, 0x39, 0xad, 0x94, 0xde, 0x42, 0x72, 0x3c, 0xdc, 0x90, 0x3a, 0xb1, 0xf4,
	0xbf, 0xc0, 0xd6, 0x00, 0xa3, 0xc5, 0xd4, 0xd2, 0xf7, 0x10, 0x4d, 0x5c, 0xa7, 0x71, 0x3a, 0xe9,
	0xe6, 0xa6, 0xe7, 0x43, 0x93, 0x50, 0x7f, 0x1c, 0x75, 0x7d, 0xd3, 0x42, 0x4f, 0xf9, 0x55, 0x6b,
	0x0b, 0x9e, 0x01, 0x29, 0xbb, 0xf7, 0x46, 0xd4, 0x88, 0xd4, 0x49, 0xbe, 0x5f, 0x04, 0xf3, 0x50,
	0xc1, 0x88, 0xc4, 0x5c, 0xdf, 0x57, 0xd4, 0xa7, 0x6d, 0x92, 0xf2, 0x7b, 0xb3, 0x6f, 0xca, 0xef,
	0x8f, 0xc1, 0x94, 0x5f, 0xc5, 0x09, 0x9c, 0x64, 0xfe, 0xfe, 0xb3, 0x18, 0x3a, 0x1a, 0xaa, 0x80,
	0x95, 0xa7, 0x8a, 0x5e, 0x80, 0x72, 0x2a, 0xa2, 0xf8, 0x55, 0x3d, 0x5f, 0x5f, 0x0e, 0x13, 0x81,
	0x0f, 0xf6, 0xfa, 0xa0, 0x68, 0x4d, 0x74, 0x62, 0xa7, 0x2e, 0x10, 0xed, 0x17, 0x7d, 0x5d, 0xca,
	0x57, 0xc0, 0xb4, 0xe0, 0x23, 0xfd, 0x1a, 0xbb, 0x43, 0xac, 0xbd, 0xc3, 0xd1, 0x72, 0x49, 0x5a,
	0x8a, 0xbe, 0x43, 0xe5, 0xcb, 0x60, 0x4b, 0x8b, 0x11, 0x62, 0x88, 0x1b, 0xf9, 0xaa, 0x18, 0x3a,
	0xde, 0xdf, 0x83, 0x48, 0xd7, 0x1b, 0xbd, 0x60, 0xe5, 0x59, 0x85, 0x4d, 0xd5, 0x3f, 0x05, 0xf8,
	0xeb, 0x15, 0x29, 0xc0, 0x47, 0x7b, 0x3b, 0x60, 0x6b, 0xef, 0x8f, 0x09, 0x96, 0xae, 0x22, 0x23,
	0x78, 0x25, 0xea, 0x80, 0x17, 0x99, 0x18, 0xfc, 0x21, 0x65, 0x62, 0x30, 0xe0, 0x4d, 0x28, 0x3f,
	0xf8, 0x7d, 0xe8, 0x4c, 0xdf, 0x4e, 0x84, 0xd2, 0x84, 0x53, 0x3c, 0x4d, 0xf8, 0x43, 0xca, 0x34,
	0xe1, 0xd3, 0xd1, 0x8d, 0xc9, 0x25, 0xdf, 0x5b, 0x82, 0xc7, 0x35, 0x74, 0x51, 0x45, 0x3a, 0xb2,
	0xe8, 0xfe, 0xa3, 0x8a, 0xab, 0x17, 0x80, 0x32, 0xd0, 0xa5, 0x2b, 0x2b, 0xc4, 0x76, 0x42, 0xb7,
	0x57, 0x18, 0x91, 0xed, 0x7c, 0x5f, 0xff, 0x76, 0xd2, 0xd2, 0x3d, 0x16, 0xef, 0x8f, 0xa1, 0x25,
	0xd0, 0xd0, 0x4e, 0x57, 0x4b, 0xac, 0x46, 0xb6, 0xfb, 0x5d, 0x8a, 0x76, 0x9f, 0x0e, 0x28, 0xf7,
	0xbf, 0x5c, 0xe2, 0xcd, 0x18, 0xba, 0x08, 0x7d, 0x6e, 0xbb, 0xbd, 0xe9, 0x62, 0x2d, 0xb2, 0x3b,
	0xdf, 0xad, 0xe8, 0xce, 0x73, 0xc0, 0x4b, 0xb7, 0xab, 0x3b, 0x2f, 0x24, 0x71, 0x57, 0xdc, 0x7f,
	0xb1, 0x4e, 0xc4, 0xfd, 0xe9, 0xb0, 0xb8, 0x47, 0xdf, 0x84, 0xf1, 0x11, 0xc5, 0xa5, 0x15, 0x07,
	0x7a, 0xd1, 0x88, 0xda, 0xab, 0xc2, 0x56, 0x1b, 0x5c, 0x8f, 0x91, 0x89, 0x3c, 0x6f, 0x87, 0x2e,
	0xca, 0xf8, 0x4e, 0x45, 0x9b, 0xf0, 0xd8, 0xed, 0x23, 0xac, 0x9c, 0x14, 0xb4, 0x4e, 0x64, 0x4e,
	0xfc, 0x2f, 0x0f, 0xa2, 0xb1, 0xcd, 0x9a, 0x5b, 0xaf, 0x92, 0xe0, 0xff, 0x25, 0x34, 0xfc, 0x18,
	0xff, 0xd1, 0x27, 0xf3, 0xe8, 0x8f, 0xa1, 0xcf, 0x8d, 0x42, 0x6b, 0x06, 0x42, 0xe4, 0x1f, 0x30,
	0xe6, 0xc8, 0x73, 0x8e, 0x08, 0x75, 0xc1, 0x3a, 0xfb, 0xaf, 0xc2, 0x25, 0x99, 0x8f, 0xfd, 0xef,
	0xda, 0x15, 0x34, 0x4d, 0xc9, 0x60, 0x4b, 0x9c, 0xfa, 0x2c, 0x07, 0xb9, 0xcf, 0xf2, 0xc7, 0x60,
	0x79, 0xd7, 0x24, 0x81, 0xc3, 0x16, 0x36, 0x71, 0x54, 0xa6, 0xd0, 0x3c, 0x45, 0x94, 0x5d, 0x9e,
	0xc1, 0xb5, 0xd3, 0x3f, 0x08, 0xd1, 0x67, 0x09, 0xb4, 0xe4, 0xed, 0x2c, 0xa1, 0x85, 0x10, 0x91,
	0x9d, 0x62, 0xfa, 0x3f, 0x04, 0x63, 0xfa, 0x73, 0x12, 0x55, 0x7a, 0x1a, 0xf2, 0xd0, 0x01, 0x35,
	0x59, 0x18, 0x61, 0x3c, 0x21, 0x30, 0x4b, 0x22, 0x21, 0xf0, 0xee, 0x87, 0x61, 0x98, 0x3f, 0xf1,
	0x38, 0x02, 0x3c, 0xf9, 0xe3, 0x31, 0xb4, 0xa0, 0x36, 0x2e, 0x25, 0x7b, 0x0f, 0x5b, 0xa7, 0xca,
	0x8c, 0x79, 0x11, 0x5b, 0xe8, 0xc3, 0xa3, 0x08, 0x7b, 0xcf, 0x07, 0x94, 0xce, 0xf4, 0xa4, 0x09,
	0x39, 0x8c, 0xfe, 0x38, 0xe2, 0x34, 0x8e, 0x69, 0xd0, 0x48, 0xfa, 0xaf, 0x0f, 0xa0, 0x29, 0x21,
	0x5f, 0xed, 0x82, 0x76, 0xd5, 0x4f, 0x99, 0xbf, 0xa0, 0xc8, 0xfc, 0xf9, 0x4b, 0x78, 0x64, 0x99,
	0x82, 0x70, 0x99, 0xaa, 0xb6, 0xed, 0xe7, 0xcc, 0x5f, 0x50, 0x27, 0xff, 0x1c, 0x15, 0x33, 0xe4,
	0x2e, 0xa8, 0xd3, 0x7f, 0xfe, 0x6a, 0x00, 0x1e, 0xf8, 0xc4, 0x26, 0x98, 0xef, 0xf2, 0x5d, 0x7e,
	0xd6, 0xfc, 0x85, 0x50, 0x06, 0xd0, 0x41, 0x55, 0x1b, 0x42, 0x0e, 0xd0, 0x5f, 0xc3, 0xc9, 0x8d,
	0x43, 0x3a, 0x24, 0x0b, 0x28, 0x03, 0xf2, 0xe6, 0x2f, 0x44, 0x24, 0x01, 0xf9, 0x79, 0xf3, 0x17,
	0xc4, 0x24, 0x20, 0x3f, 0x71, 0x1e, 0xa3, 0xad, 0x75, 0xda, 0x61, 0xe6, 0x5e, 0x0c, 0x98, 0x7b,
	0x51, 0xc1, 0xdc, 0x8f, 0x0d, 0x86, 0x99, 0x7b, 0x31, 0xc4, 0xdc, 0x8b, 0xbb, 0x62, 0xee, 0x45,
	0x35, 0x73, 0xbf, 0x7f, 0x30, 0xcc, 0xdc, 0x8b, 0x11, 0xcc, 0xbd, 0xb8, 0x13, 0x73, 0x2f, 0x86,
	0x99, 0xfb, 0x03, 0x83, 0x61, 0xe6, 0x5e, 0x54, 0x33, 0xf7, 0xe2, 0x0e, 0xcc, 0xbd, 0xa8, 0x66,
	0xee, 0x45, 0xc6, 0xdc, 0xd7, 0x11, 0x4a, 0xd5, 0x3b, 0x7e, 0xc6, 0x5f, 0x05, 0xcd, 0x55, 0xea,
	0x6e, 0xb9, 0xc3, 0x23, 0x88, 0x34, 0x9b, 0x90, 0xad, 0x37, 0xae, 0xf4, 0x53, 0x0c, 0x06, 0x24,
	0x1c, 0x06, 0xb7, 0x0a, 0x43, 0xb9, 0x98, 0xad, 0x84, 0x21, 0x93, 0x9f, 0x8c, 0xa1, 0x89, 0x54,
	0xab, 0xd1, 0xce, 0xa4, 0x2d, 0xf7, 0x75, 0xdc, 0xea, 0x29, 0x34, 0x42, 0x32, 0x38, 0x84, 0x59,
	0x3c, 0x18, 0x03, 0xb3, 0xb8, 0x17, 0x7f, 0xcf, 0x54, 0xb5, 0x73, 0x68, 0x9c, 0x7b, 0x39, 0x6b,
	0x55, 0xb0, 0x44, 0x0f, 0x40, 0x68, 0xe4, 0xc3, 0x64, 0xaa, 0xda, 0x73, 0x68, 0xbc, 0xe3, 0x6e,
	0x91, 0x0b, 0xf0, 0xc4, 0xf4, 0xc2, 0xb7, 0x84, 0xfb, 0x7e, 0x3b, 0xee, 0x16, 0xe9, 0x52, 0x55,
	0x3b, 0x83, 0x10, 0x46, 0xc0, 0x5c, 0x15, 0xde, 0x95, 0xf8, 0x26, 0xe1, 0xea, 0xcc, 0x8e, 0xbb,
	0x65, 0xf7, 0xee, 0x67, 0xaa, 0xc9, 0x4f, 0x0e, 0xa0, 0x49, 0x3a, 0x18, 0xdb, 0x2b, 0x7b, 0xff,
	0x2f, 0x1f, 0x0d, 0xb9, 0xda, 0x9b, 0x64, 0xc2, 0x3a, 0x9e, 0xfb, 0xc8, 0x03, 0x99, 0x07, 0x1f,
	0x82, 0xf0, 0x88, 0xc2, 0x14, 0xdd, 0x47, 0x1e, 0xb9, 0xb4, 0x8f, 0x62, 0x50, 0xad, 0xb9, 0x57,
	0xba, 0xb4, 0x8f, 0x7c, 0x23, 0x4a, 0x92, 0x4b, 0xc8, 0x07, 0x85, 0xd4, 0xfe, 0x6e, 0x00, 0x91,
	0xfc, 0x77, 0x31, 0x84, 0xf0, 0x19, 0x40, 0x6f, 0x10, 0x4e, 0x5e, 0x44, 0x93, 0xf8, 0x04, 0x42,
	0x12, 0x9f, 0x2b, 0xbd, 0x0e, 0xcc, 0x2f, 0x19, 0x13, 0xca, 0xae, 0x2b, 0x14, 0x27, 0xd5, 0xeb,
	0x74, 0xb4, 0x2c, 0x40, 0x52, 0x15, 0x1b, 0x30, 0xfa, 0xc2, 0x26, 0x31, 0x02, 0x65, 0xd6, 0xa7,
	0x46, 0x76, 0x07, 0x03, 0x4d, 0x71, 0x6a, 0x74, 0x80, 0xd1, 0xc5, 0x31, 0xa3, 0x03, 0xc0, 0x91,
	0x37, 0xc1, 0xa8, 0xd0, 0x81, 0xfd, 0xec, 0x00, 0x1a, 0xa3, 0x87, 0x1b, 0x3c, 0xae, 0x65, 0xda,
	0xc5, 0x4e, 0xd9, 0xb9, 0xdf, 0x69, 0xbd, 0x26, 0xe4, 0xcd, 0xbc, 0x01, 0x67, 0x7e, 0x82, 0x42,
	0xad, 0x10, 0x20, 0xed, 0x3a, 0x9a, 0x61, 0x58, 0xf4, 0xca, 0x87, 0x2d, 0x51, 0x66, 0xbe, 0x4c,
	0xd8, 0x52, 0x28, 0x64, 0xd6, 0xdd, 0xb6, 0xdc, 0xad, 0x4c, 0x55, 0xcb, 0xa0, 0x38, 0xc3, 0xf5,
	0x3a, 0xe5, 0xaa, 0xbb, 0x43, 0x95, 0xcf, 0xc7, 0x62, 0xc0, 0x2d, 0xc7, 0x48, 0x15, 0x31, 0x1e,
	0x3e, 0x22, 0xde, 0xe6, 0xdd, 0xa0, 0xa4, 0xc8, 0x99, 0x3e, 0x3a, 0x2f, 0xea, 0xfb, 0x63, 0x30,
	0x2f, 0x0a, 0xd0, 0x22, 0x07, 0xf9, 0x80, 0x13, 0x84, 0x58, 0x07, 0x48, 0xdc, 0x1d, 0x05, 0x27,
	0x08, 0x62, 0x27, 0xb9, 0xca, 0x9e, 0x1f, 0xa1, 0x52, 0x72, 0x15, 0xa1, 0xc0, 0x6f, 0xc2, 0x8c,
	0x41, 0x2d, 0x7c, 0xd3, 0xb5, 0x5f, 0xfc, 0x12, 0xc0, 0x26, 0x3f, 0x3a, 0x89, 0x66, 0x18, 0x21,
	0x5a, 0xd4, 0x5c, 0xa1, 0x55, 0xe3, 0x53, 0xc0, 0x0f, 0x53, 0x77, 0xb7, 0x19, 0xcd, 0xf9, 0x30,
	0xcd, 0xac, 0xbb, 0xed, 0x27, 0xa6, 0xd7, 0x84, 0xbb, 0x9b, 0x5e, 0x41, 0x07, 0x48, 0xed, 0x6c,
	0xb9, 0x5e, 0xc1, 0xb6, 0x8c, 0x5b, 0x75, 0x2a, 0x95, 0xc7, 0x4e, 0xbd, 0xdc, 0xa5, 0x29, 0xde,
	0xd1, 0x25, 0x5a, 0x17, 0x60, 0xf0, 0x67, 0x5f, 0xdd, 0xdd, 0x4e, 0x71, 0x12, 0xa9, 0xca, 0xe3,
	0x6c, 0xb9, 0xeb, 0xe1, 0x39, 0x78, 0xcd, 0xbf, 0xd8, 0xe0, 0xa1, 0xdb, 0x71, 0xab, 0x4e, 0x0b,
	0x9f, 0xca, 0xd9, 0x1f, 0x6c, 0x8b, 0x39, 0x26, 0x94, 0xe5, 0x92, 0x2f, 0x66, 0xa7, 0xe4, 0x03,
	0x71, 0xc1, 0xbf, 0x24, 0x57, 0x32, 0x86, 0x61, 0xb5, 0x3c, 0x2d, 0xb2, 0xdc, 0xee, 0xb4, 0xba,
	0x5d, 0x36, 0xe7, 0xe5, 0x86, 0xd7, 0x27, 0xfd, 0xf4, 0x22, 0x0c, 0x00, 0xc5, 0xeb, 0xee, 0xf6,
	0x1a, 0x46, 0x25, 0x73, 0xa7, 0x37, 0x3c, 0xed, 0x2e, 0x2d, 0x57, 0x26, 0xcc, 0xd8, 0x6a, 0x75,
	0xde, 0x28, 0x77, 0xaa, 0xf4, 0x78, 0xd9, 0xaf, 0xa8, 0xeb, 0xfc, 0x10, 0x4f, 0x69, 0x1d, 0x21,
	0x97, 0xd8, 0x60, 0x56, 0xac, 0x52, 0x6c, 0x72, 0xa4, 0xec, 0x6a, 0xb7, 0xe8, 0x3d, 0x34, 0x84,
	0x6e, 0xfb, 0x51, 0x9f, 0x4c, 0xa7, 0x7f, 0x0a, 0x0d, 0xe1, 0x31, 0x46, 0xab, 0xf0, 0xc8, 0xbf,
	0x7e, 0x26, 0xa8, 0x83, 0x8b, 0x7e, 0xa4, 0xe7, 0x23, 0x30, 0x13, 0x1f, 0x37, 0xcb, 0xcb, 0xf1,
	0xde, 0x43, 0xb9, 0xc5, 0x8b, 0x2c, 0xdc, 0xad, 0x2d, 0xb7, 0xe2, 0xb1, 0x5c, 0xd3, 0x43, 0xb0,
	0x1c, 0x9d, 0x41, 0x18, 0x04, 0x80, 0xcf, 0xc8, 0x32, 0x34, 0xdb, 0x66, 0xea, 0x32, 0x9c, 0x76,
	0x15, 0x8d, 0x60, 0xfa, 0xb8, 0x7b, 0xd1, 0x69, 0x4c, 0xdf, 0x05, 0xbb, 0xb7, 0xb7, 0xee, 0x12,
	0x87, 0xfa, 0x19, 0x7a, 0x1d, 0x07, 0x53, 0x1c, 0x41, 0xaa, 0xd2, 0x97, 0x42, 0xc5, 0x31, 0x5a,
	0xf7, 0x55, 0xc6, 0x4d, 0xff, 0x1a, 0x06, 0xcf, 0xab, 0x07, 0x1e, 0xdb, 0xa0, 0xfa, 0xe5, 0x9b,
	0xa0, 0x06, 0x8e, 0x93, 0x9b, 0x13, 0x3c, 0xaf, 0x2e, 0xdf, 0x7e, 0xc1, 0xea, 0x07, 0xf0, 0xf9,
	0x66, 0x82, 0x9f, 0x6f, 0xb2, 0xf2, 0xed, 0x17, 0xb4, 0x84, 0x00, 0x1f, 0x6c, 0x4c, 0x88, 0x46,
	0xd4, 0xf7, 0x64, 0xf8, 0x0e, 0x10, 0xfc, 0x51, 0x7c, 0xe7, 0x0c, 0x32, 0x8d, 0x13, 0x64, 0x8f,
	0x74, 0xc4, 0xa5, 0x82, 0xd8, 0x6e, 0x62, 0x4a, 0xb4, 0x94, 0xa4, 0x32, 0x5d, 0xdf, 0x52, 0xaa,
	0x4b, 0xd5, 0xbb, 0xec, 0x22, 0x87, 0xee, 0x1b, 0x65, 0x76, 0x08, 0x99, 0x0e, 0x5d, 0xe4, 0x60,
	0xbf, 0x51, 0x16, 0x4f, 0x1f, 0xdf, 0x2b, 0x6c, 0x2c, 0xf5, 0x00, 0xc2, 0xbf, 0xb9, 0x8c, 0x44,
	0x6d, 0xf1, 0x7c, 0xc4, 0x83, 0x0b, 0xa3, 0xa0, 0x0f, 0x12, 0x4f, 0x19, 0x09, 0xca, 0x66, 0xaa,
	0x5a, 0x8e, 0xce, 0x88, 0x3f, 0x17, 0xec, 0x3e, 0x8f, 0x99, 0xe8, 0x9b, 0xbd, 0x86, 0xf9, 0x7e,
	0x44, 0xef, 0x63, 0xf0, 0x27, 0x87, 0xde, 0xe8, 0xc1, 0xc8, 0x55, 0x6b, 0x0f, 0x6b, 0x55, 0xb7,
	0x59, 0x75, 0xe8, 0x61, 0x5a, 0x8b, 0xbe, 0xb9, 0x2e, 0xf0, 0x6d, 0x50, 0x72, 0x69, 0x86, 0x49,
	0xce, 0x81, 0x3e, 0x7b, 0xdc, 0x47, 0x6e, 0x85, 0x26, 0x0b, 0xcf, 0x92, 0x64, 0xe1, 0x7d, 0xe2,
	0xb5, 0x11, 0x15, 0x21, 0x45, 0xf8, 0x01, 0x25, 0xb9, 0x9f, 0x5e, 0xdf, 0x5b, 0x0f, 0x20, 0x34,
	0x9d, 0xb2, 0x87, 0x6b, 0xcc, 0xe8, 0x9b, 0xa0, 0xfe, 0x05, 0xf4, 0x6d, 0x22, 0xb6, 0x9a, 0xb1,
	0xbc, 0xaf, 0xd1, 0xfb, 0x26, 0xda, 0x1d, 0x97, 0x71, 0x19, 0x1b, 0xc9, 0xf3, 0xa1, 0x6b, 0x44,
	0x0a, 0x1d, 0x97, 0x30, 0xd8, 0xb7, 0x91, 0x47, 0xc9, 0x35, 0x22, 0xe0, 0x57, 0x6d, 0x95, 0xca,
	0xe4, 0xc3, 0x16, 0x96, 0x84, 0x7a, 0xcd, 0x7b, 0xdc, 0xe7, 0x99, 0x97, 0x0a, 0xe4, 0x39, 0x66,
	0xc8, 0x5d, 0x8e, 0xa5, 0x19, 0x42, 0x11, 0x35, 0x3e, 0xc7, 0x24, 0xf6, 0x49, 0x85, 0xc4, 0xc2,
	0x29, 0xc7, 0xef, 0x8e, 0x50, 0xf3, 0x74, 0x31, 0x69, 0xb3, 0x8b, 0x02, 0xc9, 0xa6, 0xf5, 0x59,
	0xda, 0xb0, 0x92, 0x7f, 0x10, 0x43, 0xf1, 0x80, 0x6a, 0xc6, 0xcc, 0x7c, 0xb6, 0x76, 0xc2, 0x55,
	0xaa, 0x95, 0x6b, 0xad, 0x1a, 0xdf, 0xf9, 0x80, 0xbf, 0x85, 0xb6, 0x75, 0x87, 0xf9, 0x8c, 0x48,
	0xe5, 0x0e, 0xd4, 0x46, 0xe4, 0x9e, 0xb5, 0x56, 0x0d, 0xcf, 0xa6, 0x6a, 0x1d, 0x0f, 0xbe, 0x93,
	0x75, 0x9c, 0xfc, 0xd0, 0x20, 0x9a, 0x0b, 0x86, 0x6a, 0xbb, 0x95, 0x6c, 0x8d, 0x1e, 0x7e, 0x3e,
	0x1b, 0xc3, 0x7d, 0x59, 0x7d, 0x95, 0x42, 0xb5, 0xec, 0x95, 0xd9, 0xae, 0x7f, 0x28, 0xf2, 0x2a,
	0x85, 0x74, 0xd9, 0x2b, 0xaf, 0x0c, 0x45, 0xdc, 0x9d, 0x40, 0x5c, 0x5e, 0x61, 0xed, 0x38, 0xf8,
	0xd9, 0xd7, 0x8e, 0x43, 0x9f, 0x1d, 0xed, 0x38, 0xfc, 0x19, 0x68, 0xc7, 0xe4, 0x37, 0x0c, 0xa3,
	0x69, 0x36, 0x47, 0x39, 0xff, 0x94, 0xf8, 0x0c, 0x1a, 0x55, 0x14, 0xf7, 0x4c, 0xef, 0x01, 0xdb,
	0x10, 0x07, 0xd0, 0x52, 0x68, 0xda, 0x7f, 0x53, 0x85, 0x1a, 0x2f, 0x6d, 0xb9, 0xbc, 0x50, 0x58,
	0x43, 0xc2, 0x64, 0xf2, 0x85, 0x25, 0x5a, 0x96, 0x83, 0xbb, 0xb7, 0x2c, 0xb1, 0x29, 0xd1, 0xa8,
	0x3a, 0x2e, 0xc9, 0x8b, 0xee, 0xd6, 0xde, 0xd7, 0xaf, 0x98, 0x78, 0x1a, 0x1a, 0xdb, 0xe3, 0x8d,
	0xaa, 0x81, 0x91, 0xec, 0xda, 0xfb, 0x48, 0x79, 0x38, 0xbd, 0xd5, 0x1e, 0xf0, 0x93, 0x77, 0x9f,
	0xdc, 0x53, 0x2f, 0x70, 0x73, 0x3f, 0xe4, 0xe6, 0xd8, 0xeb, 0xfe, 0x77, 0xf2, 0x6c, 0x60, 0xb0,
	0x0b, 0x07, 0x0f, 0x15, 0xbe, 0xb8, 0x47, 0x78, 0x36, 0x90, 0x6f, 0xc1, 0x6b, 0x3e, 0x3c, 0x69,
	0x76, 0x44, 0xbe, 0x0d, 0x59, 0x96, 0xae, 0x5b, 0xa0, 0xd4, 0x6e, 0x7d, 0x0f, 0x23, 0xc4, 0xe2,
	0xed, 0xf1, 0x80, 0x90, 0xe3, 0xb9, 0xcd, 0x56, 0x87, 0xd8, 0x41, 0xe3, 0x17, 0x10, 0x3d, 0x28,
	0xe0, 0x5f, 0x20, 0x8d, 0xc3, 0x8c, 0xc6, 0x14, 0xa7, 0x41, 0x40, 0xf0, 0x64, 0xf6, 0x58, 0xb5,
	0x1e, 0x9e, 0x50, 0x3c, 0x99, 0x63, 0xe2, 0x64, 0x96, 0x68, 0x11, 0x1e, 0x3d, 0x11, 0xf8, 0x93,
	0xd9, 0x83, 0x3f, 0x6a, 0x57, 0xd1, 0x44, 0xa3, 0xea, 0x74, 0xbd, 0x8e, 0x5b, 0x6e, 0x04, 0x06,
	0xd0, 0xc2, 0xd7, 0xbf, 0x7d, 0xe0, 0x37, 0x44, 0x37, 0xf5, 0x2b, 0x7b, 0xf6, 0xec, 0xb1, 0x50,
	0xa3, 0x6a, 0x13, 0xd0, 0x0c, 0xb9, 0xd3, 0x16, 0x8c, 0x83, 0xba, 0xa2, 0xbf, 0x6f, 0x10, 0x4d,
	0x89, 0x9b, 0x87, 0x7f, 0x95, 0x1e, 0xdd, 0x6b, 0xca, 0x15, 0x92, 0x16, 0x0f, 0x04, 0xf5, 0x1b,
	0x85, 0x17, 0x4d, 0xfc, 0x6d, 0x5d, 0xa7, 0x70, 0xda, 0x1a, 0xd5, 0x1b, 0x1c, 0xd9, 0x93, 0x1c,
	0x53, 0xec, 0x94, 0x0f, 0x69, 0xcc, 0x01, 0x1a, 0x1e, 0x77, 0x3b, 0x31, 0x23, 0x96, 0x12, 0xea,
	0x7f, 0xcc, 0xfb, 0x90, 0x6c, 0xc4, 0x12, 0x6a, 0x58, 0xd9, 0xb2, 0x7b, 0x25, 0x6b, 0x4d, 0x62,
	0x1c, 0xf4, 0xca, 0xf5, 0xc0, 0x4e, 0x09, 0x5c, 0x08, 0x1f, 0x94, 0x3b, 0x93, 0xe1, 0xe0, 0xbe,
	0xc5, 0x12, 0xda, 0xf1, 0x2e, 0x24, 0x86, 0xfb, 0xec, 0x78, 0x17, 0xf8, 0xd5, 0x19, 0xa2, 0x2b,
	0x75, 0x1d, 0x32, 0x47, 0x32, 0x48, 0x83, 0xf7, 0x12, 0x37, 0x86, 0xb9, 0x26, 0xa0, 0x97, 0x38,
	0x91, 0x5e, 0x08, 0x56, 0x69, 0xf2, 0x9b, 0x63, 0x68, 0x2a, 0x5b, 0x6b, 0xba, 0x5d, 0x73, 0xab,
	0xe8, 0x3e, 0x22, 0x72, 0x71, 0x01, 0x4d, 0xf8, 0x55, 0x1d, 0xc4, 0xe7, 0x11, 0xcc, 0x58, 0x25,
	0xa8, 0x0d, 0x19, 0xb1, 0xc6, 0x19, 0x10, 0x71, 0x7a, 0x5c, 0x43, 0x71, 0x88, 0x23, 0x95, 0xaa,
	0xdc, 0x0f, 0xaa, 0x3e, 0x46, 0xac, 0x29, 0x80, 0x97, 0x75, 0x9b, 0xda, 0x71, 0x34, 0x44, 0x9a,
	0x09, 0x5c, 0x37, 0xd7, 0x61, 0xad, 0x2a, 0xf9, 0x98, 0xfc, 0xe6, 0x01, 0x34, 0x9e, 0xab, 0x75,
	0x2b, 0xab, 0xae, 0xdb, 0xc5, 0x7d, 0xd4, 0xd1, 0x44, 0xa3, 0xd6, 0xad, 0x38, 0x5b, 0xae, 0xbb,
	0x43, 0xfd, 0xf8, 0x17, 0xee, 0x01, 0x67, 0x2f, 0xd4, 0xa0, 0x34, 0xf0, 0xa9, 0xcb, 0x44, 0x53,
	0x9c, 0xc4, 0xfd, 0x72, 0xb7, 0xd6, 0x95, 0x6f, 0x3c, 0x66, 0xed, 0xad, 0xe0, 0x6f, 0x7c, 0x71,
	0xff, 0x13, 0xe1, 0x52, 0x87, 0x06, 0x00, 0xd1, 0x2e, 0xa2, 0x49, 0x4e, 0x90, 0x38, 0x67, 0x82,
	0x11, 0xfd, 0x0b, 0xa8, 0x93, 0xc7, 0x19, 0x96, 0xef, 0x9c, 0xe1, 0x48, 0xa0, 0xc8, 0x7a, 0x9f,
	0xd4, 0x09, 0x41, 0xc1, 0x7c, 0x11, 0xe4, 0x8f, 0x4f, 0x8d, 0xec, 0x12, 0xdf, 0x3c, 0x84, 0xc6,
	0xcd, 0x4e, 0x95, 0xaf, 0xc0, 0x67, 0xd0, 0x58, 0xa5, 0x8e, 0xcf, 0x6f, 0xa2, 0xef, 0x6d, 0x1c,
	0x12, 0x18, 0xa9, 0xd4, 0xcd, 0x4e, 0x35, 0x53, 0xd5, 0x4e, 0xa1, 0x11, 0xf2, 0x5c, 0x8a, 0xe0,
	0x44, 0x59, 0x81, 0xa0, 0x7b, 0xf1, 0x77, 0xb5, 0x14, 0x0f, 0xbe, 0x03, 0x29, 0xd6, 0x11, 0xbd,
	0x72, 0xc5, 0x29, 0x3f, 0x24, 0xd9, 0x55, 0xd1, 0x5b, 0xc2, 0x11, 0x98, 0x5d, 0x85, 0x08, 0x92,
	0xfe, 0x70, 0xbb, 0xf0, 0x88, 0x3c, 0x9d, 0x42, 0x48, 0xdc, 0x6f, 0xb5, 0x5e, 0xf3, 0xd3, 0xab,
	0xa2, 0x0f, 0xcd, 0x47, 0x61, 0x7a, 0xd5, 0x34, 0xc1, 0x5c, 0xa1, 0x88, 0x78, 0x91, 0x2f, 0x21,
	0x7a, 0x81, 0x0b, 0xe6, 0x40, 0xb0, 0x8a, 0x4e, 0x0a, 0xcc, 0x22, 0x00, 0xa4, 0xde, 0x7a, 0x6c,
	0x37, 0xc7, 0x62, 0x70, 0x3d, 0xcc, 0x08, 0xb8, 0x1e, 0x86, 0x3c, 0xd7, 0x54, 0x69, 0xd1, 0xab,
	0xe2, 0x83, 0x19, 0x0a, 0xee, 0x87, 0x98, 0x1a, 0x10, 0x9f, 0x6b, 0x62, 0xb0, 0x29, 0x36, 0x55,
	0x37, 0xc9, 0xf3, 0x81, 0x0c, 0x9f, 0xf7, 0x39, 0xb8, 0x23, 0xe2, 0xa7, 0xf6, 0x28, 0xd1, 0x4d,
	0xda, 0xf9, 0xe4, 0xb7, 0x0f, 0xa2, 0x71, 0xa8, 0xa8, 0x97, 0xd1, 0x64, 0x94, 0x92, 0x36, 0x21,
	0xa5, 0x89, 0x32, 0xd4, 0xd0, 0x0e, 0x9a, 0x8b, 0xd4, 0xce, 0xe0, 0x64, 0x1f, 0x68, 0x64, 0x39,
	0x66, 0xf0, 0xd5, 0x70, 0x7f, 0x9e, 0x29, 0x87, 0x34, 0xf7, 0x0d, 0x34, 0xb6, 0x1b, 0xad, 0x5d,
	0x10, 0x78, 0x5c, 0xf6, 0x55, 0xb6, 0xee, 0x77, 0x4f, 0xd2, 0x8f, 0x81, 0xbe, 0xfe, 0x6d, 0x78,
	0x60, 0xd7, 0xca, 0x21, 0xe5, 0xa8, 0xdd, 0x42, 0xb3, 0x2a, 0x8d, 0x1f, 0xb8, 0xe4, 0x7e, 0x09,
	0xba, 0xe4, 0x66, 0x6a, 0x21, 0x75, 0x1f, 0xbe, 0xd2, 0x61, 0xef, 0x93, 0x5e, 0xe9, 0x90, 0xfc,
	0x9e, 0x41, 0x34, 0xed, 0x4f, 0x56, 0xae, 0x4e, 0xed, 0xb0, 0xff, 0x6f, 0xc2, 0xfe, 0x2f, 0x9a,
	0x30, 0xc5, 0x89, 0x74, 0xef, 0x8e, 0x27, 0xd2, 0x91, 0xd0, 0x89, 0xf4, 0x0b, 0x63, 0x08, 0x59,
	0xad, 0x9e, 0x57, 0x6b, 0x92, 0xe9, 0x3a, 0x8b, 0x50, 0x87, 0xfe, 0x25, 0xea, 0xe1, 0x7f, 0xbf,
	0x47, 0x88, 0x51, 0x50, 0x90, 0x4c, 0x55, 0xbb, 0x8d, 0x26, 0x7c, 0x78, 0x95, 0xc3, 0x9e, 0x51,
	0x16, 0xf6, 0x84, 0x5f, 0x83, 0x97, 0x30, 0x8c, 0x77, 0x02, 0x88, 0xe4, 0xaf, 0x0e, 0x22, 0x54,
	0xec, 0x54, 0xb7, 0x6d, 0xba, 0x73, 0xbe, 0x82, 0x34, 0xaf, 0x53, 0xae, 0xd2, 0x14, 0x86, 0x6e,
	0x97, 0x45, 0x5a, 0x62, 0x62, 0x18, 0xae, 0x48, 0x21, 0x6c, 0x0a, 0x90, 0x49, 0xf3, 0x66, 0x0a,
	0x31, 0xc1, 0xb6, 0x8d, 0x7b, 0x22, 0x60, 0x55, 0x7b, 0x0f, 0x4a, 0x86, 0xc9, 0x87, 0x12, 0x81,
	0x06, 0xf8, 0x33, 0x95, 0x8c, 0xa0, 0xff, 0x4c, 0xe5, 0x11, 0x99, 0xa0, 0x9c, 0xf7, 0xb3, 0x8d,
	0x16, 0x64, 0xfa, 0x2c, 0x94, 0x33, 0x28, 0x57, 0xfb, 0x42, 0x42, 0x76, 0xef, 0x3e, 0x18, 0xc5,
	0xeb, 0x40, 0xbb, 0xae, 0xc7, 0xac, 0x59, 0x2f, 0x04, 0x5b, 0xd5, 0x5c, 0xf4, 0x94, 0xba, 0xa1,
	0xd0, 0x60, 0x86, 0xf8, 0x60, 0x18, 0xdd, 0x83, 0x8c, 0x6e, 0x52, 0x41, 0x57, 0xbe, 0xf5, 0x70,
	0x11, 0x25, 0x14, 0xfc, 0xa2, 0x4f, 0x41, 0x1c, 0x46, 0x07, 0x23, 0xba, 0x40, 0x4d, 0xee, 0x07,
	0x68, 0x52, 0x30, 0xf3, 0xb5, 0x0d, 0xb1, 0x46, 0x51, 0x8e, 0x01, 0x1c, 0x0c, 0x67, 0x07, 0x84,
	0xce, 0x6c, 0x73, 0x3d, 0xc5, 0xb7, 0xe4, 0x57, 0x0d, 0xa2, 0x11, 0xf6, 0x56, 0x27, 0x16, 0x66,
	0xf2, 0x2c, 0x13, 0x3d, 0x3d, 0xc5, 0x82, 0x5b, 0xd5, 0x85, 0xe7, 0x3f, 0x09, 0x08, 0x39, 0x3d,
	0x5d, 0x47, 0xa3, 0x14, 0xbe, 0xfd, 0xa8, 0x8f, 0x9b, 0xbf, 0x02, 0x77, 0xf8, 0x11, 0x82, 0x50,
	0x78, 0x14, 0xb4, 0x25, 0x59, 0x88, 0x55, 0x21, 0xb8, 0x47, 0x40, 0x88, 0x19, 0xba, 0xc6, 0xe1,
	0x03, 0x53, 0x6a, 0x3e, 0x78, 0x6c, 0x54, 0x4e, 0x34, 0x2e, 0x4b, 0xaf, 0xac, 0xba, 0x3e, 0x84,
	0x66, 0xa2, 0xc5, 0x80, 0x50, 0x68, 0xc6, 0x87, 0xf9, 0x8c, 0x97, 0xa5, 0x57, 0x56, 0x39, 0x05,
	0x59, 0x6e, 0x5f, 0xe0, 0x3d, 0xab, 0x35, 0x5c, 0xc1, 0x15, 0x2f, 0x46, 0x87, 0x1e, 0x0f, 0xf1,
	0xe8, 0xd0, 0xa8, 0xdf, 0xa1, 0x5a, 0xc3, 0xc5, 0x47, 0x2e, 0xd0, 0x21, 0x3a, 0xff, 0x1f, 0x89,
	0xa1, 0x71, 0x50, 0x77, 0xa3, 0x5d, 0x01, 0xef, 0x52, 0xd2, 0x62, 0x1d, 0xa0, 0x6b, 0x3e, 0x11,
	0x13, 0x2e, 0x8f, 0x61, 0x70, 0xa4, 0x3a, 0x47, 0x73, 0xd1, 0x82, 0x84, 0x18, 0x71, 0x27, 0xa1,
	0x0d, 0xd0, 0xe4, 0xcd, 0xe1, 0xa7, 0x61, 0x03, 0xb3, 0x42, 0x03, 0xec, 0x16, 0x88, 0x9f, 0x88,
	0x91, 0x23, 0x22, 0xec, 0x32, 0x7b, 0x2c, 0x20, 0xba, 0xdb, 0xaf, 0x0c, 0x48, 0xf7, 0xf3, 0xda,
	0x42, 0xcf, 0x5b, 0x68, 0x51, 0x81, 0x2f, 0xf6, 0x3e, 0xa9, 0xb8, 0x94, 0x5c, 0x35, 0x80, 0xf7,
	0xc8, 0x17, 0x6c, 0xda, 0x8a, 0x31, 0xfc, 0x5e, 0x0c, 0x4d, 0x89, 0xe5, 0x4e, 0x52, 0x59, 0x6e,
	0xf4, 0x50, 0x3e, 0x19, 0x53, 0xa7, 0x3e, 0x8b, 0x23, 0xfa, 0xfc, 0x18, 0x3a, 0x16, 0x4d, 0x4e,
	0x1c, 0xd9, 0xe9, 0xe8, 0x42, 0x3a, 0xd5, 0x00, 0x7f, 0x16, 0x76, 0xe0, 0x50, 0x44, 0x07, 0xd8,
	0x38, 0xbf, 0x61, 0x00, 0x8d, 0xfa, 0x6f, 0xc5, 0x68, 0xef, 0x42, 0xf4, 0x1d, 0x5c, 0x56, 0x80,
	0xab, 0xbc, 0xae, 0x83, 0x68, 0x0b, 0x5a, 0x71, 0x2b, 0xac, 0xb1, 0x6d, 0x71, 0x8d, 0x51, 0x27,
	0x54, 0x00, 0xa7, 0xbd, 0x8c, 0x8e, 0x85, 0x68, 0xf7, 0xd9, 0x2f, 0xb6, 0xc5, 0x05, 0x77, 0x58,
	0x22, 0x27, 0x2f, 0xbb, 0x9b, 0xec, 0xf1, 0x5f, 0x9f, 0x7a, 0x10, 0xb1, 0x66, 0xb7, 0xf1, 0x0b,
	0xd7, 0x3f, 0x03, 0x62, 0x24, 0x4a, 0xbd, 0xb2, 0x1f, 0xed, 0x0b, 0x77, 0x8e, 0x2e, 0xbe, 0xbf,
	0x89, 0xa1, 0x71, 0x70, 0x5b, 0x14, 0x3e, 0x4e, 0x06, 0x37, 0x4b, 0xa9, 0xee, 0x08, 0xf4, 0x81,
	0x05, 0xee, 0xcc, 0xc2, 0xb4, 0x99, 0x89, 0x2a, 0x00, 0xd1, 0xee, 0x21, 0x7a, 0x41, 0x14, 0xa5,
	0x28, 0xcc, 0xfb, 0x01, 0xc1, 0xf9, 0x84, 0x31, 0xa4, 0x99, 0xfe, 0x96, 0x3d, 0x80, 0x2c, 0xbd,
	0x43, 0x28, 0x80, 0xd2, 0x6e, 0xa1, 0xc9, 0xe0, 0x9a, 0x23, 0x6c, 0x94, 0xd2, 0xc3, 0xdb, 0x5c,
	0xe8, 0x8e, 0xa3, 0xc0, 0x26, 0x0d, 0xee, 0x62, 0xc2, 0x26, 0xe9, 0x0f, 0xc4, 0xd0, 0xb4, 0x74,
	0x5f, 0x11, 0xb9, 0x80, 0x0a, 0xdc, 0x9d, 0xc4, 0x36, 0xe5, 0x40, 0xfa, 0x67, 0x06, 0xc5, 0xf7,
	0x6b, 0xfd, 0x1b, 0x92, 0xe8, 0x6e, 0xbb, 0x85, 0xf6, 0x85, 0xb1, 0xa1, 0xf1, 0x73, 0x24, 0x7c,
	0x01, 0x13, 0xd9, 0xd3, 0x05, 0x6e, 0x6a, 0xc2, 0x2d, 0x1e, 0x52, 0x1b, 0xc4, 0x18, 0xfa, 0xaa,
	0x01, 0x84, 0x40, 0xa7, 0xcf, 0xa3, 0x89, 0x88, 0xee, 0x8e, 0x8b, 0xf7, 0xc5, 0x05, 0x3d, 0xbd,
	0x87, 0x66, 0xa2, 0xfa, 0xb8, 0x28, 0xdc, 0x54, 0x19, 0xee, 0xde, 0x71, 0x71, 0x29, 0x4c, 0xb5,
	0x85, 0xbe, 0x69, 0xaf, 0xa0, 0x64, 0x88, 0x32, 0x5f, 0x09, 0xcb, 0xe7, 0xd8, 0x52, 0x18, 0xe4,
	0x4b, 0x81, 0x91, 0x3b, 0xe4, 0x2f, 0x05, 0x91, 0x9c, 0x25, 0x21, 0x62, 0x59, 0x0e, 0x93, 0xa7,
	0xb2, 0xfc, 0x23, 0x31, 0x34, 0x25, 0x5e, 0xd9, 0x8a, 0x15, 0xb3, 0x70, 0x7f, 0x6c, 0x88, 0x41,
	0xc7, 0x04, 0xc5, 0x0c, 0x2e, 0x89, 0xa5, 0x6c, 0xaa, 0xa1, 0x84, 0x02, 0x1f, 0x72, 0xeb, 0xa8,
	0xe2, 0x1a, 0xda, 0x30, 0xcf, 0x4e, 0xc2, 0x29, 0x9d, 0x93, 0x9b, 0x21, 0x73, 0xfa, 0xf1, 0x18,
	0x9a, 0x96, 0x12, 0xe7, 0xf0, 0x41, 0x40, 0x48, 0xe4, 0x0b, 0x75, 0xff, 0xbf, 0xc3, 0xee, 0x0b,
	0x49, 0x7f, 0xb4, 0xff, 0xaf, 0xf9, 0xfd, 0xbf, 0x10, 0xd5, 0xff, 0x63, 0xaa, 0x84, 0xc0, 0xf0,
	0x00, 0x9e, 0x86, 0x03, 0x98, 0x0f, 0x35, 0x14, 0x1a, 0xc1, 0x45, 0x79, 0x04, 0x17, 0x23, 0x46,
	0xf0, 0x43, 0x83, 0xe1, 0x11, 0x5c, 0x54, 0x8d, 0xe0, 0xe2, 0x2e, 0x47, 0x70, 0x31, 0x62, 0x04,
	0x3f, 0xac, 0x18, 0xc1, 0x45, 0x69, 0x04, 0x1f, 0x18, 0x40, 0xf3, 0xb6, 0xd7, 0x29, 0x7b, 0xee,
	0xf6, 0xe3, 0x42, 0xb9, 0x53, 0x6e, 0xb8, 0x9e, 0xdb, 0x21, 0xe7, 0x8d, 0x35, 0xb4, 0xaf, 0xcb,
	0x3e, 0x60, 0x51, 0xa0, 0x5f, 0xe8, 0x4d, 0x62, 0xc1, 0x58, 0xfe, 0x95, 0x70, 0xcf, 0x4f, 0x57,
	0x26, 0x44, 0x2e, 0x0b, 0x7b, 0x55, 0x49, 0x48, 0x35, 0x9c, 0x50, 0x47, 0xc4, 0x6b, 0x0a, 0x85,
	0xe1, 0x74, 0x55, 0xb0, 0x5a, 0x06, 0x25, 0x14, 0x6d, 0xc9, 0x9b, 0xc7, 0x8f, 0xc3, 0x5e, 0x2f,
	0x84, 0x28, 0xd1, 0x44, 0xa7, 0x7f, 0x3e, 0xc8, 0x52, 0x6a, 0x84, 0x02, 0x24, 0x72, 0x50, 0x15,
	0x4a, 0x9b, 0xa4, 0x94, 0xcd, 0xbf, 0x1b, 0x14, 0x0f, 0xaa, 0x90, 0xc0, 0xe3, 0x4c, 0x55, 0x7b,
	0x1d, 0x2d, 0x2a, 0x08, 0x88, 0xdb, 0xc4, 0x71, 0xf5, 0xeb, 0xf6, 0xe1, 0xe4, 0xcd, 0xc5, 0xf0,
	0x43, 0xfa, 0xb0, 0x31, 0xb6, 0x6d, 0x54, 0xd1, 0x7c, 0xa8, 0x49, 0x90, 0xc3, 0x79, 0x24, 0xa2,
	0x35, 0x21, 0x8d, 0xf3, 0x00, 0xbc, 0x60, 0x6a, 0xb6, 0x16, 0x86, 0xd4, 0x36, 0xd1, 0x3e, 0xd8,
	0x4a, 0xf8, 0xc6, 0xbc, 0x83, 0x8a, 0x76, 0xe4, 0x6b, 0xf3, 0xe6, 0x6a, 0x8a, 0x6f, 0xc9, 0x5f,
	0x89, 0xb1, 0x38, 0xa7, 0xf4, 0x41, 0x5b, 0x15, 0xdb, 0x54, 0xaf, 0xb7, 0x43, 0xb0, 0x0e, 0x72,
	0x4e, 0xea, 0x3a, 0x5d, 0x72, 0x3d, 0x74, 0x30, 0x82, 0x0e, 0x94, 0xd3, 0x13, 0x11, 0x8c, 0x0a,
	0xaf, 0xbc, 0xc3, 0x90, 0x5b, 0x09, 0x55, 0x93, 0x64, 0xf1, 0xfd, 0xf9, 0x20, 0x49, 0x17, 0x57,
	0x15, 0xba, 0x89, 0x37, 0xb3, 0xf4, 0x17, 0xb9, 0xe3, 0x70, 0x80, 0x07, 0x54, 0xe7, 0x40, 0x5f,
	0xf8, 0xbe, 0x5c, 0x7c, 0x6f, 0x71, 0x47, 0x41, 0x3c, 0xd3, 0xef, 0xe0, 0xa9, 0x16, 0xc9, 0x13,
	0x50, 0x24, 0x8f, 0xf5, 0xe9, 0x0c, 0x13, 0xce, 0xf7, 0x8b, 0x05, 0x70, 0xfd, 0x04, 0xf5, 0xf4,
	0x8e, 0xbd, 0x11, 0x44, 0xf6, 0x24, 0x9c, 0x84, 0x43, 0xbd, 0x7e, 0x38, 0x5a, 0x8d, 0xd4, 0xa9,
	0x48, 0x75, 0x8b, 0x61, 0x11, 0x3e, 0x16, 0x55, 0xbc, 0x28, 0xcb, 0xf1, 0xfe, 0x5e, 0x14, 0x40,
	0xf2, 0xcb, 0x06, 0xd0, 0xfe, 0x48, 0x74, 0xed, 0xdd, 0x28, 0xd9, 0x8f, 0x1b, 0x21, 0xe1, 0x7e,
	0x1a, 0xce, 0xfd, 0xe1, 0xc8, 0x41, 0x52, 0x31, 0x7f, 0x33, 0x86, 0x9e, 0xde, 0x99, 0x3a, 0x14,
	0xf9, 0xb3, 0x3b, 0xb2, 0x3c, 0x2c, 0xfc, 0xa7, 0x20, 0xdf, 0x93, 0xfd, 0xbb, 0x44, 0x96, 0xc1,
	0x1f, 0x0f, 0x21, 0x2d, 0x5d, 0xeb, 0xb6, 0xeb, 0xe5, 0xc7, 0x20, 0xb9, 0x5a, 0xcb, 0xa0, 0x78,
	0x95, 0xfe, 0xea, 0x3c, 0xa8, 0x6d, 0x3f, 0xd8, 0xe1, 0x6a, 0xde, 0x17, 0x60, 0xba, 0xe1, 0x14,
	0x43, 0x5c, 0xaf, 0x6d, 0x3f, 0xa0, 0x09, 0x34, 0xd3, 0x3e, 0xa9, 0x7a, 0xeb, 0x8d, 0x1d, 0x12,
	0x17, 0x6f, 0x42, 0x4a, 0x93, 0x0c, 0x2f, 0xdb, 0x7a, 0x03, 0x13, 0xba, 0x83, 0x7c, 0xd2, 0x7e,
	0xbd, 0xb5, 0x74, 0x61, 0x37, 0x1b, 0x87, 0xf4, 0x6e, 0xf6, 0x0d, 0xb8, 0x28, 0x7c, 0x92, 0xac,
	0x04, 0x1b, 0x0c, 0xb3, 0x51, 0x6b, 0x92, 0x47, 0xea, 0xfb, 0x04, 0x54, 0x6e, 0xa9, 0x86, 0x99,
	0xab, 0x35, 0x33, 0xcd, 0x0a, 0x79, 0x79, 0xdf, 0x27, 0xd5, 0x3f, 0x9c, 0xd2, 0x81, 0x54, 0x10,
	0xc3, 0xa1, 0x29, 0xb1, 0x13, 0x3e, 0x85, 0x37, 0x1e, 0xb8, 0x4d, 0x39, 0x07, 0x9a, 0x8d, 0x6e,
	0xe3, 0x81, 0x1b, 0x64, 0xc9, 0x3f, 0x0f, 0xc7, 0xe6, 0xb7, 0x8f, 0x21, 0x70, 0x77, 0x3a, 0xee,
	0x56, 0xc7, 0xed, 0x3e, 0xd8, 0x21, 0xd8, 0xf2, 0xa2, 0xd0, 0x1d, 0x86, 0x83, 0xbb, 0x63, 0xa3,
	0xf9, 0x20, 0x5c, 0x02, 0x87, 0x36, 0x1a, 0x49, 0xeb, 0x3a, 0xa4, 0x15, 0x04, 0x6b, 0xd2, 0x7c,
	0x8c, 0xc9, 0xbf, 0x1d, 0x43, 0xf3, 0xc5, 0x4e, 0x6d, 0x7b, 0xdb, 0x95, 0xd2, 0xf9, 0xf1, 0xec,
	0x7a, 0xf4, 0x83, 0x53, 0x86, 0xd5, 0x02, 0xfb, 0x03, 0xdf, 0x24, 0xf9, 0xaa, 0x8b, 0x75, 0x02,
	0x39, 0x61, 0x76, 0x3d, 0x08, 0x43, 0xef, 0x5e, 0xa4, 0x24, 0x9b, 0xee, 0x1b, 0xac, 0xb2, 0x29,
	0x5a, 0xf6, 0xee, 0x0e, 0x01, 0x6f, 0xda, 0x34, 0xc3, 0xcc, 0xbb, 0x6f, 0xd0, 0xa2, 0xa6, 0x35,
	0x34, 0x0d, 0x89, 0xf5, 0x77, 0xd6, 0xdf, 0x13, 0xc4, 0x38, 0x20, 0x85, 0xf9, 0xfa, 0x6e, 0xa4,
	0xf9, 0x84, 0x68, 0x10, 0x0a, 0xb8, 0xdd, 0x0e, 0x4a, 0x83, 0x25, 0xb1, 0x27, 0x61, 0x81, 0x6f,
	0xc0, 0xf1, 0xc6, 0x3d, 0x09, 0x4c, 0x4b, 0x23, 0xbf, 0xb5, 0x1d, 0x0b, 0xb9, 0xf2, 0x70, 0xb8,
	0x13, 0x0c, 0x8b, 0x8e, 0xf5, 0x55, 0xb4, 0x4f, 0xa0, 0x12, 0xba, 0x2f, 0xfe, 0x98, 0xd4, 0x4f,
	0xfa, 0x90, 0x6f, 0xe8, 0xce, 0xf8, 0x12, 0xec, 0xec, 0xbc, 0xa7, 0x82, 0x85, 0xec, 0x00, 0x35,
	0x62, 0x23, 0x4a, 0x76, 0x84, 0x6b, 0xc3, 0x6c, 0x15, 0x3b, 0x82, 0x0b, 0x60, 0x5f, 0x43, 0x89,
	0x30, 0x71, 0x76, 0x47, 0xfd, 0x68, 0xf4, 0x48, 0xc8, 0xfd, 0x9d, 0xc2, 0x85, 0xf5, 0xc5, 0xc8,
	0x91, 0x70, 0x58, 0x2d, 0x85, 0xfc, 0x0f, 0xd2, 0x0d, 0x59, 0x41, 0x88, 0xd1, 0x12, 0x6e, 0x89,
	0x67, 0xd0, 0xc2, 0xf5, 0x58, 0xb7, 0xd0, 0x6c, 0x88, 0x88, 0x90, 0x67, 0x5b, 0x80, 0x24, 0x66,
	0x24, 0x12, 0xd4, 0xc6, 0x55, 0x10, 0xf0, 0x4d, 0x8b, 0x71, 0xd1, 0xc6, 0x2d, 0x4a, 0xe8, 0xb2,
	0x41, 0x71, 0x07, 0x36, 0xb6, 0x2f, 0xd4, 0x18, 0x33, 0x23, 0x2e, 0x07, 0x4b, 0x97, 0xdd, 0xc7,
	0x14, 0xdc, 0x13, 0x68, 0x0a, 0x17, 0xef, 0xfb, 0x14, 0xe8, 0x65, 0x4c, 0xd9, 0xa0, 0xab, 0x8a,
	0xe8, 0xca, 0x24, 0xa7, 0xb1, 0xa9, 0xea, 0x45, 0x51, 0x0e, 0xa2, 0xd8, 0xe8, 0x70, 0x14, 0x35,
	0xb6, 0x73, 0x07, 0x77, 0x06, 0xbe, 0x0b, 0x52, 0x5c, 0x54, 0x52, 0xa4, 0xbb, 0xf6, 0x6d, 0x34,
	0xc1, 0x89, 0x2a, 0x92, 0x75, 0x19, 0xff, 0x04, 0x91, 0xcc, 0x0a, 0x3a, 0xd9, 0x0b, 0x20, 0x92,
	0x1f, 0x1f, 0x40, 0xe3, 0x56, 0xab, 0xc5, 0xed, 0xcc, 0x8b, 0x68, 0xb2, 0xd3, 0x6a, 0x29, 0xcd,
	0xca, 0x57, 0x60, 0x07, 0xc7, 0x3b, 0x0c, 0x09, 0xcf, 0xaf, 0x83, 0xe6, 0x04, 0xa4, 0x88, 0x78,
	0xa4, 0xc5, 0x51, 0x42, 0x1e, 0x5b, 0xd8, 0xbf, 0x19, 0x40, 0x9a, 0xcd, 0xa6, 0x85, 0xa6, 0x41,
	0x03, 0xc0, 0x04, 0xdc, 0x1f, 0xa2, 0x2d, 0x98, 0x7c, 0x0e, 0x34, 0x3d, 0x26, 0x3b, 0x10, 0x46,
	0x5b, 0x45, 0x71, 0x42, 0x13, 0x4f, 0x84, 0xef, 0x3f, 0x93, 0x5e, 0xbf, 0xc1, 0x44, 0xed, 0xde,
	0x7d, 0xd1, 0x83, 0x36, 0xd5, 0x11, 0x7e, 0x4d, 0x7e, 0x4f, 0x0c, 0x4d, 0x89, 0x80, 0xda, 0x75,
	0x34, 0x03, 0xba, 0x1b, 0xb2, 0xd1, 0xca, 0x90, 0x91, 0x53, 0xbc, 0x57, 0x74, 0x76, 0x2b, 0x68,
	0x21, 0x84, 0x0b, 0x2d, 0xb0, 0xc3, 0xa1, 0x11, 0x87, 0x2d, 0xae, 0xfb, 0x70, 0xd8, 0x9a, 0xd8,
	0x00, 0x99, 0xf5, 0xcf, 0xd7, 0xd0, 0x64, 0xb1, 0x53, 0xc5, 0x62, 0x95, 0xed, 0xfe, 0x3f, 0x91,
	0x2b, 0x74, 0x03, 0xcd, 0x84, 0xaf, 0xd9, 0x0b, 0x0e, 0xe4, 0x9f, 0xde, 0xc3, 0xaf, 0xd9, 0xa3,
	0x69, 0x0f, 0xe2, 0xe5, 0x7a, 0x7e, 0xa6, 0xd1, 0x50, 0x9f, 0x4c, 0x23, 0xcd, 0x44, 0xb3, 0x5e,
	0xcb, 0x2b, 0xd7, 0x9d, 0x87, 0xad, 0x7a, 0xaf, 0xe1, 0xd2, 0xfa, 0x8e, 0x6a, 0x9f, 0xcd, 0xe7,
	0xfd, 0x30, 0x5d, 0x71, 0x86, 0xe0, 0xde, 0x25, 0xa8, 0xa4, 0xbe, 0x83, 0x54, 0x8b, 0x60, 0x1a,
	0x78, 0x05, 0x3b, 0x95, 0x7a, 0xab, 0xeb, 0xee, 0x14, 0x02, 0xba, 0x07, 0x0b, 0x84, 0x48, 0x84,
	0xd5, 0x76, 0xbb, 0x29, 0x8c, 0x49, 0x2a, 0x84, 0x5e, 0xc2, 0xa6, 0x00, 0xa3, 0xe7, 0x36, 0xab,
	0x94, 0xda, 0x48, 0x24, 0xb5, 0x4d, 0x48, 0x6d, 0x8a, 0x51, 0x33, 0x9a, 0x55, 0x42, 0xcb, 0xc2,
	0x96, 0x00, 0xa3, 0xc5, 0x0c, 0xd1, 0x51, 0xd9, 0x54, 0x21, 0x08, 0x92, 0x21, 0x6a, 0xc5, 0xe0,
	0x02, 0xf1, 0x20, 0x8c, 0x96, 0x45, 0x93, 0x01, 0xcd, 0x56, 0x95, 0x5e, 0x2e, 0x2b, 0x28, 0x1a,
	0x0a, 0xdd, 0x02, 0xaf, 0xb9, 0xda, 0x90, 0xde, 0xb8, 0x17, 0x40, 0x68, 0x59, 0x1a, 0xae, 0x26,
	0xd4, 0x5a, 0x6d, 0xb7, 0x49, 0x87, 0x8b, 0x22, 0x87, 0x7b, 0x37, 0x26, 0xde, 0x3a, 0x4d, 0x28,
	0x99, 0x6d, 0xb7, 0x49, 0xc6, 0x5b, 0xc2, 0xd6, 0x00, 0xa3, 0xd6, 0xee, 0xb8, 0x70, 0x3e, 0xc6,
	0x23, 0x49, 0x6e, 0x40, 0x92, 0xb3, 0x8c, 0x64, 0xa1, 0xe3, 0x06, 0x53, 0x02, 0xa7, 0x98, 0xde,
	0x43, 0x44, 0x48, 0x4e, 0x44, 0x92, 0x2c, 0xa9, 0xa6, 0x98, 0xdc, 0x41, 0x44, 0xe8, 0x15, 0xc1,
	0xb4, 0xb0, 0x67, 0x3c, 0x26, 0x95, 0xd3, 0x22, 0xbd, 0xe3, 0x51, 0x8c, 0x09, 0x0e, 0xe6, 0x49,
	0x0f, 0x42, 0x69, 0xf7, 0xd0, 0x11, 0x89, 0x6a, 0x28, 0xce, 0x12, 0xe7, 0xce, 0xe5, 0xa2, 0x18,
	0x97, 0x3f, 0x28, 0x90, 0x92, 0xa3, 0x2c, 0x64, 0xa3, 0x96, 0x29, 0xbf, 0xea, 0x74, 0xdc, 0x72,
	0xb7, 0xd5, 0x24, 0x7b, 0x15, 0x88, 0xc2, 0x15, 0x45, 0x4a, 0xaf, 0x5a, 0x04, 0x8a, 0x8f, 0xe1,
	0x0a, 0xc8, 0x31, 0x59, 0x8f, 0x59, 0x0b, 0x9e, 0x12, 0x5c, 0xab, 0xa3, 0xa5, 0xe8, 0x26, 0x43,
	0xe3, 0x9a, 0xe6, 0xe3, 0xba, 0x22, 0x86, 0xe8, 0x4f, 0xaa, 0xc9, 0xcb, 0x03, 0x54, 0x27, 0x4d,
	0xcc, 0xbc, 0x93, 0xa4, 0x89, 0x81, 0x77, 0x9c, 0x34, 0xa1, 0xa9, 0x93, 0x26, 0x06, 0x3e, 0x93,
	0xa4, 0x89, 0xd9, 0x77, 0x98, 0x34, 0x31, 0xf8, 0x99, 0x26, 0x4d, 0xcc, 0xa9, 0x93, 0x26, 0x06,
	0x77, 0x93, 0x34, 0xa1, 0xa5, 0xd1, 0x7c, 0xaf, 0xd9, 0x6d, 0xd5, 0x6b, 0x95, 0x9a, 0xe7, 0x56,
	0x49, 0x56, 0x6e, 0xa5, 0xec, 0xb5, 0x3a, 0xe4, 0x92, 0xdc, 0x51, 0xfa, 0xf8, 0x16, 0x65, 0xd1,
	0xa8, 0x9f, 0xd4, 0xc0, 0xa1, 0x33, 0x3e, 0xb0, 0xf6, 0x2c, 0x1a, 0x6b, 0x94, 0x3b, 0xaf, 0xb9,
	0x24, 0x4c, 0x1b, 0xdc, 0x80, 0x3b, 0x3f, 0xcc, 0x37, 0x91, 0x51, 0x6b, 0x94, 0x42, 0x64, 0xaa,
	0xda, 0xf3, 0x68, 0x86, 0x41, 0x77, 0xdd, 0x6d, 0xe2, 0xec, 0xa8, 0x55, 0xc9, 0xe5, 0xb6, 0x14,
	0x6b, 0x0e, 0xd6, 0x28, 0x4d, 0x53, 0x48, 0x9b, 0x02, 0x66, 0xaa, 0x9a, 0x8e, 0xe6, 0x64, 0xbe,
	0x10, 0x73, 0x3a, 0xc1, 0xf1, 0xcf, 0x42, 0x7c, 0x4d, 0xe4, 0x01, 0xb1, 0xa6, 0x4b, 0xd8, 0x24,
	0x17, 0x49, 0x74, 0x7a, 0x75, 0xb7, 0x4b, 0x2e, 0xad, 0x1d, 0x0f, 0x42, 0x82, 0xe2, 0x14, 0x5a,
	0x18, 0x84, 0x95, 0xcd, 0x48, 0x33, 0x46, 0x3e, 0x69, 0x75, 0x2a, 0x1a, 0x64, 0x1d, 0xf5, 0xda,
	0xd5, 0xb2, 0xe7, 0xfa, 0x67, 0xd6, 0xc5, 0xb0, 0x68, 0xd8, 0x6e, 0xb7, 0x44, 0x60, 0xc0, 0xc9,
	0x75, 0xe1, 0xeb, 0xdf, 0x3e, 0xf0, 0xdc, 0x30, 0xb7, 0xc3, 0xd0, 0xc7, 0xde, 0x3e, 0xf0, 0x1e,
	0x72, 0xad, 0x89, 0x17, 0x46, 0xd0, 0x6e, 0x93, 0xbd, 0xa1, 0xd9, 0x2d, 0x57, 0x98, 0x8a, 0x3c,
	0xa0, 0x54, 0x91, 0x98, 0xe6, 0x8d, 0x3d, 0x5c, 0x45, 0x72, 0x9a, 0x13, 0x3e, 0x32, 0x49, 0x89,
	0xd8, 0x47, 0x39, 0x02, 0x55, 0x00, 0xcd, 0x9b, 0x49, 0xa2, 0xa3, 0x7d, 0x74, 0x03, 0x85, 0xf9,
	0x4c, 0xf2, 0x6e, 0x7e, 0x60, 0x10, 0xa1, 0x5c, 0x97, 0x64, 0x57, 0x61, 0x1b, 0x28, 0x8f, 0x26,
	0x1b, 0x5d, 0xf8, 0xcc, 0x9f, 0x14, 0xf8, 0xcd, 0x75, 0x15, 0x2f, 0xfc, 0xfd, 0xb3, 0x18, 0x0c,
	0xfc, 0x36, 0x00, 0x88, 0x56, 0x40, 0xd3, 0x1d, 0x77, 0xcb, 0x29, 0xb7, 0xdb, 0x75, 0xe7, 0x21,
	0xcd, 0xec, 0x94, 0x32, 0x93, 0x2d, 0x77, 0x4b, 0x6f, 0xb7, 0xeb, 0x77, 0xdd, 0x0e, 0x58, 0x9f,
	0xaf, 0x42, 0xf3, 0x70, 0xa2, 0x13, 0x80, 0x54, 0xb5, 0x5b, 0x68, 0x8e, 0x14, 0xc9, 0x77, 0xbd,
	0x86, 0x40, 0x36, 0xb0, 0x9c, 0x5e, 0x13, 0x9e, 0xb9, 0xea, 0xb8, 0x5b, 0xa9, 0xae, 0xd7, 0x08,
	0x08, 0x64, 0x10, 0x26, 0xe8, 0xe0, 0x61, 0x82, 0x23, 0xfe, 0x02, 0xe8, 0x0f, 0xe3, 0x07, 0xef,
	0x8d, 0x27, 0x14, 0xec, 0x77, 0x38, 0x00, 0x3e, 0x5a, 0x56, 0xdd, 0xad, 0x72, 0xaf, 0xee, 0xd1,
	0x5e, 0xf0, 0xb5, 0x3b, 0xcc, 0xd7, 0xee, 0xe7, 0x0d, 0xf3, 0xb5, 0x3b, 0x6a, 0xcd, 0x32, 0x68,
	0xdc, 0x11, 0xbe, 0x74, 0x2f, 0x03, 0x16, 0x61, 0x13, 0x92, 0x25, 0xec, 0x52, 0x0b, 0xf2, 0x73,
	0x84, 0x87, 0x81, 0x19, 0x23, 0x8c, 0x47, 0x5e, 0xa6, 0x9a, 0xfc, 0xce, 0x01, 0x34, 0xc7, 0x6f,
	0x0f, 0xa6, 0x53, 0x4c, 0x97, 0x41, 0x16, 0x69, 0xf7, 0xc9, 0x9d, 0xd2, 0x6c, 0xde, 0xe9, 0xd2,
	0xa2, 0x6e, 0x42, 0xce, 0xf6, 0x95, 0x72, 0xd7, 0x85, 0x58, 0x6c, 0x5d, 0xc5, 0xef, 0x4b, 0xbf,
	0x6b, 0xdb, 0xe8, 0x00, 0x0b, 0x7e, 0x02, 0xdf, 0x68, 0x70, 0x79, 0xf9, 0x80, 0xe8, 0x04, 0xa6,
	0xd1, 0xb7, 0xc0, 0xad, 0xc9, 0xaf, 0x2d, 0x67, 0xf4, 0xf7, 0x37, 0xa3, 0x00, 0x34, 0x07, 0xed,
	0x57, 0x2a, 0x05, 0xe2, 0x6b, 0x1e, 0x14, 0x2f, 0xca, 0x53, 0x28, 0x86, 0xa0, 0xc2, 0x6f, 0xc1,
	0x53, 0x7e, 0x4d, 0xbe, 0x1d, 0x63, 0xaf, 0x37, 0xa5, 0x5d, 0xaf, 0x5c, 0xab, 0x77, 0xb5, 0x77,
	0xfb, 0x61, 0xfe, 0xd6, 0xfd, 0x7a, 0x6d, 0xdb, 0x3f, 0xb1, 0x49, 0xe9, 0x83, 0x04, 0xc3, 0xc4,
	0x00, 0xd2, 0x81, 0xed, 0x8b, 0x83, 0x03, 0xdb, 0xa8, 0x45, 0x6b, 0x48, 0x00, 0x58, 0x38, 0x31,
	0x61, 0x60, 0x87, 0xc4, 0x84, 0x51, 0x29, 0x31, 0xe1, 0xc7, 0x68, 0x46, 0x14, 0x99, 0xdf, 0x7b,
	0xb9, 0x2c, 0x3e, 0x9e, 0xf0, 0xf3, 0xc2, 0xa3, 0x46, 0x1d, 0x1c, 0x4f, 0x3e, 0x44, 0x7b, 0x92,
	0xa4, 0x85, 0x96, 0x3e, 0xd0, 0xbd, 0x46, 0x1d, 0x1f, 0x4f, 0x20, 0x8e, 0x74, 0x3c, 0xf9, 0xe0,
	0x10, 0x3f, 0x9e, 0x8c, 0x5a, 0x53, 0x00, 0x8f, 0x3d, 0x57, 0x21, 0xa0, 0x76, 0x2b, 0x0f, 0xdc,
	0x46, 0x19, 0x5e, 0x4a, 0x31, 0x04, 0xb4, 0xfc, 0x0c, 0xc0, 0xb6, 0x09, 0x64, 0xf2, 0x53, 0x03,
	0x68, 0xac, 0x58, 0xab, 0xbc, 0x46, 0xc5, 0xa8, 0x80, 0xe6, 0xa8, 0x81, 0x5f, 0xf1, 0x5f, 0x15,
	0xea, 0x90, 0x03, 0x4f, 0xb4, 0xf7, 0xfa, 0x07, 0x02, 0x47, 0xd8, 0xa8, 0x35, 0xe3, 0x62, 0x2b,
	0xbf, 0x42, 0x1f, 0x11, 0xb2, 0xc8, 0x09, 0xa8, 0x88, 0x16, 0x7c, 0xfb, 0x54, 0xa2, 0x19, 0xed,
	0x4b, 0xfc, 0x7e, 0x48, 0x73, 0xb6, 0x4b, 0x8d, 0x54, 0x81, 0xea, 0x2a, 0x9a, 0x22, 0xf4, 0x6a,
	0xcd, 0x4a, 0xc7, 0x05, 0x95, 0x61, 0x2a, 0x6a, 0x3f, 0x08, 0xa9, 0x4d, 0x62, 0xb4, 0x8c, 0x8f,
	0xa5, 0x99, 0x8c, 0x4e, 0x87, 0xdf, 0x62, 0x37, 0x24, 0xea, 0x3d, 0x9f, 0x35, 0x82, 0xa6, 0xf9,
	0xa1, 0x21, 0xb8, 0xdc, 0x3d, 0x00, 0x92, 0xfc, 0xcd, 0x41, 0x34, 0x4e, 0xef, 0xcb, 0xa4, 0x0c,
	0xcd, 0xa3, 0x59, 0xcc, 0x50, 0xff, 0x0a, 0xef, 0x47, 0x3b, 0xf2, 0xf3, 0xa3, 0xb0, 0xb7, 0x71,
	0xb7, 0x59, 0x65, 0xd7, 0x77, 0x3f, 0xa2, 0x03, 0x5f, 0x41, 0x53, 0xfc, 0x26, 0x47, 0xaa, 0x31,
	0xa4, 0x92, 0x3a, 0xff, 0x8e, 0x46, 0xa8, 0x2e, 0x26, 0x1b, 0xf0, 0x47, 0xcd, 0x42, 0xf3, 0x74,
	0x4a, 0xe4, 0x5e, 0x45, 0xf3, 0xf0, 0x7b, 0x61, 0xaf, 0x34, 0x82, 0x2d, 0xf6, 0xab, 0x8a, 0x69,
	0x12, 0x6a, 0xd2, 0xd5, 0x96, 0x43, 0x52, 0x2e, 0x0d, 0x01, 0x52, 0x5f, 0x6b, 0x99, 0x80, 0x5a,
	0x74, 0xb6, 0x1b, 0x86, 0xd4, 0x5e, 0x42, 0x71, 0xd6, 0x4a, 0x30, 0xf1, 0xd1, 0xc7, 0xe4, 0xef,
	0x1b, 0x02, 0x75, 0xc0, 0xd3, 0x14, 0x31, 0x98, 0xfa, 0x4b, 0x68, 0x8a, 0xd1, 0x22, 0x93, 0x2f,
	0x14, 0x60, 0x7c, 0x02, 0x2e, 0x9a, 0x89, 0x2e, 0x9f, 0xcf, 0x4c, 0x35, 0xf9, 0xbd, 0x43, 0x68,
	0x52, 0xe0, 0xb1, 0xb6, 0x8a, 0xf6, 0xe1, 0x29, 0x56, 0xbd, 0x41, 0x11, 0xa4, 0xaa, 0x7e, 0x72,
	0x88, 0xbf, 0x41, 0x31, 0x6a, 0xe1, 0x35, 0x16, 0x7e, 0x7c, 0xe2, 0x75, 0xb4, 0xa8, 0xa0, 0xe1,
	0x6c, 0xb5, 0x3a, 0x8d, 0xb2, 0x27, 0xc7, 0xd7, 0x43, 0xe8, 0xab, 0x04, 0x8c, 0xf3, 0x72, 0x9f,
	0x70, 0x45, 0x68, 0x43, 0x0d, 0xad, 0x59, 0xe8, 0x90, 0xaa, 0x49, 0x71, 0x55, 0x51, 0x2d, 0xf4,
	0x73, 0x50, 0xe6, 0x17, 0x43, 0x04, 0x03, 0xbe, 0xfe, 0x8b, 0x18, 0x3a, 0xde, 0x97, 0x28, 0xb9,
	0xbd, 0xb2, 0xcb, 0x04, 0xe3, 0x99, 0xc8, 0x01, 0x71, 0x8a, 0x25, 0x0c, 0x1e, 0xdc, 0xa1, 0x0c,
	0x07, 0x76, 0xa4, 0xd1, 0x1f, 0x0b, 0x6b, 0x56, 0x61, 0xb9, 0x88, 0xa9, 0xf9, 0x3f, 0x05, 0xa7,
	0x79, 0x0a, 0x2e, 0x92, 0x4c, 0x55, 0x7b, 0x09, 0xed, 0xa7, 0xab, 0x44, 0x35, 0xb1, 0x41, 0x05,
	0xe7, 0xbf, 0x87, 0x13, 0x4b, 0x55, 0x5d, 0x68, 0x28, 0xc9, 0xef, 0x1a, 0x24, 0x46, 0x00, 0x0d,
	0xe8, 0x10, 0x35, 0x46, 0x1e, 0xe6, 0xed, 0x6a, 0x2f, 0xa3, 0xc5, 0x20, 0x4c, 0x44, 0x62, 0x85,
	0xf4, 0xc5, 0x5f, 0x1a, 0x7e, 0x88, 0xd6, 0x12, 0x3f, 0x0f, 0xd7, 0xe3, 0x3e, 0x4e, 0x62, 0xbd,
	0xb6, 0xfd, 0x80, 0x50, 0xa6, 0x91, 0x88, 0x77, 0xa1, 0xfd, 0x01, 0xf5, 0x7a, 0xeb, 0x0d, 0x81,
	0x78, 0xb4, 0xfa, 0xfd, 0x37, 0x90, 0xf8, 0x02, 0xa7, 0x90, 0x6d, 0xbd, 0x01, 0x68, 0xbf, 0x0e,
	0x7b, 0x4e, 0xd5, 0x3a, 0x78, 0xac, 0x78, 0x50, 0x94, 0x56, 0xc5, 0xd8, 0xc5, 0xb2, 0x59, 0x41,
	0x5a, 0xbb, 0x6a, 0x68, 0xed, 0x55, 0x74, 0x2c, 0x68, 0x92, 0x9b, 0x4d, 0xee, 0x96, 0xdb, 0x71,
	0x9b, 0x15, 0x77, 0xc7, 0x77, 0xe7, 0x7f, 0x0d, 0x0e, 0xeb, 0x30, 0xa7, 0xe4, 0x9b, 0x51, 0x3e,
	0x1d, 0xd2, 0x68, 0xf2, 0x17, 0x06, 0xd0, 0x38, 0x9c, 0xa8, 0x0c, 0x8a, 0x3f, 0xc1, 0xf4, 0xfc,
	0x53, 0xd8, 0xd4, 0xd4, 0x03, 0x71, 0x56, 0xd6, 0xd0, 0xf4, 0xee, 0xe7, 0xe2, 0xff, 0x27, 0x6c,
	0x5e, 0x75, 0x61, 0x0a, 0x4a, 0x28, 0x1e, 0xc1, 0xf8, 0x20, 0x2d, 0x50, 0xcd, 0xef, 0x45, 0xc8,
	0xef, 0xa9, 0xb6, 0xc8, 0xe6, 0x0d, 0xea, 0xb1, 0x7a, 0x32, 0xe6, 0x7e, 0x0e, 0xec, 0xa7, 0x7f,
	0x6c, 0x94, 0x78, 0xfa, 0x89, 0x18, 0x9a, 0xcd, 0x91, 0x63, 0x6a, 0xba, 0xec, 0x95, 0x57, 0x5d,
	0x97, 0xb8, 0x78, 0xbb, 0xd8, 0x64, 0x62, 0xe7, 0xdc, 0xaa, 0xdb, 0xf6, 0x1e, 0x10, 0xbe, 0x52,
	0xa5, 0x33, 0x1a, 0x03, 0xfd, 0x1c, 0xa7, 0x40, 0x69, 0x0c, 0x83, 0x8f, 0x07, 0x8d, 0x2a, 0x29,
	0xc1, 0x53, 0x3e, 0xc7, 0x9b, 0x4b, 0xaf, 0xb4, 0x5a, 0xe2, 0xcb, 0x75, 0xff, 0x30, 0x08, 0x68,
	0xa1, 0x46, 0xd5, 0x07, 0xd0, 0xce, 0x13, 0x52, 0x5b, 0xae, 0x5b, 0x0d, 0x58, 0x48, 0xf5, 0xc3,
	0x3f, 0x0e, 0xc2, 0x5b, 0x40, 0x1a, 0x55, 0xbf, 0xcb, 0xc9, 0xaf, 0x8c, 0xa1, 0x89, 0x6c, 0x8b,
	0x66, 0xdd, 0x93, 0x3d, 0xe0, 0x16, 0x1a, 0xad, 0xb7, 0x84, 0x24, 0x5c, 0xfe, 0xbe, 0x2b, 0x83,
	0x0b, 0xde, 0xe8, 0x86, 0x06, 0xe9, 0x48, 0x9d, 0x7e, 0xa5, 0xd5, 0xa5, 0x4d, 0x07, 0x13, 0x21,
	0xb5, 0xea, 0xd1, 0x12, 0xf1, 0xe9, 0x21, 0x78, 0xd7, 0x46, 0xa3, 0xd6, 0xcc, 0xb6, 0x3c, 0xbb,
	0xf6, 0x3e, 0x37, 0xf9, 0x25, 0x31, 0x84, 0x72, 0x65, 0xaf, 0xf2, 0x80, 0x76, 0xe9, 0x2a, 0x9a,
	0x6e, 0xe0, 0xbf, 0x9c, 0x72, 0x7d, 0xbb, 0xd5, 0xa9, 0x79, 0x0f, 0x1a, 0xc0, 0x16, 0x7d, 0x28,
	0x6b, 0xbe, 0xca, 0x03, 0xdd, 0x07, 0xd3, 0x0c, 0x84, 0x28, 0xa6, 0xea, 0x76, 0x4e, 0xd2, 0x82,
	0x30, 0xa0, 0x17, 0x06, 0x00, 0xad, 0xb1, 0x86, 0xff, 0x3d, 0x59, 0x41, 0x93, 0xfe, 0x55, 0x22,
	0xbe, 0xdd, 0x31, 0xcd, 0x6f, 0x26, 0x61, 0x99, 0x6d, 0x52, 0x94, 0xda, 0x87, 0x17, 0xef, 0x2a,
	0x3b, 0x38, 0x0c, 0x38, 0x36, 0xe9, 0x42, 0x98, 0xe4, 0x7b, 0x51, 0x1c, 0x9f, 0xcc, 0x33, 0xcd,
	0xd5, 0x56, 0xa7, 0xe2, 0xfa, 0x27, 0xab, 0x49, 0x72, 0x2b, 0x79, 0xad, 0x89, 0x37, 0x4f, 0x7e,
	0x56, 0x08, 0xdc, 0xc1, 0x01, 0x42, 0x90, 0x0b, 0xb0, 0x07, 0xb4, 0x31, 0xee, 0x05, 0x10, 0x49,
	0x13, 0x4d, 0x98, 0x9d, 0xaa, 0x30, 0xd5, 0xad, 0x4e, 0x55, 0x39, 0xd5, 0x0c, 0x2e, 0xc8, 0x27,
	0x81, 0x44, 0x47, 0x5a, 0xf4, 0x6b, 0xf2, 0x1f, 0x07, 0xd0, 0xac, 0xe2, 0x64, 0xa4, 0xa5, 0x20,
	0x7b, 0xfc, 0xd3, 0xa0, 0x60, 0xdb, 0x09, 0xec, 0xf4, 0x6d, 0x3b, 0x57, 0xe0, 0xf1, 0x5d, 0xb4,
	0xe0, 0xaf, 0xa5, 0xb2, 0x57, 0x0e, 0xa4, 0xda, 0xb7, 0x13, 0x0f, 0x04, 0xf3, 0x18, 0x5a, 0x88,
	0xbe, 0xd3, 0xa6, 0xa1, 0x58, 0xa3, 0xd7, 0xd0, 0x38, 0x95, 0x09, 0xda, 0xb1, 0x41, 0xf1, 0x79,
	0xfb, 0x40, 0xec, 0x56, 0xfc, 0xf5, 0x15, 0x08, 0xe2, 0x8b, 0x68, 0xca, 0x67, 0x18, 0xc3, 0x1e,
	0x12, 0xcf, 0x58, 0x90, 0xbd, 0xfe, 0x19, 0xab, 0x05, 0x59, 0x9e, 0x43, 0xb3, 0xc2, 0x84, 0x32,
	0x32, 0xb4, 0x8c, 0x3d, 0xa1, 0x98, 0x56, 0xe1, 0xac, 0xec, 0x49, 0xbf, 0x27, 0x7f, 0x78, 0x08,
	0x2d, 0xa8, 0x8f, 0xa6, 0x9f, 0xbd, 0x52, 0xb5, 0xd1, 0xcf, 0x76, 0xa9, 0xda, 0xe8, 0x6e, 0x4a,
	0xd5, 0x22, 0x3d, 0x76, 0x83, 0x9f, 0x91, 0xc7, 0x2e, 0xda, 0x99, 0x3b, 0xf4, 0x8e, 0x9c, 0xb9,
	0xa3, 0x9f, 0x79, 0x05, 0xdc, 0xb0, 0xca, 0x99, 0x3b, 0xfa, 0x7f, 0x43, 0x05, 0xdc, 0xef, 0x8f,
	0xa0, 0xb8, 0xec, 0x95, 0xd1, 0x36, 0x50, 0xdc, 0x7d, 0xd4, 0xae, 0x75, 0xe8, 0x35, 0x92, 0x95,
	0xc7, 0x95, 0x7a, 0xa8, 0x58, 0xc5, 0xe0, 0xdf, 0x53, 0xf8, 0x73, 0xa0, 0x78, 0xe0, 0xb6, 0x34,
	0xed, 0x8a, 0x50, 0x5a, 0x03, 0x25, 0x6a, 0x8d, 0x76, 0xbd, 0xe6, 0xe2, 0xf3, 0x05, 0x75, 0x1c,
	0x73, 0xef, 0x95, 0x54, 0x6a, 0x94, 0xa1, 0x70, 0x74, 0x5d, 0x73, 0xbf, 0x55, 0x70, 0x07, 0x2f,
	0xb4, 0xdf, 0x17, 0x6a, 0x4a, 0x60, 0xbc, 0x54, 0xfd, 0x6d, 0x4c, 0x58, 0xe8, 0x73, 0xd2, 0x66,
	0x26, 0x2c, 0xd5, 0x3a, 0xdc, 0x08, 0x4d, 0x34, 0xdb, 0x28, 0x3f, 0x62, 0x06, 0xe1, 0xc3, 0x72,
	0xa7, 0x46, 0x06, 0xd3, 0xc7, 0x70, 0x78, 0x03, 0x1e, 0xd2, 0x66, 0x1a, 0xe5, 0x47, 0xc4, 0x56,
	0xb8, 0xeb, 0x63, 0x92, 0x5b, 0x5c, 0xca, 0x8f, 0xd8, 0x9d, 0x77, 0x0f, 0x5b, 0xf5, 0x3e, 0xe7,
	0x3d, 0x0f, 0xee, 0x8c, 0xe3, 0x8d, 0xf2, 0x23, 0x12, 0x0e, 0xbd, 0xdb, 0xaa, 0x13, 0x22, 0xb5,
	0x26, 0x20, 0x12, 0x7d, 0x31, 0xdd, 0x85, 0x01, 0x81, 0x48, 0xad, 0xc9, 0x89, 0xdc, 0x41, 0x53,
	0xe4, 0x0a, 0xfe, 0xba, 0xbb, 0x4d, 0xa2, 0x8c, 0x75, 0x96, 0x67, 0xc3, 0x77, 0xaf, 0x1c, 0xfb,
	0x9a, 0xc3, 0x1f, 0x83, 0x8a, 0x3f, 0x68, 0x6b, 0x4d, 0x36, 0x20, 0x0c, 0x3e, 0x35, 0x73, 0x92,
	0x94, 0x65, 0x42, 0x48, 0xf4, 0x88, 0x4c, 0x99, 0xf0, 0x46, 0x0a, 0x8c, 0xde, 0x17, 0x4e, 0xcd,
	0x8d, 0x30, 0xa4, 0x76, 0x03, 0x4d, 0x00, 0x3b, 0xb1, 0xcb, 0xee, 0xac, 0x9b, 0x0d, 0xdb, 0x88,
	0xfe, 0x94, 0x8e, 0xb7, 0x81, 0xe5, 0x6b, 0x20, 0x04, 0x52, 0x8b, 0x90, 0x68, 0x0d, 0x84, 0x73,
	0x8a, 0xbe, 0x15, 0x9a, 0x6c, 0x63, 0x6d, 0x9e, 0x4c, 0x74, 0x03, 0x8d, 0x75, 0x5a, 0xbd, 0x66,
	0x15, 0x9b, 0x38, 0x7d, 0xde, 0xd7, 0x3c, 0x0f, 0xd9, 0x3f, 0x4a, 0x30, 0xb2, 0x2d, 0x4f, 0xbb,
	0x8c, 0x10, 0xf7, 0xd3, 0x74, 0x13, 0x13, 0x44, 0x28, 0x67, 0x64, 0x1f, 0x8d, 0xdf, 0xfd, 0x31,
	0x8f, 0xfb, 0xb3, 0xae, 0x23, 0x5f, 0x09, 0x07, 0xc5, 0xdd, 0x41, 0x6a, 0xcc, 0x7f, 0x1c, 0x02,
	0xb7, 0x95, 0x4c, 0x33, 0x40, 0x7e, 0x4f, 0xc9, 0x57, 0x0f, 0xa0, 0x78, 0x0e, 0x46, 0x55, 0xf0,
	0x06, 0x21, 0x44, 0x70, 0x62, 0xef, 0x28, 0x82, 0x33, 0xb0, 0xcb, 0x08, 0xce, 0x3d, 0x50, 0x22,
	0x29, 0x3a, 0x89, 0x07, 0xc5, 0xda, 0x5a, 0x95, 0x7b, 0x99, 0xb1, 0x62, 0xae, 0xab, 0x72, 0x3d,
	0xdf, 0x40, 0x13, 0xc0, 0xf5, 0xe1, 0xef, 0xc7, 0xb3, 0xa2, 0x8f, 0x06, 0x92, 0x19, 0x0f, 0x5c,
	0x20, 0xdd, 0xe4, 0xd7, 0x0e, 0xa0, 0x64, 0xda, 0xed, 0xd4, 0x1e, 0x96, 0xbd, 0xda, 0x43, 0x57,
	0x95, 0x54, 0xdb, 0x65, 0xf9, 0xc0, 0x55, 0x0e, 0xb5, 0x8b, 0x7c, 0xe0, 0x19, 0xc8, 0x8c, 0xc3,
	0xd5, 0x7e, 0x0d, 0xd0, 0x7c, 0xe0, 0x9d, 0xa9, 0x2b, 0xf3, 0x81, 0xfb, 0x77, 0x5d, 0x2c, 0xee,
	0x82, 0x4b, 0x2b, 0xd9, 0xbf, 0x4b, 0xc4, 0xb4, 0x7b, 0x73, 0x08, 0x1d, 0x88, 0xa2, 0xcf, 0x72,
	0xe3, 0xfb, 0xf5, 0x5a, 0xe0, 0xc7, 0x24, 0xe4, 0xc7, 0x81, 0xc8, 0xc6, 0x59, 0x6e, 0x7c, 0x7f,
	0xb2, 0x11, 0xb9, 0xf1, 0x91, 0xac, 0x08, 0xa5, 0x3d, 0x4d, 0xc1, 0xce, 0x1c, 0xeb, 0xd3, 0x19,
	0x90, 0x1b, 0xdf, 0xaf, 0x4b, 0xaa, 0xdc, 0xf8, 0xc8, 0xde, 0x08, 0x89, 0x52, 0xd3, 0x70, 0x4e,
	0x0e, 0x55, 0xfb, 0xe1, 0x68, 0x5f, 0xb0, 0x2b, 0x29, 0xe9, 0x82, 0x34, 0xf9, 0xa5, 0xdd, 0x49,
	0x09, 0x08, 0x63, 0xec, 0x20, 0x16, 0x24, 0xa4, 0xf1, 0xc7, 0x31, 0x74, 0x48, 0x45, 0x30, 0x88,
	0xaa, 0xbc, 0x81, 0x0e, 0xca, 0x1d, 0x55, 0x54, 0xbe, 0x9e, 0x8c, 0xe8, 0x9d, 0xa2, 0x06, 0xf6,
	0x18, 0x64, 0xd3, 0xfe, 0x6a, 0x14, 0xbc, 0x66, 0xa1, 0x43, 0x51, 0x0d, 0xcb, 0x37, 0xf0, 0x27,
	0xa1, 0x0c, 0x2c, 0x2a, 0x49, 0xd2, 0x33, 0xd9, 0x2f, 0xc7, 0xd0, 0xfe, 0xc8, 0x08, 0x53, 0x50,
	0x24, 0x16, 0x39, 0x4c, 0x55, 0x98, 0x4a, 0x31, 0xc4, 0x1f, 0x86, 0x16, 0xcd, 0x7c, 0x53, 0x05,
	0xab, 0xbd, 0x84, 0xf6, 0xab, 0x1a, 0x93, 0x87, 0xf6, 0x23, 0xf0, 0x38, 0xbc, 0x10, 0x22, 0x45,
	0x87, 0xf5, 0x35, 0x67, 0xd1, 0x9c, 0x6a, 0x16, 0xb5, 0x6d, 0x74, 0x8a, 0x70, 0xc3, 0xd9, 0xaa,
	0xbb, 0x8f, 0xfc, 0xa7, 0x7e, 0x1d, 0xb7, 0x5e, 0xdb, 0xae, 0xdd, 0x27, 0xb7, 0x4e, 0x02, 0xa3,
	0x2d, 0xc6, 0x43, 0x8e, 0xff, 0x61, 0x08, 0x84, 0x1c, 0x4f, 0x10, 0x02, 0xab, 0x75, 0xf7, 0x91,
	0xff, 0x10, 0x70, 0x80, 0x1d, 0x98, 0x67, 0x77, 0xd0, 0x1c, 0x98, 0xac, 0x4a, 0xb9, 0xbd, 0xa3,
	0xfb, 0xe8, 0xf4, 0x30, 0xf4, 0xdb, 0x07, 0xc8, 0xa9, 0x72, 0x9b, 0xfa, 0x90, 0x6e, 0xa1, 0x59,
	0x48, 0xd2, 0x7f, 0xee, 0x3c, 0xf0, 0x81, 0xfc, 0xb6, 0x10, 0x3f, 0x02, 0x14, 0x82, 0xe7, 0xce,
	0x21, 0x01, 0xc5, 0x73, 0xe7, 0xd1, 0xb6, 0xdf, 0x9f, 0x43, 0xdb, 0x0f, 0x2c, 0x00, 0xc5, 0x73,
	0xe7, 0x77, 0xd1, 0x11, 0x55, 0x33, 0xec, 0x01, 0xb9, 0x56, 0xd3, 0x7b, 0x40, 0x0c, 0x43, 0xea,
	0x93, 0x1d, 0x1e, 0x06, 0x3e, 0x59, 0x05, 0x5d, 0xfa, 0x8e, 0x1c, 0x46, 0xd2, 0xf2, 0xe8, 0x80,
	0x40, 0x57, 0x7a, 0x46, 0x3d, 0x08, 0x09, 0xfc, 0xd1, 0x10, 0x7f, 0x46, 0x7d, 0xd4, 0x4a, 0x40,
	0x9a, 0xc2, 0x33, 0xea, 0xb7, 0x11, 0x58, 0x6c, 0x8e, 0x9f, 0x74, 0xc8, 0x9e, 0xdd, 0x0e, 0x1e,
	0x65, 0xff, 0xc7, 0x21, 0x9e, 0xaa, 0x38, 0x6a, 0xed, 0x0b, 0x30, 0x0c, 0x8a, 0x10, 0x3c, 0xcd,
	0x1f, 0x49, 0x8c, 0x04, 0x09, 0x47, 0xb9, 0xa7, 0xec, 0x1f, 0x60, 0x90, 0x70, 0x31, 0x82, 0x20,
	0x7b, 0x9a, 0x5f, 0x41, 0x33, 0x2a, 0xe5, 0x3a, 0x36, 0x0c, 0xfa, 0x79, 0x28, 0x44, 0x56, 0x7e,
	0x9a, 0x7f, 0x27, 0xca, 0xa4, 0xd3, 0x88, 0x77, 0x7a, 0xcf, 0x30, 0xe8, 0xf4, 0xd1, 0xbe, 0xd4,
	0x71, 0xd7, 0x4b, 0x68, 0x1e, 0x36, 0xf0, 0xd0, 0x6d, 0x7a, 0x54, 0x77, 0x8f, 0x8b, 0xae, 0x8d,
	0x60, 0x91, 0x92, 0xfb, 0x37, 0x80, 0xb2, 0x06, 0xb2, 0xce, 0x3f, 0x69, 0x6d, 0x71, 0xca, 0xc4,
	0xf0, 0xd5, 0x84, 0xe8, 0xc8, 0x06, 0xa4, 0x95, 0x21, 0xac, 0x59, 0xe8, 0xaa, 0x82, 0xf3, 0x2a,
	0x84, 0xb1, 0x4a, 0x68, 0x01, 0xb4, 0xb8, 0x55, 0x6f, 0xb5, 0xfc, 0x82, 0x83, 0xc9, 0xe8, 0xd7,
	0x1e, 0xe1, 0x4a, 0x06, 0x6a, 0x60, 0x15, 0x63, 0xd3, 0xb5, 0x2c, 0xca, 0x9e, 0xf4, 0xf8, 0x7c,
	0x90, 0xbe, 0xfd, 0x87, 0x70, 0x45, 0xef, 0x93, 0xf4, 0x38, 0x7f, 0x7c, 0xfe, 0xcb, 0x62, 0xc2,
	0x74, 0xfa, 0xf7, 0x3e, 0x96, 0xbb, 0xdd, 0xda, 0x76, 0x93, 0xec, 0xa1, 0xec, 0xa8, 0x32, 0xdd,
	0xd7, 0xa6, 0x68, 0x78, 0x3a, 0xc7, 0x90, 0x0e, 0x2e, 0xbf, 0x0f, 0x1d, 0xa1, 0xb2, 0x4d, 0x11,
	0xc6, 0xd3, 0x1a, 0xe1, 0xad, 0x4a, 0x7c, 0xa6, 0x2f, 0x4e, 0xc4, 0xe0, 0xf8, 0x4e, 0x5b, 0x78,
	0x10, 0xc9, 0x8f, 0xb4, 0xaa, 0x6a, 0xc4, 0x1d, 0x07, 0xa5, 0x0d, 0xbc, 0xbe, 0x1f, 0x3c, 0x2c,
	0xff, 0xf7, 0x43, 0xfc, 0xfe, 0x19, 0x41, 0xb6, 0x84, 0xd7, 0xf7, 0x65, 0x22, 0x1d, 0x92, 0x55,
	0xc7, 0x4a, 0x6e, 0xe1, 0x54, 0xc4, 0x25, 0x02, 0x1d, 0x6d, 0x5b, 0x90, 0x13, 0x72, 0x53, 0x1e,
	0x63, 0xfa, 0xac, 0x58, 0xcf, 0x1e, 0x0c, 0x35, 0x5b, 0xeb, 0xca, 0x7c, 0x3e, 0x05, 0x4d, 0x01,
	0x20, 0x39, 0x01, 0xa8, 0x96, 0x45, 0x8b, 0xb0, 0x21, 0xe9, 0x99, 0xff, 0x39, 0xde, 0xdf, 0x3f,
	0x8e, 0x10, 0x9d, 0xd0, 0x33, 0xff, 0x80, 0x9a, 0xf8, 0xcc, 0x7f, 0xf0, 0xa6, 0xfc, 0xef, 0x42,
	0xe6, 0x81, 0x71, 0xca, 0xcf, 0xfc, 0xab, 0x48, 0x81, 0x48, 0xdc, 0x02, 0x27, 0xf8, 0x3b, 0x30,
	0x12, 0x77, 0x20, 0x4c, 0x30, 0x88, 0xb4, 0xbe, 0xa2, 0xee, 0x20, 0x49, 0x0f, 0xdb, 0xd7, 0xf7,
	0x65, 0xc4, 0xdf, 0x13, 0x5e, 0x46, 0x0c, 0xb7, 0x41, 0x72, 0x69, 0xab, 0x62, 0xa7, 0x6b, 0xfe,
	0xfb, 0x4d, 0x41, 0x58, 0x35, 0x11, 0xb9, 0xcc, 0xff, 0x02, 0x6e, 0x89, 0x70, 0x10, 0x35, 0xfa,
	0x58, 0x53, 0x10, 0x67, 0x7d, 0x5d, 0x30, 0xfa, 0x15, 0xad, 0xf8, 0x0f, 0x3a, 0xef, 0x8f, 0x6c,
	0xec, 0xbf, 0x05, 0x8f, 0x04, 0x08, 0x2b, 0x30, 0xd4, 0x18, 0x7b, 0xdd, 0xb9, 0x20, 0x58, 0xa9,
	0xe4, 0x45, 0x3a, 0x76, 0xc3, 0x3e, 0xf1, 0x2c, 0x90, 0xfc, 0x3d, 0xaa, 0xd9, 0xff, 0x76, 0x48,
	0x6d, 0x7e, 0xe6, 0x3d, 0xff, 0x2a, 0x7d, 0xe2, 0x5d, 0x90, 0x44, 0xa5, 0xd5, 0x86, 0x39, 0x4b,
	0x07, 0x8e, 0xc6, 0x4e, 0x4d, 0x10, 0x6a, 0x7f, 0x06, 0x35, 0x05, 0xe0, 0xba, 0xd9, 0x06, 0x76,
	0xe5, 0xbb, 0x04, 0xed, 0x87, 0x49, 0xb5, 0xcb, 0x8f, 0x7d, 0x1e, 0x1c, 0x8c, 0xe4, 0xc1, 0xcf,
	0x40, 0x1e, 0x88, 0xb4, 0x0b, 0xe5, 0xc7, 0x6c, 0xe0, 0xa2, 0x66, 0x95, 0x46, 0x7d, 0x88, 0x8f,
	0xfa, 0x6f, 0xe0, 0xa8, 0xc1, 0xf2, 0x10, 0xc7, 0xfc, 0x3e, 0x41, 0x8f, 0xd1, 0x49, 0xa3, 0x77,
	0x0c, 0xb3, 0xc5, 0x7d, 0x58, 0x7c, 0x48, 0x31, 0x58, 0xdc, 0x64, 0x52, 0xc8, 0xa5, 0xc3, 0xd2,
	0x12, 0x7f, 0x2a, 0xc2, 0x34, 0x97, 0x11, 0xc8, 0xa3, 0x9d, 0xa1, 0xc6, 0xe5, 0x47, 0x3b, 0x8f,
	0x88, 0x8f, 0x76, 0x4a, 0xed, 0xab, 0x1f, 0xed, 0x3c, 0x2e, 0x3c, 0xda, 0x59, 0xed, 0x83, 0xa2,
	0x35, 0x85, 0x8d, 0x25, 0xfa, 0xd1, 0xce, 0xa3, 0x91, 0x73, 0x76, 0x42, 0x78, 0xb4, 0xb3, 0x5f,
	0x63, 0x77, 0xbc, 0xc7, 0xda, 0x2b, 0x48, 0x13, 0xda, 0x23, 0xf6, 0x35, 0x7b, 0xb2, 0xfe, 0x90,
	0x6a, 0x90, 0xd4, 0x00, 0xf7, 0x47, 0xf6, 0x9b, 0x70, 0x52, 0x67, 0xaa, 0x32, 0x9c, 0x96, 0x13,
	0x74, 0xa7, 0x6f, 0xfd, 0x57, 0x5a, 0x8d, 0x76, 0xdd, 0x7d, 0x94, 0x48, 0x72, 0xdd, 0xf9, 0x29,
	0xa8, 0x3b, 0x13, 0x21, 0x3a, 0x29, 0x8a, 0xa0, 0xb9, 0x82, 0xce, 0x6f, 0xf7, 0x3c, 0xa7, 0xd5,
	0x71, 0x2a, 0xe5, 0x7a, 0x9d, 0xbc, 0x56, 0x0f, 0x7c, 0x82, 0xa0, 0xc7, 0x3d, 0xcf, 0xec, 0xa4,
	0xca, 0xf5, 0xc0, 0xe7, 0xf8, 0x8c, 0xe0, 0x13, 0xac, 0x86, 0x21, 0xb5, 0xba, 0xa0, 0xa3, 0xe4,
	0x2b, 0x9f, 0xb0, 0x51, 0x75, 0x82, 0xec, 0xa6, 0xc9, 0x70, 0x73, 0xc2, 0x7d, 0x4f, 0x81, 0x6d,
	0x05, 0xb8, 0x20, 0xdc, 0xee, 0x84, 0x4d, 0x2c, 0x71, 0x99, 0x8b, 0xc6, 0xe6, 0x49, 0xce, 0xa1,
	0xff, 0x21, 0x9c, 0xc2, 0xc2, 0xe4, 0x88, 0x95, 0x79, 0x47, 0xd0, 0x41, 0xe1, 0xd2, 0x9c, 0xa7,
	0x82, 0xfb, 0x56, 0x86, 0x80, 0x4f, 0x4e, 0xd1, 0x3b, 0x5e, 0xa4, 0x23, 0xae, 0x6e, 0x4e, 0x72,
	0xbb, 0xd3, 0xea, 0xb5, 0xc9, 0xcb, 0xf5, 0x94, 0xde, 0x6f, 0x45, 0x6c, 0x7e, 0x3e, 0xbd, 0x35,
	0x0c, 0xaf, 0x19, 0xc2, 0xfc, 0xc1, 0x2a, 0xc4, 0xe0, 0x7d, 0xfa, 0x1f, 0x87, 0x94, 0xe6, 0xc2,
	0x94, 0x32, 0x55, 0x49, 0x49, 0x28, 0x6a, 0x11, 0x4f, 0x47, 0x29, 0x89, 0xc8, 0x72, 0xc4, 0x9f,
	0x18, 0x52, 0x2b, 0x89, 0x50, 0x45, 0x62, 0x57, 0x90, 0xe8, 0xe0, 0xd5, 0x6f, 0x5a, 0x16, 0xb2,
	0x24, 0xde, 0x28, 0x11, 0x6e, 0x58, 0xaa, 0x10, 0xf9, 0x83, 0x08, 0xb9, 0x17, 0xc1, 0xa5, 0xbd,
	0x25, 0xfc, 0xd4, 0xf8, 0x33, 0x9c, 0x7b, 0xff, 0x19, 0x12, 0xdc, 0xaf, 0x20, 0xc8, 0x9e, 0x1a,
	0x6f, 0xa8, 0x85, 0x8e, 0x50, 0x7b, 0x56, 0x8c, 0x9d, 0x84, 0x07, 0x21, 0x78, 0x1a, 0xfe, 0xd3,
	0x0e, 0x82, 0x49, 0x9a, 0x7b, 0x37, 0xda, 0xa7, 0x6a, 0xee, 0x51, 0xa3, 0xce, 0xde, 0xc6, 0x3f,
	0x14, 0xdd, 0xda, 0xbd, 0x5c, 0x96, 0xad, 0xa2, 0xf9, 0x30, 0xf5, 0x7b, 0x8d, 0xba, 0xf6, 0xaa,
	0x44, 0x1c, 0x3c, 0x9b, 0x7e, 0x56, 0xf4, 0x99, 0x40, 0xe2, 0xfc, 0xb5, 0xf4, 0xe0, 0x66, 0x09,
	0x78, 0x3e, 0x11, 0xda, 0x0a, 0x5e, 0x56, 0xb7, 0x25, 0xd5, 0xe0, 0x79, 0xd8, 0x18, 0x6c, 0xd2,
	0x5a, 0xa8, 0xad, 0x7a, 0x79, 0x9b, 0xbc, 0xa3, 0x4f, 0xe7, 0xe2, 0xbf, 0x44, 0xca, 0x14, 0xc6,
	0x32, 0x9b, 0x66, 0xdb, 0x6d, 0xae, 0xd6, 0xcb, 0xdb, 0xda, 0x7b, 0x05, 0x6b, 0x05, 0x8b, 0x92,
	0xeb, 0x90, 0x53, 0x4f, 0xeb, 0x61, 0xad, 0x59, 0x01, 0xc6, 0xe6, 0x39, 0x4e, 0xfb, 0xbf, 0x42,
	0xda, 0x60, 0xd7, 0xc2, 0x02, 0xe3, 0x9a, 0x9d, 0x02, 0x43, 0xf5, 0xad, 0x4e, 0x51, 0x0f, 0xcb,
	0xaf, 0x9c, 0x9f, 0xe7, 0x64, 0xff, 0x0f, 0xe8, 0xf4, 0x87, 0xf2, 0x28, 0xbf, 0x72, 0x7e, 0x30,
	0x4c, 0x0e, 0x78, 0x35, 0xa2, 0x1f, 0xd4, 0xff, 0x13, 0x68, 0xc2, 0x2d, 0xca, 0x0d, 0x00, 0x9f,
	0xc6, 0x86, 0x38, 0xa9, 0x2c, 0x19, 0x93, 0x9c, 0x03, 0x2f, 0x46, 0x52, 0xff, 0xdf, 0x85, 0x44,
	0x1b, 0x99, 0x3a, 0x3d, 0x08, 0x2a, 0x09, 0x53, 0x9f, 0xd7, 0x72, 0x24, 0xe1, 0x3f, 0x85, 0xdd,
	0x0e, 0x11, 0xa6, 0x0f, 0xd5, 0x8b, 0xc7, 0x19, 0x56, 0xae, 0x7c, 0x29, 0xb8, 0x53, 0x29, 0xe2,
	0x38, 0xc3, 0x2a, 0x96, 0xab, 0xc2, 0x89, 0x8a, 0x62, 0x3b, 0xdd, 0xad, 0x47, 0xe4, 0xf1, 0x7c,
	0xe5, 0xce, 0x46, 0x11, 0xed, 0xad, 0x47, 0xc1, 0x55, 0x4a, 0xb0, 0x89, 0xd9, 0x6a, 0x18, 0x52,
	0x2b, 0x0b, 0x4e, 0xb2, 0xe0, 0x79, 0xfa, 0x2b, 0x62, 0x51, 0x6a, 0xd0, 0x48, 0xe8, 0x79, 0xfa,
	0xbf, 0x86, 0x6d, 0x00, 0xdb, 0x01, 0x3e, 0x4f, 0x0f, 0x9a, 0x90, 0xcd, 0xa7, 0xab, 0x51, 0x2e,
	0x03, 0xb5, 0xe5, 0xf4, 0x97, 0x11, 0xdb, 0x8a, 0x68, 0x34, 0x55, 0x84, 0x45, 0xa9, 0x32, 0x97,
	0xae, 0x45, 0xce, 0xec, 0x5f, 0xc1, 0xb8, 0xe8, 0x62, 0x44, 0x0b, 0xd8, 0x52, 0x7a, 0x28, 0x38,
	0xc3, 0xb0, 0xc0, 0xd0, 0x80, 0x36, 0xd3, 0x34, 0xd7, 0xa3, 0x9c, 0xd0, 0x77, 0x7d, 0x48, 0x49,
	0xdb, 0x3c, 0x3d, 0xac, 0xd6, 0xd4, 0x12, 0x3c, 0x79, 0xf1, 0xbc, 0xbf, 0x13, 0x91, 0x4e, 0xe1,
	0xf3, 0xe2, 0x8b, 0xe7, 0xe9, 0x3e, 0x0e, 0x43, 0xe1, 0xc5, 0xf3, 0x6f, 0x50, 0xbd, 0x78, 0x5e,
	0xdd, 0x01, 0x9b, 0x3c, 0x01, 0x2d, 0xba, 0x69, 0xe4, 0x17, 0xcf, 0x6f, 0x44, 0xed, 0xc1, 0x91,
	0x2f, 0x9e, 0xbf, 0xa5, 0x7e, 0xf1, 0xbc, 0x1a, 0x89, 0xa9, 0xbd, 0x0f, 0x9d, 0xe9, 0xdb, 0x89,
	0x50, 0x66, 0xc4, 0x4d, 0xfe, 0xe2, 0xf9, 0x5b, 0xea, 0x17, 0xcf, 0xa3, 0x1b, 0x93, 0xf3, 0x24,
	0x4e, 0x0a, 0xd3, 0x12, 0xf9, 0x24, 0xf4, 0x9f, 0xc5, 0xd0, 0x62, 0xb4, 0x79, 0x28, 0x39, 0x17,
	0xa2, 0x2f, 0x2b, 0xfd, 0xd7, 0x3b, 0xd8, 0x57, 0xc1, 0x65, 0xa5, 0x7d, 0x2c, 0x57, 0xf5, 0x65,
	0xa5, 0x11, 0xbd, 0x93, 0x0c, 0xa4, 0x9f, 0x84, 0x1d, 0x38, 0x14, 0xd1, 0x01, 0x76, 0x59, 0xe9,
	0x77, 0x0c, 0xa2, 0x59, 0x85, 0x9f, 0x51, 0xf2, 0x1a, 0x29, 0x6f, 0x2d, 0x1e, 0x1d, 0x56, 0x7b,
	0x8d, 0x0c, 0x7e, 0x7f, 0xb1, 0x29, 0x38, 0xe5, 0x77, 0x71, 0x95, 0x31, 0x82, 0xce, 0xc1, 0x19,
	0x89, 0x24, 0x79, 0x55, 0x2f, 0xdc, 0x2b, 0xe9, 0x7e, 0xe3, 0xf1, 0x61, 0xb5, 0x62, 0x35, 0xf8,
	0x4d, 0xc7, 0xb6, 0x8a, 0x48, 0xff, 0x87, 0x27, 0xc7, 0x86, 0xc1, 0xd5, 0xc2, 0x21, 0xa2, 0xd4,
	0x57, 0xa2, 0x20, 0x1a, 0x3c, 0xb5, 0x73, 0x24, 0xc2, 0xa7, 0x2b, 0xbe, 0x1c, 0x1a, 0x71, 0xda,
	0xe1, 0x90, 0xc9, 0x1f, 0x1e, 0x40, 0x07, 0xd3, 0x8a, 0xf3, 0xc4, 0x56, 0xad, 0x49, 0x0e, 0xe6,
	0xda, 0x86, 0xe8, 0xec, 0x8b, 0xbc, 0xc6, 0x5a, 0xe5, 0x53, 0x5c, 0x09, 0x79, 0xd6, 0x40, 0x6c,
	0xa8, 0x2b, 0xc4, 0x2d, 0xfa, 0xd4, 0x66, 0x9d, 0xec, 0xd7, 0x84, 0x5c, 0x9f, 0xa5, 0x8c, 0x7b,
	0x06, 0xae, 0x90, 0x2c, 0xd2, 0xa4, 0xb4, 0x83, 0xa0, 0x38, 0x2b, 0x21, 0x26, 0x00, 0x06, 0xa9,
	0x0d, 0x7e, 0xba, 0x5c, 0x43, 0xfa, 0x3d, 0xf9, 0x81, 0xbd, 0x68, 0xce, 0x72, 0xeb, 0xf6, 0xe3,
	0x06, 0xe9, 0x9a, 0xed, 0x56, 0x4a, 0xed, 0x2a, 0xbd, 0xfb, 0x3b, 0x5e, 0x69, 0x75, 0xda, 0xad,
	0x0e, 0x28, 0xe1, 0x8c, 0x91, 0x07, 0xe7, 0x0e, 0x04, 0x0f, 0xbd, 0xb2, 0xef, 0xd2, 0xc5, 0x43,
	0x27, 0x62, 0xe0, 0xd1, 0xb9, 0xe9, 0x8a, 0x08, 0x25, 0xbc, 0x32, 0x35, 0xa0, 0x7a, 0x65, 0x6a,
	0x14, 0xbc, 0x32, 0x25, 0xdf, 0x07, 0x31, 0xa8, 0xba, 0x0f, 0x62, 0x74, 0xe7, 0xfb, 0x20, 0x86,
	0x54, 0xf7, 0x41, 0x8c, 0x86, 0xee, 0x83, 0x50, 0x3c, 0x6a, 0x35, 0xbc, 0xd3, 0xa3, 0x56, 0xa3,
	0xfd, 0x1f, 0xb5, 0xda, 0xdb, 0xf7, 0x51, 0xab, 0x51, 0xe1, 0x51, 0xab, 0x22, 0x02, 0xf7, 0x00,
	0x3a, 0xee, 0x23, 0xcf, 0x6d, 0x76, 0x31, 0xdf, 0x47, 0xc4, 0x04, 0xbf, 0x80, 0x86, 0xe1, 0x83,
	0xf8, 0x21, 0x90, 0x5a, 0xf8, 0x93, 0xf6, 0x6e, 0xa4, 0x11, 0xef, 0xb2, 0x58, 0x8e, 0x3b, 0x2a,
	0xa6, 0x3d, 0x66, 0x6b, 0x5d, 0x2f, 0x54, 0x8b, 0x8b, 0xf9, 0xf5, 0x2c, 0x3c, 0x54, 0xc4, 0xeb,
	0x12, 0x18, 0xcb, 0x63, 0x09, 0x57, 0x0a, 0xf8, 0x89, 0x48, 0x07, 0xfb, 0x54, 0x09, 0xc0, 0x3c,
	0x96, 0x70, 0xf5, 0x84, 0x7f, 0xbb, 0x06, 0x52, 0xdd, 0xae, 0x31, 0xca, 0x6e, 0xd7, 0xd8, 0x44,
	0xf3, 0x1d, 0xb7, 0x8e, 0xcd, 0x4d, 0x47, 0x2c, 0x04, 0x1e, 0x8f, 0x2c, 0x04, 0xfe, 0xed, 0xe1,
	0x70, 0x21, 0xb0, 0xd6, 0x21, 0x4b, 0xa0, 0x08, 0xca, 0x81, 0x93, 0xff, 0xff, 0x01, 0x34, 0xaf,
	0x3c, 0xcc, 0x69, 0x6b, 0xd1, 0x87, 0xc1, 0x60, 0xc3, 0x1b, 0x84, 0xc1, 0xb5, 0x88, 0x83, 0x9f,
	0x18, 0x9f, 0xec, 0x53, 0x25, 0x38, 0x00, 0x63, 0x69, 0x09, 0x25, 0x31, 0x2c, 0xbe, 0x45, 0xb5,
	0xdf, 0x47, 0x59, 0x3a, 0x38, 0x14, 0x91, 0x81, 0x62, 0x87, 0x8a, 0x08, 0xff, 0x34, 0x86, 0x16,
	0xf5, 0x76, 0xbb, 0x5e, 0xa3, 0x8f, 0x64, 0xdb, 0xee, 0xeb, 0x3d, 0xb7, 0x59, 0xa1, 0x86, 0x55,
	0xab, 0xae, 0x9d, 0x42, 0x23, 0xa4, 0x6e, 0x56, 0xd8, 0xee, 0xbf, 0x0e, 0xee, 0xb6, 0x7b, 0xf1,
	0xf7, 0x4c, 0x55, 0xbb, 0x8e, 0x66, 0x08, 0x24, 0x79, 0x73, 0xb2, 0xeb, 0xbe, 0xee, 0x34, 0x7b,
	0x0d, 0x30, 0xc8, 0x55, 0xda, 0xa3, 0x05, 0xba, 0x32, 0x31, 0x64, 0xb6, 0xdc, 0xf5, 0x6c, 0xf7,
	0xf5, 0x7c, 0xaf, 0x81, 0x17, 0x35, 0xc1, 0xc5, 0x06, 0x51, 0xb3, 0x4a, 0x4f, 0xaa, 0x83, 0x3c,
	0xdc, 0xbe, 0x0e, 0x2b, 0x7c, 0x09, 0xaa, 0x45, 0xe0, 0xc8, 0xe9, 0xf4, 0x3c, 0x9a, 0x20, 0xa8,
	0x7e, 0x8b, 0x81, 0x2e, 0xf8, 0xfa, 0x21, 0xd0, 0x22, 0xc2, 0x40, 0xb4, 0x35, 0xe1, 0x02, 0xdd,
	0x65, 0xf9, 0x02, 0xdd, 0xe5, 0x88, 0x1c, 0xa7, 0xcf, 0x87, 0x1c, 0x9d, 0x81, 0xb0, 0xd2, 0x05,
	0xba, 0xcb, 0xbb, 0xbc, 0x40, 0x77, 0x39, 0x22, 0x73, 0xe9, 0xfd, 0xc3, 0xe1, 0xdc, 0x88, 0x65,
	0xe9, 0x02, 0xdd, 0xd0, 0x93, 0xfe, 0xcb, 0xc1, 0x93, 0xfe, 0xcb, 0x8a, 0x84, 0xa4, 0xff, 0x09,
	0x76, 0x7e, 0x0a, 0xc2, 0xc1, 0x27, 0xfd, 0x97, 0x77, 0xf5, 0xa4, 0xff, 0xb2, 0x3a, 0xcd, 0xe8,
	0x9f, 0x43, 0x4d, 0x32, 0x27, 0x36, 0x21, 0x3f, 0xe9, 0xbf, 0xbc, 0xd3, 0x93, 0xfe, 0xcb, 0xe1,
	0xe4, 0xa1, 0x2f, 0x84, 0x6c, 0x89, 0x43, 0x3a, 0xa1, 0x27, 0xfd, 0x97, 0x77, 0x78, 0xd2, 0x7f,
	0x19, 0xdc, 0x9a, 0x39, 0x1a, 0x3c, 0xe9, 0xbf, 0xcc, 0x9e, 0xf4, 0xff, 0xdb, 0x18, 0x42, 0x56,
	0xd9, 0x73, 0x59, 0xaf, 0x4d, 0x34, 0x4e, 0x76, 0x49, 0xa1, 0x78, 0x39, 0x28, 0x66, 0xe7, 0x80,
	0xfc, 0xa0, 0xf0, 0x2f, 0xc5, 0x83, 0x82, 0x45, 0xde, 0xc3, 0xeb, 0x04, 0x04, 0x5f, 0x46, 0x71,
	0x40, 0x50, 0x79, 0x25, 0x78, 0x40, 0x55, 0x38, 0x82, 0x7c, 0xab, 0x82, 0xf2, 0x54, 0x47, 0x80,
	0xd5, 0x6e, 0xa2, 0x29, 0x50, 0xfa, 0x53, 0xe6, 0x37, 0x1e, 0x61, 0xfc, 0x0f, 0x8b, 0x2f, 0xf5,
	0x11, 0xfc, 0x49, 0x0e, 0x5d, 0x28, 0x6f, 0x93, 0x9b, 0xfc, 0x27, 0x8b, 0xe5, 0xce, 0xb6, 0xcb,
	0x83, 0xa9, 0x2f, 0xa0, 0x69, 0x8f, 0xfc, 0x20, 0x67, 0xba, 0x61, 0x8a, 0xdf, 0x2f, 0x52, 0x2c,
	0x11, 0x8a, 0x1e, 0xc7, 0xc7, 0xe2, 0x55, 0x47, 0x0b, 0x12, 0x7e, 0xc4, 0x73, 0x11, 0x45, 0x80,
	0x96, 0x96, 0x78, 0xfa, 0x03, 0xe2, 0x9d, 0x11, 0x25, 0x7a, 0x67, 0x04, 0x6c, 0x87, 0x31, 0xd7,
	0x41, 0x33, 0x42, 0x6b, 0x40, 0xc6, 0x0e, 0x28, 0x1a, 0xe2, 0x22, 0x86, 0x1b, 0xf9, 0x41, 0x91,
	0xbd, 0xa4, 0x91, 0x69, 0x4f, 0x04, 0x4e, 0xbe, 0x7f, 0x04, 0x4d, 0x32, 0x87, 0x3f, 0x3d, 0x3a,
	0x60, 0x93, 0x9f, 0x85, 0x0c, 0xc0, 0xa1, 0xc1, 0x2f, 0x00, 0xd9, 0x1f, 0x98, 0x53, 0x01, 0x0e,
	0x3e, 0x29, 0xd0, 0xed, 0x11, 0x59, 0x33, 0x15, 0xf9, 0x83, 0xf6, 0x3a, 0xda, 0x27, 0x12, 0xc4,
	0xfb, 0x27, 0x31, 0x76, 0x65, 0x4d, 0x02, 0x89, 0xa6, 0x7c, 0x20, 0x3e, 0x9e, 0x5f, 0x14, 0xc7,
	0xf3, 0x32, 0x1e, 0xcf, 0x7c, 0x45, 0x85, 0xa2, 0xdd, 0x95, 0xc7, 0x40, 0x7d, 0x59, 0xea, 0xaa,
	0x62, 0x4c, 0xfb, 0xe7, 0x83, 0x63, 0x0b, 0xa7, 0x2d, 0x0c, 0x85, 0xba, 0xb3, 0xbe, 0x22, 0x86,
	0x8e, 0x2b, 0x08, 0x3b, 0xf7, 0x5b, 0x3d, 0x6a, 0x54, 0x30, 0xff, 0x84, 0x54, 0x51, 0x9a, 0x92,
	0x09, 0xad, 0x30, 0x78, 0xe0, 0xa5, 0xc0, 0xbd, 0xf8, 0xb4, 0x62, 0x84, 0x47, 0x2a, 0xfd, 0x91,
	0xb5, 0xf7, 0xa1, 0xa7, 0xfa, 0x76, 0xa9, 0xdd, 0x71, 0x2b, 0x35, 0x62, 0x99, 0x0d, 0x47, 0x0e,
	0xff, 0xdf, 0x06, 0x8f, 0x39, 0xf3, 0x86, 0x93, 0x91, 0x0d, 0x17, 0x7c, 0x8a, 0xda, 0xe7, 0xa2,
	0x43, 0xaa, 0xb6, 0x89, 0xab, 0x8b, 0x28, 0x82, 0xbd, 0xa2, 0xa3, 0x26, 0xc4, 0x08, 0x6c, 0xbc,
	0x08, 0x3a, 0xe1, 0x17, 0x14, 0x2c, 0xd8, 0x5f, 0x89, 0x42, 0xd3, 0xee, 0x23, 0x4d, 0xec, 0x80,
	0xea, 0xd6, 0x49, 0xd8, 0xaa, 0xd0, 0xd8, 0xa7, 0x14, 0x8d, 0xc5, 0x2b, 0x12, 0xb4, 0x56, 0x46,
	0x7e, 0x07, 0xfc, 0x58, 0x6e, 0xab, 0xc7, 0x43, 0xda, 0xa3, 0x91, 0x3c, 0xfd, 0xb9, 0x61, 0x1e,
	0xce, 0xe5, 0xc4, 0x17, 0x18, 0x21, 0x1a, 0xd2, 0x6d, 0xf5, 0x58, 0x38, 0x3b, 0xf9, 0xd6, 0x00,
	0x9a, 0x09, 0xad, 0xa8, 0xf0, 0x4a, 0xc4, 0x7c, 0xed, 0xbb, 0x12, 0x89, 0xf1, 0xa8, 0x5a, 0x89,
	0xe4, 0x83, 0xf6, 0x6e, 0xb4, 0x20, 0x12, 0xc4, 0xd6, 0x09, 0xf1, 0x09, 0x0c, 0x44, 0x5a, 0xa0,
	0xbf, 0x22, 0x5a, 0xa0, 0x64, 0x18, 0xb3, 0x90, 0xb4, 0xd1, 0xac, 0x12, 0x57, 0x81, 0x83, 0x12,
	0x22, 0x71, 0x5a, 0xb3, 0x4c, 0xc8, 0x0f, 0x46, 0x92, 0xff, 0x65, 0x05, 0x79, 0x61, 0x51, 0x93,
	0x8b, 0xc1, 0x70, 0x03, 0xc9, 0x4f, 0xc7, 0x44, 0x26, 0xd1, 0x31, 0xbd, 0x4b, 0x35, 0x26, 0x62,
	0x55, 0xd3, 0x03, 0xf3, 0x24, 0x6f, 0x94, 0xa4, 0x4e, 0xe0, 0x36, 0x7f, 0x8d, 0xb6, 0xa9, 0xf5,
	0x1b, 0x12, 0x71, 0x09, 0xbc, 0x47, 0x3d, 0x24, 0x42, 0x7d, 0x20, 0x8a, 0xfa, 0xaf, 0x2a, 0xa8,
	0x87, 0x47, 0x84, 0x51, 0x96, 0x7e, 0x74, 0x00, 0x4d, 0xe0, 0x59, 0xf4, 0x85, 0x52, 0xdb, 0x8f,
	0xe6, 0x53, 0x66, 0x2e, 0xe7, 0x14, 0x37, 0x0b, 0x86, 0x53, 0xca, 0xdb, 0x05, 0x23, 0x95, 0x59,
	0xcd, 0x18, 0xe9, 0xf8, 0x1e, 0xed, 0x18, 0xd2, 0x82, 0x4f, 0xfa, 0x8a, 0x6d, 0x66, 0x4b, 0x45,
	0x23, 0x1e, 0x5b, 0x1c, 0x7b, 0xeb, 0xcd, 0xe3, 0xb1, 0x8b, 0x1f, 0x7e, 0xf3, 0x78, 0x4c, 0x3b,
	0x8a, 0x66, 0x02, 0x90, 0x82, 0x61, 0xa5, 0x8c, 0x7c, 0x31, 0x3e, 0x40, 0x21, 0x2e, 0x10, 0x08,
	0x81, 0x48, 0xc1, 0xb0, 0x9c, 0x52, 0x3e, 0x53, 0x8c, 0x0f, 0x52, 0x90, 0xf3, 0x04, 0xe4, 0x2a,
	0x3a, 0x1d, 0x22, 0xa2, 0xaf, 0x19, 0xce, 0x86, 0x9e, 0xb9, 0x6b, 0xa4, 0x9d, 0x94, 0x6e, 0xaf,
	0x3b, 0xe9, 0x8c, 0x9d, 0x32, 0x4b, 0xf9, 0x62, 0x7c, 0x88, 0x62, 0x2e, 0x7f, 0xf8, 0xcd, 0xe3,
	0x7b, 0xb5, 0x6b, 0x68, 0xa9, 0x1f, 0xa6, 0x91, 0x5f, 0xd7, 0xf3, 0x29, 0x23, 0x4d, 0xda, 0xb4,
	0xe3, 0xc3, 0x14, 0xf5, 0x12, 0x41, 0x5d, 0x46, 0x27, 0x01, 0xaa, 0x99, 0xc9, 0x17, 0x6d, 0xd2,
	0xbd, 0x15, 0x33, 0x9f, 0x76, 0x4c, 0xcb, 0x49, 0x99, 0xf9, 0xa2, 0xa5, 0xa7, 0x8a, 0xf1, 0xbd,
	0x14, 0xeb, 0x32, 0xc6, 0x5a, 0xfa, 0x27, 0x68, 0x66, 0xb5, 0xd7, 0xac, 0x5a, 0x6e, 0xd3, 0x7d,
	0x63, 0xa3, 0x5c, 0x7b, 0x48, 0x58, 0x78, 0x04, 0x1d, 0x58, 0x2d, 0xe5, 0xd3, 0x8e, 0x65, 0xe4,
	0x8d, 0x0d, 0xd2, 0x76, 0x98, 0x91, 0x32, 0x40, 0xde, 0xf4, 0x19, 0x99, 0x27, 0xdd, 0x49, 0xa2,
	0x59, 0x19, 0x64, 0xd3, 0xb0, 0x7d, 0x56, 0x6e, 0x92, 0xc6, 0xbf, 0x80, 0x5e, 0xb8, 0x5d, 0xe9,
	0xb8, 0x78, 0xc7, 0xf1, 0xdf, 0xb1, 0xc7, 0xcd, 0x63, 0xee, 0x58, 0x46, 0x31, 0x63, 0xe6, 0x9d,
	0x4c, 0xde, 0x2e, 0x4a, 0xcd, 0x5f, 0x43, 0x4b, 0x32, 0x80, 0x65, 0x64, 0xf5, 0xa2, 0x91, 0x76,
	0x8a, 0x26, 0xe6, 0x6c, 0x21, 0xab, 0x6f, 0x1a, 0x69, 0xa7, 0x60, 0x65, 0x52, 0x7c, 0x7e, 0xcf,
	0x7d, 0xf8, 0xcd, 0xe3, 0xc3, 0xda, 0x75, 0xf4, 0x4c, 0x1f, 0xd4, 0xac, 0x6e, 0x17, 0x9d, 0xa2,
	0xa5, 0xa7, 0x0d, 0x86, 0x3b, 0x10, 0x70, 0x78, 0x58, 0xbb, 0x89, 0xce, 0xf6, 0xc3, 0x35, 0x53,
	0x7a, 0x16, 0xa3, 0xe5, 0x74, 0x6b, 0x93, 0xa1, 0x0f, 0x06, 0xa2, 0x35, 0xac, 0x5d, 0x46, 0x4f,
	0xf7, 0x41, 0xcf, 0xe9, 0xd6, 0x6d, 0xa3, 0xc8, 0xf0, 0x86, 0x02, 0x69, 0x1a, 0xc6, 0xd2, 0xd4,
	0x0f, 0x2f, 0x93, 0x26, 0x93, 0xcd, 0x30, 0x87, 0x03, 0x69, 0x1a, 0xd6, 0xae, 0xa0, 0x53, 0x7d,
	0x30, 0xc5, 0xae, 0xee, 0x0d, 0x64, 0x7c, 0x58, 0x3b, 0x8b, 0x8e, 0xf4, 0x41, 0xbc, 0xbb, 0xa1,
	0x17, 0xe2, 0x23, 0x81, 0x14, 0x8d, 0x68, 0x37, 0xc3, 0x43, 0xd3, 0xef, 0x1a, 0x16, 0x96, 0x5c,
	0x42, 0xdd, 0x59, 0x2b, 0xe9, 0x96, 0x9e, 0x2f, 0x1a, 0x46, 0x7c, 0x74, 0x31, 0x8e, 0xf1, 0xae,
	0x60, 0xbc, 0x8f, 0xbd, 0x79, 0x7c, 0x61, 0xcf, 0x9e, 0x3d, 0x4b, 0x1f, 0x88, 0xa1, 0x85, 0x40,
	0x0e, 0x72, 0xad, 0x87, 0x7c, 0x3f, 0xd3, 0x4e, 0xa0, 0xa3, 0x80, 0x72, 0xce, 0xbc, 0x6b, 0xa8,
	0x16, 0xf6, 0x69, 0xb4, 0xa8, 0x84, 0x5a, 0xcd, 0xdc, 0x33, 0xd2, 0xbe, 0x00, 0x9c, 0x27, 0x5d,
	0x7d, 0x16, 0x1d, 0x52, 0x83, 0x66, 0x4d, 0xbd, 0x98, 0xc9, 0xaf, 0xf9, 0x53, 0x8e, 0xc5, 0x65,
	0x64, 0xe9, 0xf3, 0x06, 0x50, 0x22, 0xe8, 0x99, 0xb9, 0xb5, 0xd5, 0x75, 0xf9, 0xf6, 0xa7, 0x3d,
	0x85, 0x92, 0x80, 0x94, 0xb9, 0xba, 0x6a, 0x1b, 0x45, 0x55, 0xef, 0x2e, 0xa0, 0xe3, 0x11, 0x70,
	0x2b, 0xba, 0x9d, 0xb1, 0xd9, 0x62, 0x15, 0xbb, 0xf9, 0x0c, 0x3a, 0x18, 0x81, 0x23, 0x08, 0x26,
	0xe9, 0xa5, 0x76, 0x0e, 0x1d, 0xeb, 0x07, 0xec, 0x14, 0x33, 0x86, 0x05, 0x65, 0xb1, 0x1f, 0xf9,
	0x62, 0x26, 0x75, 0xdb, 0xf6, 0x05, 0xf0, 0x02, 0x61, 0xc2, 0xa7, 0x62, 0x68, 0x5f, 0xc0, 0x04,
	0xe1, 0xfe, 0x01, 0xed, 0xa4, 0xd0, 0x74, 0x36, 0x93, 0xcb, 0x28, 0x59, 0x20, 0x0a, 0x14, 0x00,
	0x33, 0x2d, 0x67, 0xc5, 0x28, 0x16, 0x0d, 0x0b, 0x2e, 0xd3, 0x11, 0xed, 0x0c, 0x3a, 0x1c, 0x09,
	0xbf, 0x61, 0x5a, 0xb6, 0x01, 0x75, 0xb2, 0x3c, 0x1c, 0x00, 0x6e, 0x17, 0xad, 0x4c, 0x4a, 0xd0,
	0xce, 0x23, 0x4b, 0x3f, 0x16, 0x43, 0x07, 0x83, 0xe1, 0x58, 0xd8, 0x20, 0x13, 0xae, 0x57, 0xd3,
	0x96, 0xd0, 0x53, 0x80, 0x9a, 0x65, 0x62, 0x35, 0x96, 0xce, 0x58, 0x46, 0x8a, 0xfc, 0xdd, 0x4f,
	0x15, 0xc9, 0xb0, 0x39, 0xd3, 0x32, 0x1c, 0x7d, 0x6d, 0xcd, 0x32, 0x6c, 0x3b, 0x73, 0xd7, 0x10,
	0xa7, 0x58, 0xd4, 0x07, 0x4a, 0xd4, 0x82, 0x4e, 0xf1, 0xe0, 0x60, 0x97, 0xfe, 0x28, 0x86, 0x66,
	0x83, 0xfe, 0xf3, 0xbb, 0xb9, 0xb5, 0xa3, 0x02, 0x13, 0xec, 0x94, 0x19, 0x9a, 0x85, 0xa7, 0xd0,
	0xbe, 0x10, 0xc4, 0x5a, 0xd6, 0x5c, 0xd1, 0xb3, 0x70, 0x13, 0x1c, 0xd1, 0x4e, 0xa2, 0x85, 0x10,
	0x1c, 0x51, 0x6f, 0x7e, 0x47, 0xe8, 0x00, 0x4e, 0xa1, 0xfd, 0x21, 0xb0, 0xbc, 0x8e, 0xff, 0xd0,
	0xb3, 0x3e, 0xcb, 0xe9, 0xfc, 0x88, 0x2a, 0x4c, 0x84, 0x74, 0x8c, 0x7b, 0xa9, 0x6c, 0x29, 0x9d,
	0xc9, 0xaf, 0xb1, 0x36, 0xc0, 0x86, 0x38, 0xb2, 0xf4, 0x6b, 0x31, 0x34, 0x5b, 0x74, 0x3b, 0x8d,
	0x5a, 0x93, 0xf8, 0xa2, 0xb8, 0xdc, 0x1d, 0x45, 0x07, 0x8b, 0x86, 0x95, 0xcb, 0x50, 0x2a, 0x2a,
	0x91, 0x3b, 0x85, 0xf6, 0x87, 0x20, 0x56, 0xb3, 0xc6, 0xbd, 0xcc, 0x4a, 0xd6, 0x10, 0x87, 0x7b,
	0x02, 0xcd, 0x87, 0x20, 0xcd, 0x82, 0x91, 0xf7, 0x47, 0x4b, 0x7a, 0x82, 0x75, 0x4c, 0x18, 0xea,
	0xae, 0x61, 0xe5, 0x33, 0x6b, 0xeb, 0xa2, 0x84, 0x29, 0x09, 0xe2, 0x1f, 0xc4, 0x65, 0xf5, 0xab,
	0x31, 0x14, 0x4f, 0xbb, 0xf5, 0xda, 0x43, 0xb7, 0xc3, 0x13, 0x54, 0xb4, 0x43, 0x68, 0x7f, 0xda,
	0xc8, 0x66, 0xee, 0x1a, 0xd6, 0x66, 0x84, 0x05, 0x23, 0x7e, 0x5e, 0xb5, 0x0c, 0x23, 0xac, 0xe0,
	0x04, 0x90, 0x75, 0x33, 0x9b, 0x76, 0x32, 0x79, 0x27, 0x55, 0xb2, 0x8b, 0x66, 0x7a, 0xd3, 0x1f,
	0x15, 0x1d, 0x3b, 0x16, 0x09, 0x01, 0xba, 0x68, 0x65, 0x9c, 0x82, 0x6e, 0x15, 0x37, 0xc5, 0x19,
	0xc4, 0x2b, 0x4c, 0x80, 0xbb, 0x6b, 0x58, 0x76, 0xc9, 0x76, 0x0a, 0xfa, 0x66, 0xce, 0x08, 0xac,
	0x18, 0xaa, 0x35, 0xbf, 0x28, 0x86, 0x26, 0x85, 0x60, 0xbf, 0xb6, 0x88, 0x16, 0xec, 0xcd, 0xdc,
	0x8a, 0x99, 0x75, 0xec, 0xd5, 0x7b, 0xd2, 0x98, 0x2e, 0xa3, 0xa7, 0xc0, 0x37, 0xa3, 0x94, 0x2a,
	0x38, 0x1b, 0x99, 0xe2, 0xba, 0x93, 0x2d, 0xe5, 0x0a, 0x8e, 0x5d, 0xca, 0x39, 0x99, 0x7c, 0xd1,
	0xb0, 0x0c, 0xbb, 0x18, 0x8f, 0x2d, 0xa2, 0xb7, 0xde, 0x3c, 0x3e, 0x90, 0x4a, 0xb3, 0xae, 0x43,
	0x9a, 0x1b, 0xeb, 0x46, 0xde, 0xc9, 0xd8, 0x76, 0xc9, 0x48, 0xc7, 0x07, 0x28, 0xdc, 0x46, 0x86,
	0xf4, 0xe6, 0xcb, 0xc7, 0x82, 0x3b, 0xfb, 0xa0, 0x17, 0x41, 0x4b, 0xa2, 0xc3, 0xb6, 0x91, 0x2a,
	0x59, 0x99, 0xe2, 0xa6, 0x93, 0x49, 0x3b, 0xb6, 0x59, 0xb2, 0x52, 0x32, 0xc3, 0x9f, 0x46, 0x09,
	0x05, 0x4c, 0xaa, 0x64, 0x67, 0x0a, 0x90, 0xed, 0x31, 0xcc, 0x48, 0x05, 0xe0, 0x9d, 0x52, 0xe6,
	0x36, 0x64, 0x78, 0x2c, 0x82, 0xa0, 0x6d, 0xa4, 0x4d, 0x61, 0xcd, 0xc4, 0xb0, 0x0a, 0x54, 0x00,
	0x66, 0xec, 0x4c, 0xde, 0xc9, 0x97, 0x72, 0x2b, 0x86, 0x05, 0x17, 0xca, 0x80, 0xb6, 0x84, 0x0e,
	0x28, 0xc0, 0xad, 0x4c, 0xca, 0x49, 0x99, 0x69, 0x03, 0x9a, 0x8a, 0x03, 0x78, 0x43, 0x52, 0x92,
	0x36, 0x1d, 0x62, 0x92, 0x5a, 0x9b, 0x14, 0x87, 0x99, 0x04, 0x78, 0xab, 0x1e, 0xd2, 0x2e, 0xa2,
	0x13, 0x51, 0x38, 0x25, 0xcb, 0x32, 0xf2, 0x29, 0x86, 0x04, 0xec, 0x82, 0x21, 0xed, 0x16, 0x3a,
	0xa7, 0xe2, 0x9e, 0x99, 0xb7, 0xcd, 0x6c, 0x26, 0x4d, 0xed, 0x09, 0x1d, 0xdb, 0xe2, 0xb6, 0x6d,
	0xa6, 0x32, 0x64, 0xb5, 0xc4, 0x47, 0x29, 0x81, 0x6b, 0xc4, 0x10, 0x39, 0x8f, 0x92, 0x0a, 0x02,
	0xc6, 0xbd, 0xd4, 0xba, 0x9e, 0x5f, 0x33, 0x1c, 0x3a, 0xff, 0xf1, 0x31, 0x8a, 0x72, 0x95, 0xa0,
	0x9c, 0x46, 0x8b, 0x0a, 0x94, 0x15, 0x23, 0xbb, 0x96, 0xd1, 0xf3, 0x71, 0x44, 0x41, 0x57, 0x89,
	0x8d, 0xaa, 0xe6, 0xc3, 0x4a, 0xd6, 0x34, 0x31, 0x7f, 0xd7, 0x7c, 0xf2, 0xe3, 0x14, 0x47, 0x27,
	0x38, 0xa7, 0xd0, 0x7e, 0xe5, 0x90, 0x72, 0x39, 0x33, 0x1f, 0x9f, 0xa0, 0x90, 0x6b, 0x04, 0x52,
	0x3d, 0xd3, 0xe9, 0x52, 0x31, 0xb5, 0x1e, 0x9f, 0xa4, 0x80, 0x29, 0x02, 0xa8, 0xee, 0xb1, 0x9d,
	0x49, 0x99, 0x77, 0xf5, 0x5c, 0x7c, 0x8a, 0x82, 0x1a, 0x7d, 0x40, 0xef, 0xea, 0x59, 0xd3, 0x32,
	0xf2, 0xf1, 0x69, 0x0a, 0x9a, 0x26, 0xa0, 0xcf, 0xa2, 0x43, 0x0a, 0xd0, 0x0d, 0xc3, 0x2a, 0x16,
	0xf4, 0x02, 0x36, 0x08, 0xe2, 0x14, 0x7a, 0x85, 0x40, 0x9f, 0x43, 0xc7, 0x54, 0xc3, 0xca, 0x1a,
	0xba, 0x85, 0x35, 0xf3, 0xba, 0x59, 0xb2, 0x8d, 0xf8, 0x0c, 0xc5, 0x58, 0x27, 0xcb, 0xef, 0x1a,
	0x5a, 0x52, 0x0a, 0x44, 0x5a, 0x77, 0x56, 0x0b, 0xb9, 0xac, 0xc3, 0x56, 0x51, 0x8a, 0xce, 0xaa,
	0x46, 0x51, 0xc9, 0x8a, 0xd4, 0x56, 0xd0, 0x45, 0x05, 0xaa, 0x59, 0x20, 0xda, 0x92, 0x9a, 0x2c,
	0x96, 0x51, 0x30, 0x2d, 0x6c, 0x8f, 0x39, 0x7a, 0xa9, 0xb8, 0x6e, 0x62, 0xd0, 0xf8, 0x2c, 0xa5,
	0xf1, 0x12, 0x6b, 0x5e, 0x35, 0x77, 0x59, 0x62, 0x4b, 0x38, 0xe6, 0xaa, 0x93, 0xb2, 0x8c, 0x74,
	0xa6, 0x18, 0x9f, 0xa3, 0xe6, 0x66, 0x96, 0x99, 0x9b, 0xa3, 0x7b, 0xf6, 0x60, 0x85, 0x73, 0xb4,
	0x6f, 0xcf, 0x4b, 0x56, 0x36, 0x3e, 0x4f, 0xf1, 0x6e, 0x33, 0xbc, 0x69, 0x8c, 0xb7, 0x8e, 0x2e,
	0x28, 0xf0, 0xa8, 0xe1, 0x5e, 0xc8, 0xea, 0x29, 0x22, 0xc7, 0x99, 0xb5, 0xbc, 0x91, 0x76, 0x32,
	0x69, 0x23, 0x5f, 0xc4, 0x3a, 0xc4, 0x8a, 0x2f, 0x50, 0x4a, 0xb9, 0x0f, 0xbf, 0x79, 0x7c, 0xf4,
	0x63, 0x6f, 0x1e, 0xbf, 0x8e, 0x0d, 0xde, 0x5f, 0x24, 0xef, 0xe7, 0xf3, 0xcc, 0x64, 0x6d, 0x1f,
	0x9a, 0x2d, 0x58, 0x66, 0xba, 0x94, 0x92, 0x4f, 0x3a, 0x87, 0xd0, 0x94, 0xff, 0x41, 0x5f, 0xc3,
	0x8b, 0x0c, 0x2a, 0x9d, 0xbd, 0xf8, 0xb4, 0xea, 0x7f, 0x26, 0x12, 0x98, 0xc6, 0x6c, 0x02, 0xc6,
	0x82, 0x04, 0x61, 0x15, 0x4c, 0x4b, 0x2f, 0x0a, 0xc7, 0x92, 0xbd, 0xda, 0x11, 0x14, 0xe7, 0x10,
	0x6c, 0x25, 0x8b, 0x67, 0x52, 0xd0, 0x07, 0xe3, 0x4e, 0x09, 0xb7, 0x20, 0x9c, 0x3b, 0x8f, 0x21,
	0xcd, 0xff, 0xbc, 0x46, 0xf6, 0x43, 0xb2, 0x1f, 0xc0, 0x43, 0xa6, 0x76, 0x10, 0x4d, 0xfa, 0x20,
	0x99, 0x7c, 0xda, 0xb8, 0xe7, 0x2b, 0x89, 0x2b, 0xe4, 0xeb, 0x01, 0x34, 0xe1, 0x7f, 0xcd, 0x9a,
	0x3a, 0x57, 0x00, 0x57, 0xfd, 0x63, 0xa4, 0xff, 0x31, 0x67, 0xe6, 0x8d, 0x4d, 0xca, 0x6d, 0x7f,
	0xc5, 0x5f, 0x63, 0x63, 0x8c, 0x07, 0x30, 0x56, 0x71, 0x4d, 0x5f, 0x33, 0xe2, 0x88, 0x6e, 0x01,
	0xe7, 0xcf, 0xb1, 0x3e, 0x72, 0x2e, 0xe4, 0x4a, 0xf9, 0x4c, 0x2a, 0x53, 0xd0, 0xf1, 0xb2, 0xa6,
	0x20, 0xe7, 0xd9, 0x28, 0x79, 0x1f, 0xcd, 0xe2, 0xba, 0x61, 0xc5, 0x27, 0xd8, 0xe7, 0x0b, 0x32,
	0x85, 0xd5, 0x4c, 0x5e, 0xcf, 0xa7, 0xf0, 0x51, 0x61, 0x92, 0x81, 0x90, 0xad, 0x74, 0xe9, 0x27,
	0xcf, 0xa3, 0xb8, 0x9c, 0x70, 0x8a, 0xf7, 0x73, 0x2e, 0x33, 0x8a, 0xfd, 0xfc, 0x1c, 0x10, 0x45,
	0x76, 0x22, 0xc8, 0xdf, 0x36, 0x2c, 0xdb, 0xd1, 0x53, 0x29, 0xa3, 0x50, 0xc4, 0x87, 0x7d, 0x7f,
	0xd7, 0x5b, 0xd1, 0x89, 0x4a, 0x5d, 0x06, 0x7a, 0x98, 0x60, 0xa4, 0x0c, 0xab, 0x48, 0xd7, 0x99,
	0x81, 0xe5, 0x3e, 0x6d, 0x14, 0x4c, 0x3b, 0x53, 0xf4, 0xf7, 0x40, 0xb2, 0x57, 0x0e, 0x69, 0x3a,
	0x50, 0xc4, 0x14, 0xcb, 0xcc, 0xe2, 0xf3, 0x9c, 0xa5, 0x67, 0x33, 0xef, 0x32, 0xd2, 0x9c, 0x6f,
	0x8e, 0xb9, 0x92, 0xcd, 0xac, 0xd1, 0x25, 0x3b, 0xb8, 0x38, 0xfe, 0xd6, 0x9b, 0xc7, 0x07, 0x53,
	0x39, 0x93, 0x90, 0x38, 0x0b, 0xf6, 0x23, 0x46, 0x22, 0x97, 0x33, 0xac, 0x54, 0x06, 0x9f, 0x7a,
	0xf5, 0x02, 0xd9, 0x8f, 0x68, 0x93, 0x05, 0x02, 0xbf, 0x04, 0x54, 0x15, 0x87, 0xc7, 0xd6, 0x5f,
	0xd1, 0x4c, 0xdd, 0x8e, 0x0f, 0x33, 0x58, 0x9b, 0xd1, 0x3e, 0x28, 0xc3, 0x32, 0x59, 0x25, 0xee,
	0x8b, 0xf8, 0xde, 0xc5, 0x89, 0xb7, 0xde, 0x3c, 0x3e, 0x84, 0x7f, 0x25, 0xf0, 0xd7, 0xd1, 0xe9,
	0x28, 0xf8, 0x82, 0x95, 0xb9, 0x4b, 0xfe, 0x8f, 0x17, 0x24, 0x11, 0xc5, 0x11, 0x36, 0x8e, 0x02,
	0xc5, 0xbd, 0x81, 0x9e, 0x16, 0x71, 0x57, 0x4d, 0xcb, 0xc8, 0xac, 0xe5, 0x83, 0x5d, 0x85, 0x7b,
	0x4a, 0x46, 0x17, 0xa7, 0x31, 0xe6, 0xaa, 0x69, 0x61, 0xcc, 0x1f, 0x7c, 0xf3, 0x38, 0xd2, 0x4e,
	0xa2, 0x39, 0x09, 0xbb, 0x54, 0x2c, 0x59, 0x46, 0x7c, 0x8c, 0x36, 0xb2, 0x5a, 0x2a, 0x92, 0x46,
	0xae, 0xa1, 0x53, 0x22, 0x58, 0x2e, 0x63, 0xa7, 0x8c, 0x6c, 0x56, 0xcf, 0x1b, 0x26, 0xb1, 0x9a,
	0x6c, 0xdb, 0x29, 0xae, 0x5b, 0x66, 0x69, 0x6d, 0x3d, 0x8e, 0x28, 0x6a, 0xae, 0x40, 0x51, 0x2f,
	0xc9, 0x13, 0xcc, 0xe7, 0xc6, 0xb7, 0x83, 0x1c, 0x33, 0x9f, 0xdd, 0x8c, 0x8f, 0x33, 0xb4, 0x0c,
	0x9d, 0x9e, 0xcb, 0xe8, 0x64, 0x04, 0x5a, 0xc1, 0xca, 0xe4, 0x89, 0xc4, 0x53, 0xbc, 0x09, 0xbf,
	0x39, 0x33, 0xa2, 0xa7, 0x00, 0x4f, 0xe2, 0xe4, 0xa4, 0x8f, 0x4a, 0x39, 0x79, 0x5a, 0x96, 0xed,
	0x5c, 0xa9, 0x58, 0xd2, 0xb3, 0xce, 0x6a, 0x29, 0x9f, 0x8e, 0x4f, 0xd1, 0x09, 0xce, 0xad, 0x12,
	0xd0, 0x73, 0xb2, 0xf0, 0xe4, 0x4d, 0x47, 0xf8, 0x21, 0x3e, 0x4d, 0xa7, 0x38, 0x6f, 0xe6, 0x0d,
	0x82, 0x11, 0x62, 0x34, 0xdd, 0x1e, 0xe2, 0x71, 0xda, 0x07, 0x93, 0x71, 0xeb, 0x0c, 0xd8, 0xe5,
	0xd8, 0x89, 0xd7, 0x58, 0x35, 0x2c, 0xcb, 0x48, 0x33, 0x41, 0x9b, 0xa1, 0xfd, 0x28, 0xd8, 0x6a,
	0xa1, 0x2c, 0x66, 0x72, 0x06, 0x5f, 0x33, 0x1a, 0x85, 0x2d, 0xd2, 0x35, 0x73, 0x15, 0xd8, 0x1e,
	0x74, 0xe9, 0xda, 0x4e, 0xd1, 0x32, 0x74, 0xbb, 0x64, 0x6d, 0x3a, 0x2b, 0x99, 0x6c, 0xd6, 0x31,
	0xb3, 0xe9, 0xf8, 0x2c, 0x51, 0xef, 0x43, 0x25, 0xbb, 0xb8, 0xc2, 0x84, 0x04, 0x5b, 0xa6, 0xf3,
	0x22, 0xe6, 0x86, 0x6e, 0x59, 0x7a, 0x1e, 0xef, 0x46, 0xa4, 0xf3, 0x1b, 0xba, 0x15, 0xb5, 0xa4,
	0xf2, 0x77, 0xf1, 0x72, 0x5e, 0xc9, 0x32, 0xc1, 0x9f, 0x67, 0xcb, 0x64, 0x85, 0x98, 0x36, 0x67,
	0xe4, 0x65, 0x92, 0x31, 0xf1, 0x7e, 0xc7, 0x95, 0xde, 0x02, 0x25, 0x9f, 0x31, 0x8a, 0x04, 0xfc,
	0x24, 0x5a, 0x90, 0xba, 0x91, 0xc9, 0xa6, 0x53, 0xba, 0x95, 0x8e, 0xef, 0xa3, 0xea, 0xf3, 0x16,
	0x01, 0x5b, 0x92, 0x7b, 0xab, 0xe7, 0x8c, 0x7c, 0xda, 0x48, 0xc7, 0x13, 0x44, 0xfc, 0x47, 0xd8,
	0x9f, 0x44, 0x0d, 0x86, 0xa4, 0x4c, 0xb7, 0x6d, 0xa3, 0xe8, 0xac, 0xe8, 0xa9, 0xdb, 0x98, 0xe3,
	0xf4, 0x53, 0xc6, 0xb0, 0xe3, 0xfb, 0x69, 0x57, 0xf4, 0x15, 0x9b, 0x59, 0x4d, 0x89, 0xb0, 0x9e,
	0x73, 0xf2, 0x66, 0xd1, 0xb0, 0xe3, 0x8b, 0x4c, 0xbf, 0xe5, 0x99, 0x21, 0x72, 0x44, 0x82, 0x24,
	0x9c, 0x5e, 0xe5, 0xcb, 0xd3, 0x8e, 0x1f, 0xa0, 0xb4, 0x57, 0xcc, 0x7b, 0x04, 0xe3, 0x99, 0x10,
	0x6d, 0x4b, 0x4f, 0x6f, 0x52, 0xfe, 0x1d, 0x5c, 0x9c, 0x7c, 0xeb, 0xcd, 0xe3, 0xc3, 0xe4, 0x17,
	0x02, 0x7c, 0x46, 0x96, 0xd9, 0x15, 0x2b, 0x93, 0x5e, 0x33, 0xe8, 0xce, 0x73, 0x68, 0x71, 0xea,
	0xad, 0x37, 0x8f, 0xef, 0xa5, 0x3f, 0xa9, 0xfb, 0x9d, 0xd2, 0xb3, 0x59, 0x02, 0x6c, 0xc7, 0x0f,
	0xb3, 0xb9, 0xc9, 0x32, 0xcf, 0xed, 0xd3, 0x7d, 0xf5, 0x32, 0x50, 0xac, 0x47, 0x7c, 0x6d, 0xb6,
	0x6a, 0x12, 0xd4, 0x1b, 0xc0, 0x92, 0x52, 0xa1, 0xe2, 0xe3, 0x18, 0xd9, 0xb3, 0x08, 0xf6, 0x51,
	0x8e, 0x5d, 0x20, 0xd8, 0x27, 0x90, 0x16, 0xd6, 0x85, 0xf1, 0x63, 0x0c, 0x2a, 0xc7, 0x26, 0x60,
	0x59, 0x16, 0xe6, 0xb4, 0xb1, 0x52, 0x34, 0x2d, 0x7c, 0x2e, 0x2c, 0x98, 0xb6, 0x6d, 0xd8, 0x36,
	0xa6, 0x9d, 0xa4, 0x58, 0xe9, 0x4c, 0xbe, 0xc0, 0x6c, 0xc8, 0x7d, 0x32, 0xd6, 0xaa, 0x5e, 0xca,
	0x16, 0x8d, 0x74, 0xfc, 0x38, 0x15, 0x8e, 0xb4, 0xb1, 0x8a, 0xff, 0x64, 0x13, 0x71, 0x40, 0x86,
	0x26, 0xeb, 0x8a, 0xcd, 0xf3, 0x09, 0xca, 0xaf, 0x74, 0x9e, 0x4d, 0x84, 0x0c, 0x8c, 0x55, 0x07,
	0xb7, 0x40, 0x4e, 0xb2, 0x9e, 0x94, 0x74, 0xca, 0xde, 0xf3, 0xf2, 0x46, 0x69, 0xdc, 0x2b, 0x12,
	0xb1, 0x24, 0xdb, 0x0a, 0x69, 0x21, 0xfe, 0x14, 0x95, 0x8b, 0x7b, 0xa9, 0x3c, 0x1b, 0xf2, 0x71,
	0x49, 0x55, 0x1b, 0x69, 0xbc, 0xe1, 0x31, 0x4b, 0x0a, 0x9f, 0x75, 0x0a, 0x66, 0x3e, 0xfe, 0x34,
	0xd3, 0xdc, 0x7a, 0x4a, 0x3d, 0x19, 0x12, 0x96, 0xef, 0xb7, 0xa7, 0x4d, 0x9e, 0xa2, 0xdd, 0x5c,
	0xd5, 0xd9, 0xa8, 0xf0, 0x59, 0x56, 0xc0, 0x5e, 0x33, 0xf2, 0x04, 0x3b, 0x98, 0x7e, 0x22, 0x98,
	0x76, 0xfc, 0x34, 0xe5, 0xc6, 0x9a, 0xc9, 0xa4, 0x5e, 0x5e, 0xd9, 0xd8, 0x4e, 0x32, 0xd2, 0x4e,
	0x36, 0x93, 0xbf, 0x6d, 0xa4, 0xe3, 0x4b, 0x54, 0x32, 0xef, 0xe1, 0x3f, 0x29, 0xb3, 0xd3, 0xc0,
	0x18, 0x65, 0x18, 0x6c, 0x77, 0xb0, 0x8b, 0x56, 0xa6, 0xe0, 0xac, 0x5a, 0x66, 0xce, 0xd1, 0xf3,
	0x9b, 0xdc, 0xff, 0x4f, 0xfa, 0xfb, 0x0c, 0xed, 0x6f, 0x31, 0x93, 0x2f, 0xb2, 0x76, 0x25, 0x0d,
	0x14, 0x32, 0xa0, 0x9f, 0xa5, 0x18, 0x59, 0x73, 0x35, 0xc5, 0xe6, 0x4d, 0xea, 0x69, 0x36, 0x73,
	0xa7, 0x94, 0xc1, 0x86, 0x27, 0x6d, 0xe1, 0x0c, 0x65, 0x67, 0xf6, 0x0e, 0x65, 0x48, 0x48, 0xc5,
	0xe5, 0xf4, 0x7c, 0x5a, 0x2f, 0x9a, 0xd6, 0xa6, 0x43, 0xe6, 0xcf, 0x8a, 0x9f, 0x65, 0x1b, 0x05,
	0xed, 0x50, 0x48, 0x19, 0xe5, 0x74, 0xbc, 0xbf, 0xa6, 0xe3, 0xcf, 0x51, 0x79, 0x63, 0x7f, 0xaa,
	0x55, 0x45, 0xce, 0x48, 0x67, 0x4a, 0x39, 0xe2, 0x6a, 0x61, 0x32, 0x77, 0x8e, 0xed, 0x58, 0xc5,
	0x3c, 0x5b, 0xa4, 0x51, 0x9b, 0x5d, 0x58, 0x83, 0x9d, 0x67, 0xa8, 0x6c, 0x01, 0x5d, 0x04, 0x07,
	0x24, 0xb6, 0xd9, 0x65, 0x8b, 0x99, 0xac, 0xb1, 0x46, 0xdc, 0xdd, 0x56, 0x89, 0x6c, 0x90, 0x17,
	0x28, 0xb3, 0x72, 0x59, 0x63, 0x4d, 0x2d, 0x0e, 0xc4, 0xb4, 0x74, 0xf4, 0x7c, 0xb0, 0x9e, 0x59,
	0x47, 0x2f, 0x52, 0x2e, 0xe8, 0x79, 0xc6, 0x05, 0x69, 0xdd, 0x05, 0x8e, 0xa6, 0x65, 0xaa, 0xd1,
	0xcc, 0x7c, 0xa6, 0x68, 0xb0, 0x35, 0x2a, 0x6d, 0x69, 0x85, 0xac, 0xfe, 0x2e, 0xd3, 0x76, 0x56,
	0x33, 0x2f, 0x99, 0x76, 0xfc, 0x12, 0xed, 0x51, 0xe1, 0x5d, 0xab, 0x2f, 0x11, 0x68, 0x13, 0xdd,
	0x94, 0xf7, 0x4b, 0xdf, 0x3a, 0x10, 0xe4, 0xc6, 0xcc, 0x13, 0x55, 0xa7, 0xfb, 0x3b, 0x11, 0x97,
	0xa0, 0xcb, 0x4c, 0x82, 0x0a, 0x16, 0xed, 0x6a, 0x06, 0x5d, 0xe9, 0x4f, 0xd0, 0x5c, 0x75, 0x74,
	0x35, 0xa9, 0x2b, 0x8c, 0x54, 0x8a, 0xad, 0xf1, 0x90, 0xe5, 0xe3, 0x5b, 0x20, 0xc6, 0x3d, 0x7c,
	0x18, 0x24, 0x76, 0x05, 0x36, 0xbb, 0xaf, 0xd2, 0x99, 0x29, 0x18, 0xab, 0x4c, 0x22, 0x43, 0x26,
	0x80, 0x99, 0xcb, 0xd8, 0x36, 0x96, 0x31, 0xd2, 0xce, 0x35, 0x66, 0x02, 0xe4, 0x99, 0x96, 0x92,
	0x76, 0x45, 0xcb, 0x20, 0x16, 0x4e, 0x3a, 0x7e, 0x9d, 0x8a, 0x18, 0xfd, 0x3b, 0xad, 0x16, 0x47,
	0xcb, 0x28, 0x66, 0xb0, 0x38, 0x3e, 0xef, 0xc3, 0x92, 0x3f, 0x09, 0xec, 0x55, 0x79, 0x07, 0xb0,
	0x8c, 0xbb, 0x46, 0xbe, 0x64, 0x84, 0xa7, 0x3b, 0x7e, 0x83, 0x8e, 0xc0, 0x62, 0xd3, 0xfd, 0xac,
	0xac, 0x0b, 0x7d, 0x4c, 0xaa, 0x2a, 0x6e, 0x32, 0x68, 0xe3, 0x6e, 0xd4, 0x00, 0xee, 0x9a, 0xd9,
	0xbb, 0x86, 0x15, 0x7f, 0x81, 0x75, 0xea, 0x6e, 0xf6, 0x6e, 0xd1, 0xca, 0xa9, 0xd5, 0xac, 0x0f,
	0x4c, 0x77, 0xbc, 0x5b, 0x74, 0x0a, 0x30, 0x06, 0x93, 0x72, 0x69, 0x9b, 0xb0, 0xd7, 0x31, 0xe7,
	0xc9, 0x8a, 0xc2, 0x08, 0xb4, 0xfb, 0x2f, 0xd2, 0x0e, 0xd9, 0x6c, 0x55, 0x5d, 0x94, 0x75, 0x33,
	0x39, 0xe1, 0x60, 0x95, 0x49, 0x36, 0x16, 0xb2, 0x32, 0x74, 0x2a, 0xb6, 0x76, 0x21, 0x95, 0xd5,
	0xfb, 0x23, 0x81, 0x8d, 0x72, 0x25, 0x40, 0x32, 0x19, 0xa3, 0xf6, 0xab, 0x91, 0x8a, 0xfa, 0xbd,
	0x78, 0x2a, 0x80, 0x2e, 0x32, 0xf7, 0x8e, 0xa4, 0x7b, 0xf0, 0x3a, 0x4d, 0x11, 0xfd, 0xc1, 0x56,
	0x5d, 0x9a, 0xaa, 0x55, 0xfa, 0x3b, 0xdb, 0x34, 0xa4, 0x65, 0x6e, 0x6f, 0x10, 0xcf, 0x74, 0x26,
	0x6f, 0x38, 0xab, 0x7a, 0x2a, 0x93, 0xc5, 0xe7, 0x5f, 0x83, 0xb5, 0x84, 0x3f, 0x31, 0x2d, 0x27,
	0x29, 0xc5, 0xa2, 0x7e, 0xcf, 0xd1, 0xb3, 0x59, 0x93, 0x79, 0x3f, 0x56, 0x99, 0xa4, 0xeb, 0xf7,
	0x74, 0xf5, 0xd6, 0x44, 0xe0, 0x43, 0x62, 0xb2, 0x46, 0xf9, 0x5c, 0x64, 0x62, 0xf2, 0xbc, 0x7c,
	0xea, 0xc1, 0x58, 0xc6, 0x3d, 0x23, 0x57, 0x28, 0x86, 0x0f, 0x63, 0xeb, 0xac, 0x49, 0x23, 0x45,
	0xb7, 0xf2, 0x9b, 0xe8, 0x99, 0x30, 0x72, 0xb4, 0x84, 0x66, 0x18, 0xba, 0x2f, 0xa2, 0xa7, 0x65,
	0x8d, 0xc4, 0x45, 0x22, 0xfe, 0x92, 0xdf, 0x12, 0x13, 0xb9, 0xb3, 0xf2, 0x7a, 0x2c, 0x9a, 0xce,
	0x0a, 0x6e, 0x23, 0x6f, 0x96, 0xf2, 0x78, 0x9d, 0xdd, 0x66, 0xc3, 0x5a, 0xa1, 0xcc, 0x58, 0x43,
	0x97, 0x24, 0x78, 0xdf, 0xc8, 0xce, 0xe4, 0x57, 0xb3, 0x3a, 0x73, 0x0a, 0x99, 0x45, 0x23, 0x55,
	0x14, 0x35, 0x74, 0xd6, 0xdf, 0xcc, 0x0a, 0x36, 0xb3, 0x11, 0x0e, 0xf7, 0x31, 0xd8, 0xb1, 0x39,
	0x98, 0xa3, 0x13, 0x57, 0xc4, 0x7f, 0x10, 0x94, 0x2b, 0xfd, 0x6c, 0x7c, 0xcc, 0x08, 0x62, 0xe3,
	0xe7, 0xe9, 0x39, 0xb0, 0x64, 0x13, 0x19, 0xf9, 0x41, 0xea, 0x7e, 0x92, 0x16, 0xfb, 0x5d, 0xdd,
	0xca, 0x10, 0x15, 0x47, 0x4e, 0xa1, 0x69, 0x03, 0xef, 0x73, 0x94, 0x95, 0x26, 0xed, 0xe6, 0x5d,
	0x2b, 0x9d, 0x57, 0x1b, 0x55, 0x1b, 0x99, 0xe2, 0x7a, 0xda, 0xd2, 0x37, 0xf2, 0xf1, 0x02, 0x5d,
	0xc0, 0xf4, 0x87, 0x3c, 0x53, 0x8a, 0x92, 0xa8, 0x6c, 0xea, 0xf9, 0xdb, 0x46, 0xe8, 0x84, 0x7c,
	0x87, 0x36, 0x82, 0x3f, 0x12, 0xb4, 0xe7, 0xe4, 0x5d, 0x61, 0xa5, 0xb4, 0xe9, 0xd8, 0x46, 0x36,
	0x8b, 0x37, 0xba, 0xb8, 0x45, 0xdb, 0x59, 0x29, 0x6d, 0xe2, 0x9f, 0x88, 0x3f, 0x2d, 0x24, 0x5c,
	0x46, 0xc9, 0x32, 0xa3, 0x9c, 0x0b, 0x36, 0x6d, 0xcd, 0x28, 0x31, 0x57, 0x7c, 0xa8, 0x93, 0x14,
	0x59, 0x96, 0xc9, 0x22, 0x47, 0x2b, 0x30, 0xb4, 0x63, 0x4a, 0x34, 0x61, 0x64, 0x25, 0xba, 0x46,
	0x8d, 0x12, 0x3b, 0xfd, 0x8f, 0x68, 0xe7, 0x64, 0x01, 0x23, 0x68, 0x36, 0xde, 0x23, 0xf1, 0x41,
	0xde, 0x8e, 0xdf, 0xa5, 0xd3, 0x6c, 0x94, 0x6c, 0xf3, 0x2e, 0x8b, 0x4f, 0x9f, 0x52, 0x61, 0x94,
	0x0a, 0x96, 0xce, 0xc3, 0x50, 0xd4, 0x1c, 0xb4, 0xe3, 0x1b, 0x94, 0x37, 0x46, 0x89, 0x7c, 0x26,
	0xe8, 0xa1, 0x5d, 0x60, 0xd5, 0xb4, 0x36, 0xf0, 0x39, 0xea, 0x1e, 0x85, 0x65, 0x7f, 0xb2, 0xf0,
	0x8b, 0xa4, 0xa2, 0x0a, 0xab, 0x7a, 0x3e, 0xbd, 0x62, 0x65, 0x8c, 0x55, 0x23, 0xbe, 0x49, 0x3b,
	0x46, 0x7e, 0x62, 0x94, 0x13, 0xa1, 0xcd, 0xa8, 0x64, 0xa5, 0xd6, 0x75, 0xdb, 0x88, 0xbf, 0x8b,
	0xe9, 0x66, 0x83, 0x9c, 0xd4, 0x47, 0xb4, 0x0b, 0xf2, 0xb0, 0x83, 0xa5, 0x40, 0x17, 0xe2, 0xbb,
	0x69, 0x6f, 0x6c, 0x23, 0x85, 0xff, 0x64, 0x31, 0xc6, 0x23, 0x91, 0x38, 0x85, 0xac, 0x91, 0x5e,
	0x33, 0xe2, 0x2f, 0x2f, 0xce, 0xbc, 0xf5, 0xe6, 0xf1, 0x31, 0xdb, 0x48, 0xd1, 0x1f, 0x08, 0xde,
	0x75, 0x59, 0xbc, 0x4b, 0x76, 0x3a, 0x82, 0x5f, 0xaf, 0x30, 0x65, 0xc8, 0xb9, 0xd5, 0x7f, 0x19,
	0x66, 0xb2, 0xd9, 0xf8, 0x7b, 0xfc, 0x65, 0x98, 0x61, 0xc2, 0xd7, 0x17, 0x85, 0x2c, 0x22, 0x87,
	0xa1, 0xe0, 0x3f, 0x08, 0xca, 0x0d, 0x59, 0x9f, 0xf9, 0xeb, 0x42, 0x2d, 0xb1, 0xef, 0xa5, 0x3a,
	0x67, 0x93, 0x09, 0xec, 0x55, 0x79, 0xf7, 0xa1, 0xde, 0x05, 0xdb, 0x31, 0xf3, 0xcc, 0xa3, 0x63,
	0xc7, 0xcb, 0x8b, 0x1a, 0xf1, 0x34, 0x98, 0xab, 0xcc, 0x09, 0x3c, 0xbb, 0x67, 0xcf, 0x1e, 0xed,
	0x9a, 0x2c, 0xb3, 0x00, 0xb3, 0xb0, 0xbe, 0x69, 0x67, 0x52, 0x7a, 0x36, 0x7e, 0xdf, 0x47, 0x2d,
	0x40, 0xd4, 0x67, 0x42, 0x27, 0x35, 0xdd, 0x5e, 0x8f, 0x57, 0x16, 0x67, 0xc9, 0x49, 0x4d, 0xb7,
	0xd7, 0x19, 0xf0, 0x41, 0x0c, 0xfc, 0x9c, 0xcc, 0x12, 0xd0, 0x4e, 0xca, 0xcc, 0xad, 0x98, 0xf1,
	0x2a, 0xf3, 0x84, 0x98, 0xd8, 0x30, 0x1f, 0x0d, 0x0f, 0x89, 0x1f, 0x08, 0xc8, 0x5a, 0xb2, 0x37,
	0xf4, 0x42, 0xdc, 0xa5, 0xfd, 0xca, 0x58, 0x36, 0xf3, 0x46, 0x5f, 0xc6, 0x4d, 0x5d, 0x97, 0x95,
	0x20, 0x39, 0x9c, 0x33, 0xce, 0x71, 0x2b, 0x6a, 0x8b, 0xe2, 0xae, 0x10, 0x2d, 0x86, 0x71, 0xd3,
	0x18, 0xf7, 0x66, 0xc8, 0x1d, 0xa9, 0xe7, 0xf5, 0x74, 0x46, 0xcf, 0x53, 0x77, 0x2d, 0xf3, 0x8e,
	0xdb, 0xf1, 0x6d, 0x7f, 0x94, 0xb9, 0x9c, 0x88, 0x7e, 0x32, 0x12, 0xdd, 0xb7, 0xcc, 0x89, 0x0d,
	0xf4, 0x80, 0xb6, 0x9e, 0xca, 0xad, 0x40, 0xf4, 0x17, 0x43, 0x87, 0x6e, 0x1f, 0xbd, 0x60, 0x99,
	0x77, 0xb1, 0x1d, 0xaa, 0x67, 0x19, 0x81, 0x1a, 0xed, 0x00, 0xfe, 0x7d, 0x77, 0x1d, 0x10, 0x44,
	0xd6, 0x8e, 0xbf, 0xca, 0x3a, 0x50, 0x5c, 0x79, 0x42, 0x74, 0x6a, 0x69, 0xbc, 0xc6, 0xd0, 0x75,
	0x81, 0x7b, 0x21, 0x61, 0xa2, 0x87, 0x2e, 0xff, 0x98, 0x4d, 0x27, 0xad, 0xce, 0x50, 0xd3, 0x36,
	0x44, 0x7d, 0x49, 0xf6, 0xe8, 0x4a, 0xba, 0xd3, 0xcf, 0x67, 0xa1, 0xb3, 0x4f, 0x3b, 0xd1, 0x58,
	0x9c, 0xa3, 0x7a, 0x71, 0xd5, 0xea, 0x3f, 0x89, 0xe4, 0x2f, 0x72, 0xfa, 0x14, 0xce, 0x76, 0x4d,
	0xca, 0x43, 0x9b, 0x1e, 0xee, 0x38, 0xfa, 0xf3, 0xb2, 0xfc, 0x60, 0x3b, 0x07, 0x6f, 0x85, 0xdc,
	0xd7, 0xee, 0xa4, 0x0a, 0xf1, 0x16, 0x45, 0x2e, 0xe6, 0x88, 0xf2, 0xe7, 0xc8, 0xd7, 0x65, 0x16,
	0x50, 0xc3, 0x42, 0x6c, 0xb8, 0xcd, 0x70, 0xa5, 0x86, 0x2f, 0xc8, 0xc6, 0xad, 0xa8, 0x66, 0x5e,
	0x27, 0x9a, 0x6d, 0x40, 0x9c, 0xb1, 0x55, 0x74, 0x36, 0xa4, 0x6a, 0xfa, 0x73, 0xad, 0x43, 0xf9,
	0x2f, 0xf1, 0xec, 0x82, 0xac, 0xb9, 0x57, 0xef, 0xf1, 0x6d, 0xa1, 0x4b, 0xf9, 0xbc, 0x7a, 0x6f,
	0x75, 0x03, 0xab, 0x1b, 0xf4, 0xb1, 0x37, 0x8f, 0x5b, 0x18, 0xe7, 0x5c, 0x68, 0x1f, 0xb9, 0xe7,
	0xd8, 0x05, 0xb3, 0x18, 0xf7, 0x16, 0xe7, 0xf1, 0x1e, 0xb7, 0x7a, 0x0f, 0xff, 0xb5, 0x23, 0x06,
	0x16, 0x8a, 0x1e, 0xc7, 0xd8, 0xd0, 0x0b, 0x10, 0xe3, 0x96, 0x2c, 0x91, 0xf8, 0x28, 0xc7, 0x42,
	0xf7, 0x64, 0x52, 0xfc, 0x4e, 0x3e, 0xf4, 0x3b, 0x99, 0x4f, 0xaf, 0x02, 0x02, 0x4b, 0x5f, 0x10,
	0x43, 0x5a, 0xf8, 0xf2, 0x0f, 0xed, 0x08, 0xe0, 0xb5, 0x5d, 0xd4, 0x8b, 0x25, 0x5b, 0x0a, 0x65,
	0x40, 0x6f, 0x23, 0x03, 0xd0, 0x53, 0xc5, 0x50, 0xd6, 0x0b, 0x8c, 0x8a, 0x32, 0xb0, 0x4c, 0x9e,
	0x01, 0x0a, 0x69, 0x2e, 0x9f, 0x18, 0x40, 0xf3, 0x96, 0xdb, 0xf5, 0x3a, 0xbd, 0x8a, 0xd7, 0xeb,
	0xd4, 0x9a, 0xfc, 0x79, 0x40, 0x2d, 0x89, 0x0e, 0x63, 0xbd, 0x46, 0x6d, 0x79, 0x3c, 0x59, 0x8a,
	0xc0, 0xca, 0x0d, 0x74, 0x52, 0x01, 0xb3, 0x5a, 0xca, 0x66, 0x1d, 0xe1, 0xf7, 0x78, 0x8c, 0x0a,
	0xc9, 0xaa, 0xc5, 0x78, 0x60, 0x63, 0x26, 0xa6, 0xd1, 0x19, 0x05, 0x76, 0xce, 0x4c, 0x13, 0xf2,
	0xf8, 0x1f, 0x12, 0x95, 0x01, 0x4a, 0x85, 0x28, 0x37, 0x4e, 0xe5, 0x45, 0x74, 0xba, 0x1f, 0x15,
	0x91, 0xc2, 0x20, 0xa3, 0xb0, 0x8b, 0x7e, 0xe4, 0x4d, 0x11, 0xd7, 0x09, 0x06, 0x3e, 0x44, 0xa9,
	0xdc, 0x83, 0x54, 0x96, 0x3e, 0x1a, 0x43, 0x93, 0xb6, 0xdb, 0xac, 0xb5, 0xc8, 0x3d, 0x39, 0x2c,
	0x47, 0xd6, 0x36, 0xf2, 0x19, 0x12, 0x56, 0x0d, 0x25, 0x3c, 0xc4, 0x83, 0x4f, 0xf4, 0x5f, 0x3e,
	0x8f, 0x6c, 0xa1, 0x6f, 0xcf, 0xe1, 0x89, 0x14, 0x01, 0x7d, 0xbd, 0xe1, 0xb3, 0xc3, 0x4e, 0x43,
	0x84, 0x33, 0x58, 0x40, 0x38, 0x42, 0x69, 0xc5, 0xb4, 0xd2, 0x99, 0xbc, 0x5e, 0x34, 0xd2, 0xfe,
	0xd8, 0xed, 0x15, 0xd8, 0xeb, 0x6f, 0x1c, 0x44, 0x49, 0x70, 0x0d, 0x46, 0xda, 0xf5, 0x82, 0x34,
	0xa0, 0x20, 0xe7, 0x5f, 0x3b, 0x8f, 0xce, 0xd8, 0x45, 0x2b, 0x73, 0xdb, 0xcf, 0x75, 0x4b, 0x1b,
	0x30, 0xf5, 0x26, 0x67, 0x14, 0xd7, 0xcd, 0xb4, 0x34, 0xc4, 0x34, 0x3a, 0xbb, 0x33, 0x0a, 0x49,
	0x1d, 0x74, 0x28, 0x5c, 0x3c, 0x46, 0x63, 0xb8, 0xe7, 0x59, 0xff, 0x5e, 0xc6, 0xc3, 0x29, 0xa0,
	0xeb, 0x3b, 0x53, 0x61, 0x10, 0xb6, 0x51, 0x74, 0xf4, 0xa2, 0x63, 0xdc, 0x2b, 0x64, 0x2c, 0x7a,
	0x22, 0x1c, 0xa0, 0x14, 0x2f, 0x40, 0x8a, 0x9b, 0x28, 0xf5, 0x44, 0x14, 0x8b, 0x26, 0xcf, 0xb2,
	0xd4, 0x53, 0x96, 0x69, 0xdb, 0x4e, 0x36, 0xb3, 0x6a, 0xc4, 0x07, 0x29, 0xe9, 0x8b, 0x90, 0xb4,
	0x8d, 0x6e, 0x3e, 0x29, 0x69, 0x6c, 0x6f, 0xe4, 0xf4, 0xac, 0x73, 0x57, 0xcf, 0x96, 0x8c, 0xf8,
	0x10, 0x25, 0xba, 0x0c, 0x88, 0x2e, 0x7d, 0x60, 0x10, 0x1d, 0x02, 0x33, 0x14, 0x2e, 0xc8, 0xd0,
	0x9e, 0x45, 0xa7, 0x84, 0x66, 0x57, 0xcc, 0x52, 0x3e, 0xad, 0x5b, 0x9b, 0xea, 0x79, 0xb9, 0x8a,
	0x92, 0x7d, 0xa1, 0x8d, 0x3b, 0x25, 0x92, 0xa9, 0x16, 0x1e, 0xde, 0x2d, 0x74, 0xba, 0x2f, 0xe6,
	0x9a, 0x65, 0xe8, 0x45, 0xc3, 0x72, 0x8a, 0xeb, 0x3a, 0x67, 0xfd, 0x25, 0x48, 0x60, 0x1d, 0x5d,
	0xd8, 0x35, 0x01, 0xc7, 0xb4, 0x58, 0x57, 0x06, 0xc3, 0x4c, 0xd1, 0x6e, 0xa0, 0xa7, 0xfa, 0x52,
	0xca, 0x1a, 0x24, 0xf4, 0xa7, 0xe7, 0x7d, 0x96, 0x0a, 0x42, 0x65, 0xa0, 0xe7, 0x76, 0x87, 0x1d,
	0x74, 0x62, 0x38, 0x2c, 0x49, 0x4b, 0x5f, 0x38, 0x88, 0x9e, 0x2a, 0x35, 0xab, 0x6e, 0xa7, 0xfe,
	0xb8, 0xd6, 0xdc, 0xee, 0xbb, 0x7e, 0x2e, 0xa1, 0xf3, 0xa5, 0x7c, 0xda, 0xb0, 0xb2, 0x9b, 0x58,
	0x93, 0xec, 0x7a, 0x0d, 0x65, 0xd0, 0xc5, 0xdd, 0xa1, 0xf9, 0x12, 0x4a, 0xc5, 0x28, 0xa6, 0xe0,
	0xd8, 0xae, 0x49, 0x89, 0x12, 0x39, 0xa0, 0x90, 0x83, 0x14, 0x3a, 0xb3, 0x3b, 0x52, 0x96, 0xb1,
	0x56, 0xca, 0xea, 0x96, 0x3f, 0x83, 0xc2, 0x1c, 0xe4, 0xd0, 0x95, 0xdd, 0x11, 0xf1, 0x9d, 0x4f,
	0x24, 0xe2, 0x68, 0xe4, 0x53, 0x7c, 0x95, 0x08, 0x73, 0xf1, 0x07, 0x31, 0xb4, 0x18, 0x7d, 0xa3,
	0x89, 0x76, 0x0a, 0x9d, 0xf0, 0xe3, 0xcd, 0xd4, 0xa5, 0x5c, 0xc8, 0x66, 0x58, 0x51, 0x81, 0xc4,
	0xf2, 0x8b, 0xe8, 0x50, 0x24, 0x64, 0x5a, 0xdf, 0xb4, 0x7d, 0xe6, 0xfa, 0xad, 0x17, 0xf0, 0x60,
	0x96, 0xd1, 0xe1, 0x48, 0xa4, 0x75, 0xb3, 0x64, 0xd9, 0x3e, 0x1f, 0xcf, 0x43, 0xac, 0x4b, 0xe8,
	0x48, 0x24, 0x96, 0xbd, 0xae, 0xe3, 0xd3, 0x11, 0xe3, 0xdc, 0x39, 0x80, 0xb6, 0xf4, 0xf7, 0x03,
	0x68, 0x4e, 0x75, 0x59, 0x0a, 0xde, 0xb1, 0x57, 0xb3, 0xe6, 0x86, 0x63, 0xa7, 0xd6, 0x8d, 0x74,
	0x29, 0xab, 0xcc, 0xe1, 0x5e, 0x47, 0x17, 0x14, 0x30, 0x79, 0xc3, 0x4a, 0x39, 0x29, 0x3d, 0x6b,
	0xe0, 0x65, 0xe0, 0xe8, 0xd9, 0x2c, 0x19, 0xaa, 0x93, 0x21, 0xe7, 0x8b, 0xe2, 0xba, 0x72, 0xcc,
	0x2f, 0xa0, 0x53, 0x51, 0x94, 0x0c, 0xdd, 0x2e, 0x1a, 0x16, 0xc9, 0x78, 0x76, 0x0a, 0x86, 0x7e,
	0xdb, 0x1f, 0x3d, 0x1c, 0x86, 0x76, 0x1d, 0x9d, 0xd8, 0x09, 0x9f, 0xe0, 0x4a, 0x8a, 0x76, 0xa7,
	0xb6, 0x37, 0x0c, 0xa9, 0xed, 0x21, 0x05, 0xe7, 0xfb, 0xb4, 0xed, 0xe3, 0x13, 0xdc, 0x61, 0x71,
	0x21, 0x11, 0xf6, 0x7f, 0xe9, 0x30, 0x9a, 0x09, 0xdd, 0x4a, 0x84, 0x0d, 0x37, 0x32, 0x6f, 0xe6,
	0xaa, 0x93, 0x23, 0xd6, 0x71, 0x38, 0x51, 0x76, 0x9f, 0x0c, 0xb0, 0xa2, 0x5b, 0x96, 0x91, 0xc5,
	0x12, 0x45, 0x23, 0xad, 0xf7, 0xeb, 0xc4, 0x76, 0xbb, 0x88, 0x92, 0x21, 0xc8, 0x4c, 0x36, 0x8b,
	0x97, 0x44, 0xaa, 0xb4, 0x92, 0x49, 0x39, 0xab, 0x86, 0x51, 0x8c, 0x0f, 0x30, 0xa4, 0xca, 0x16,
	0x33, 0xf8, 0xc2, 0xe4, 0x4b, 0xf6, 0x3a, 0x26, 0x3f, 0xc8, 0x22, 0xbf, 0x3d, 0x96, 0x4e, 0x1c,
	0x02, 0x5c, 0xd3, 0xb3, 0x59, 0x33, 0x6f, 0xc7, 0x87, 0x28, 0xc9, 0xb5, 0x32, 0xed, 0xc7, 0x73,
	0xe8, 0xb0, 0x0c, 0x99, 0x33, 0xd6, 0xf4, 0x0d, 0xbd, 0xe8, 0x0b, 0xf5, 0x30, 0x0b, 0xde, 0x6c,
	0x3c, 0x60, 0x6e, 0x96, 0x03, 0x61, 0x84, 0xa2, 0x95, 0x49, 0x39, 0x45, 0x4c, 0x9e, 0x25, 0x2b,
	0x79, 0xbe, 0xcb, 0x24, 0x04, 0xcb, 0x06, 0xe9, 0xb3, 0x65, 0x84, 0xd8, 0x2b, 0xc3, 0xb9, 0xdc,
	0x7d, 0xca, 0x18, 0x92, 0x19, 0x72, 0x21, 0x8c, 0x67, 0xe6, 0x01, 0x6e, 0xb1, 0x14, 0x1f, 0xa5,
	0x4e, 0x8c, 0x5c, 0x6e, 0xc5, 0xeb, 0x31, 0xde, 0x2c, 0xc8, 0x38, 0x05, 0xac, 0xf1, 0x6d, 0x3f,
	0x9f, 0xa4, 0x7e, 0xbf, 0xcb, 0x32, 0x8a, 0xe7, 0x64, 0x40, 0xd2, 0x73, 0x96, 0xe6, 0xe4, 0x35,
	0x09, 0xd4, 0xd9, 0xf0, 0x30, 0x8b, 0x96, 0xb9, 0xe9, 0x10, 0xbf, 0xab, 0x1d, 0x1f, 0xa7, 0xcd,
	0xb7, 0xde, 0xe7, 0x78, 0x1d, 0xc6, 0x96, 0xfd, 0x21, 0xd1, 0xb0, 0xd3, 0x66, 0x36, 0xab, 0x5b,
	0xb6, 0x9f, 0x27, 0x52, 0xb2, 0xd3, 0xcc, 0xfb, 0xb4, 0x28, 0xc3, 0xe2, 0xc9, 0xd9, 0xd0, 0x09,
	0xe9, 0x49, 0x7a, 0x46, 0xd2, 0xeb, 0x6f, 0x30, 0x81, 0xdc, 0xc4, 0x02, 0xf9, 0xfb, 0xc3, 0x68,
	0x41, 0x7d, 0xcb, 0xa8, 0x76, 0x12, 0x1d, 0xa3, 0x9a, 0xb5, 0xbf, 0x6c, 0x9e, 0x45, 0x87, 0xd4,
	0x60, 0x11, 0x12, 0x7a, 0x0d, 0x9d, 0x8a, 0x80, 0xdf, 0x51, 0x4e, 0xcf, 0x44, 0x36, 0xa5, 0x94,
	0xd6, 0xc8, 0x9e, 0x45, 0xc8, 0xec, 0x25, 0x74, 0x42, 0x0d, 0xdf, 0x5f, 0x72, 0xcf, 0x45, 0xf1,
	0x29, 0x52, 0x7e, 0x6f, 0xa0, 0x93, 0x11, 0x18, 0xbb, 0x91, 0xe2, 0xab, 0x51, 0xd8, 0x3b, 0xca,
	0xf2, 0x19, 0x74, 0x50, 0x8d, 0xa9, 0x96, 0xe8, 0x25, 0xb4, 0xa8, 0x06, 0x57, 0xc8, 0xf5, 0x72,
	0x14, 0x13, 0xfa, 0x4a, 0xf7, 0x39, 0x74, 0x24, 0x42, 0xc4, 0xa2, 0x64, 0xfc, 0x2a, 0x3a, 0xaa,
	0xc6, 0xd8, 0x51, 0xd2, 0x3f, 0x12, 0x43, 0xd3, 0xd2, 0x0d, 0x8d, 0xda, 0x41, 0x7c, 0x40, 0x2a,
	0x16, 0xb3, 0x6a, 0x03, 0xea, 0x79, 0x7c, 0x4e, 0x07, 0x5f, 0x49, 0x51, 0x20, 0xf9, 0x85, 0xe4,
	0x5a, 0x39, 0x96, 0x71, 0xa7, 0x44, 0x22, 0x8d, 0x6c, 0x87, 0x4b, 0x31, 0xe7, 0xc3, 0xb2, 0x6f,
	0xef, 0x42, 0x64, 0xdf, 0xf1, 0xa8, 0x24, 0xc0, 0xb6, 0xb8, 0x02, 0x20, 0xb0, 0xf4, 0xf1, 0x18,
	0x9a, 0x09, 0xdd, 0x79, 0xaf, 0x1d, 0x46, 0x8b, 0xc6, 0x3d, 0xc3, 0x4a, 0x65, 0x6c, 0xc3, 0xb1,
	0x8b, 0x9b, 0x59, 0x79, 0x35, 0x9e, 0x41, 0xfb, 0xa4, 0xef, 0x7a, 0xce, 0xb0, 0x32, 0x29, 0x3d,
	0x0f, 0x4f, 0x48, 0xbc, 0x97, 0xcf, 0xa2, 0x05, 0x09, 0x7c, 0xc5, 0xb0, 0x72, 0xa5, 0xb4, 0x0e,
	0x4f, 0x3f, 0x1c, 0x3a, 0x4c, 0xdc, 0x28, 0x59, 0x66, 0xc1, 0xd0, 0xf3, 0xd0, 0xd6, 0x10, 0x46,
	0xc0, 0x4b, 0x80, 0xb9, 0xa1, 0x71, 0x04, 0x1d, 0x30, 0x0b, 0x45, 0xa7, 0xa0, 0x6f, 0x9a, 0x25,
	0x65, 0x21, 0xd2, 0xb3, 0x68, 0x41, 0x06, 0x58, 0xc9, 0xe4, 0x75, 0x6b, 0x53, 0x79, 0xae, 0x50,
	0x40, 0xa7, 0xf4, 0x42, 0x21, 0x60, 0xaa, 0x70, 0x7e, 0x3b, 0x83, 0xf6, 0xc9, 0xd0, 0x77, 0xf5,
	0x7c, 0x26, 0x9b, 0xd5, 0x55, 0x76, 0xe6, 0xd2, 0x37, 0x0e, 0xa0, 0x39, 0xd5, 0x1d, 0xd0, 0xd8,
	0x5a, 0xa2, 0x62, 0x78, 0xa7, 0x64, 0x16, 0x0d, 0xb5, 0xf8, 0x9c, 0x43, 0x09, 0x05, 0x0c, 0xcd,
	0xae, 0x8d, 0x31, 0x2f, 0x6f, 0xfe, 0x1e, 0xe4, 0xef, 0x0b, 0xe8, 0x29, 0x25, 0x06, 0x74, 0x12,
	0x53, 0xfc, 0x01, 0x1f, 0xbf, 0x08, 0xf1, 0x2f, 0xa2, 0x03, 0x0a, 0x7c, 0xbb, 0xa8, 0x63, 0xcb,
	0x0c, 0x9f, 0xe1, 0x35, 0x1a, 0x13, 0x4e, 0x43, 0xa4, 0x1b, 0xfe, 0xca, 0x15, 0x90, 0x58, 0x61,
	0x2b, 0xcb, 0x6d, 0x8a, 0x0f, 0x51, 0x5f, 0x56, 0x21, 0x55, 0x2c, 0xe8, 0x82, 0xe3, 0xe2, 0x7b,
	0x07, 0xd1, 0xac, 0xe2, 0x36, 0x42, 0xed, 0x28, 0x3a, 0x88, 0xcf, 0x00, 0x7d, 0x8e, 0x27, 0x06,
	0x3a, 0x13, 0x82, 0x60, 0x7e, 0x7d, 0x26, 0x5c, 0x39, 0xdd, 0xba, 0x1d, 0xd4, 0x5d, 0xfa, 0x3c,
	0xa3, 0xf9, 0x9b, 0xbc, 0xfb, 0x9b, 0xe8, 0xd6, 0x0e, 0x64, 0x48, 0xa5, 0x8a, 0x9e, 0x77, 0xf4,
	0x62, 0x51, 0xc7, 0x26, 0x1b, 0x5d, 0xc7, 0x7a, 0xfa, 0xa5, 0x92, 0x5d, 0xcc, 0xd1, 0xda, 0x61,
	0xea, 0x66, 0x2b, 0x15, 0xd3, 0x3a, 0x24, 0x7d, 0x05, 0x1d, 0x0e, 0x91, 0x2e, 0x58, 0x46, 0x2e,
	0x53, 0xca, 0x51, 0xd2, 0xf1, 0x41, 0xea, 0xf4, 0x34, 0xee, 0x14, 0x37, 0x21, 0xe2, 0x3d, 0x45,
	0x9f, 0x52, 0x69, 0x62, 0x12, 0xf3, 0x0a, 0x9d, 0x92, 0x6d, 0x38, 0x96, 0x91, 0x32, 0xc9, 0x1f,
	0x64, 0x66, 0x8b, 0x26, 0xb6, 0xa2, 0x53, 0xa5, 0xac, 0x5e, 0xc4, 0xc7, 0x14, 0xea, 0x8c, 0x4f,
	0x8b, 0x0e, 0x9a, 0x34, 0x7a, 0x56, 0x49, 0x99, 0x8e, 0x14, 0x66, 0x0c, 0x53, 0x1f, 0xc6, 0x30,
	0x74, 0x4c, 0xf3, 0x49, 0xfb, 0xca, 0x18, 0x9a, 0x12, 0xdf, 0x2d, 0xd0, 0x0e, 0xa0, 0x7d, 0xd9,
	0x8c, 0x5d, 0x54, 0x4f, 0xd5, 0x79, 0x74, 0x00, 0x7e, 0x2c, 0x58, 0x86, 0x83, 0xff, 0x36, 0xd2,
	0x34, 0x5d, 0x35, 0x16, 0x5e, 0xfb, 0xda, 0x39, 0xb4, 0x28, 0xd0, 0xb3, 0x0d, 0x8b, 0xa8, 0x3b,
	0x6c, 0x20, 0xa7, 0xe1, 0x81, 0x86, 0x6b, 0x8b, 0x06, 0x9a, 0x14, 0xee, 0xd5, 0xc6, 0x5d, 0x2a,
	0x94, 0x8a, 0xa4, 0x2e, 0x1a, 0x1f, 0x2a, 0xc4, 0x2e, 0x1d, 0x41, 0x71, 0xf8, 0x11, 0xff, 0x07,
	0x3a, 0x31, 0x87, 0xb4, 0xc3, 0x68, 0x1a, 0x02, 0x14, 0x4a, 0x45, 0x58, 0x90, 0x39, 0xb4, 0xf4,
	0x45, 0x03, 0x68, 0x02, 0x5e, 0x44, 0xaa, 0xed, 0x47, 0xf3, 0x24, 0xd3, 0x54, 0x71, 0xac, 0x3b,
	0x88, 0x26, 0x83, 0x4f, 0x69, 0x9d, 0x67, 0xf8, 0xd3, 0x2d, 0xe9, 0x10, 0x9a, 0x0a, 0xbe, 0x62,
	0x0b, 0xc1, 0x6f, 0x88, 0x16, 0x61, 0x1c, 0x43, 0xf1, 0xe0, 0x73, 0x2e, 0x93, 0x2f, 0x91, 0xec,
	0x7e, 0x6a, 0x41, 0xd4, 0xe8, 0xe6, 0x79, 0x04, 0x4d, 0x03, 0x10, 0x72, 0x68, 0x62, 0x89, 0xda,
	0xb9, 0x16, 0x03, 0x00, 0x34, 0x6c, 0x23, 0x65, 0xe6, 0xd3, 0x7e, 0x86, 0xbf, 0x4d, 0x00, 0x0e,
	0xc3, 0x3e, 0x6c, 0x18, 0xc6, 0xed, 0xf8, 0x5e, 0x56, 0x60, 0xf5, 0x5a, 0xf8, 0xfb, 0xa6, 0xa1,
	0x5b, 0xf1, 0x11, 0xfa, 0x7d, 0x93, 0x6c, 0xc4, 0x4b, 0x5f, 0x1b, 0x43, 0x93, 0xa9, 0x42, 0xa1,
	0xd3, 0xda, 0xee, 0x94, 0x1b, 0x7e, 0x39, 0x58, 0xaa, 0xe0, 0x14, 0x2c, 0x73, 0xcd, 0xd2, 0x73,
	0x12, 0x3f, 0x8e, 0xa2, 0x38, 0xf8, 0x46, 0x73, 0xf1, 0x59, 0x0a, 0xfc, 0xb5, 0x6b, 0x7e, 0x79,
	0x1d, 0x80, 0x60, 0xff, 0xbf, 0xa8, 0x5f, 0x14, 0xab, 0x13, 0x8f, 0xa3, 0xb9, 0x30, 0xd4, 0xf2,
	0x05, 0xa1, 0xac, 0x6d, 0xe9, 0x73, 0x83, 0x12, 0xbc, 0xd5, 0x56, 0xa7, 0x11, 0x2a, 0xc1, 0x5b,
	0x35, 0x2d, 0xb9, 0x7f, 0xc7, 0xd1, 0x9c, 0xf8, 0x79, 0xc5, 0xd0, 0xad, 0xa0, 0x7e, 0xf5, 0x82,
	0xef, 0xe5, 0x96, 0x80, 0x4c, 0xf3, 0xb6, 0x63, 0xe4, 0x8b, 0xd6, 0xa6, 0xd0, 0xcb, 0xa5, 0xff,
	0x25, 0x86, 0xe2, 0x59, 0x77, 0x5b, 0xac, 0x96, 0x3b, 0x8c, 0x16, 0xb3, 0x86, 0x5f, 0x7e, 0xa4,
	0xa8, 0x98, 0xbb, 0x8e, 0x96, 0xa4, 0xef, 0xbb, 0xaf, 0x9a, 0x5b, 0x0a, 0xd1, 0x8e, 0xae, 0x9c,
	0xfb, 0x93, 0x31, 0xb4, 0x0f, 0x77, 0x4e, 0x55, 0x3c, 0xf7, 0x14, 0x4a, 0x12, 0x3a, 0x3b, 0x15,
	0xd0, 0x3d, 0x83, 0x0e, 0x46, 0xc0, 0x29, 0x8a, 0xe8, 0x96, 0xd0, 0x81, 0x08, 0xe0, 0x70, 0x21,
	0x5d, 0x34, 0x61, 0x45, 0x31, 0xdd, 0xf9, 0xc8, 0xde, 0x46, 0x16, 0xd4, 0x9d, 0x45, 0x47, 0x22,
	0x50, 0xd4, 0x45, 0x75, 0x97, 0xd1, 0xd3, 0x91, 0x4d, 0xf4, 0x2b, 0xac, 0xbb, 0x82, 0x4e, 0xf5,
	0xc3, 0x8b, 0x2e, 0xae, 0x4b, 0xa1, 0xe5, 0x28, 0xce, 0xee, 0xbe, 0xc0, 0xee, 0x12, 0x7a, 0x2a,
	0x82, 0x48, 0xdf, 0x22, 0xbb, 0x33, 0xe8, 0x70, 0x04, 0x9a, 0xb2, 0xd0, 0x2e, 0x9a, 0x37, 0xfd,
	0x8b, 0xed, 0x9e, 0x45, 0x87, 0x22, 0x87, 0x18, 0x2e, 0xb8, 0x8b, 0x96, 0x08, 0x45, 0xd1, 0x5d,
	0xf4, 0x08, 0x94, 0x85, 0x77, 0xd1, 0xe0, 0xca, 0xe2, 0xbb, 0x73, 0xe8, 0x58, 0x04, 0x78, 0x54,
	0x01, 0xde, 0x32, 0x3a, 0x19, 0x35, 0xd4, 0x3e, 0x45, 0x78, 0x37, 0xd1, 0xd9, 0x48, 0xe1, 0xd9,
	0x45, 0x21, 0xde, 0x2a, 0xba, 0x12, 0x81, 0xfe, 0x64, 0xc5, 0x78, 0x37, 0x23, 0xe7, 0x77, 0x57,
	0x05, 0x79, 0xd7, 0xd1, 0x89, 0x1d, 0x47, 0x11, 0x55, 0x94, 0x97, 0x45, 0x97, 0x23, 0x70, 0xdf,
	0x49, 0x61, 0xde, 0x97, 0x0c, 0xa1, 0xa9, 0xac, 0xbb, 0x0d, 0x6b, 0xf3, 0xb0, 0xf1, 0x62, 0xac,
	0x39, 0xea, 0xfa, 0xbc, 0x63, 0x48, 0x83, 0x1f, 0x55, 0x35, 0x7a, 0x27, 0xd0, 0x3c, 0x04, 0x89,
	0xa8, 0xd3, 0x0b, 0x41, 0x29, 0x6b, 0xf5, 0x8e, 0xa3, 0x39, 0x01, 0x4a, 0x59, 0xaf, 0x27, 0xf5,
	0x49, 0x55, 0xb3, 0x77, 0x12, 0x2d, 0x40, 0x90, 0xa8, 0xba, 0xbd, 0xa3, 0x68, 0x06, 0x82, 0x29,
	0x6a, 0xf7, 0x8e, 0xa0, 0x38, 0x84, 0x08, 0xd7, 0xef, 0x3d, 0x25, 0x72, 0x2f, 0xb2, 0x86, 0xef,
	0x84, 0x38, 0xb2, 0x88, 0x3a, 0xbe, 0x93, 0x22, 0x97, 0xa2, 0x6a, 0xf9, 0x8e, 0x89, 0xfd, 0x56,
	0xd5, 0xf3, 0x49, 0x94, 0xa2, 0x6a, 0xfa, 0xbe, 0xe9, 0x12, 0x9a, 0x05, 0x3b, 0x20, 0x3f, 0x67,
	0x1e, 0x93, 0x14, 0x93, 0xe2, 0xa4, 0xb9, 0x2c, 0x09, 0xf5, 0xee, 0xca, 0xfb, 0xae, 0x4a, 0xbb,
	0xc1, 0xee, 0x4b, 0xfc, 0x0c, 0x69, 0x3b, 0x78, 0x87, 0x65, 0x7e, 0x17, 0xa4, 0x9d, 0x72, 0x37,
	0xa5, 0x7e, 0x67, 0x25, 0xe5, 0xb8, 0x53, 0xb9, 0xdf, 0x05, 0x74, 0x54, 0x05, 0xdf, 0xb7, 0xe4,
	0xef, 0x05, 0x74, 0xa6, 0x1f, 0xce, 0x8e, 0x65, 0x7f, 0x2f, 0xa2, 0x67, 0xc2, 0xf8, 0x4f, 0x54,
	0xfa, 0x77, 0x1a, 0x25, 0x14, 0x14, 0x94, 0xe5, 0x7f, 0x37, 0xd1, 0xb3, 0x61, 0xd0, 0xdd, 0x97,
	0x00, 0x5e, 0x53, 0x09, 0xc1, 0xee, 0xca, 0x00, 0xaf, 0xa3, 0xd3, 0x7d, 0x50, 0xfb, 0x97, 0x02,
	0xaa, 0x7b, 0xbd, 0xeb, 0x72, 0xc0, 0x33, 0xaa, 0x35, 0x11, 0x5d, 0x12, 0xb8, 0xac, 0x12, 0xb4,
	0x1d, 0xcb, 0x02, 0x95, 0x93, 0xa0, 0x2e, 0x0d, 0x3c, 0x2f, 0xed, 0xc1, 0xbb, 0x28, 0x0f, 0x54,
	0x0a, 0x72, 0x9f, 0x12, 0xc1, 0x1b, 0x92, 0xf5, 0xf4, 0x64, 0x65, 0x82, 0x4b, 0x68, 0x7f, 0x18,
	0x3b, 0xa2, 0x54, 0x30, 0x62, 0x59, 0xf6, 0x2d, 0x17, 0x3c, 0xaf, 0x5a, 0x66, 0xfd, 0x4b, 0x06,
	0x4f, 0xb3, 0xd3, 0xc1, 0x2e, 0xca, 0x06, 0xcf, 0xaa, 0x7a, 0xdf, 0xa7, 0x74, 0x50, 0x29, 0x99,
	0xbb, 0x2c, 0x1f, 0x7c, 0x56, 0xb2, 0xec, 0xfa, 0x97, 0x10, 0x2e, 0xa3, 0xe3, 0x0a, 0xe8, 0x9d,
	0xca, 0x08, 0x9f, 0x53, 0xb6, 0xd1, 0xa7, 0x94, 0xf0, 0xbc, 0x4a, 0xde, 0xfb, 0x97, 0x13, 0x2a,
	0xc7, 0x11, 0x59, 0x52, 0x78, 0x53, 0xa5, 0xb2, 0x76, 0x5f, 0x56, 0xf8, 0xa2, 0x64, 0x1b, 0x3e,
	0x79, 0x69, 0xe1, 0x29, 0x6a, 0x26, 0xec, 0xa2, 0xbc, 0xf0, 0xaa, 0x6a, 0x21, 0xec, 0xaa, 0xc4,
	0xf0, 0x9c, 0x74, 0xe4, 0xdb, 0xb9, 0xcc, 0xf0, 0x39, 0xe9, 0x60, 0xb6, 0x63, 0xa9, 0xe1, 0x79,
	0x25, 0x42, 0xdf, 0x72, 0xc3, 0x4b, 0xaa, 0xcd, 0x7b, 0xe7, 0x92, 0xc3, 0xab, 0x92, 0x1d, 0xbc,
	0xfb, 0xb2, 0x43, 0xe5, 0x64, 0x3d, 0x51, 0xe9, 0xa1, 0xef, 0x14, 0x78, 0x27, 0xe5, 0x87, 0xcb,
	0x4a, 0x4d, 0xb1, 0x53, 0x09, 0xe2, 0xba, 0x64, 0x7a, 0xbf, 0xf3, 0x32, 0x44, 0xe5, 0x5e, 0xb0,
	0x63, 0x29, 0xa2, 0x52, 0xbf, 0xf5, 0x2f, 0x47, 0x54, 0xaa, 0xd1, 0x1d, 0x4a, 0x12, 0x95, 0x8a,
	0xae, 0x4f, 0x59, 0xa2, 0x52, 0xfd, 0xec, 0x58, 0x9a, 0xd8, 0x7f, 0xf3, 0xdd, 0xb1, 0x3c, 0xf1,
	0x8a, 0x74, 0x7c, 0xdc, 0x75, 0x89, 0xa2, 0x52, 0x6c, 0x76, 0x59, 0xa6, 0x78, 0x56, 0xb5, 0x76,
	0xfb, 0x94, 0x2a, 0x9e, 0x53, 0x6d, 0xaf, 0x7d, 0xcb, 0x15, 0x6d, 0xa4, 0xab, 0xf6, 0xf0, 0xcf,
	0xac, 0x64, 0x31, 0x87, 0x9e, 0xdf, 0x99, 0xe8, 0xee, 0xcb, 0x16, 0x95, 0xd6, 0xda, 0xee, 0x4a,
	0x17, 0x23, 0x4c, 0x94, 0x7e, 0xe5, 0x8b, 0xcf, 0xa9, 0x76, 0xe8, 0x7e, 0x25, 0x8c, 0x4a, 0xf1,
	0xed, 0x53, 0xc6, 0x78, 0x43, 0xb5, 0xeb, 0xec, 0xba, 0x94, 0xf1, 0x9c, 0x4a, 0xd7, 0xf6, 0x2d,
	0x67, 0x8c, 0x18, 0x50, 0x74, 0x49, 0xe3, 0xf9, 0x88, 0x26, 0xfa, 0x94, 0x35, 0x5e, 0x51, 0x6d,
	0x4f, 0xbb, 0x29, 0x6d, 0xbc, 0xa2, 0xda, 0x07, 0x76, 0x53, 0xde, 0xd8, 0x17, 0xb1, 0x5f, 0x89,
	0xe3, 0x39, 0x95, 0x55, 0xd1, 0xb7, 0xcc, 0xf1, 0xb2, 0x4a, 0xa7, 0xed, 0xa2, 0xd4, 0xf1, 0xaa,
	0x4a, 0x65, 0xec, 0xaa, 0xdc, 0x51, 0x79, 0x7e, 0xdb, 0xa1, 0xe4, 0x51, 0xb9, 0x35, 0xee, 0xaa,
	0xec, 0xf1, 0x96, 0xea, 0xe4, 0xf7, 0x24, 0xa5, 0x8f, 0x3a, 0x7a, 0x4e, 0x4d, 0x60, 0xf7, 0xe5,
	0x8f, 0x67, 0x54, 0x9a, 0x2e, 0xba, 0x04, 0xf2, 0x82, 0x6a, 0x5d, 0xef, 0x50, 0x06, 0x79, 0x1b,
	0x5d, 0x53, 0xe0, 0xbc, 0xc3, 0x52, 0xc8, 0x4b, 0x2a, 0x99, 0xd8, 0xb9, 0x1c, 0xf2, 0xf9, 0x9d,
	0xce, 0x33, 0xfd, 0x4a, 0x22, 0x95, 0xe6, 0xea, 0xee, 0xcb, 0x22, 0x95, 0x86, 0x60, 0xdf, 0xd2,
	0xc8, 0x6b, 0x2a, 0x91, 0xda, 0x5d, 0x79, 0xe4, 0x45, 0xd5, 0x4e, 0xb4, 0x53, 0x89, 0xa4, 0x52,
	0x10, 0x9f, 0xa4, 0x4c, 0x52, 0xd9, 0xe1, 0xdd, 0x95, 0x4a, 0x5e, 0x53, 0x2d, 0xd6, 0xdd, 0x95,
	0x4b, 0x2e, 0xab, 0x84, 0x71, 0xc7, 0x92, 0x49, 0x5d, 0x65, 0x8f, 0x3c, 0x59, 0xd9, 0xa4, 0x72,
	0xe7, 0xe9, 0x53, 0x3a, 0xa9, 0x54, 0x7d, 0x7d, 0xcb, 0x27, 0xcf, 0xaa, 0xce, 0x53, 0x7d, 0x4a,
	0x28, 0x2f, 0xab, 0x58, 0xb1, 0x8b, 0x32, 0xca, 0xeb, 0x2a, 0x93, 0x6e, 0x97, 0xa5, 0x94, 0x2f,
	0xa8, 0x96, 0xc5, 0x13, 0x94, 0x53, 0xee, 0xbc, 0x94, 0x95, 0x25, 0x95, 0x3b, 0xa2, 0xa9, 0xcb,
	0x2a, 0x5f, 0x54, 0xe9, 0xca, 0x27, 0x2a, 0xad, 0xbc, 0xa1, 0xda, 0xf9, 0x76, 0x5d, 0x5e, 0x79,
	0x53, 0x25, 0xe7, 0xbb, 0x2f, 0xb1, 0x7c, 0x4e, 0x79, 0x62, 0xed, 0x53, 0x66, 0x79, 0x51, 0xc5,
	0xa6, 0x9d, 0x4a, 0x2d, 0x95, 0x43, 0xdc, 0x75, 0xb9, 0xe5, 0x0b, 0x2a, 0x25, 0xfb, 0x04, 0x25,
	0x97, 0xba, 0xd2, 0x45, 0xfc, 0x44, 0x65, 0x97, 0xba, 0xca, 0x17, 0xf3, 0x64, 0xa5, 0x97, 0x69,
	0xa5, 0x73, 0xe2, 0x49, 0xcb, 0x2f, 0xfb, 0x77, 0x64, 0x57, 0x25, 0x98, 0xbb, 0x24, 0xd1, 0xaf,
	0x0c, 0x53, 0x29, 0x74, 0xbb, 0x2f, 0xc5, 0xcc, 0xab, 0x3c, 0xef, 0x9f, 0x41, 0x39, 0xa6, 0x72,
	0x82, 0x9f, 0xac, 0x24, 0xf3, 0x96, 0x4a, 0xc6, 0x9e, 0xa4, 0x2c, 0xf3, 0x05, 0x15, 0x4b, 0x9e,
	0xa0, 0x34, 0xf3, 0xb2, 0xca, 0x48, 0xdf, 0x45, 0x79, 0xe6, 0x4b, 0xe8, 0x82, 0x52, 0x6d, 0xbd,
	0x93, 0x12, 0xcd, 0xcb, 0xaa, 0xdd, 0x61, 0x17, 0x65, 0x9a, 0xcb, 0xca, 0x7d, 0x6b, 0xa7, 0x52,
	0xcd, 0x48, 0xac, 0xbe, 0xe5, 0x9a, 0x29, 0x95, 0xf4, 0x3e, 0x69, 0xc9, 0xe6, 0xdf, 0xc5, 0xd0,
	0xa1, 0xac, 0xbb, 0xdd, 0xa7, 0xca, 0xe4, 0x59, 0x2a, 0x52, 0xbb, 0xac, 0x34, 0xb9, 0x42, 0xb7,
	0xc9, 0x27, 0xaf, 0x36, 0xb9, 0x4a, 0xb5, 0xe9, 0x3b, 0xa8, 0x38, 0xb9, 0x46, 0x77, 0xd8, 0x77,
	0x52, 0x75, 0xf2, 0x81, 0x41, 0x92, 0xa5, 0xa2, 0x2c, 0x3c, 0x61, 0x59, 0x2a, 0x3b, 0x16, 0x9f,
	0xb0, 0x28, 0xf2, 0x67, 0xa9, 0x00, 0x65, 0x85, 0xda, 0x4e, 0x9f, 0x51, 0x11, 0xca, 0x0b, 0x74,
	0xc6, 0xde, 0x71, 0x21, 0xca, 0x0e, 0x7d, 0xd8, 0x55, 0x31, 0xca, 0x0e, 0x7d, 0xd8, 0xb1, 0x20,
	0xe5, 0x67, 0x86, 0xd1, 0x5c, 0xd6, 0xdd, 0x0e, 0x67, 0xff, 0x1f, 0xa7, 0xda, 0xa1, 0x7f, 0xee,
	0xff, 0xb3, 0xf4, 0x40, 0xb0, 0xcb, 0xcc, 0x7f, 0x76, 0xc4, 0x7f, 0xf2, 0xbc, 0xff, 0x67, 0x22,
	0x9a, 0x51, 0x66, 0xfd, 0x47, 0xf4, 0x29, 0x22, 0xe7, 0x9f, 0x19, 0x17, 0x4f, 0x96, 0xf1, 0x7f,
	0x56, 0xcd, 0x9b, 0xc8, 0x7c, 0x7f, 0x66, 0x9b, 0xbe, 0xa3, 0x6c, 0xff, 0xcb, 0x6a, 0xdc, 0x1d,
	0x73, 0xfd, 0x9f, 0xa1, 0x3e, 0x9b, 0xdd, 0x65, 0xfa, 0x9f, 0xa2, 0x21, 0xbb, 0x5d, 0xe4, 0xf9,
	0x5f, 0x50, 0x0f, 0xbd, 0x6f, 0x96, 0xff, 0x59, 0x7a, 0x68, 0xd8, 0x75, 0x8e, 0xff, 0x65, 0x7a,
	0xf2, 0x7b, 0xe2, 0x0c, 0xff, 0xb7, 0xf6, 0xa2, 0xfd, 0x24, 0x33, 0x44, 0x59, 0xce, 0x72, 0x9a,
	0x6e, 0x97, 0xbb, 0x29, 0x69, 0x61, 0xbe, 0x81, 0x27, 0x2a, 0x6b, 0x61, 0xce, 0xe1, 0x77, 0x5a,
	0xda, 0x72, 0xbe, 0x6f, 0x93, 0x4a, 0x41, 0xef, 0xdb, 0xcb, 0x08, 0x71, 0x67, 0x8e, 0xd0, 0x77,
	0x52, 0xe6, 0xb2, 0xdc, 0x8f, 0x7f, 0x91, 0xa2, 0xff, 0x22, 0xdd, 0x3c, 0x3f, 0x83, 0x72, 0x97,
	0x1b, 0xfd, 0x28, 0xec, 0xb8, 0x0c, 0x58, 0x00, 0xe2, 0x49, 0xca, 0x5e, 0x58, 0x84, 0x79, 0xd7,
	0xa5, 0x2f, 0x57, 0xfb, 0x31, 0xa6, 0xef, 0xc2, 0x60, 0x61, 0x88, 0x27, 0x2c, 0x81, 0x61, 0x47,
	0x9b, 0x77, 0x58, 0x06, 0xf3, 0x9d, 0x03, 0x68, 0x3a, 0xeb, 0x6e, 0x0b, 0xa9, 0xcf, 0x87, 0xa8,
	0x5d, 0x14, 0x95, 0xfe, 0xcc, 0x72, 0x8c, 0xfa, 0xa4, 0x40, 0xb3, 0x7c, 0xa6, 0x7e, 0x69, 0xd0,
	0x27, 0x69, 0xf6, 0xd0, 0x4e, 0xa9, 0xd0, 0xc7, 0xd1, 0xac, 0x04, 0xa6, 0x48, 0x87, 0x3e, 0x2e,
	0xd3, 0x52, 0xa5, 0x44, 0x27, 0xe5, 0x3e, 0x29, 0xd2, 0xa2, 0x43, 0x30, 0x8a, 0xd4, 0xe8, 0x5f,
	0x8c, 0x91, 0x1d, 0x32, 0x5c, 0x8a, 0x93, 0xa4, 0x72, 0xd2, 0xb7, 0x1c, 0xe7, 0x3c, 0xdd, 0x8c,
	0x9e, 0xa4, 0x24, 0xe7, 0x1c, 0x55, 0xdc, 0x4f, 0x50, 0x96, 0xa3, 0x6e, 0xa4, 0x6f, 0x69, 0xce,
	0x2f, 0x0d, 0xa1, 0xf1, 0xac, 0xbb, 0x6d, 0xd7, 0xaa, 0x74, 0x2c, 0x09, 0xca, 0x51, 0x3b, 0x93,
	0x96, 0x47, 0x70, 0x00, 0x4d, 0xf0, 0x2f, 0x2b, 0xa5, 0x4d, 0x31, 0x19, 0x98, 0xcd, 0xbb, 0xff,
	0x91, 0xcc, 0xa9, 0x2d, 0xe6, 0x00, 0x1f, 0x44, 0x93, 0x1c, 0xc4, 0x36, 0xb2, 0x52, 0xd2, 0x2f,
	0x24, 0x80, 0xbf, 0x3a, 0x85, 0x6c, 0xc9, 0x86, 0xb9, 0x72, 0x31, 0x2d, 0x49, 0x25, 0x22, 0x00,
	0x21, 0x41, 0x01, 0x98, 0x2c, 0x17, 0xe3, 0x39, 0x11, 0x22, 0x0c, 0xf3, 0x3e, 0xc3, 0x84, 0xb9,
	0x98, 0x76, 0x08, 0x4d, 0x71, 0x50, 0x72, 0x23, 0x83, 0x9f, 0x2d, 0x77, 0x95, 0x24, 0x71, 0x1c,
	0x17, 0x18, 0x91, 0xce, 0xd8, 0xa9, 0xac, 0x69, 0x1b, 0x69, 0x3f, 0x63, 0xee, 0x4a, 0x08, 0x88,
	0xde, 0xea, 0x40, 0xfb, 0x34, 0x06, 0xd3, 0x76, 0x61, 0xbf, 0x75, 0x1b, 0x1f, 0x52, 0x33, 0x79,
	0x23, 0xed, 0x27, 0xdd, 0xae, 0xb0, 0xbb, 0x2b, 0x0f, 0xa8, 0x08, 0xf9, 0x1d, 0x17, 0x12, 0x6d,
	0xd9, 0x2a, 0x24, 0xb0, 0x66, 0x81, 0x78, 0x21, 0x0c, 0x3f, 0xb9, 0x96, 0x06, 0x5b, 0x0f, 0xa3,
	0xe9, 0x60, 0x36, 0x4c, 0xcb, 0x32, 0x37, 0xfc, 0x7c, 0xda, 0x35, 0x22, 0xed, 0x70, 0x2a, 0xb0,
	0xb1, 0xec, 0xa7, 0xcf, 0xae, 0xb2, 0x12, 0x81, 0x00, 0xdb, 0x32, 0xd2, 0x86, 0x91, 0xf3, 0xf3,
	0x65, 0x0d, 0xb8, 0xc6, 0x29, 0x8f, 0x4b, 0x2b, 0x76, 0xca, 0xca, 0xac, 0x18, 0x7e, 0x82, 0x2c,
	0x51, 0x03, 0x4b, 0x9f, 0x1e, 0x26, 0x1b, 0xf0, 0x8a, 0xdb, 0xac, 0x3c, 0x68, 0x94, 0x3b, 0xaf,
	0xa5, 0x7a, 0x9d, 0x87, 0x6e, 0xbe, 0xdc, 0x70, 0xfd, 0x32, 0x7a, 0x4c, 0x60, 0xc5, 0xc8, 0xa7,
	0xd6, 0x49, 0x69, 0x4f, 0xaa, 0x64, 0xdd, 0x35, 0x9c, 0xbc, 0x9e, 0x93, 0x65, 0xee, 0x12, 0x55,
	0xda, 0x4a, 0x48, 0xa3, 0x64, 0x65, 0x56, 0xc8, 0x85, 0x27, 0xd4, 0x99, 0xd9, 0xeb, 0xd4, 0xee,
	0xb7, 0x3a, 0x2c, 0x2c, 0x16, 0xdd, 0x00, 0x75, 0x69, 0xd1, 0x93, 0x1e, 0x2d, 0x9e, 0x42, 0xab,
	0x3d, 0xaf, 0xd7, 0x71, 0xd9, 0x69, 0x8f, 0x5c, 0x4d, 0x18, 0x89, 0x9d, 0xcd, 0xac, 0x64, 0xd2,
	0xf1, 0x41, 0xaa, 0xbf, 0xc9, 0x1f, 0xbb, 0x41, 0x31, 0xad, 0xf8, 0x10, 0x47, 0x21, 0x59, 0x6a,
	0x7b, 0x7d, 0xf7, 0xa6, 0x12, 0x05, 0x1f, 0xfa, 0x1d, 0x5d, 0xd7, 0xe3, 0xc3, 0x2c, 0x62, 0xdd,
	0x6b, 0xd6, 0x74, 0x5d, 0xdf, 0xb1, 0x29, 0x9a, 0x3c, 0xb9, 0x97, 0x85, 0x72, 0xf1, 0x1f, 0x2c,
	0x5c, 0x1d, 0xcd, 0x0e, 0xe8, 0xb2, 0x1d, 0x21, 0xee, 0x81, 0xf1, 0xc2, 0x56, 0xb9, 0x59, 0xbd,
	0xdf, 0xa9, 0xb9, 0x5b, 0x2e, 0x0b, 0xfa, 0x1d, 0x8a, 0x44, 0x27, 0x6c, 0x1c, 0xa5, 0x9e, 0x5b,
	0xce, 0xc0, 0x2b, 0x7d, 0x86, 0xe6, 0xbb, 0x15, 0xe2, 0x63, 0x44, 0x19, 0x8d, 0x16, 0x3b, 0xc4,
	0x32, 0x7b, 0xbc, 0xe3, 0xd8, 0x0c, 0x33, 0x9f, 0xd1, 0xe3, 0x88, 0xb9, 0xbe, 0xf1, 0x1f, 0xcc,
	0x6c, 0x3f, 0xd2, 0x4f, 0x42, 0x8c, 0x82, 0x19, 0x1f, 0xf7, 0xbd, 0xec, 0xdc, 0xb5, 0xdc, 0xaf,
	0x1d, 0x9b, 0xb4, 0x33, 0xc1, 0x3c, 0xbb, 0x7e, 0x3b, 0x4b, 0xff, 0xea, 0x34, 0x5a, 0xc0, 0x7a,
	0xd2, 0xab, 0xb5, 0x7b, 0x75, 0xf1, 0x79, 0xab, 0x13, 0x2c, 0xc2, 0x56, 0xcc, 0x14, 0x4a, 0xd9,
	0xc8, 0x27, 0xae, 0x6e, 0xb1, 0xa4, 0x11, 0x19, 0xca, 0x7f, 0xda, 0xd2, 0x29, 0x58, 0x06, 0x7b,
	0xa0, 0xc9, 0xb1, 0x0b, 0x06, 0x29, 0x26, 0x15, 0xf2, 0xaa, 0x74, 0x74, 0x4e, 0x49, 0x20, 0x65,
	0xe6, 0xed, 0xa2, 0x4e, 0x1e, 0x15, 0xe4, 0x04, 0x0a, 0x46, 0x5e, 0xcf, 0x92, 0xb4, 0x65, 0x90,
	0x57, 0xb9, 0x97, 0xe7, 0x65, 0xee, 0x86, 0x04, 0x4b, 0x68, 0x66, 0xf8, 0x16, 0x8b, 0xee, 0x9d,
	0xdd, 0x35, 0xfe, 0x66, 0xc6, 0xc8, 0xa6, 0x7d, 0xab, 0x33, 0x55, 0xd8, 0x64, 0x37, 0x1a, 0xbf,
	0xa0, 0x24, 0xb0, 0x9a, 0x21, 0x6e, 0xf5, 0x82, 0x63, 0x99, 0xab, 0xce, 0xba, 0x89, 0xe7, 0x8e,
	0x64, 0x42, 0x43, 0x82, 0x64, 0x8e, 0x7c, 0x5b, 0x74, 0xdd, 0x28, 0x08, 0xd1, 0x4d, 0x99, 0xe0,
	0x9a, 0x61, 0xae, 0x59, 0x7a, 0x61, 0x3d, 0x93, 0xb2, 0xfd, 0xec, 0x54, 0xfc, 0x13, 0xc3, 0x39,
	0xa2, 0xc4, 0x21, 0x65, 0x35, 0x4e, 0x1a, 0x8f, 0x7b, 0x84, 0x4e, 0x3f, 0xf9, 0x85, 0xc5, 0xe8,
	0x8e, 0x29, 0x71, 0xb2, 0x66, 0x91, 0x86, 0xcd, 0xf2, 0x29, 0x23, 0x3e, 0x4a, 0x05, 0x2d, 0x6b,
	0x16, 0xef, 0xea, 0x96, 0x90, 0x28, 0x22, 0xa3, 0x91, 0x14, 0x14, 0x3c, 0x3e, 0x6c, 0x66, 0x38,
	0x7a, 0x3e, 0xcd, 0xac, 0x1b, 0x66, 0x80, 0xe6, 0xf4, 0x62, 0x7f, 0x74, 0x0c, 0x9c, 0xdd, 0x0c,
	0x4d, 0x17, 0x4f, 0x4d, 0xb5, 0x58, 0xcc, 0xed, 0xa4, 0x12, 0x9d, 0x56, 0xd0, 0x90, 0x94, 0xb2,
	0x8c, 0x41, 0xed, 0x51, 0xd2, 0x71, 0xfa, 0x17, 0xbb, 0xb1, 0xfc, 0xa2, 0x12, 0x15, 0x54, 0x83,
	0xae, 0xe4, 0xf4, 0xd0, 0xec, 0x30, 0x03, 0xb5, 0x60, 0x53, 0x5d, 0x75, 0x17, 0x19, 0x3b, 0x51,
	0xc9, 0xe9, 0xf9, 0xd2, 0xaa, 0xce, 0xa2, 0xdf, 0xeb, 0x66, 0xc9, 0xa6, 0xf7, 0xb8, 0x48, 0x74,
	0xfd, 0xec, 0xd5, 0x75, 0x3a, 0xeb, 0x59, 0x96, 0x14, 0xd2, 0x87, 0x6e, 0xc1, 0x32, 0xf1, 0xea,
	0x2b, 0x96, 0xec, 0x30, 0xb5, 0x29, 0xd6, 0xcb, 0x42, 0x4a, 0x48, 0x68, 0x0a, 0x51, 0x33, 0xcd,
	0xac, 0xed, 0xe4, 0xf4, 0x7b, 0x99, 0x5c, 0x29, 0xe7, 0x27, 0xb7, 0x16, 0x72, 0xfa, 0x3d, 0xff,
	0xf6, 0xe5, 0x3e, 0x58, 0x05, 0x92, 0xdd, 0x50, 0xf4, 0xd3, 0x5c, 0x0b, 0x85, 0xac, 0x90, 0xdb,
	0x10, 0x8d, 0xc4, 0xce, 0x30, 0xf1, 0xff, 0x93, 0xb6, 0x77, 0x8b, 0xb1, 0x23, 0xd9, 0xb2, 0xc3,
	0x5c, 0x7c, 0x77, 0xb0, 0x9b, 0x9d, 0x7d, 0xd8, 0x7c, 0xbf, 0x59, 0x7c, 0x16, 0x8b, 0xc5, 0xaa,
	0x93, 0xf5, 0xe4, 0x3b, 0x4f, 0x66, 0x9c, 0x53, 0xc9, 0xca, 0x17, 0x33, 0xf3, 0xd4, 0xa3, 0x47,
	0xf2, 0xb9, 0xbc, 0xec, 0xba, 0x7d, 0x39, 0xc3, 0x26, 0xaf, 0xc8, 0xea, 0x2b, 0x5d, 0xe9, 0xc7,
	0x80, 0xf5, 0x61, 0xc0, 0x80, 0xf5, 0x73, 0x25, 0x1b, 0xb6, 0x21, 0x40, 0xe3, 0x8f, 0xd1, 0xc0,
	0xf6, 0x8f, 0x0d, 0x19, 0xf3, 0xe1, 0x37, 0xfc, 0x21, 0xc1, 0x82, 0x0d, 0xc3, 0x32, 0x60, 0xd8,
	0x30, 0x3c, 0x06, 0xfc, 0xa1, 0xf1, 0x58, 0x30, 0xfc, 0x61, 0xd9, 0x30, 0xc6, 0x90, 0x91, 0x11,
	0x3b, 0x32, 0x23, 0xf2, 0x44, 0x44, 0x46, 0x9e, 0xaa, 0xf9, 0xb9, 0xb7, 0x79, 0x6a, 0xef, 0x9d,
	0xf1, 0xd8, 0xb1, 0x63, 0xc7, 0x8e, 0x15, 0x7b, 0x7f, 0xc3, 0x18, 0x43, 0x01, 0xe3, 0xa6, 0x66,
	0x24, 0x95, 0x50, 0xad, 0x0e, 0x63, 0x63, 0x70, 0x03, 0x05, 0x1b, 0x85, 0xd2, 0x17, 0xff, 0x26,
	0x8e, 0xee, 0x69, 0xe8, 0x5c, 0x1a, 0x7b, 0x5a, 0x43, 0x51, 0xcc, 0x4e, 0x50, 0xe9, 0x5f, 0x18,
	0xa7, 0xb9, 0x43, 0x60, 0x07, 0x80, 0x80, 0xcd, 0xc2, 0x10, 0xfa, 0x39, 0x2d, 0xe5, 0xa7, 0xe5,
	0x5a, 0xcb, 0x05, 0x73, 0x86, 0xea, 0x5d, 0x9e, 0x7a, 0x4d, 0x0b, 0x66, 0x0b, 0xfb, 0x83, 0xf5,
	0x1c, 0x57, 0x29, 0x8a, 0x00, 0x99, 0x77, 0x96, 0x21, 0x6f, 0xe9, 0x54, 0xf6, 0xd0, 0x82, 0x19,
	0x7b, 0xe0, 0xf7, 0x4b, 0x19, 0xe7, 0x98, 0x8c, 0x40, 0x40, 0xf7, 0x35, 0xcb, 0x88, 0x9d, 0x68,
	0xe4, 0x0c, 0xb0, 0x75, 0x9e, 0x8e, 0xde, 0x96, 0x03, 0x78, 0x92, 0x17, 0xa6, 0x12, 0x98, 0x19,
	0x60, 0x10, 0xda, 0x2d, 0x27, 0xd4, 0x8e, 0x82, 0x13, 0xe4, 0x38, 0x8d, 0x9c, 0xdc, 0xdf, 0x2c,
	0x0e, 0xbb, 0x51, 0xa1, 0x97, 0x04, 0x66, 0x72, 0x11, 0x76, 0x0a, 0x02, 0x82, 0x3b, 0xde, 0x79,
	0xa6, 0xd0, 0x32, 0x67, 0x98, 0xc7, 0xa3, 0x14, 0xfb, 0xd1, 0x26, 0x86, 0x07, 0xcf, 0x97, 0xe8,
	0x25, 0x68, 0xf1, 0x07, 0xf2, 0x3b, 0xab, 0xd6, 0x25, 0x65, 0x27, 0xd7, 0x5e, 0xaf, 0x87, 0x4e,
	0x40, 0xb7, 0xb4, 0xcb, 0x74, 0x03, 0x2f, 0x7e, 0x7d, 0x4d, 0xa1, 0x98, 0xc7, 0x3b, 0x4f, 0xe0,
	0xd2, 0x7c, 0x9c, 0x35, 0x1d, 0x38, 0x7e, 0x54, 0x6c, 0x14, 0x9e, 0x4f, 0xee, 0xeb, 0x4a, 0xc0,
	0xed, 0x20, 0x72, 0xe3, 0x08, 0x6e, 0xb1, 0x1f, 0xc8, 0x99, 0xcb, 0x6d, 0x9a, 0x9e, 0x74, 0xe9,
	0x93, 0x21, 0xeb, 0x2a, 0xfd, 0x7e, 0xb2, 0x4d, 0xff, 0x0d, 0x4d, 0x97, 0xeb, 0x3b, 0x7d, 0xf9,
	0x4b, 0xc1, 0x18, 0x14, 0x7e, 0x4b, 0xfc, 0x2a, 0xf8, 0x85, 0xe5, 0x37, 0x56, 0xec, 0x6d, 0x85,
	0x92, 0x8c, 0x52, 0x27, 0x1a, 0x60, 0xeb, 0x3a, 0x6d, 0x34, 0xfd, 0x0d, 0xbe, 0xa8, 0x60, 0x1b,
	0x66, 0x79, 0x1c, 0x8e, 0xb2, 0xdc, 0x49, 0x73, 0xeb, 0x06, 0xf5, 0x33, 0xe9, 0x6f, 0xc5, 0x06,
	0xc3, 0x07, 0x8a, 0xc6, 0x58, 0xf1, 0x76, 0x12, 0xf8, 0xae, 0x9f, 0x93, 0xcd, 0x85, 0x7b, 0x03,
	0x75, 0x13, 0xe0, 0x91, 0x71, 0x0e, 0x31, 0x03, 0xb9, 0x01, 0xea, 0xa7, 0x18, 0x93, 0x67, 0xac,
	0x39, 0xde, 0xce, 0xad, 0x69, 0x86, 0x76, 0xd9, 0xce, 0xc1, 0xf5, 0xb9, 0x2c, 0xdf, 0xfc, 0xa2,
	0x8c, 0x60, 0x24, 0x6f, 0xd1, 0x91, 0x81, 0x7f, 0x42, 0x98, 0xe1, 0x8e, 0x62, 0xbf, 0xac, 0x3f,
	0x79, 0xbc, 0x4d, 0xa7, 0x84, 0xfd, 0x08, 0xf9, 0x7f, 0x2e, 0xa9, 0x77, 0xdb, 0xd4, 0xba, 0x43,
	0x47, 0x94, 0xfe, 0x8b, 0xe5, 0x44, 0xd1, 0x6c, 0xcf, 0x99, 0xff, 0x1d, 0x86, 0xc9, 0xb8, 0x4b,
	0x95, 0x97, 0xfc, 0x5e, 0xfc, 0x0c, 0x31, 0x98, 0x9b, 0x8a, 0x8d, 0x3a, 0xde, 0xe8, 0x39, 0xee,
	0x06, 0xbd, 0x0f, 0xb9, 0x47, 0x1b, 0xca, 0x7e, 0x84, 0x60, 0xe3, 0x4d, 0xc5, 0x5e, 0x4d, 0x8a,
	0x3d, 0x67, 0xd8, 0xcd, 0xe3, 0xd4, 0xba, 0x0f, 0xd0, 0x2c, 0xf2, 0x2f, 0xed, 0x72, 0x29, 0xf7,
	0x78, 0xda, 0xda, 0x19, 0xfa, 0x49, 0xf6, 0x2b, 0x80, 0x54, 0x66, 0x14, 0xac, 0x64, 0xcf, 0x21,
	0xa7, 0xab, 0xdc, 0xcf, 0x87, 0x74, 0xc5, 0x3c, 0x60, 0xf0, 0xd5, 0xed, 0xe2, 0x77, 0xc0, 0x2b,
	0xdc, 0x97, 0x0b, 0x00, 0xe3, 0xe0, 0xe1, 0x28, 0x66, 0x99, 0xd0, 0xac, 0x59, 0xe0, 0xf7, 0x23,
	0x2f, 0x8a, 0x43, 0x58, 0xaf, 0x77, 0xb4, 0xfc, 0x7e, 0xe4, 0xa6, 0xf4, 0xfd, 0xc8, 0xc3, 0x92,
	0xb9, 0xf8, 0x4d, 0x80, 0xb9, 0xa8, 0x98, 0x5f, 0x0f, 0x9d, 0x28, 0x2f, 0xac, 0xdb, 0x1c, 0x1d,
	0xb3, 0xd0, 0x8f, 0x5e, 0x43, 0xc7, 0x55, 0xdf, 0x65, 0xfb, 0x74, 0x9f, 0x64, 0x08, 0x88, 0xdc,
	0x1d, 0x86, 0xd9, 0x4d, 0x9c, 0x9d, 0xe2, 0x37, 0x70, 0xf9, 0xaf, 0x2b, 0x36, 0x35, 0xf2, 0xfe,
	0x91, 0x8c, 0xf6, 0x3c, 0xa0, 0x4f, 0x8a, 0x9f, 0xb4, 0x36, 0xb1, 0xa0, 0x28, 0x5c, 0x8e, 0xea,
	0x8b, 0x0b, 0x54, 0xad, 0x08, 0x6b, 0xf9, 0x4d, 0xd5, 0xb2, 0x49, 0x86, 0x69, 0x12, 0x67, 0xd8,
	0xea, 0x42, 0x33, 0xe9, 0x3f, 0x21, 0xe0, 0x29, 0x5f, 0xde, 0x29, 0xbd, 0x11, 0x85, 0x87, 0x8f,
	0x85, 0xef, 0x47, 0x9b, 0x6c, 0xd3, 0x51, 0xa2, 0x7f, 0x86, 0x6b, 0x12, 0xb9, 0xa3, 0x4a, 0x12,
	0x8a, 0xfa, 0x6e, 0x8e, 0x3d, 0x6b, 0x91, 0x5a, 0x96, 0xea, 0x17, 0xc2, 0x18, 0xc0, 0x53, 0xd1,
	0xb1, 0xed, 0xbb, 0x06, 0x82, 0x70, 0x83, 0xa1, 0x87, 0x09, 0x58, 0x96, 0xd6, 0xf5, 0xc5, 0x9e,
	0xb5, 0x54, 0x02, 0x6a, 0x0a, 0x1a, 0x08, 0x2f, 0x5f, 0x95, 0x4b, 0x63, 0xb0, 0x45, 0x6b, 0xb9,
	0x86, 0x57, 0x3c, 0xce, 0x6e, 0xb4, 0xc6, 0x79, 0x78, 0x8d, 0xe6, 0x06, 0x7d, 0x85, 0xae, 0x8e,
	0xe2, 0xcf, 0xe5, 0x98, 0x3f, 0x53, 0x6c, 0x26, 0xa2, 0x8c, 0x00, 0xf7, 0x73, 0x6b, 0xb5, 0x62,
	0x2f, 0xfe, 0x0d, 0x8b, 0x4b, 0xce, 0x4e, 0x51, 0x23, 0x7d, 0x12, 0xda, 0x08, 0xe9, 0x63, 0xa4,
	0x35, 0x36, 0x8a, 0xec, 0x17, 0x30, 0x44, 0x72, 0x01, 0x55, 0xde, 0x0d, 0x06, 0xf2, 0x67, 0x50,
	0xde, 0x75, 0xc7, 0x4f, 0xdd, 0x61, 0xce, 0xdf, 0x8f, 0x8c, 0x3b, 0x01, 0xeb, 0x71, 0x40, 0xfd,
	0x36, 0xeb, 0x09, 0x55, 0x52, 0xf2, 0x8b, 0x56, 0xb3, 0xc9, 0x59, 0x0a, 0xd4, 0xe4, 0x29, 0x65,
	0x22, 0x3f, 0x11, 0xa6, 0xef, 0xd1, 0x40, 0xbe, 0xdb, 0x6f, 0x3a, 0x3e, 0x45, 0x44, 0xc7, 0xfd,
	0x3e, 0x4e, 0xcb, 0xe5, 0x08, 0xd8, 0xc6, 0x6c, 0x3d, 0xde, 0x8a, 0x8a, 0xff, 0xce, 0xd7, 0xc9,
	0x54, 0x62, 0x9c, 0x5b, 0xcf, 0x2e, 0x9e, 0x2b, 0x86, 0x91, 0x70, 0x56, 0x99, 0x4c, 0x00, 0xe7,
	0xa0, 0xf0, 0x29, 0xc0, 0x95, 0xe9, 0xfb, 0x6e, 0x9c, 0xb9, 0x71, 0x8a, 0xad, 0xe7, 0xf4, 0xfa,
	0xdc, 0xd9, 0x2c, 0x7e, 0x6a, 0x23, 0x82, 0xf8, 0x53, 0x85, 0x21, 0xb7, 0x5e, 0x30, 0x11, 0x60,
	0xd6, 0x4b, 0x11, 0xae, 0xc2, 0x46, 0xf7, 0xd2, 0x78, 0x03, 0xa7, 0xec, 0xed, 0xc1, 0xcb, 0x8b,
	0x97, 0x7e, 0xff, 0xb7, 0xd3, 0x5f, 0xd2, 0x1f, 0xe9, 0x6f, 0xbc, 0x90, 0x5c, 0xe1, 0x24, 0x82,
	0x90, 0xcc, 0x09, 0x70, 0xc6, 0x10, 0x25, 0xf1, 0x26, 0x4e, 0x53, 0xdf, 0xc3, 0x96, 0x73, 0xf1,
	0xca, 0xef, 0xff, 0x76, 0xfa, 0x14, 0xf9, 0x23, 0xfd, 0x5b, 0xbc, 0x99, 0x8a, 0x28, 0x0e, 0x79,
	0xd3, 0xca, 0x87, 0x20, 0xe4, 0x84, 0xd6, 0xa3, 0x23, 0xcc, 0x7e, 0x14, 0x9b, 0xb5, 0xa6, 0xd8,
	0x99, 0xd9, 0x13, 0xc2, 0xfe, 0x28, 0x8d, 0x83, 0xa0, 0x30, 0x1e, 0x71, 0x3a, 0x72, 0x83, 0x98,
	0x9c, 0x95, 0xa8, 0xdf, 0xef, 0xd2, 0x11, 0x4b, 0x71, 0xdf, 0x17, 0xa5, 0x7a, 0xaa, 0x1d, 0x02,
	0xb6, 0x18, 0x32, 0xe8, 0x3d, 0x27, 0x20, 0xfe, 0xb8, 0x47, 0xa5, 0x84, 0xce, 0x76, 0x8f, 0x38,
	0x74, 0xa5, 0x14, 0xac, 0x58, 0x0a, 0x4c, 0x4a, 0x9c, 0x7a, 0xc5, 0xc8, 0x15, 0x73, 0x87, 0x2f,
	0x9e, 0x2f, 0xcc, 0x67, 0xe8, 0x6c, 0xc7, 0xa9, 0x57, 0x53, 0xa2, 0x11, 0x7a, 0x29, 0x15, 0x43,
	0x15, 0x14, 0xea, 0xdf, 0x8b, 0xda, 0x49, 0x7a, 0x1f, 0x39, 0x01, 0xcc, 0x4e, 0x66, 0xf5, 0x2f,
	0x5e, 0x28, 0xd6, 0x2a, 0xfb, 0x3d, 0xd9, 0xe6, 0x3f, 0xf0, 0x16, 0xb9, 0x9a, 0x0f, 0xa8, 0x56,
	0xc0, 0xd8, 0x37, 0x06, 0x17, 0x2f, 0xfe, 0xfe, 0x6f, 0xa7, 0x4f, 0xb2, 0xdf, 0x6b, 0xbd, 0x78,
	0xa5, 0x38, 0x1c, 0xd1, 0x41, 0x28, 0x3f, 0x52, 0xed, 0x9d, 0xeb, 0x74, 0xd2, 0xe3, 0xd4, 0x4b,
	0x61, 0xf3, 0xe4, 0xb3, 0xb9, 0x2b, 0xcf, 0x75, 0xbc, 0xef, 0xe7, 0x03, 0x24, 0x2b, 0x8e, 0x85,
	0x79, 0xd9, 0x44, 0x8f, 0x55, 0xbb, 0x5a, 0xe8, 0xa4, 0x3b, 0x23, 0x9a, 0xe6, 0x39, 0x86, 0xb4,
	0xb4, 0xd4, 0x91, 0xf1, 0x23, 0xcf, 0x77, 0x9d, 0xc2, 0x97, 0x79, 0x75, 0xf1, 0x2c, 0xf5, 0x82,
	0x09, 0xb1, 0xa1, 0x5c, 0xf6, 0x26, 0x55, 0xa3, 0x8c, 0x1b, 0x54, 0x6e, 0x8a, 0xfb, 0x05, 0x3d,
	0x2f, 0x77, 0x4b, 0x21, 0xb7, 0xcc, 0xca, 0x5a, 0x4c, 0x87, 0x52, 0x6e, 0x40, 0xc7, 0x31, 0xc5,
	0x7d, 0xf2, 0x6f, 0x5e, 0xf0, 0x10, 0xad, 0xca, 0x8d, 0xfd, 0x7a, 0xe5, 0x8f, 0xa4, 0x38, 0xf3,
	0xc9, 0x4b, 0x32, 0x51, 0x1b, 0xac, 0x90, 0x8a, 0x0d, 0xb0, 0xb3, 0x89, 0x6b, 0x53, 0xad, 0xb2,
	0x37, 0xe4, 0xfb, 0xa5, 0xbd, 0x89, 0xa8, 0xbd, 0xa1, 0x3f, 0x8e, 0xdb, 0x1b, 0xaf, 0x69, 0x23,
	0x8a, 0x83, 0x00, 0x7a, 0x18, 0x43, 0x0f, 0xe3, 0x20, 0x80, 0xed, 0x97, 0x03, 0x79, 0xdd, 0xd1,
	0xec, 0x0d, 0x24, 0x39, 0x16, 0x1c, 0x26, 0x13, 0x7a, 0xdd, 0xb7, 0x93, 0xf3, 0x30, 0xc2, 0x99,
	0x3f, 0x3b, 0x81, 0xce, 0x45, 0xbb, 0x9f, 0xf7, 0x76, 0xbf, 0x4f, 0xde, 0x7c, 0x1a, 0xcf, 0x0f,
	0x13, 0x91, 0x7c, 0x4c, 0xb4, 0x9a, 0xbc, 0x32, 0x3f, 0xcc, 0x4b, 0xb4, 0xa0, 0xa0, 0x73, 0x86,
	0x59, 0x9e, 0x3a, 0x81, 0x5f, 0x18, 0x93, 0x61, 0xe6, 0x47, 0x38, 0xcb, 0x58, 0xa2, 0x96, 0x29,
	0x3e, 0x75, 0x80, 0x91, 0x84, 0xdc, 0xd9, 0x1e, 0xf5, 0xfd, 0x80, 0x05, 0xaa, 0xd8, 0x35, 0x92,
	0xc3, 0xaa, 0x6a, 0x2b, 0x24, 0xf4, 0x7c, 0x97, 0xdd, 0x29, 0xf5, 0x20, 0xfe, 0x35, 0xa3, 0x20,
	0x75, 0xd7, 0x8b, 0x26, 0x16, 0xb6, 0xb5, 0x38, 0x0a, 0xc7, 0xe9, 0xc8, 0xf7, 0xd8, 0x5d, 0xd3,
	0x12, 0xbc, 0x80, 0xb8, 0xaf, 0x60, 0x65, 0xaf, 0xf4, 0xb8, 0xc5, 0x79, 0x94, 0xbf, 0x7b, 0x59,
	0x46, 0x77, 0x15, 0x9c, 0xaa, 0xd4, 0x32, 0xb8, 0xe1, 0x8b, 0x1b, 0x71, 0x8a, 0x9d, 0x48, 0x68,
	0xeb, 0x71, 0x3e, 0x69, 0x45, 0x0f, 0xd9, 0x0a, 0xce, 0xd0, 0x09, 0x9c, 0x9d, 0xac, 0x18, 0x52,
	0x17, 0x47, 0xc5, 0xe8, 0x72, 0xa8, 0x55, 0x76, 0x91, 0xb5, 0x08, 0x91, 0x77, 0x95, 0x06, 0x24,
	0x69, 0x9c, 0xa4, 0x3e, 0xce, 0x1d, 0x12, 0xb3, 0xe7, 0xd2, 0xa6, 0xa8, 0xa7, 0x92, 0x4b, 0x6c,
	0x88, 0xa9, 0x2d, 0x2c, 0x5f, 0x9a, 0x08, 0x99, 0x66, 0x5c, 0xb4, 0xa8, 0x90, 0x90, 0x3b, 0xfe,
	0x96, 0x43, 0x66, 0x88, 0xbd, 0xfa, 0xe7, 0x7b, 0x7f, 0x92, 0x4f, 0xc6, 0xf1, 0x14, 0x3d, 0x6c,
	0x14, 0x52, 0x2c, 0x2e, 0x92, 0x11, 0xc5, 0x75, 0x73, 0x76, 0x53, 0x66, 0xc3, 0xf3, 0xb2, 0xe7,
	0x2a, 0xcd, 0xdf, 0x18, 0x95, 0x78, 0x6f, 0x72, 0x1a, 0x2e, 0x76, 0xc8, 0xc2, 0x26, 0x25, 0x38,
	0xca, 0xc8, 0xdb, 0x13, 0xaa, 0x9c, 0x5f, 0xf1, 0x49, 0x38, 0xd4, 0x53, 0x31, 0xcc, 0x46, 0x38,
	0x4c, 0x82, 0x78, 0x07, 0xa7, 0x85, 0x90, 0x42, 0xc5, 0x7d, 0x8f, 0xc9, 0x38, 0xc5, 0x67, 0xe1,
	0x78, 0x81, 0xe6, 0xd5, 0x32, 0x48, 0x66, 0xa0, 0xa0, 0x72, 0xe4, 0x41, 0xc0, 0xd7, 0x7c, 0x9e,
	0x8f, 0x45, 0x74, 0x5b, 0xa5, 0xf6, 0x99, 0x57, 0x3e, 0x22, 0x8e, 0x72, 0x76, 0x65, 0xb7, 0x0e,
	0xfe, 0xea, 0xb4, 0x52, 0x6f, 0xfd, 0xdc, 0x75, 0xdc, 0x34, 0x8e, 0x76, 0x42, 0x96, 0xd1, 0x86,
	0xa6, 0xa4, 0x51, 0xaf, 0xc5, 0xd0, 0x77, 0x59, 0xf6, 0x1a, 0x72, 0x96, 0x99, 0xf9, 0x9b, 0x77,
	0xd0, 0x69, 0xce, 0xfc, 0xa4, 0x1f, 0xdf, 0x97, 0xc9, 0x39, 0x04, 0x11, 0x69, 0x2c, 0xb9, 0x3a,
	0xbf, 0x39, 0x4e, 0x02, 0xce, 0x5a, 0xf5, 0xe0, 0x74, 0x8a, 0x57, 0x8a, 0x39, 0x74, 0x6d, 0x9c,
	0xa5, 0xcc, 0xcd, 0xd3, 0xf7, 0xd3, 0x90, 0x19, 0x95, 0x45, 0x76, 0xfd, 0x2a, 0xa3, 0xf7, 0x0b,
	0x15, 0x26, 0xf7, 0x7d, 0x9c, 0xca, 0x2c, 0xa3, 0x3b, 0x12, 0x5a, 0x82, 0x85, 0xac, 0x7d, 0x02,
	0xb0, 0x0a, 0x0b, 0xab, 0xac, 0xf4, 0xa1, 0x92, 0x8f, 0x90, 0x43, 0xde, 0x8d, 0x85, 0x15, 0x88,
	0x01, 0x3e, 0x94, 0x91, 0xa7, 0x29, 0xce, 0x92, 0x62, 0x43, 0x8f, 0xf2, 0xda, 0xd7, 0x00, 0xd0,
	0xb0, 0xb0, 0xa4, 0x1e, 0x01, 0x5c, 0x38, 0x34, 0x25, 0x83, 0x90, 0x1c, 0xe6, 0x11, 0xba, 0x2e,
	0xa1, 0xdf, 0xc6, 0xee, 0x30, 0x2f, 0x19, 0x4e, 0xf0, 0x56, 0xa7, 0x2b, 0x9b, 0x95, 0x8a, 0x21,
	0xdb, 0xc9, 0x72, 0x1c, 0x5a, 0x5f, 0x40, 0xa3, 0x96, 0x4d, 0x78, 0xe8, 0x06, 0x5a, 0xa6, 0x91,
	0xe9, 0x42, 0x28, 0xf9, 0xde, 0x38, 0x4f, 0x7f, 0x18, 0x79, 0xa3, 0xd0, 0x89, 0x9c, 0x41, 0xb1,
	0x0b, 0x97, 0xf3, 0x74, 0x92, 0xdf, 0x6a, 0xa4, 0xf3, 0x34, 0xf0, 0x37, 0xf1, 0x30, 0xa9, 0x8d,
	0x1c, 0xcb, 0x36, 0x23, 0x37, 0x85, 0x84, 0xcf, 0x8f, 0x72, 0x12, 0x32, 0x2f, 0x79, 0x84, 0x65,
	0x3f, 0x2b, 0x9b, 0x5a, 0xde, 0x62, 0x9d, 0xe2, 0xf7, 0x96, 0xbb, 0xe8, 0xfc, 0x38, 0x35, 0xb1,
	0x90, 0x98, 0x2d, 0xe4, 0x55, 0xd8, 0x12, 0x24, 0x5d, 0xa7, 0x5e, 0x66, 0x9c, 0xfa, 0x03, 0x96,
	0xe1, 0x9e, 0xb4, 0xc7, 0xe2, 0x52, 0xe1, 0x90, 0x87, 0xc2, 0x26, 0x9c, 0x30, 0xe0, 0xdf, 0x08,
	0x09, 0x79, 0x96, 0x6a, 0xe6, 0x83, 0xf0, 0x72, 0x26, 0xbd, 0xb4, 0xe5, 0x1d, 0x21, 0xdd, 0xcf,
	0x02, 0xba, 0x21, 0x61, 0x4b, 0xe2, 0x28, 0x8b, 0xab, 0x91, 0x3e, 0x0d, 0x2c, 0x6b, 0xea, 0xfe,
	0x71, 0xe9, 0xfc, 0xf9, 0xc5, 0xf1, 0x2d, 0xe5, 0xec, 0xce, 0xc3, 0x10, 0x9e, 0x1b, 0xe7, 0x74,
	0x06, 0x85, 0xb3, 0x0d, 0x69, 0x35, 0xec, 0x79, 0x96, 0x28, 0x5a, 0x62, 0x3b, 0x70, 0x84, 0xfb,
	0xbe, 0xeb, 0x17, 0x5b, 0xda, 0x59, 0x20, 0x67, 0xa9, 0x00, 0x25, 0x72, 0x7b, 0xc3, 0x1d, 0x9c,
	0x5a, 0xe7, 0xa0, 0x01, 0x2b, 0x10, 0x9a, 0xb9, 0xab, 0x31, 0x30, 0x71, 0x3a, 0x70, 0x22, 0x96,
	0x79, 0xf3, 0x3c, 0x30, 0x2e, 0x40, 0xd4, 0xf6, 0x96, 0xd2, 0x0a, 0xf0, 0x1a, 0x73, 0x01, 0xda,
	0xb5, 0x06, 0x41, 0xd4, 0x6b, 0x4a, 0x2e, 0x98, 0x44, 0x48, 0xab, 0x61, 0xaf, 0x40, 0x30, 0xf3,
	0x8e, 0xce, 0x7a, 0x14, 0xf3, 0x48, 0x2d, 0xa8, 0x75, 0x09, 0x9a, 0xb7, 0x4c, 0xf8, 0x30, 0x5a,
	0x6a, 0xe2, 0x93, 0xf7, 0xf2, 0x32, 0x88, 0x59, 0x62, 0x38, 0x5d, 0x89, 0x98, 0x61, 0x96, 0xc7,
	0x9e, 0x4f, 0x92, 0x6d, 0x50, 0xe2, 0x55, 0xd8, 0x79, 0x6e, 0x2a, 0x88, 0x43, 0x9c, 0x16, 0x7b,
	0x36, 0x09, 0xb1, 0x40, 0xba, 0x8d, 0xee, 0x22, 0x43, 0x49, 0x6a, 0xcc, 0x1b, 0x0c, 0xc9, 0x35,
	0x18, 0x92, 0x65, 0x96, 0x4c, 0x51, 0x66, 0x7c, 0x68, 0x86, 0x11, 0xeb, 0x3a, 0x88, 0xef, 0xaa,
	0x9b, 0xc4, 0x0e, 0xe2, 0xec, 0x57, 0xeb, 0x06, 0xc8, 0xb7, 0x19, 0x5a, 0x50, 0xc1, 0x13, 0x62,
	0x8f, 0xe8, 0xda, 0x4d, 0xf8, 0xc6, 0x9a, 0x5a, 0x13, 0xaa, 0x07, 0x1b, 0xe4, 0x55, 0x4e, 0xd1,
	0x8b, 0x69, 0xf8, 0xca, 0x92, 0xba, 0x65, 0xc4, 0xa7, 0x2b, 0x16, 0x34, 0x1b, 0x2c, 0xc8, 0xa9,
	0x61, 0xaf, 0xaa, 0x07, 0x8b, 0x56, 0xd5, 0x20, 0xef, 0x97, 0x7a, 0xb1, 0xb7, 0x63, 0xdd, 0x06,
	0x96, 0x45, 0xb5, 0xc2, 0x65, 0xc3, 0x1e, 0x37, 0x89, 0x77, 0x80, 0x61, 0x41, 0xdd, 0xae, 0x3c,
	0x75, 0xa2, 0xac, 0x38, 0x6b, 0xe5, 0x31, 0x5d, 0xc5, 0x77, 0x29, 0xcf, 0xe2, 0x3c, 0x44, 0x81,
	0x6f, 0xe9, 0x2d, 0x2d, 0xa8, 0xe8, 0x3d, 0xfa, 0xf8, 0x64, 0x79, 0x1e, 0x1e, 0x83, 0x1d, 0xa1,
	0xcf, 0x17, 0x6e, 0x28, 0x97, 0x44, 0x39, 0xab, 0xf7, 0x29, 0xe7, 0x62, 0x17, 0x38, 0x8f, 0x42,
	0xa9, 0x27, 0x25, 0xe7, 0xd8, 0x48, 0xce, 0x80, 0x84, 0x05, 0x5e, 0xc2, 0x0b, 0x99, 0xe1, 0x2a,
	0xa3, 0x08, 0xae, 0x93, 0xa6, 0x3b, 0xa5, 0x80, 0x07, 0x20, 0xc0, 0x6e, 0x6c, 0x02, 0xb5, 0xcf,
	0x24, 0xef, 0xe8, 0x28, 0x4e, 0x70, 0xea, 0x80, 0x29, 0x98, 0x05, 0x09, 0x8b, 0xbc, 0x04, 0x47,
	0x66, 0xe1, 0xab, 0xb3, 0x3e, 0x7c, 0x9d, 0xf9, 0x87, 0x0f, 0x41, 0xc4, 0x12, 0x2f, 0x62, 0x59,
	0x36, 0xc7, 0x34, 0xc9, 0x0f, 0x6c, 0xad, 0xd6, 0x1c, 0xf0, 0xad, 0xf1, 0x19, 0x00, 0xd7, 0xa4,
	0xeb, 0x35, 0x70, 0xfc, 0x10, 0x7c, 0x6c, 0xd2, 0xef, 0x47, 0xc0, 0xba, 0xca, 0xb3, 0x2e, 0xc9,
	0xd6, 0x08, 0x73, 0xf1, 0x89, 0x86, 0xcc, 0x03, 0xdb, 0x32, 0xcf, 0xb6, 0x5e, 0x3b, 0x6a, 0xd0,
	0xa5, 0xe2, 0xa4, 0x83, 0xf2, 0x24, 0x4e, 0xb3, 0x1e, 0x92, 0x68, 0x27, 0x6b, 0x00, 0x8d, 0xe3,
	0x1f, 0x5a, 0xea, 0xf2, 0x92, 0xa4, 0x5a, 0x43, 0x1f, 0x80, 0x56, 0x9c, 0x5d, 0xe0, 0x5c, 0x30,
	0xe3, 0x8c, 0x2b, 0x23, 0x65, 0x03, 0xe7, 0x7c, 0x23, 0x67, 0x46, 0xb2, 0x97, 0x54, 0x9b, 0xe9,
	0x22, 0x70, 0x2e, 0xf2, 0x9c, 0x36, 0xba, 0x2c, 0xe3, 0x24, 0xc9, 0x79, 0x0a, 0xcd, 0x58, 0x02,
	0xa6, 0x25, 0x9e, 0xc9, 0x93, 0x39, 0x8e, 0xf9, 0xba, 0x9f, 0xb2, 0x1f, 0xaa, 0x87, 0xff, 0x74,
	0xc8, 0x97, 0x61, 0xc8, 0x57, 0x1a, 0x1b, 0x0d, 0x83, 0x1d, 0x46, 0x38, 0x8c, 0x23, 0xdf, 0xb5,
	0x56, 0xe0, 0xfb, 0x36, 0xcf, 0x29, 0xd5, 0x6d, 0xc8, 0xa1, 0xd7, 0x23, 0x2b, 0x6d, 0x58, 0xac,
	0x14, 0x6a, 0x42, 0x57, 0x41, 0x02, 0x9b, 0xee, 0xb3, 0x4a, 0xc5, 0x2c, 0x8d, 0xfb, 0x30, 0xf2,
	0x73, 0x6b, 0x0d, 0xf8, 0x56, 0x79, 0xbe, 0x15, 0xbd, 0x0f, 0x4b, 0x18, 0x1f, 0x03, 0xe3, 0x1a,
	0xcf, 0xd8, 0x43, 0x0f, 0x64, 0x8e, 0x88, 0xaa, 0xd1, 0x4f, 0x40, 0xc6, 0x0a, 0x2f, 0xa3, 0x8f,
	0x1e, 0xc9, 0xac, 0x4a, 0x98, 0xe0, 0xbc, 0xd8, 0x35, 0xcb, 0x64, 0x9c, 0x95, 0x89, 0xb7, 0x9e,
	0x52, 0x39, 0x2b, 0x4c, 0x5b, 0x2e, 0xd2, 0x07, 0x8a, 0x2b, 0x66, 0x72, 0x88, 0x71, 0x75, 0x28,
	0x88, 0x83, 0xa4, 0x46, 0xb0, 0x9e, 0x81, 0xbc, 0x05, 0x5e, 0xde, 0x3c, 0xba, 0x30, 0x2e, 0xcf,
	0xc3, 0xd9, 0x46, 0xa1, 0x40, 0xcf, 0x81, 0x63, 0x99, 0xe7, 0x90, 0x4e, 0x3d, 0x0c, 0x63, 0xf9,
	0xad, 0x17, 0xc0, 0x69, 0xf3, 0x9c, 0x52, 0xa3, 0x44, 0xe0, 0x5c, 0x92, 0x0e, 0x58, 0x2f, 0xc1,
	0xac, 0xaf, 0x19, 0x88, 0xc8, 0x72, 0xa9, 0x08, 0x07, 0x44, 0xac, 0x36, 0xb6, 0xbf, 0x02, 0x3d,
	0x50, 0xa5, 0xef, 0x01, 0xe7, 0x0a, 0xcf, 0xb9, 0x28, 0xf3, 0x16, 0xcb, 0xc5, 0xe2, 0x7b, 0x96,
	0x0b, 0xbd, 0x5e, 0xe2, 0xb9, 0x30, 0x9a, 0x1b, 0xe7, 0x82, 0x60, 0xab, 0xe7, 0xe4, 0x0e, 0x33,
	0xe9, 0xe0, 0x78, 0xc7, 0xa9, 0xe5, 0x81, 0x98, 0x45, 0x5e, 0x8c, 0x74, 0x37, 0xe4, 0xc5, 0x40,
	0x2a, 0x4e, 0x0c, 0xcc, 0x42, 0xcb, 0xa5, 0x86, 0x15, 0x98, 0x43, 0xa7, 0xd8, 0x44, 0xfb, 0xd0,
	0x61, 0x61, 0xaa, 0xa5, 0x4a, 0x4b, 0x33, 0x11, 0xd1, 0x4c, 0x94, 0x65, 0xe8, 0xa4, 0x4c, 0x30,
	0x32, 0x00, 0x39, 0x42, 0xdb, 0xa5, 0x5b, 0x02, 0x2d, 0x23, 0xc0, 0x75, 0x7b, 0x1d, 0x58, 0x17,
	0x1a, 0x59, 0xc1, 0x39, 0xc1, 0x1e, 0xeb, 0xb4, 0x0f, 0xac, 0xc2, 0xc0, 0x4b, 0xb7, 0xe1, 0x2a,
	0xff, 0xad, 0xe0, 0x7b, 0xbd, 0x82, 0x51, 0xeb, 0xf2, 0x02, 0x1e, 0xd7, 0x62, 0x1e, 0x9c, 0x00,
	0xbe, 0xdd, 0x1b, 0xf0, 0x71, 0x81, 0x57, 0x6a, 0xe6, 0xe8, 0xa9, 0xd7, 0xc9, 0x7d, 0xb7, 0x74,
	0x07, 0xfc, 0x0c, 0xa7, 0x56, 0x00, 0x12, 0xec, 0xc6, 0xaf, 0x73, 0xc6, 0x19, 0xb3, 0xf0, 0x34,
	0x6d, 0x39, 0xd3, 0xf1, 0x69, 0xa5, 0xb2, 0xb0, 0x5b, 0x30, 0xe6, 0xa0, 0xfb, 0x9e, 0x15, 0x51,
	0xe6, 0xd5, 0x05, 0x3e, 0x94, 0x2c, 0x55, 0x96, 0x24, 0xf5, 0x43, 0x26, 0xc2, 0x8a, 0xe1, 0x9b,
	0x6b, 0xb5, 0x67, 0xc2, 0x92, 0x1e, 0xe7, 0x38, 0x19, 0xc5, 0x43, 0x58, 0x55, 0x09, 0x7c, 0x6e,
	0x9e, 0xe7, 0x93, 0xee, 0xde, 0x2c, 0x20, 0x99, 0xe2, 0x81, 0x9f, 0xe5, 0x29, 0xdc, 0xa7, 0x56,
	0xd1, 0xc9, 0xd7, 0x20, 0x89, 0xbd, 0xd5, 0x8c, 0x69, 0xf5, 0xb9, 0xae, 0x76, 0x6b, 0x21, 0xa7,
	0x54, 0x7a, 0x72, 0xe4, 0xcc, 0x75, 0x0a, 0xa2, 0xd8, 0x73, 0xc7, 0x9f, 0x69, 0x9c, 0x18, 0x18,
	0x39, 0xb6, 0x9f, 0x67, 0xc0, 0x6a, 0xf3, 0xac, 0x1b, 0xb5, 0xb0, 0xe5, 0xf8, 0x6e, 0x21, 0x6f,
	0x47, 0x0e, 0xc2, 0x96, 0x38, 0x61, 0x33, 0xff, 0x60, 0x0a, 0x9d, 0x49, 0x3f, 0xfe, 0xf4, 0xe1,
	0xfb, 0x77, 0x1f, 0x7e, 0xf0, 0xde, 0x7d, 0xda, 0x7d, 0xbb, 0xf7, 0xee, 0xe3, 0x87, 0xb2, 0x72,
	0x6a, 0x4c, 0x53, 0x51, 0x8d, 0x3c, 0x3f, 0xa5, 0xc8, 0xa5, 0xb1, 0x67, 0x97, 0x57, 0x24, 0x34,
	0xe4, 0xa7, 0x91, 0x17, 0x6f, 0x45, 0x62, 0x76, 0xe3, 0x2e, 0x9a, 0x56, 0x52, 0xe7, 0xf1, 0x28,
	0xc2, 0x0e, 0xc9, 0x41, 0xcf, 0x55, 0x47, 0x20, 0x91, 0x31, 0x25, 0xcf, 0x30, 0xe1, 0xdf, 0x70,
	0x1c, 0x9b, 0xf9, 0x3f, 0x8f, 0xa3, 0x6f, 0xc6, 0x2f, 0x17, 0xae, 0xa1, 0x4b, 0xfa, 0x5b, 0x85,
	0x35, 0x34, 0x33, 0xe9, 0x75, 0x82, 0x9e, 0x55, 0x7b, 0x8f, 0x70, 0x13, 0x9d, 0x6e, 0xbc, 0x40,
	0xe8, 0xa2, 0xe9, 0xd6, 0x37, 0x07, 0x0b, 0xe8, 0x66, 0xdb, 0x2b, 0x83, 0x47, 0xe8, 0x7a, 0xbb,
	0xbb, 0x02, 0xc9, 0x37, 0x9a, 0x2e, 0x09, 0x9e, 0xa0, 0xd9, 0xc9, 0x6f, 0x07, 0x66, 0xc6, 0xa7,
	0x50, 0x79, 0x2d, 0x20, 0x99, 0x12, 0xd3, 0xfb, 0x80, 0xa7, 0xe8, 0xe1, 0x3e, 0x2e, 0x02, 0x96,
	0xd0, 0x9d, 0x49, 0x6e, 0x00, 0xfa, 0x68, 0xe5, 0x40, 0x42, 0xff, 0x92, 0x01, 0x36, 0x8f, 0xf9,
	0xaf, 0xa2, 0xfb, 0x13, 0x06, 0xfb, 0x1f, 0xa2, 0xab, 0x6d, 0xa2, 0xfc, 0x0f, 0xd0, 0x65, 0xf3,
	0xf0, 0xbe, 0x64, 0x89, 0x8c, 0xc5, 0xf5, 0xff, 0xc3, 0x1b, 0xe8, 0x2b, 0x31, 0xa2, 0x7f, 0x11,
	0x9d, 0x55, 0x86, 0xf2, 0x4b, 0x45, 0x32, 0x88, 0xe1, 0xdf, 0x45, 0xe7, 0xcd, 0x82, 0xf7, 0xd3,
	0xe8, 0xdb, 0xe6, 0xa8, 0xfd, 0x23, 0x74, 0xad, 0x5d, 0xb8, 0xfe, 0x8e, 0xd0, 0x0d, 0x75, 0x9c,
	0x7e, 0x99, 0xa9, 0x5d, 0xcb, 0x00, 0xbd, 0xd8, 0x3d, 0x4d, 0x64, 0xfe, 0x1e, 0xba, 0x60, 0x18,
	0x92, 0x7f, 0x20, 0x8c, 0x6e, 0x43, 0x2c, 0x5e, 0x45, 0x2c, 0x0d, 0xc2, 0xcf, 0xa3, 0x1b, 0x2d,
	0xa3, 0xef, 0xe2, 0x78, 0x1b, 0x84, 0xdd, 0x45, 0xd5, 0xd0, 0xc7, 0xdb, 0x6f, 0x0b, 0x73, 0xa3,
	0x0c, 0xb4, 0x5f, 0x47, 0xdf, 0x34, 0x44, 0xd8, 0x17, 0x84, 0x7e, 0x19, 0x85, 0xd6, 0x6d, 0xb6,
	0x27, 0xb4, 0x89, 0xa9, 0xcf, 0xb1, 0x55, 0x6a, 0x18, 0x4c, 0x9f, 0x41, 0x17, 0x8d, 0xa3, 0xe8,
	0x62, 0x1f, 0x8c, 0xc2, 0xe7, 0xd7, 0x91, 0xd5, 0x10, 0x37, 0x17, 0xb5, 0x5f, 0x1d, 0x30, 0x17,
	0x25, 0xc9, 0x22, 0xe5, 0xf3, 0x6c, 0x73, 0x33, 0x0e, 0x91, 0x3f, 0x44, 0x57, 0xda, 0xc4, 0xc6,
	0xef, 0x89, 0x76, 0x42, 0x13, 0x14, 0xaf, 0xdb, 0x80, 0xc6, 0x68, 0xf8, 0x73, 0x34, 0xb7, 0xaf,
	0x30, 0xf8, 0x2d, 0xd1, 0x32, 0x29, 0xe2, 0xdf, 0xe2, 0x4a, 0x6c, 0x08, 0x7c, 0x8b, 0x9a, 0xa1,
	0x8f, 0x78, 0x4f, 0x33, 0xfb, 0xad, 0x0b, 0x75, 0x3f, 0xa8, 0xaf, 0x3b, 0x5d, 0x8c, 0xfb, 0x2e,
	0x3a, 0x67, 0x16, 0xdc, 0x16, 0xe7, 0xb0, 0x31, 0xaa, 0x2d, 0x36, 0xa2, 0x21, 0x9c, 0x2d, 0x0e,
	0x81, 0x3e, 0x8e, 0x2d, 0x2a, 0x87, 0x2e, 0x80, 0x2d, 0x36, 0xa1, 0x21, 0x72, 0xbd, 0x28, 0x74,
	0xcf, 0x34, 0x64, 0xbd, 0x20, 0x34, 0xdc, 0x28, 0x56, 0xbd, 0xc6, 0x3c, 0xbd, 0xf6, 0x41, 0xea,
	0x55, 0xc1, 0x2e, 0xb4, 0x89, 0x4e, 0x8b, 0x1f, 0x6d, 0x15, 0x96, 0x7e, 0x2c, 0x58, 0xc7, 0x76,
	0xf1, 0xe8, 0x47, 0xc2, 0x5c, 0x19, 0x04, 0xa2, 0xbb, 0xe2, 0xc2, 0x31, 0x8a, 0x40, 0xcf, 0x09,
	0x1a, 0xdc, 0x1c, 0x7a, 0x76, 0x98, 0x3b, 0x3b, 0x79, 0xcc, 0x59, 0x9c, 0x76, 0xa3, 0x60, 0xb3,
	0x84, 0xa5, 0x29, 0xca, 0x2c, 0xb2, 0x18, 0x85, 0x97, 0x67, 0xd1, 0x99, 0x16, 0x71, 0xe5, 0x67,
	0x82, 0xa3, 0xd3, 0x3a, 0xa0, 0x2c, 0xb6, 0xcf, 0x28, 0x92, 0x2c, 0xea, 0x61, 0xab, 0x10, 0xf2,
	0x23, 0xb9, 0x77, 0xa5, 0x8e, 0x1d, 0xcf, 0x2b, 0xbc, 0x2c, 0x75, 0xd0, 0xf8, 0x09, 0xba, 0x35,
	0x79, 0xb4, 0xf8, 0x05, 0xba, 0xb7, 0xbf, 0x30, 0xf1, 0x00, 0xcd, 0x1f, 0x4c, 0x7c, 0xf8, 0x3e,
	0xea, 0x98, 0x06, 0x86, 0xc5, 0x29, 0x34, 0x8a, 0x08, 0x8b, 0xf6, 0xa0, 0x5d, 0x28, 0xb8, 0xce,
	0xdb, 0x26, 0x06, 0x2c, 0x36, 0xd5, 0x28, 0xf8, 0xfb, 0x50, 0x70, 0x79, 0x1a, 0xa3, 0xbe, 0xcf,
	0xd1, 0xdd, 0x7d, 0x85, 0x7b, 0xc5, 0x2d, 0xc4, 0x34, 0xce, 0x2b, 0x9a, 0xaf, 0xe6, 0x00, 0xaf,
	0xa8, 0x67, 0x13, 0x44, 0x76, 0x45, 0x1b, 0x6b, 0x16, 0xd2, 0x15, 0x79, 0xcc, 0x62, 0xb9, 0xe2,
	0x6e, 0xd5, 0x26, 0x88, 0x6b, 0xb3, 0x23, 0x6d, 0x9b, 0xe8, 0xad, 0x68, 0x5a, 0x5a, 0x85, 0x6d,
	0xc5, 0xef, 0x19, 0xc6, 0x6b, 0xc5, 0xd9, 0x36, 0x0d, 0xd4, 0x8a, 0xb3, 0xdd, 0x1c, 0xa1, 0x15,
	0xad, 0x9e, 0x41, 0x68, 0x56, 0xdc, 0xdd, 0x26, 0x8a, 0xc9, 0xf6, 0xd0, 0x83, 0x7d, 0x07, 0x63,
	0xeb, 0x1b, 0xb9, 0x49, 0x14, 0xd6, 0x63, 0xc1, 0xa2, 0x7d, 0x85, 0x5f, 0xff, 0xe6, 0x61, 0x64,
	0x25, 0x90, 0x29, 0xac, 0x4c, 0xe8, 0x70, 0x15, 0x5d, 0x4c, 0xca, 0xbc, 0x4a, 0x92, 0x54, 0x0e,
	0x77, 0xd0, 0xb9, 0xda, 0xdf, 0x03, 0x27, 0xcb, 0x47, 0x09, 0x1e, 0xf0, 0xf1, 0xd6, 0xe3, 0xe4,
	0xe4, 0x2e, 0xd2, 0xc1, 0x82, 0x2d, 0x28, 0xb9, 0x10, 0x06, 0x0d, 0xcb, 0xd4, 0x28, 0x7d, 0x0f,
	0xfe, 0x59, 0x10, 0xf3, 0x75, 0x50, 0x3b, 0xf7, 0xc7, 0x9a, 0x17, 0x27, 0x38, 0x22, 0xef, 0xe6,
	0xf1, 0x80, 0x05, 0x23, 0xed, 0xb2, 0x22, 0xbd, 0x48, 0x5a, 0xfc, 0x33, 0x8f, 0x47, 0x81, 0x1f,
	0xfa, 0x39, 0xfd, 0x9d, 0xc5, 0x22, 0xd7, 0x14, 0xc2, 0x81, 0x63, 0x73, 0xcb, 0x49, 0xf8, 0x62,
	0x98, 0x52, 0x52, 0x78, 0x76, 0x50, 0xb4, 0xe3, 0x78, 0x75, 0x12, 0x3f, 0x4e, 0x22, 0x9c, 0x22,
	0x69, 0x9e, 0x3a, 0x3e, 0x99, 0xa3, 0x2c, 0x8f, 0x13, 0xc2, 0xc0, 0x95, 0xa2, 0x3b, 0x3e, 0xf3,
	0xd7, 0xd0, 0xd7, 0xc9, 0xee, 0x0f, 0xe1, 0xc7, 0x5f, 0x57, 0xb3, 0x72, 0x85, 0x8e, 0x66, 0x18,
	0x6f, 0x4a, 0x27, 0xe5, 0x26, 0x3a, 0x2d, 0xfe, 0xb9, 0xef, 0x6f, 0x93, 0x24, 0x1a, 0xdc, 0x84,
	0xdc, 0x46, 0x67, 0x6b, 0x34, 0x90, 0x9f, 0x94, 0x8f, 0x79, 0x1f, 0x9f, 0xf9, 0xef, 0xa7, 0xd0,
	0x37, 0xc9, 0xee, 0x0f, 0xf1, 0x2f, 0x7e, 0xf1, 0x79, 0x57, 0x28, 0x57, 0x5e, 0x30, 0xc7, 0xfd,
	0x7e, 0xe1, 0x98, 0x4a, 0x5a, 0x00, 0x93, 0xc8, 0x13, 0xf4, 0x9c, 0xcc, 0xcf, 0x46, 0x49, 0xec,
	0x47, 0x79, 0x26, 0x36, 0xe5, 0x16, 0x3a, 0x53, 0x27, 0xa6, 0xb3, 0xc1, 0xb7, 0x84, 0x0d, 0xf1,
	0x18, 0xd5, 0x28, 0xf7, 0x71, 0xca, 0x07, 0xb8, 0xa4, 0x02, 0x73, 0xdf, 0xdd, 0x28, 0x73, 0x28,
	0xd1, 0x1a, 0xba, 0x7f, 0x38, 0x45, 0xf4, 0x3d, 0x78, 0xf7, 0xe3, 0xbb, 0xbd, 0xba, 0xbe, 0x53,
	0x9d, 0x90, 0x74, 0xec, 0x2e, 0x3a, 0x5f, 0xfb, 0x7b, 0x9c, 0x8e, 0x7a, 0xa4, 0xe2, 0x0b, 0xeb,
	0x14, 0x8b, 0x1a, 0x9c, 0x1b, 0x27, 0xdc, 0x8a, 0xd3, 0x0c, 0xf3, 0x05, 0x14, 0xcb, 0xb6, 0x72,
	0x74, 0xf4, 0xf9, 0x22, 0xeb, 0x11, 0x2d, 0xb7, 0xfb, 0x77, 0xa6, 0xd0, 0x99, 0x64, 0xf7, 0x07,
	0x72, 0x3b, 0x22, 0x5e, 0x8d, 0x4c, 0xa3, 0x6b, 0x05, 0x3f, 0xdc, 0x73, 0x28, 0xee, 0x46, 0xba,
	0x68, 0x5a, 0x46, 0x14, 0xc6, 0x29, 0x1e, 0x39, 0x83, 0x41, 0x5a, 0xb8, 0xbb, 0x9b, 0x58, 0x9c,
	0x15, 0xd0, 0x53, 0x29, 0x4f, 0xe2, 0x50, 0x06, 0xbe, 0x27, 0x33, 0xff, 0xe9, 0x14, 0xfa, 0x32,
	0xd9, 0xfd, 0x21, 0x7b, 0xfb, 0x11, 0xc6, 0xf2, 0x02, 0xed, 0x5a, 0xe6, 0xc6, 0x63, 0xc3, 0x78,
	0x0d, 0x59, 0xd5, 0x9f, 0x06, 0x41, 0xdc, 0x73, 0xca, 0x4a, 0xd5, 0x36, 0x4b, 0xbc, 0x54, 0x11,
	0x14, 0xdb, 0x4a, 0x20, 0x56, 0x49, 0xbe, 0x81, 0x3a, 0xd5, 0xdf, 0x59, 0x84, 0x5a, 0xb4, 0x0d,
	0x0b, 0xe8, 0xe6, 0x38, 0x09, 0xbc, 0xee, 0x24, 0xc5, 0x22, 0x88, 0x54, 0x2e, 0xad, 0x16, 0x2d,
	0x1c, 0x9c, 0xa8, 0x0b, 0x07, 0x27, 0x86, 0x85, 0x83, 0x93, 0x36, 0x85, 0x83, 0x93, 0x16, 0x85,
	0x83, 0x93, 0x36, 0x85, 0x83, 0x93, 0xf6, 0x85, 0x83, 0x93, 0x96, 0x85, 0x83, 0x93, 0x09, 0x0b,
	0x07, 0x27, 0x93, 0x16, 0x0e, 0x4e, 0x0e, 0xa2, 0x70, 0x70, 0x32, 0x59, 0xe1, 0xe0, 0xa4, 0x5d,
	0xe1, 0xe0, 0x64, 0xc2, 0xc2, 0xc1, 0x49, 0xab, 0xc2, 0xc1, 0x49, 0x9b, 0xc2, 0xc1, 0x49, 0xbb,
	0xc2, 0xc1, 0x49, 0xbb, 0xc2, 0xc1, 0x49, 0xeb, 0xc2, 0xc1, 0xc9, 0x44, 0x85, 0x83, 0x93, 0xfd,
	0x15, 0x0e, 0x4e, 0x0e, 0xa8, 0x70, 0x70, 0xb2, 0xbf, 0xc2, 0xc1, 0xc9, 0x3e, 0x0a, 0x07, 0x27,
	0x07, 0x57, 0x38, 0xf8, 0x4f, 0x4f, 0xa0, 0x53, 0xc9, 0xc7, 0xcf, 0xce, 0x8f, 0xd5, 0x16, 0x78,
	0x19, 0x9d, 0x4f, 0xe2, 0x6c, 0xe4, 0x84, 0xd2, 0x0d, 0x70, 0xa6, 0xf6, 0x57, 0xd7, 0xc9, 0xd6,
	0x47, 0x4e, 0x48, 0x9c, 0xd3, 0x29, 0xa8, 0xae, 0x07, 0xb5, 0x0a, 0x3a, 0x36, 0xba, 0x31, 0x4e,
	0x5b, 0x3e, 0x3d, 0x04, 0xa6, 0x43, 0xc0, 0x94, 0xe2, 0x0c, 0xf2, 0x02, 0xdf, 0x13, 0x98, 0x68,
	0x3e, 0x2c, 0x92, 0xf3, 0x84, 0xbc, 0xec, 0x23, 0x5e, 0x23, 0xf0, 0x1e, 0x86, 0x5a, 0x72, 0x61,
	0x1e, 0x42, 0x9e, 0x81, 0x39, 0x81, 0xb7, 0x7c, 0x77, 0xaa, 0x94, 0x70, 0x84, 0x4a, 0xf0, 0x99,
	0x84, 0x87, 0xe8, 0x92, 0x20, 0x21, 0x49, 0x71, 0xe8, 0x0f, 0x43, 0x46, 0x7e, 0x94, 0x25, 0x07,
	0xc2, 0x21, 0xe4, 0x69, 0x79, 0x24, 0x90, 0x93, 0x1c, 0x27, 0xa4, 0xc8, 0x84, 0xb3, 0xa3, 0xf8,
	0x22, 0xa4, 0xe0, 0xca, 0xd8, 0x17, 0x97, 0xd0, 0xb4, 0x20, 0x82, 0xcb, 0x0b, 0x44, 0x03, 0x9b,
	0x94, 0xed, 0x38, 0x24, 0x2f, 0xa1, 0xd9, 0x81, 0x48, 0xca, 0x13, 0x81, 0x6d, 0xd3, 0x09, 0x86,
	0x78, 0xe4, 0x78, 0xaf, 0x86, 0x24, 0x62, 0x0d, 0x5c, 0x90, 0x8e, 0x6e, 0xd3, 0xf1, 0x5e, 0x01,
	0x16, 0xfe, 0x8a, 0xd8, 0xde, 0xea, 0xfa, 0x85, 0x08, 0xb0, 0xbe, 0x80, 0xbc, 0xfc, 0x38, 0x0f,
	0xf8, 0x70, 0xed, 0x93, 0xda, 0xd7, 0x1c, 0xd7, 0x4d, 0x87, 0xa4, 0xa2, 0x20, 0xc9, 0x08, 0x03,
	0x5f, 0x43, 0x94, 0xd9, 0x71, 0x49, 0xcd, 0xaf, 0xe2, 0x60, 0x91, 0xd1, 0x97, 0xa3, 0x33, 0xa2,
	0x1a, 0xd4, 0x8a, 0xfb, 0x0a, 0xc3, 0x64, 0x9d, 0x84, 0xd2, 0x0f, 0x74, 0x7c, 0x4a, 0x21, 0xab,
	0xe8, 0x7a, 0x4d, 0x48, 0x98, 0xe0, 0x28, 0x13, 0xc6, 0xe8, 0x4b, 0xfa, 0xda, 0xd3, 0x23, 0xd5,
	0xb3, 0x4a, 0xce, 0x2e, 0xba, 0x58, 0xe3, 0xe4, 0xdb, 0x0c, 0x09, 0x61, 0x6b, 0x4d, 0x76, 0xd0,
	0x5d, 0xa5, 0x22, 0x89, 0x7d, 0xb7, 0x4e, 0xd1, 0xe4, 0xf6, 0x7e, 0xbd, 0xd7, 0x09, 0x5a, 0x56,
	0x8a, 0xd0, 0x8f, 0xc0, 0xd7, 0x20, 0xb1, 0x3e, 0x04, 0x4e, 0x6d, 0x65, 0xf8, 0x91, 0x9f, 0xfb,
	0x10, 0xbd, 0xa8, 0x77, 0xcb, 0xa2, 0xa3, 0xe8, 0xd7, 0x1a, 0xb5, 0x56, 0x1b, 0xc5, 0x3c, 0x2e,
	0x9a, 0x43, 0xaa, 0x3b, 0x97, 0x3a, 0xf3, 0x0d, 0x65, 0xed, 0xd1, 0x9a, 0x43, 0x25, 0x6b, 0xaf,
	0xf6, 0x75, 0xca, 0x5a, 0xeb, 0x09, 0x88, 0xe8, 0xd0, 0x1e, 0xb8, 0x71, 0xe0, 0xe4, 0x9c, 0x8c,
	0x99, 0x7f, 0x88, 0xd0, 0xc9, 0xe4, 0xe3, 0xe7, 0xd2, 0xd4, 0x9c, 0x47, 0xdf, 0x16, 0x32, 0xa5,
	0x7e, 0xf6, 0xb9, 0xf2, 0x2f, 0x54, 0xa9, 0x89, 0x92, 0xbe, 0xce, 0x77, 0x58, 0xe1, 0xe9, 0x84,
	0x15, 0xeb, 0xb9, 0x52, 0x11, 0x56, 0x01, 0x08, 0x3a, 0x26, 0xaf, 0xab, 0xbc, 0x7f, 0x4e, 0xe0,
	0xc2, 0x31, 0xe2, 0x7c, 0x45, 0x9f, 0x15, 0x4b, 0xb5, 0x22, 0x85, 0x14, 0x7f, 0x4e, 0xd6, 0x07,
	0xd2, 0x0b, 0x25, 0x29, 0x4d, 0x44, 0x1a, 0x3a, 0xe9, 0xc0, 0x8f, 0x08, 0x2d, 0xdc, 0x90, 0x6f,
	0x87, 0xe0, 0xed, 0x9f, 0x29, 0x49, 0xa1, 0x02, 0xc2, 0x0e, 0x21, 0x83, 0x1c, 0x7d, 0x54, 0x25,
	0xc5, 0xd6, 0xe2, 0x00, 0xbb, 0x79, 0x1a, 0x47, 0xbe, 0xcb, 0x35, 0xe1, 0x18, 0xa5, 0xc7, 0x79,
	0x0a, 0xc7, 0xe6, 0x6a, 0x18, 0x70, 0xe4, 0x31, 0xcb, 0x52, 0x50, 0x42, 0x9d, 0xe8, 0xbe, 0x1f,
	0x8d, 0x51, 0xfa, 0x51, 0x8e, 0x07, 0xa9, 0x53, 0xec, 0x84, 0x81, 0x5f, 0x18, 0x01, 0x9a, 0x90,
	0x2c, 0x09, 0xe0, 0xce, 0xe8, 0x82, 0x40, 0x99, 0x8e, 0xb2, 0x24, 0xc5, 0x8e, 0x47, 0xa4, 0x7e,
	0xc1, 0xea, 0xea, 0x66, 0x32, 0xda, 0xd4, 0xe1, 0x69, 0x21, 0xc5, 0x9e, 0xef, 0x64, 0xe5, 0x5d,
	0x14, 0xa3, 0x85, 0xdd, 0x94, 0xee, 0x42, 0xe4, 0xe1, 0x3f, 0x54, 0x3a, 0x07, 0xda, 0x59, 0x74,
	0xb9, 0x4e, 0x5b, 0x66, 0xea, 0x2d, 0x44, 0xc3, 0x7d, 0x38, 0xde, 0x86, 0xab, 0xb6, 0xb3, 0x25,
	0x75, 0x52, 0x1c, 0x93, 0xca, 0xe1, 0x82, 0x64, 0x78, 0x89, 0x9f, 0x8f, 0x35, 0x57, 0x30, 0xc5,
	0x05, 0x2d, 0xa4, 0xba, 0xcb, 0x62, 0x0f, 0xce, 0x37, 0x57, 0x4b, 0x5a, 0xaa, 0xcb, 0x7c, 0x94,
	0xb8, 0x60, 0xf8, 0x1a, 0x0a, 0x9d, 0x95, 0x49, 0xa6, 0x6e, 0x55, 0x0c, 0x1c, 0x29, 0x2d, 0xe3,
	0x58, 0xf5, 0x14, 0xee, 0xc8, 0x73, 0x87, 0x3d, 0x06, 0x51, 0x73, 0xb1, 0x3e, 0xb3, 0x2b, 0xf2,
	0x7c, 0xbb, 0xbc, 0x31, 0x94, 0xf1, 0x94, 0xcf, 0xf4, 0x59, 0x35, 0xe7, 0xd7, 0x2c, 0xb9, 0xbf,
	0x48, 0xde, 0x67, 0x39, 0xf0, 0x48, 0x37, 0x4e, 0x43, 0x37, 0xd2, 0x3e, 0xcb, 0x94, 0x5d, 0x69,
	0x75, 0x59, 0x9d, 0x04, 0xbe, 0x50, 0x2d, 0x35, 0xeb, 0x5b, 0x56, 0x72, 0xc6, 0x11, 0xef, 0xed,
	0xaa, 0x11, 0x4e, 0xb1, 0x8b, 0xfd, 0x4d, 0x5c, 0x35, 0xeb, 0x0c, 0x65, 0x49, 0xdd, 0x4d, 0x9e,
	0xc5, 0xe6, 0xe6, 0xba, 0x5c, 0x1b, 0x51, 0x9c, 0x17, 0x8e, 0x56, 0xd1, 0xbe, 0xb3, 0x34, 0x18,
	0x45, 0x8a, 0x05, 0x15, 0x4c, 0x5f, 0xb1, 0xa0, 0x64, 0xa9, 0xf8, 0xcc, 0x31, 0xef, 0xc7, 0x69,
	0x59, 0x48, 0x89, 0xb0, 0x9e, 0xa3, 0xac, 0x38, 0xe1, 0x59, 0x5f, 0x52, 0xdb, 0xcd, 0x97, 0xb3,
	0x0c, 0x76, 0x46, 0x11, 0x1e, 0xc4, 0xb9, 0x4f, 0x0f, 0x08, 0xe5, 0xd0, 0x9c, 0x87, 0x54, 0x12,
	0x51, 0xce, 0x52, 0x33, 0xac, 0xd0, 0x58, 0x63, 0xa5, 0x6f, 0x11, 0xce, 0x8b, 0x56, 0xe7, 0x0e,
	0x61, 0xb8, 0xc0, 0x76, 0x98, 0x9c, 0x8f, 0xfb, 0xc1, 0xde, 0xc4, 0x97, 0xdf, 0xc1, 0x9b, 0x24,
	0x32, 0x5f, 0x0d, 0xe7, 0x45, 0x18, 0x4e, 0xec, 0xf0, 0x46, 0x95, 0x9f, 0x8c, 0x6c, 0xe8, 0xba,
	0x70, 0xef, 0x34, 0xc6, 0x7d, 0x89, 0x72, 0x67, 0x02, 0xf7, 0xcc, 0xbf, 0x3d, 0x85, 0xac, 0xe4,
	0xe3, 0xe7, 0xd7, 0x7b, 0xbf, 0xc9, 0xf6, 0xde, 0xec, 0xfd, 0xf4, 0xb9, 0x8c, 0x60, 0xc4, 0x59,
	0xd1, 0xda, 0x62, 0x09, 0xe4, 0xc3, 0x4c, 0x12, 0xb1, 0x13, 0xff, 0x4e, 0xc3, 0x85, 0xf5, 0x00,
	0xd1, 0x38, 0x5d, 0x8a, 0x5f, 0x91, 0x02, 0x7e, 0x62, 0x00, 0xe3, 0x2e, 0x35, 0xa8, 0x1c, 0x5d,
	0x36, 0xec, 0x85, 0x7e, 0x5e, 0x10, 0x1e, 0xe6, 0x43, 0x49, 0xff, 0xca, 0x21, 0x74, 0x26, 0xdb,
	0xdd, 0xdb, 0x7b, 0xef, 0xed, 0xbe, 0x7f, 0xf7, 0xeb, 0xdd, 0x4f, 0xbf, 0x29, 0xb7, 0x81, 0x69,
	0x74, 0x8d, 0x38, 0x22, 0x95, 0x7a, 0x48, 0x76, 0x84, 0x39, 0x74, 0x5e, 0x46, 0xd4, 0x4f, 0x31,
	0xe6, 0x53, 0x86, 0x97, 0x61, 0xe6, 0x35, 0x34, 0x2d, 0xa3, 0x5f, 0x8f, 0x03, 0x6f, 0xe4, 0x47,
	0x70, 0xf7, 0xbd, 0xc3, 0x72, 0x87, 0xdb, 0x3c, 0xab, 0x8d, 0xae, 0xc8, 0x58, 0xf3, 0xd4, 0x07,
	0x24, 0xc0, 0xe1, 0x2a, 0xe1, 0x78, 0xc9, 0x34, 0x8f, 0x2e, 0xca, 0x98, 0x36, 0x71, 0x9a, 0x91,
	0xec, 0xdd, 0x65, 0xbe, 0x71, 0xc6, 0x31, 0xf3, 0x77, 0x0e, 0xa1, 0xd3, 0xd9, 0xde, 0x9b, 0x0f,
	0xdf, 0xfb, 0x1f, 0x3e, 0xef, 0x79, 0x3f, 0x2f, 0x87, 0xe3, 0x26, 0xba, 0x9a, 0xe5, 0x4e, 0xe4,
	0x91, 0xf2, 0xb7, 0x23, 0xaf, 0x27, 0x1b, 0x0d, 0x1b, 0xdd, 0x92, 0xd0, 0x38, 0x34, 0x94, 0xc2,
	0x5d, 0xec, 0x73, 0x41, 0x95, 0x23, 0x9d, 0x7b, 0xe8, 0x82, 0x84, 0xc9, 0xcb, 0xdd, 0xcc, 0xf7,
	0xf8, 0xf0, 0xca, 0x91, 0x62, 0x52, 0x25, 0x94, 0x34, 0xa7, 0x32, 0x37, 0xa9, 0x47, 0x3a, 0x8f,
	0xd0, 0x75, 0x09, 0x61, 0xbe, 0x1e, 0x87, 0x59, 0x61, 0x4e, 0x02, 0x9c, 0xe6, 0x7c, 0xd4, 0xed,
	0x48, 0x71, 0xae, 0x94, 0x35, 0x9c, 0xdd, 0x89, 0xe3, 0x32, 0x89, 0x39, 0x8d, 0xc8, 0xfc, 0xe3,
	0x13, 0xe8, 0x2c, 0x51, 0x9a, 0x71, 0x30, 0xed, 0x6d, 0x74, 0x83, 0x0e, 0xb8, 0x1e, 0x52, 0xfb,
	0x02, 0xcd, 0xcb, 0xc9, 0x4c, 0x81, 0xb5, 0x26, 0x02, 0xb4, 0xf0, 0xda, 0x62, 0xd8, 0xa5, 0x02,
	0xc6, 0x40, 0xb6, 0xab, 0xe8, 0xbe, 0x9c, 0xb2, 0x11, 0x6a, 0xbb, 0x82, 0xee, 0xc9, 0x39, 0x9b,
	0x00, 0xb7, 0x4b, 0xe8, 0x8e, 0x9c, 0x51, 0x0f, 0xbb, 0x55, 0x7e, 0xaf, 0x09, 0x7c, 0xeb, 0xa0,
	0xae, 0x9c, 0xd1, 0x1c, 0x82, 0x3b, 0xaf, 0x9a, 0x78, 0x25, 0x10, 0x57, 0x39, 0x85, 0xa6, 0x70,
	0xdc, 0x1e, 0xb2, 0xe5, 0x02, 0x5a, 0x80, 0x72, 0x9f, 0xa0, 0xd9, 0x26, 0x19, 0x6a, 0x68, 0x6e,
	0x80, 0x9e, 0x29, 0x94, 0x7d, 0x12, 0x80, 0xae, 0x72, 0x12, 0xcc, 0x61, 0xba, 0xcf, 0xd1, 0x23,
	0xa5, 0x08, 0x13, 0xb0, 0x6e, 0x61, 0xc0, 0xe4, 0xaa, 0xae, 0x81, 0xec, 0x2e, 0xa0, 0x9b, 0x2a,
	0x65, 0x55, 0x01, 0x77, 0x95, 0x8b, 0x6f, 0x0c, 0xbe, 0xfb, 0x9f, 0xdc, 0x46, 0x9d, 0xca, 0xd4,
	0x94, 0x18, 0xde, 0xeb, 0xe8, 0x32, 0x2f, 0x40, 0x82, 0xe4, 0xad, 0xe9, 0xa3, 0x01, 0x9e, 0xb7,
	0x30, 0x82, 0x75, 0x0e, 0x0d, 0xaa, 0xf7, 0x3e, 0xdb, 0x5a, 0x9a, 0xb1, 0xbd, 0x4b, 0xe8, 0xf6,
	0x38, 0x69, 0x33, 0xc2, 0x77, 0x56, 0xd2, 0x49, 0x35, 0xce, 0xf7, 0xa9, 0xa8, 0xc9, 0x2d, 0xd1,
	0xbe, 0xb2, 0xce, 0x6b, 0x30, 0xbf, 0x73, 0xcc, 0x39, 0x30, 0x44, 0xfe, 0x2e, 0x48, 0x66, 0xa3,
	0x01, 0xff, 0xab, 0x67, 0x91, 0xa2, 0x80, 0x97, 0xd1, 0xdd, 0x31, 0x16, 0x13, 0x2c, 0xb0, 0x6c,
	0x7e, 0x0c, 0x10, 0xc1, 0x32, 0x15, 0xd3, 0xe3, 0x82, 0x1f, 0x48, 0x66, 0x54, 0x89, 0x0e, 0xbe,
	0x83, 0xce, 0x8d, 0x11, 0xcb, 0x30, 0xc2, 0x2b, 0x92, 0x5e, 0x1b, 0x21, 0x85, 0xd7, 0xc4, 0x8d,
	0xad, 0x0d, 0x5e, 0x78, 0x51, 0x34, 0x14, 0x86, 0xa8, 0xe1, 0x79, 0x74, 0x7d, 0x9c, 0x4b, 0x8b,
	0x1d, 0x96, 0xf5, 0xcd, 0x08, 0x41, 0x7c, 0x07, 0x9d, 0x1d, 0x63, 0x94, 0xe1, 0x88, 0x65, 0x6b,
	0x4c, 0x8d, 0x26, 0x96, 0x49, 0x95, 0x61, 0x8a, 0x97, 0xc5, 0xfd, 0xdb, 0x18, 0x59, 0x6c, 0x33,
	0xf7, 0xb8, 0x0d, 0xbe, 0x78, 0x4e, 0x66, 0xb7, 0x34, 0x28, 0x63, 0xb9, 0x35, 0x6a, 0xc4, 0x1a,
	0x7b, 0x68, 0xb1, 0x81, 0xcd, 0x04, 0x71, 0x3c, 0x23, 0xb3, 0x9a, 0x0a, 0xdc, 0xb1, 0xcc, 0x02,
	0x34, 0xa0, 0x8f, 0x65, 0x1a, 0xa6, 0xc7, 0x20, 0xdf, 0x17, 0xb7, 0x22, 0x1d, 0x12, 0x79, 0x41,
	0xbe, 0xde, 0x75, 0x78, 0xe4, 0x87, 0xec, 0xd0, 0x62, 0x86, 0x4a, 0x96, 0xcd, 0x7f, 0x23, 0x36,
	0x59, 0xd6, 0xac, 0x06, 0x84, 0xb2, 0x6c, 0x98, 0xf4, 0x38, 0x65, 0x99, 0x92, 0xe9, 0xd0, 0xca,
	0xb2, 0x46, 0x35, 0x60, 0x96, 0x1f, 0x4b, 0x3a, 0x6f, 0x8a, 0x5c, 0x5e, 0x91, 0x74, 0xc8, 0x08,
	0xbf, 0xfc, 0x42, 0x74, 0x99, 0xdb, 0xa3, 0x98, 0x9f, 0x4b, 0x2c, 0x54, 0x1b, 0x2c, 0xb3, 0xac,
	0x01, 0xad, 0x10, 0xcd, 0x2f, 0x25, 0x56, 0xbc, 0x1d, 0xae, 0x79, 0x49, 0x32, 0xb7, 0x06, 0xe8,
	0xe6, 0x55, 0xd9, 0xf2, 0x34, 0xc2, 0x38, 0x2f, 0x4a, 0x56, 0x45, 0x33, 0xd2, 0x79, 0x20, 0x9e,
	0x17, 0x26, 0xc7, 0x3b, 0xcb, 0x94, 0xc5, 0x08, 0xf5, 0xac, 0x64, 0x6c, 0xc2, 0x3e, 0xcb, 0x18,
	0x8d, 0x10, 0xd0, 0x5d, 0x74, 0x49, 0xc2, 0xa8, 0xc7, 0x41, 0xbb, 0x12, 0x47, 0xb0, 0x35, 0x1a,
	0x5a, 0xd6, 0x62, 0x23, 0x4c, 0xb4, 0x4c, 0x9f, 0x5b, 0x21, 0xa3, 0x97, 0x74, 0x9e, 0xa8, 0x1a,
	0x1f, 0xbd, 0xac, 0xf5, 0x48, 0xd5, 0x28, 0x69, 0x07, 0xcd, 0x48, 0x3c, 0x8c, 0x56, 0x58, 0x69,
	0x8c, 0xe6, 0x24, 0x36, 0xa4, 0x35, 0x62, 0x3a, 0x44, 0xcb, 0x46, 0x62, 0x0c, 0x71, 0xd3, 0x8f,
	0x58, 0x68, 0xce, 0x14, 0x3d, 0x2d, 0x9b, 0x72, 0x23, 0x0c, 0xb5, 0xcc, 0x02, 0xb5, 0x43, 0x52,
	0xcb, 0x25, 0xb4, 0xc1, 0x53, 0xcb, 0x1a, 0x6f, 0x84, 0xaa, 0xb6, 0x25, 0x0e, 0x60, 0x23, 0xb6,
	0xda, 0x43, 0x0f, 0xc7, 0x98, 0xda, 0x23, 0xac, 0x65, 0x1b, 0x9e, 0x29, 0xce, 0x5a, 0x66, 0x42,
	0x9b, 0xd1, 0xd6, 0x32, 0x4d, 0x9d, 0x00, 0x73, 0x2d, 0xb3, 0xfc, 0x66, 0xc8, 0x6b, 0x19, 0xa7,
	0x19, 0xfe, 0x5a, 0xb6, 0xcf, 0xb6, 0x41, 0x61, 0xaf, 0x89, 0x51, 0x8a, 0x36, 0x58, 0x6c, 0x99,
	0x49, 0x6b, 0x85, 0xc8, 0x96, 0x7d, 0xdb, 0x10, 0x97, 0x2d, 0xd3, 0x11, 0x53, 0x74, 0xb6, 0x4c,
	0x47, 0x9a, 0x31, 0xda, 0x32, 0xfb, 0x6b, 0x80, 0xd4, 0x96, 0xed, 0xce, 0x13, 0xe1, 0xb5, 0xd7,
	0xd1, 0x82, 0x6e, 0x03, 0x69, 0x81, 0xda, 0x96, 0x3b, 0x28, 0x26, 0xd8, 0xed, 0x57, 0x62, 0x64,
	0x71, 0x5f, 0x08, 0xee, 0x7f, 0xed, 0x28, 0x3a, 0xab, 0xa8, 0x33, 0x79, 0x0b, 0x5d, 0x37, 0xa8,
	0x31, 0xb9, 0x80, 0x2e, 0xb7, 0xad, 0x2f, 0xb9, 0xaa, 0x10, 0xdc, 0x5c, 0x5b, 0xf2, 0x21, 0xba,
	0xd8, 0xa6, 0xae, 0xa4, 0x86, 0x5c, 0x56, 0x53, 0xb2, 0x8b, 0xae, 0xb4, 0xae, 0x27, 0xa9, 0xfa,
	0x84, 0xa2, 0x96, 0xe4, 0x9a, 0xa2, 0xeb, 0x06, 0x75, 0x24, 0x1f, 0xa0, 0x0b, 0xe6, 0x35, 0x24,
	0x6d, 0x45, 0x57, 0xb4, 0xf5, 0x23, 0x55, 0x7d, 0x51, 0xd4, 0x8e, 0x7c, 0x84, 0x2e, 0xb5, 0xab,
	0x1b, 0xa9, 0x92, 0xaf, 0xa8, 0x19, 0xf9, 0x3f, 0x9f, 0xe0, 0x54, 0x53, 0x7c, 0x62, 0x20, 0xa8,
	0xa6, 0xf2, 0xa1, 0xc1, 0x3c, 0xba, 0x21, 0xa5, 0x22, 0xd0, 0xf6, 0x0a, 0x80, 0x56, 0x86, 0x42,
	0x8f, 0x76, 0xe6, 0xd0, 0x35, 0x29, 0x07, 0x54, 0xc6, 0x73, 0x06, 0x98, 0xbf, 0xf3, 0x3a, 0xda,
	0x99, 0xe5, 0x87, 0x59, 0xa4, 0xa7, 0x4e, 0x1d, 0x07, 0xb0, 0x55, 0x53, 0x97, 0x75, 0x50, 0x8e,
	0xf0, 0x11, 0xdc, 0x07, 0xfc, 0xc2, 0x12, 0x5e, 0x09, 0x10, 0x78, 0x19, 0x0f, 0xac, 0x25, 0xcf,
	0xff, 0xa5, 0xc4, 0x14, 0x7a, 0xc1, 0x57, 0xee, 0x3d, 0xa6, 0x6c, 0x46, 0x8e, 0x3d, 0x8a, 0xa1,
	0x17, 0x62, 0xa9, 0x1a, 0x6a, 0x5a, 0xa3, 0xf2, 0x84, 0x18, 0xe2, 0x9f, 0xd3, 0x0c, 0xb9, 0xeb,
	0xf4, 0xfc, 0x08, 0x33, 0x30, 0x06, 0xfd, 0xd8, 0x17, 0x5c, 0x0c, 0xee, 0x78, 0xc7, 0x41, 0x0b,
	0x52, 0x7e, 0x82, 0x6d, 0x23, 0xfe, 0xae, 0x44, 0x04, 0xe2, 0x82, 0x7f, 0x04, 0xf4, 0x2f, 0x15,
	0x41, 0x5b, 0x7b, 0x92, 0x7f, 0xad, 0xe1, 0xa2, 0x59, 0xc5, 0x10, 0x93, 0xfa, 0x7e, 0xf4, 0x05,
	0xc0, 0xc8, 0x8f, 0x46, 0xa4, 0xf2, 0x5c, 0x66, 0x7d, 0x49, 0x2d, 0xe8, 0x02, 0xdb, 0xfa, 0x4f,
	0x83, 0xb7, 0x65, 0x26, 0xa4, 0x1f, 0x0f, 0xd3, 0x7c, 0x3d, 0xb3, 0xbe, 0x02, 0x29, 0x8b, 0xbc,
	0x94, 0x1e, 0x7a, 0x60, 0x26, 0x65, 0xdd, 0x09, 0xfa, 0x99, 0x75, 0x0a, 0x64, 0xd8, 0xbc, 0x8c,
	0x08, 0xad, 0x98, 0xc9, 0x88, 0x23, 0x3c, 0xca, 0xb7, 0x70, 0x94, 0xef, 0xb0, 0x9e, 0x7d, 0x0d,
	0xf2, 0xd6, 0x78, 0x79, 0x03, 0x34, 0x6f, 0x26, 0x2f, 0xf3, 0xb7, 0x73, 0x8c, 0xa3, 0xa2, 0x73,
	0x16, 0x08, 0x5a, 0xe6, 0x05, 0xf9, 0xa8, 0x6b, 0x2e, 0x68, 0xa7, 0x38, 0x6c, 0x17, 0xa2, 0xbe,
	0x01, 0x51, 0xab, 0xbc, 0xa8, 0x0d, 0xb4, 0x68, 0x26, 0xaa, 0x38, 0x53, 0xe6, 0x3b, 0x10, 0x6b,
	0xc8, 0xac, 0x0e, 0x08, 0x5b, 0xe1, 0x84, 0xcd, 0xfc, 0x33, 0x84, 0xae, 0x94, 0x16, 0x46, 0x8a,
	0xe0, 0x9f, 0x45, 0xf7, 0xaa, 0xcf, 0x35, 0xe2, 0xf8, 0x17, 0xd0, 0x4d, 0x2d, 0xb5, 0x04, 0xcd,
	0x2f, 0xd8, 0x28, 0x23, 0x4c, 0x7f, 0xd3, 0x47, 0x24, 0xc8, 0xfe, 0x95, 0x86, 0x5e, 0x28, 0xf1,
	0xfd, 0x8b, 0xe8, 0xb6, 0x96, 0x51, 0x8e, 0xf2, 0x7f, 0xca, 0xaf, 0x88, 0xd6, 0x58, 0xff, 0x67,
	0xbc, 0x09, 0x69, 0x8f, 0xf8, 0xf7, 0xd1, 0x63, 0xfd, 0x1c, 0x98, 0xe3, 0xfe, 0x9f, 0xf0, 0xe6,
	0xa1, 0x2d, 0xfa, 0xdf, 0x46, 0xb7, 0xb4, 0xcc, 0xd2, 0x37, 0x00, 0x4d, 0x23, 0xa7, 0x7f, 0x09,
	0xd0, 0x45, 0xd3, 0x0d, 0x5d, 0x1f, 0x7f, 0x0f, 0xd0, 0xa4, 0x4d, 0x92, 0x57, 0x01, 0x4d, 0x3d,
	0x93, 0xbe, 0x0d, 0x68, 0x62, 0x92, 0xbe, 0x10, 0x58, 0x46, 0x77, 0xb5, 0x4c, 0xaa, 0x77, 0x02,
	0x8f, 0x79, 0x63, 0xda, 0xf2, 0xb5, 0x80, 0xcb, 0x1b, 0x98, 0x49, 0xdf, 0x0c, 0x04, 0xe8, 0x99,
	0x56, 0x48, 0xbb, 0x97, 0x03, 0x6e, 0x83, 0x56, 0x18, 0xbd, 0x1f, 0x78, 0x89, 0x66, 0x0c, 0xfb,
	0xa5, 0x7a, 0x45, 0x90, 0xa2, 0xa7, 0x5a, 0x09, 0x93, 0xbc, 0x25, 0xf8, 0xbf, 0xef, 0xa0, 0xd3,
	0xb2, 0xa2, 0xe0, 0xd7, 0xd1, 0xe5, 0x86, 0x82, 0xe0, 0x4f, 0xd0, 0xcc, 0xe4, 0xc5, 0xc0, 0x9f,
	0xa1, 0xd9, 0xfd, 0x14, 0x02, 0x7f, 0x8c, 0xee, 0x4f, 0x5c, 0x04, 0x5c, 0xd6, 0x6e, 0xe3, 0x02,
	0xe0, 0x1b, 0xe8, 0xf1, 0xc1, 0x15, 0xff, 0x9e, 0x93, 0x8c, 0xb1, 0xae, 0xf0, 0xf7, 0x1c, 0xba,
	0xd4, 0xaa, 0xe8, 0xf7, 0x02, 0xba, 0xd2, 0xb6, 0xe0, 0xf7, 0x1a, 0xba, 0x37, 0x69, 0xb1, 0x6f,
	0x29, 0xab, 0x59, 0xa1, 0xef, 0x25, 0x74, 0x63, 0x92, 0x22, 0xdf, 0x2f, 0xd1, 0xa3, 0x7d, 0x16,
	0xf8, 0x4e, 0x91, 0x73, 0xe0, 0xc5, 0xbd, 0xd7, 0xd1, 0xca, 0x01, 0x15, 0xf6, 0x9e, 0x47, 0x57,
	0x5b, 0x16, 0xf5, 0x7e, 0xa4, 0xe4, 0x50, 0x14, 0xf4, 0xb6, 0xd1, 0xcd, 0xf6, 0xc5, 0xbc, 0x17,
	0xd0, 0xf5, 0xb6, 0x85, 0xbc, 0xbb, 0x32, 0x96, 0x86, 0x22, 0xde, 0xb2, 0x45, 0x6e, 0x5a, 0xc0,
	0xdb, 0x46, 0xd7, 0xda, 0x17, 0xef, 0x96, 0x69, 0xb0, 0x61, 0xe1, 0xee, 0xe7, 0xe8, 0xe1, 0xbe,
	0x8a, 0x76, 0x3f, 0x95, 0x18, 0x25, 0xf3, 0x82, 0xdd, 0x4f, 0x4c, 0xb8, 0x55, 0xc5, 0xba, 0x65,
	0xbd, 0x36, 0x2c, 0xd4, 0xbd, 0x26, 0xd1, 0x1e, 0xc3, 0x22, 0xdd, 0x4b, 0x92, 0x09, 0x32, 0x28,
	0xd0, 0xbd, 0x82, 0xa6, 0x27, 0x2b, 0xce, 0xfd, 0x0c, 0xdd, 0xdd, 0x4f, 0x61, 0xee, 0x25, 0x89,
	0xfe, 0x1a, 0x14, 0xe5, 0x96, 0x59, 0xe0, 0x86, 0x82, 0xdc, 0x4b, 0x32, 0x96, 0xe6, 0x62, 0xdc,
	0xb2, 0x59, 0x34, 0x2c, 0xc4, 0x2d, 0x33, 0x33, 0xfa, 0x22, 0xdc, 0x0f, 0xd1, 0xf9, 0x36, 0x05,
	0xb8, 0x57, 0x25, 0x6a, 0x62, 0x56, 0x7c, 0xfb, 0x01, 0x3a, 0x67, 0x5e, 0x78, 0x7b, 0x55, 0xb2,
	0x8b, 0x98, 0x15, 0xdd, 0x5e, 0x94, 0x8c, 0x40, 0x73, 0xc1, 0xed, 0xae, 0x84, 0xab, 0xa9, 0xd8,
	0xb6, 0x4c, 0xed, 0x0d, 0x0a, 0x6d, 0x3f, 0x41, 0x77, 0x26, 0x2f, 0xb2, 0xfd, 0x18, 0xdd, 0x9e,
	0xb8, 0xc0, 0xf6, 0x8a, 0x64, 0xea, 0x8c, 0x8a, 0x6b, 0xcb, 0xb6, 0x74, 0x83, 0xc2, 0xda, 0xb2,
	0xef, 0x19, 0x15, 0xd5, 0x7e, 0x24, 0xf1, 0xa5, 0xb4, 0x05, 0xb5, 0x65, 0xb6, 0xcb, 0xb0, 0x98,
	0xb6, 0x4c, 0xfd, 0x35, 0x85, 0xb4, 0x9f, 0x4a, 0x96, 0xa6, 0x79, 0x11, 0x6d, 0x5b, 0xe2, 0xf4,
	0x35, 0x16, 0xd0, 0x5e, 0x47, 0xf6, 0x01, 0x15, 0xcf, 0x9e, 0x43, 0x17, 0x5b, 0x15, 0xce, 0x7e,
	0x2e, 0xe9, 0x6c, 0x9b, 0xa2, 0xd9, 0x6b, 0x12, 0x03, 0x6f, 0x58, 0x30, 0xfb, 0x89, 0x84, 0xd5,
	0xb8, 0x58, 0xf6, 0xaa, 0x84, 0xd9, 0xac, 0x50, 0xb6, 0xcc, 0x2b, 0xd7, 0x15, 0xc9, 0x96, 0x69,
	0xaa, 0xb6, 0x40, 0xf6, 0xcf, 0x90, 0xfb, 0xe7, 0x5c, 0x1c, 0xfb, 0x99, 0x6c, 0x1f, 0x37, 0x2f,
	0x8c, 0xad, 0x63, 0x37, 0x28, 0x8a, 0xfd, 0x42, 0x62, 0x47, 0x5b, 0x15, 0xc4, 0x4e, 0x24, 0xce,
	0xd7, 0xfe, 0x8a, 0x61, 0x3f, 0x91, 0x34, 0xc9, 0xb8, 0x10, 0x76, 0x82, 0x96, 0x0e, 0xb8, 0x08,
	0xf6, 0x4b, 0x99, 0x05, 0x6f, 0x55, 0x00, 0xdb, 0x91, 0xa8, 0x77, 0xcb, 0xe2, 0xd7, 0xbf, 0x83,
	0x9e, 0xfe, 0xf9, 0x15, 0xbe, 0x1e, 0xa1, 0x17, 0x7f, 0xbe, 0x45, 0xaf, 0xfb, 0x92, 0xc3, 0xc4,
	0x24, 0x05, 0xaf, 0xd7, 0x14, 0x67, 0x1f, 0x83, 0x62, 0xd7, 0x29, 0x5a, 0x3e, 0xf0, 0x42, 0xd7,
	0x0a, 0x99, 0xfb, 0x2a, 0x72, 0x9d, 0x49, 0x64, 0xee, 0xbb, 0xc0, 0xf5, 0x6b, 0xb4, 0x78, 0xd0,
	0xc5, 0xad, 0x65, 0x76, 0xa3, 0x55, 0x61, 0xeb, 0x97, 0xba, 0x0d, 0xc3, 0xa8, 0xa8, 0xf5, 0x63,
	0x89, 0xe5, 0x33, 0x2d, 0x68, 0xfd, 0x5f, 0x1c, 0x46, 0xe7, 0xf2, 0x4f, 0xdf, 0xa7, 0xbb, 0x3f,
	0xe4, 0xef, 0x7e, 0xdc, 0xfd, 0xbc, 0xf7, 0xe6, 0xc7, 0x5f, 0x95, 0xd1, 0xb7, 0x3b, 0xe8, 0x66,
	0x9e, 0x7a, 0xa3, 0x14, 0x0f, 0x46, 0xb9, 0x1f, 0xe2, 0x2c, 0x77, 0xc2, 0x44, 0x16, 0x83, 0x5b,
	0x46, 0x77, 0x15, 0x74, 0x60, 0xff, 0x4a, 0x80, 0x16, 0xbb, 0xf4, 0x58, 0x02, 0x87, 0xf7, 0xb6,
	0x9e, 0x8f, 0x3c, 0x13, 0x4e, 0x72, 0x31, 0xcb, 0x9b, 0x9a, 0xab, 0xc2, 0x81, 0x15, 0x7f, 0x10,
	0xd2, 0x60, 0x75, 0x1e, 0xa2, 0xab, 0x0a, 0xae, 0xe2, 0x9f, 0x23, 0x3f, 0x12, 0x32, 0x7c, 0x75,
	0xe6, 0xd0, 0x35, 0x1d, 0x79, 0x3c, 0x2c, 0x1f, 0x1b, 0xda, 0xcc, 0x61, 0x50, 0xd0, 0x13, 0x34,
	0x1b, 0xeb, 0xc8, 0x31, 0x1a, 0xfb, 0x64, 0xb7, 0x62, 0x5f, 0x50, 0x24, 0xe4, 0x43, 0x05, 0x2b,
	0x79, 0x0d, 0x4b, 0x61, 0x94, 0x79, 0x5c, 0x46, 0xab, 0xad, 0xe3, 0x54, 0xc8, 0x0a, 0xe0, 0x37,
	0xc2, 0x62, 0x1a, 0xff, 0xfe, 0x61, 0xf4, 0xa5, 0xb7, 0xfb, 0xf9, 0xf7, 0xca, 0xb9, 0xbb, 0x80,
	0xce, 0x90, 0x2f, 0x4b, 0xa6, 0xeb, 0x1a, 0xb2, 0xaa, 0x3f, 0x39, 0x03, 0xe2, 0x04, 0x4d, 0x55,
	0x17, 0x08, 0x24, 0xe3, 0x35, 0x47, 0x90, 0xf6, 0xfc, 0x3c, 0xa5, 0x57, 0xde, 0xf4, 0x1d, 0x7e,
	0xca, 0xb2, 0x8f, 0x55, 0x44, 0x1e, 0x26, 0xaf, 0xa5, 0xfd, 0x4d, 0x9c, 0xb1, 0x61, 0xf7, 0x58,
	0xaa, 0xeb, 0x8a, 0xca, 0x8f, 0x4a, 0x07, 0x8a, 0xa4, 0xcf, 0x22, 0xe2, 0xfc, 0x4c, 0x46, 0x08,
	0x07, 0x7f, 0x42, 0x08, 0x2f, 0x88, 0x20, 0x5b, 0xc1, 0x55, 0xf4, 0x75, 0x45, 0xc8, 0xe0, 0x15,
	0xe4, 0x8b, 0x31, 0xcb, 0x40, 0x5d, 0xfd, 0x3d, 0x21, 0x16, 0x23, 0x85, 0x97, 0xdb, 0x74, 0xf0,
	0x68, 0x0a, 0x88, 0x32, 0x4f, 0x03, 0x4f, 0x1c, 0x0f, 0x52, 0x27, 0x2c, 0x49, 0x4f, 0x00, 0x69,
	0x0e, 0x59, 0xef, 0xce, 0x08, 0xa4, 0xdc, 0x73, 0x41, 0x4a, 0x96, 0x8e, 0x37, 0x8f, 0x6c, 0xed,
	0xec, 0x6a, 0x27, 0x83, 0x54, 0xef, 0xdf, 0x54, 0x7f, 0x67, 0x5f, 0x82, 0xeb, 0x1b, 0xf2, 0xa1,
	0x99, 0x9f, 0xa1, 0x0e, 0x9b, 0x49, 0xee, 0x06, 0xf2, 0x3a, 0xba, 0xcc, 0xc9, 0x95, 0xdd, 0x3a,
	0xde, 0xe3, 0xfb, 0x02, 0x14, 0x91, 0x93, 0x79, 0xb1, 0x53, 0xcb, 0x9a, 0x37, 0xf3, 0x87, 0x27,
	0xd1, 0x85, 0xe2, 0x13, 0xf1, 0xa7, 0xef, 0x77, 0x3f, 0xad, 0xbf, 0xf9, 0xf0, 0xfd, 0xfb, 0x77,
	0x1f, 0x7e, 0xf0, 0x3f, 0x7c, 0xde, 0x23, 0x5f, 0xba, 0x87, 0x6e, 0x11, 0x39, 0x74, 0x5f, 0x5a,
	0x77, 0x22, 0x2f, 0xa0, 0xe0, 0xb5, 0x2c, 0x1f, 0x5b, 0xf7, 0xb7, 0x95, 0x94, 0x8e, 0xe7, 0x8d,
	0xe2, 0x88, 0xfe, 0xa9, 0x0c, 0xbb, 0x7b, 0x1e, 0x9c, 0xca, 0xd4, 0x5f, 0x70, 0x82, 0xa0, 0xb0,
	0xe8, 0x51, 0x1c, 0xe1, 0x32, 0xff, 0x06, 0x38, 0xc7, 0x2b, 0xe8, 0x8e, 0x92, 0x8d, 0xe4, 0x07,
	0x8a, 0xe2, 0x7c, 0xb4, 0x8e, 0x03, 0xaf, 0x8c, 0xb5, 0x47, 0xeb, 0xe0, 0x55, 0xdf, 0x55, 0x32,
	0xd2, 0xf4, 0x74, 0xe4, 0x04, 0xe2, 0x91, 0x6b, 0x4f, 0x9a, 0x74, 0xc3, 0xa7, 0xb3, 0xb9, 0x81,
	0x1e, 0x2b, 0x39, 0xe5, 0xb9, 0x05, 0x38, 0xdc, 0x2b, 0x0b, 0xb4, 0xe3, 0xb9, 0x2d, 0x78, 0x6f,
	0xa3, 0x1e, 0xae, 0xbe, 0x4f, 0xfb, 0xbd, 0xe1, 0x07, 0x01, 0xcb, 0xe4, 0xd1, 0x8f, 0x37, 0x58,
	0x95, 0x5c, 0x25, 0x9f, 0x1f, 0x82, 0xd3, 0x35, 0x8a, 0xa3, 0x60, 0x87, 0x69, 0xb7, 0x1f, 0x43,
	0xb4, 0x69, 0x56, 0xc3, 0x48, 0x80, 0x88, 0x04, 0x0d, 0x39, 0x72, 0x0b, 0x09, 0x01, 0xcb, 0xf6,
	0xe1, 0xc7, 0x6e, 0xe3, 0xb0, 0xd1, 0xa4, 0x83, 0x71, 0x44, 0xb6, 0x5e, 0xcc, 0x82, 0xf0, 0x01,
	0x70, 0xea, 0x66, 0xaa, 0xe4, 0x8c, 0x13, 0x1c, 0xb1, 0x10, 0x7c, 0x10, 0xc7, 0x2c, 0x7e, 0xa4,
	0x64, 0x64, 0xb9, 0x90, 0x72, 0xf8, 0xe6, 0x49, 0x16, 0xf8, 0x6f, 0x6e, 0x6d, 0xc5, 0x4a, 0x3e,
	0xfa, 0x25, 0xe3, 0x34, 0xfe, 0x68, 0xd9, 0x51, 0x16, 0x65, 0x8f, 0x8d, 0x3f, 0xca, 0x7a, 0x7a,
	0x8a, 0x71, 0xc6, 0x10, 0x0e, 0xb9, 0xaf, 0xe6, 0xac, 0x47, 0x28, 0x20, 0x9d, 0x48, 0xf8, 0x9a,
	0xc5, 0xf3, 0x6e, 0x28, 0x79, 0xcb, 0x35, 0x00, 0xaf, 0xe8, 0x60, 0x09, 0xe8, 0x74, 0xaf, 0x38,
	0x90, 0x10, 0x2f, 0xc8, 0x73, 0x76, 0x58, 0x90, 0x3d, 0xde, 0xf4, 0x20, 0x2a, 0x77, 0x4d, 0xc9,
	0x97, 0xe0, 0xc1, 0x00, 0x7b, 0x65, 0x8c, 0x1d, 0x0f, 0x20, 0xce, 0xf0, 0x40, 0xc9, 0x91, 0xe2,
	0x0c, 0xa7, 0x9b, 0x10, 0x09, 0xa3, 0x0b, 0x0e, 0x52, 0x8c, 0xa4, 0xd9, 0x26, 0x4b, 0xad, 0xa2,
	0xe4, 0xce, 0x5c, 0x27, 0xc0, 0x65, 0x88, 0xdd, 0x0d, 0x20, 0x6f, 0xd7, 0x23, 0x35, 0x43, 0x1e,
	0x27, 0xc5, 0xff, 0xb8, 0x1b, 0xc2, 0xb2, 0x3c, 0x03, 0x12, 0x60, 0x59, 0x2e, 0xa2, 0x69, 0xa5,
	0x04, 0xba, 0xd9, 0x93, 0x86, 0x42, 0xa8, 0x3d, 0x0f, 0x63, 0xf6, 0x78, 0x4e, 0xcd, 0xc5, 0x67,
	0x65, 0x65, 0x8f, 0xee, 0xf2, 0x8c, 0xa5, 0xf1, 0x51, 0xf2, 0x6d, 0xc5, 0xe9, 0x86, 0x75, 0x1e,
	0xe2, 0xe2, 0x29, 0x59, 0xfc, 0x33, 0xff, 0xc1, 0x14, 0x3a, 0x37, 0xfc, 0xf0, 0xfd, 0xee, 0xa7,
	0xf7, 0xbf, 0x79, 0xf7, 0xe1, 0x87, 0xec, 0x37, 0x3f, 0xfe, 0xfc, 0xe3, 0xfb, 0xec, 0x17, 0x7f,
	0x85, 0xa5, 0x31, 0xe0, 0x9e, 0x19, 0x52, 0x28, 0xc0, 0x28, 0xeb, 0x6f, 0xd7, 0xcc, 0xb4, 0x83,
	0x16, 0xe4, 0x64, 0x78, 0xe8, 0x26, 0xa3, 0x2d, 0x3f, 0x5f, 0x1f, 0x05, 0xc3, 0x30, 0x19, 0x65,
	0x24, 0x9a, 0x46, 0x4f, 0x88, 0x2c, 0x55, 0x92, 0xeb, 0x31, 0x8d, 0x93, 0x8b, 0xd8, 0x5a, 0xc7,
	0x11, 0x0d, 0x6f, 0x7a, 0xcc, 0x3f, 0xd8, 0x22, 0x77, 0xdf, 0x33, 0xff, 0xea, 0x49, 0x74, 0x95,
	0x6b, 0xb8, 0x0c, 0x55, 0xf3, 0x10, 0xdd, 0xe7, 0xa5, 0x36, 0xc1, 0x6a, 0xba, 0x68, 0x5a, 0x4f,
	0x2e, 0xc1, 0xd5, 0x2c, 0xa0, 0x9b, 0x7a, 0x9e, 0x71, 0x60, 0x4d, 0xe3, 0x67, 0x24, 0xc8, 0x9a,
	0xd5, 0xa6, 0x9e, 0x28, 0xa1, 0x35, 0x4b, 0xe8, 0x8e, 0x9e, 0x53, 0x8e, 0xad, 0x79, 0x86, 0xe6,
	0x9a, 0x3e, 0xa8, 0x03, 0xd7, 0x3c, 0x47, 0x8f, 0x0c, 0xd8, 0xd5, 0xe8, 0x9a, 0x57, 0xe8, 0x49,
	0xc3, 0x54, 0x98, 0xc3, 0x6b, 0x9e, 0xa2, 0x87, 0x7a, 0x59, 0x5a, 0x7c, 0xcd, 0x22, 0xba, 0xad,
	0xe7, 0x96, 0x02, 0x6c, 0x1a, 0x87, 0x4f, 0x8f, 0xb0, 0xb1, 0xd1, 0xad, 0xa6, 0xee, 0x8f, 0x43,
	0x6c, 0x1a, 0xf5, 0x4a, 0x82, 0xb1, 0x69, 0xec, 0x9d, 0x14, 0x64, 0xd3, 0xc8, 0x25, 0x45, 0xd9,
	0xac, 0xa0, 0x7b, 0x7a, 0x2e, 0x15, 0xcc, 0xe6, 0x09, 0x9a, 0x6d, 0x18, 0x0d, 0x0d, 0xce, 0xc6,
	0x43, 0x4b, 0x4d, 0x9a, 0x68, 0x00, 0xb4, 0x09, 0xd1, 0x73, 0xbd, 0x94, 0x76, 0x48, 0x1b, 0xaf,
	0x49, 0x3d, 0x8c, 0xa0, 0x36, 0x0e, 0x7a, 0x60, 0xda, 0x35, 0x15, 0xd6, 0x26, 0x43, 0xcf, 0xf4,
	0x22, 0x26, 0x01, 0xdb, 0xfc, 0xd3, 0x23, 0xe8, 0x4c, 0x65, 0x99, 0x93, 0x4f, 0x1f, 0xbf, 0xff,
	0xe9, 0xed, 0x1e, 0x4b, 0x1f, 0xc4, 0x7d, 0x8e, 0x61, 0x29, 0xc7, 0x8e, 0x19, 0x12, 0x1a, 0xf1,
	0x18, 0xc9, 0x0a, 0xa9, 0x5d, 0x96, 0x50, 0x92, 0xa5, 0x41, 0xde, 0x97, 0x1d, 0xe2, 0xf3, 0x5a,
	0xa8, 0x88, 0x21, 0xcb, 0x98, 0x98, 0xaa, 0x62, 0x06, 0x5d, 0x92, 0x11, 0x83, 0xbd, 0x12, 0xf1,
	0xd3, 0xf2, 0xf6, 0x52, 0x6c, 0x8c, 0x08, 0x9e, 0x9e, 0x45, 0x57, 0x24, 0x94, 0x83, 0xc2, 0x3d,
	0xa2, 0xe9, 0xd9, 0x04, 0xf8, 0xf4, 0x5d, 0x74, 0x5e, 0x42, 0xed, 0x47, 0x1e, 0xde, 0x16, 0x91,
	0xd3, 0x77, 0xd0, 0x39, 0x09, 0x61, 0x10, 0x3b, 0x91, 0x88, 0x99, 0x7e, 0x28, 0x1d, 0xfc, 0x30,
	0x8e, 0xf0, 0x0e, 0x3c, 0x39, 0xfa, 0x82, 0x4f, 0x07, 0xf1, 0x40, 0x3a, 0x06, 0x61, 0x9c, 0xe6,
	0x83, 0xe2, 0xb0, 0x8e, 0x84, 0x9c, 0x06, 0xb3, 0xd2, 0xd1, 0x0d, 0x87, 0x11, 0xc9, 0x95, 0x12,
	0xb0, 0x14, 0x7b, 0x90, 0x37, 0xe1, 0x9e, 0xb4, 0x6b, 0xf4, 0xac, 0xfd, 0xa5, 0x90, 0xcb, 0x42,
	0x2e, 0xb7, 0xef, 0x47, 0x4e, 0xe4, 0x16, 0x07, 0xdb, 0xaf, 0xb8, 0x54, 0x0e, 0xc7, 0x67, 0xfe,
	0xf4, 0x09, 0xba, 0x38, 0xee, 0x12, 0x94, 0x21, 0x8b, 0x7b, 0x72, 0xab, 0x2a, 0x05, 0x7d, 0x3d,
	0x50, 0x52, 0x92, 0x8c, 0x94, 0x29, 0x4b, 0x4d, 0x46, 0xe2, 0xd1, 0xe0, 0xcb, 0xf4, 0x1c, 0xb2,
	0x77, 0xbd, 0x90, 0xef, 0x7d, 0xf4, 0x8a, 0x1b, 0xa7, 0x39, 0x35, 0x31, 0x24, 0xfc, 0x06, 0xaf,
	0x80, 0x98, 0x67, 0x43, 0x9c, 0xa1, 0x23, 0x9d, 0x40, 0xbe, 0xf9, 0x49, 0x13, 0x94, 0xc2, 0x74,
	0x8c, 0xe2, 0x5e, 0xe0, 0x0f, 0xa8, 0xe1, 0x62, 0x87, 0x53, 0xe2, 0x48, 0x1e, 0xe9, 0xac, 0xc9,
	0x5d, 0x07, 0x96, 0xa9, 0x34, 0xc4, 0x29, 0xc9, 0x88, 0x93, 0x38, 0x09, 0x71, 0x1d, 0x68, 0x43,
	0x12, 0xc2, 0xba, 0x24, 0xb7, 0xf3, 0x25, 0x6b, 0x1c, 0x51, 0xef, 0x97, 0x45, 0x50, 0xdc, 0x0c,
	0xbe, 0x78, 0x57, 0xc3, 0xc6, 0xd2, 0xfa, 0xf5, 0xe2, 0xc8, 0x63, 0xd8, 0xaf, 0xe2, 0x57, 0xc2,
	0x8a, 0xd1, 0xa2, 0x01, 0x2b, 0xa4, 0xce, 0x1b, 0x11, 0xb3, 0x44, 0x56, 0xce, 0x71, 0x1e, 0x38,
	0x77, 0xa4, 0x33, 0x40, 0x5d, 0xa5, 0x18, 0xf6, 0xc4, 0xba, 0xdc, 0xf5, 0xe9, 0x43, 0x77, 0x37,
	0xb7, 0x4e, 0x90, 0x5b, 0xaf, 0xc3, 0x7d, 0x72, 0x89, 0x7d, 0xe4, 0x8f, 0x7e, 0x3b, 0x8d, 0x8a,
	0xe3, 0x89, 0x5a, 0x10, 0x79, 0x46, 0xc4, 0x8e, 0xa6, 0x7d, 0x72, 0x4f, 0x76, 0xa4, 0xe3, 0x21,
	0x5b, 0xc9, 0x11, 0xfa, 0x99, 0x8b, 0x83, 0xc0, 0x89, 0x70, 0x3c, 0xcc, 0x48, 0xa6, 0xfa, 0x51,
	0xbe, 0x9e, 0xc6, 0xc3, 0xc1, 0x7a, 0x05, 0x15, 0xa3, 0x52, 0x5e, 0x6a, 0x74, 0xa8, 0x9c, 0xf3,
	0xea, 0xb6, 0xa5, 0x38, 0x9a, 0xb3, 0xe3, 0xaa, 0x4f, 0xa7, 0xdd, 0x41, 0xf3, 0xcd, 0x12, 0xb8,
	0x18, 0x7a, 0x21, 0x82, 0x9d, 0x5b, 0x93, 0xb8, 0xb9, 0x2b, 0x9c, 0x88, 0xda, 0x5c, 0xb0, 0x23,
	0x2c, 0xcc, 0xc5, 0xa2, 0x66, 0xd5, 0x85, 0xc3, 0x7c, 0xe8, 0x04, 0x24, 0x3b, 0x8d, 0x75, 0x8a,
	0xea, 0x50, 0xd8, 0x27, 0x5c, 0x4f, 0x34, 0x5a, 0x1b, 0xc5, 0xe2, 0x0f, 0x0c, 0x1f, 0x16, 0xc5,
	0x11, 0x26, 0xcc, 0xba, 0x59, 0xa3, 0x1b, 0x35, 0x03, 0x88, 0xc5, 0x30, 0xde, 0xab, 0x72, 0xdf,
	0xa4, 0x16, 0xe3, 0xa3, 0xca, 0x0e, 0x39, 0x60, 0x92, 0xac, 0x71, 0x8d, 0x90, 0xd3, 0x1d, 0x5b,
	0xe3, 0x2c, 0x31, 0xa6, 0x07, 0x09, 0xe3, 0x1f, 0xaa, 0x6d, 0x51, 0x56, 0xbe, 0x9f, 0x1a, 0xf5,
	0x48, 0xdc, 0x26, 0xf0, 0xac, 0xd3, 0x64, 0xa3, 0x3d, 0x32, 0xcc, 0xf2, 0x1e, 0x68, 0x67, 0x71,
	0x6a, 0xba, 0xae, 0x14, 0xb2, 0xe5, 0xa4, 0xa9, 0x43, 0x72, 0x65, 0x02, 0x0c, 0x2a, 0x35, 0xb0,
	0x06, 0xd1, 0x66, 0x61, 0x9f, 0x7a, 0x01, 0xac, 0x4e, 0x48, 0x12, 0xe3, 0xf6, 0x88, 0x27, 0xbc,
	0xaa, 0x59, 0xd6, 0x7e, 0x5c, 0x38, 0x2c, 0xe5, 0xe6, 0x70, 0x96, 0xa5, 0x6a, 0xcd, 0x09, 0xe7,
	0xbc, 0x78, 0xba, 0x13, 0xdb, 0xe9, 0x07, 0x9e, 0xeb, 0xa4, 0x9e, 0x75, 0x8e, 0x6e, 0x3e, 0x2f,
	0x20, 0x15, 0xbe, 0xba, 0x67, 0x4e, 0x88, 0x23, 0x0f, 0x7b, 0xd6, 0x79, 0x7a, 0x49, 0x0d, 0xff,
	0x84, 0xe4, 0x61, 0x6a, 0xa5, 0xa7, 0xb9, 0x1c, 0x7a, 0x8e, 0xbb, 0x51, 0xcc, 0x24, 0xfd, 0x93,
	0x8f, 0x33, 0x86, 0x13, 0x63, 0x90, 0x5d, 0x5b, 0xee, 0x45, 0x57, 0xc8, 0xad, 0x28, 0xce, 0x71,
	0xc6, 0x92, 0xc9, 0xf4, 0x22, 0x86, 0x4c, 0x53, 0x33, 0x91, 0x19, 0xec, 0x97, 0xf6, 0x26, 0xb3,
	0x2e, 0xd1, 0x2f, 0xf6, 0xe2, 0x6d, 0x40, 0x9f, 0x6b, 0xbe, 0x98, 0x3a, 0xde, 0x0e, 0x9d, 0x8c,
	0xcb, 0xf4, 0xc2, 0x9c, 0xfc, 0x02, 0xcf, 0x1b, 0x6f, 0x69, 0xf8, 0x7c, 0x0f, 0xae, 0xa5, 0x4b,
	0x94, 0x18, 0xf9, 0xa9, 0xb1, 0x8f, 0x04, 0xee, 0x55, 0xf0, 0x65, 0x2c, 0xa9, 0x8c, 0x4b, 0xb1,
	0x7b, 0x9e, 0xc6, 0xa6, 0xd6, 0xb6, 0x35, 0x6e, 0x33, 0xba, 0xc6, 0x0c, 0x7c, 0x3f, 0x26, 0x52,
	0x06, 0x72, 0x77, 0x5c, 0x26, 0xa5, 0x4c, 0xb5, 0x46, 0x04, 0x5d, 0x2f, 0x05, 0x25, 0x80, 0x01,
	0xbd, 0xa2, 0xdd, 0x29, 0xac, 0x1b, 0xc0, 0x10, 0xc2, 0xc4, 0xbe, 0xd0, 0xac, 0x38, 0x0f, 0xf7,
	0x48, 0x72, 0x91, 0x68, 0x94, 0xc4, 0x19, 0x64, 0x96, 0xb0, 0x6e, 0x52, 0x01, 0x9e, 0x1f, 0x25,
	0x70, 0x7e, 0xb9, 0xa9, 0x11, 0xd0, 0x77, 0x86, 0x41, 0x8e, 0x3d, 0x6b, 0x9a, 0x6a, 0xa5, 0x87,
	0xfb, 0x41, 0x8e, 0xd9, 0xf3, 0x82, 0x3b, 0x1a, 0x46, 0x62, 0x1d, 0x40, 0xab, 0x20, 0x3f, 0x8d,
	0x17, 0xc1, 0x04, 0x6b, 0xf8, 0x86, 0x24, 0x97, 0x26, 0x38, 0xa4, 0xb7, 0xa1, 0xa9, 0xc3, 0x12,
	0x67, 0xa9, 0xf6, 0x5f, 0xf0, 0x76, 0x4e, 0x16, 0x0c, 0xd9, 0xc1, 0xc9, 0x77, 0xad, 0x3b, 0x54,
	0x21, 0xb7, 0xdd, 0x08, 0x46, 0x6a, 0x4e, 0xbd, 0xe9, 0x61, 0x8f, 0x3c, 0x91, 0xa7, 0xfe, 0x38,
	0x83, 0x79, 0xde, 0x85, 0x3d, 0x10, 0x60, 0xa2, 0xba, 0x49, 0xae, 0x09, 0x28, 0xe1, 0x06, 0xa4,
	0x21, 0xf7, 0x20, 0x69, 0xbe, 0x03, 0x23, 0x50, 0x8b, 0x2c, 0x09, 0x82, 0x58, 0xf6, 0xc8, 0x4a,
	0xd9, 0xc8, 0x3a, 0xc9, 0xac, 0xfb, 0x74, 0x10, 0x07, 0x31, 0x2c, 0x4d, 0x8d, 0xd5, 0x2a, 0x9c,
	0x69, 0xec, 0x8d, 0x02, 0x3f, 0xda, 0xc0, 0x9e, 0x35, 0x43, 0x17, 0xca, 0x76, 0xf1, 0x4f, 0x3a,
	0x73, 0xb1, 0xfc, 0x78, 0x24, 0x62, 0x1d, 0xb2, 0x3c, 0xf5, 0x13, 0x48, 0xb5, 0x1c, 0xd1, 0xc5,
	0x4a, 0x6f, 0x18, 0x72, 0x6c, 0x3d, 0x00, 0x48, 0x21, 0x45, 0x3a, 0x1c, 0xd3, 0x6e, 0x6b, 0x63,
	0x67, 0xbe, 0x59, 0xca, 0x1c, 0xc4, 0x7d, 0x17, 0xf4, 0x41, 0xdd, 0x95, 0x2a, 0x3f, 0x12, 0xf9,
	0xee, 0x43, 0x08, 0x7b, 0xbf, 0x8e, 0x58, 0x8e, 0x33, 0xf5, 0x1e, 0xec, 0x44, 0x1e, 0x4d, 0x78,
	0x44, 0xf4, 0x22, 0xb5, 0xe6, 0x60, 0x23, 0xce, 0x01, 0xb4, 0x7e, 0x5d, 0xc3, 0x4a, 0x30, 0xe3,
	0x0c, 0xa8, 0x06, 0xff, 0x6c, 0xb4, 0x88, 0x21, 0xf6, 0xfc, 0x61, 0x38, 0xca, 0x71, 0x1a, 0x82,
	0xde, 0xcf, 0x83, 0xcb, 0x90, 0x47, 0x60, 0x6a, 0x0c, 0x1c, 0x8f, 0x71, 0x4b, 0xbe, 0x00, 0x52,
	0x60, 0xc1, 0x3f, 0x97, 0x87, 0x0d, 0xc0, 0xf1, 0x08, 0x72, 0x3f, 0xc0, 0x34, 0x2e, 0x9a, 0x0e,
	0x89, 0xdf, 0xd2, 0xa5, 0xc3, 0x1d, 0x06, 0x78, 0xd0, 0xa8, 0x7c, 0xe4, 0xac, 0x32, 0x72, 0xa2,
	0xca, 0x40, 0x41, 0x4f, 0x6c, 0xb8, 0xc3, 0x8c, 0x60, 0xf0, 0xd4, 0x26, 0x83, 0x1c, 0xfb, 0xfc,
	0xc1, 0x7a, 0x6e, 0x2d, 0xc2, 0xeb, 0xed, 0xc8, 0xcf, 0x59, 0x06, 0x53, 0xb5, 0x4f, 0x91, 0x04,
	0xce, 0x77, 0x71, 0x36, 0xea, 0xfb, 0xaf, 0xe2, 0xcc, 0x5a, 0x02, 0x2c, 0xf9, 0x77, 0xfd, 0x57,
	0x84, 0xf1, 0x3b, 0xb4, 0xae, 0x71, 0x63, 0x98, 0xaf, 0x27, 0x28, 0x6c, 0x1c, 0x11, 0x93, 0xef,
	0xb0, 0x4d, 0xbf, 0x54, 0xdd, 0x65, 0x50, 0xdd, 0x24, 0xa5, 0x7d, 0xc9, 0x51, 0xcf, 0x58, 0x76,
	0xdc, 0x1f, 0x39, 0x72, 0xa9, 0x2b, 0x20, 0xd5, 0x05, 0x4b, 0xa5, 0x73, 0x74, 0x99, 0x6b, 0x89,
	0xb7, 0x49, 0x82, 0x8a, 0xc2, 0x4b, 0x2c, 0xce, 0x7c, 0xab, 0xec, 0x3e, 0xa0, 0x0f, 0xab, 0x42,
	0xe7, 0xba, 0xc5, 0xa1, 0x9f, 0x65, 0x71, 0x0a, 0xcb, 0x62, 0x0d, 0x5c, 0xb7, 0x08, 0xec, 0xb2,
	0xda, 0x2d, 0x49, 0x31, 0x71, 0x68, 0x3d, 0x06, 0x85, 0xa3, 0xff, 0xf6, 0x1a, 0x97, 0x44, 0x8a,
	0x73, 0xbf, 0x58, 0x12, 0x4f, 0x18, 0x1b, 0xf9, 0x27, 0x61, 0x73, 0x35, 0x1b, 0x68, 0x8a, 0x49,
	0x66, 0x99, 0x71, 0x8d, 0xb2, 0x9e, 0xc2, 0xfd, 0x05, 0x68, 0xd4, 0x8a, 0x66, 0x4f, 0x60, 0x42,
	0xa8, 0x19, 0x7c, 0x06, 0x8c, 0x78, 0xd3, 0xa0, 0xb3, 0x9b, 0x71, 0xb0, 0x89, 0x53, 0xeb, 0x39,
	0xb4, 0x7a, 0x33, 0xd8, 0xcc, 0xd3, 0xb0, 0x71, 0x13, 0x62, 0x7c, 0xd4, 0xcf, 0x78, 0x41, 0xa7,
	0xb6, 0x60, 0x66, 0x8f, 0x05, 0x94, 0x9c, 0xd9, 0x7a, 0x31, 0xa3, 0xc4, 0x02, 0x10, 0x64, 0x17,
	0xe9, 0xea, 0x4b, 0xb8, 0x37, 0x01, 0x2b, 0xf0, 0x5c, 0xb3, 0x89, 0x91, 0xc3, 0x7a, 0xb1, 0x8b,
	0x90, 0xdd, 0x9a, 0x2c, 0x5f, 0x07, 0xde, 0xf5, 0x27, 0x2e, 0x3c, 0x17, 0x30, 0xe1, 0xe7, 0x3c,
	0x95, 0x5e, 0xc5, 0x1f, 0xc3, 0x50, 0xdf, 0x6a, 0xe4, 0xcf, 0x9d, 0x6d, 0xcb, 0xad, 0x18, 0x73,
	0x08, 0xfe, 0xaa, 0xad, 0x6d, 0x09, 0x2a, 0xf5, 0xc0, 0x60, 0x78, 0x35, 0x6c, 0x69, 0xb1, 0xfd,
	0xaa, 0xed, 0x56, 0xb6, 0x45, 0xca, 0x83, 0xf9, 0x11, 0xae, 0x92, 0xd3, 0x60, 0xf8, 0xfe, 0x16,
	0xc5, 0xd2, 0x1e, 0xd3, 0x9e, 0xbf, 0x73, 0x67, 0x9b, 0x4b, 0xba, 0x62, 0xf5, 0x61, 0x39, 0x3a,
	0xdb, 0x4e, 0xe3, 0xd6, 0x4f, 0x58, 0xc7, 0xf4, 0x73, 0x00, 0xd7, 0x56, 0xa0, 0x9f, 0x7d, 0xcd,
	0x01, 0xbe, 0x10, 0x80, 0xb7, 0x71, 0x98, 0xe4, 0xe3, 0x81, 0x87, 0x75, 0x86, 0xbd, 0x77, 0xd9,
	0xf3, 0xa2, 0x65, 0xad, 0x1c, 0xf5, 0x82, 0xf1, 0x41, 0x12, 0x5b, 0x31, 0x8b, 0x1a, 0x1b, 0x5c,
	0x2a, 0xa0, 0xf5, 0x8a, 0x7d, 0x3f, 0x2d, 0x9f, 0x8b, 0xa8, 0xb9, 0x08, 0x44, 0xcf, 0x89, 0xa2,
	0x78, 0x18, 0x15, 0x26, 0x62, 0x03, 0x86, 0xa0, 0xc7, 0x5e, 0x5b, 0xbd, 0x54, 0xb3, 0xb2, 0x73,
	0x9d, 0x1f, 0xf5, 0x01, 0x4d, 0x05, 0x0f, 0x29, 0xc4, 0xad, 0x2c, 0x60, 0x7e, 0x43, 0x92, 0x81,
	0x43, 0x77, 0xdf, 0xec, 0xb8, 0x58, 0x9c, 0x14, 0x42, 0xaa, 0x10, 0x79, 0xf1, 0x0f, 0x48, 0x11,
	0x6d, 0x76, 0xd8, 0x8c, 0x48, 0xf2, 0xa2, 0xc0, 0xb3, 0x22, 0x1a, 0x09, 0x19, 0x66, 0x44, 0x23,
	0xff, 0x88, 0x86, 0xac, 0xd5, 0xd6, 0xab, 0xcc, 0x9a, 0x40, 0xa2, 0x33, 0x1e, 0x2e, 0x5c, 0x0a,
	0x3a, 0x19, 0x31, 0x14, 0xf9, 0x49, 0xbd, 0xa8, 0xd1, 0x87, 0xde, 0xf2, 0xf3, 0x75, 0x2f, 0x75,
	0xb6, 0x22, 0x2b, 0xa1, 0x66, 0x88, 0xfe, 0x10, 0xc1, 0x3e, 0xa1, 0x56, 0xcc, 0x1d, 0x27, 0xda,
	0xc0, 0x63, 0xa1, 0xa5, 0xd7, 0xf4, 0xd3, 0x3b, 0xb4, 0x56, 0xcc, 0xb1, 0xce, 0x63, 0xcd, 0xa6,
	0xda, 0x1b, 0xee, 0x8c, 0x32, 0x1c, 0x04, 0x85, 0x4f, 0x61, 0xa5, 0xf4, 0xeb, 0xbd, 0xe1, 0x4e,
	0xf1, 0x13, 0xd4, 0xe6, 0x52, 0x6b, 0x35, 0x1e, 0xa6, 0xb1, 0x2a, 0xae, 0x97, 0xd1, 0x36, 0xe0,
	0x21, 0x5c, 0x73, 0xea, 0x7a, 0x41, 0xe5, 0xd4, 0xd7, 0x45, 0x5e, 0x4a, 0x48, 0x40, 0xc2, 0x6c,
	0x93, 0x04, 0x61, 0x14, 0x86, 0x2c, 0x3b, 0x0a, 0x84, 0xd8, 0x8e, 0x77, 0x9e, 0x68, 0x34, 0x9b,
	0x48, 0xc8, 0x0a, 0xcf, 0x04, 0xfb, 0x83, 0x28, 0xb3, 0x36, 0x21, 0x17, 0xcb, 0x30, 0x8b, 0x37,
	0x19, 0xe2, 0xbe, 0x81, 0x79, 0x98, 0xa4, 0x4e, 0x99, 0xf5, 0x9b, 0x1e, 0x0f, 0x32, 0x6b, 0x0b,
	0x92, 0xf3, 0x0c, 0xc9, 0x9f, 0xd9, 0x53, 0x23, 0x5d, 0x88, 0x6e, 0xcb, 0x49, 0x3d, 0x6b, 0x9b,
	0xb2, 0xc1, 0x3f, 0x01, 0xf9, 0xa1, 0x36, 0xca, 0x7c, 0x72, 0x9b, 0x1d, 0x78, 0x08, 0x51, 0xfc,
	0xc4, 0x6a, 0x59, 0xe9, 0x36, 0xfb, 0x61, 0xea, 0xae, 0x3b, 0x19, 0xb6, 0xbe, 0x83, 0x4d, 0x8c,
	0xe5, 0x92, 0x79, 0xa6, 0x19, 0xad, 0x6a, 0xbd, 0x52, 0x1b, 0xf2, 0x3b, 0xe5, 0xbb, 0x82, 0xe2,
	0x9f, 0x90, 0x67, 0x64, 0xc6, 0x84, 0x9d, 0xe6, 0x5d, 0xb4, 0xfe, 0x02, 0x7d, 0x86, 0x91, 0x61,
	0x97, 0xfe, 0x40, 0x44, 0x60, 0xcd, 0xc2, 0x1b, 0x66, 0x9e, 0x62, 0xc4, 0xff, 0x22, 0x6c, 0x0a,
	0xe5, 0x78, 0x1b, 0x5b, 0x10, 0x3f, 0x08, 0xac, 0x7f, 0x9e, 0x59, 0x10, 0x1f, 0x16, 0x80, 0x29,
	0x37, 0x59, 0xf4, 0x23, 0xe0, 0x2e, 0xfe, 0x41, 0xb8, 0x07, 0x1a, 0x63, 0xce, 0x16, 0xaf, 0x7c,
	0x01, 0xfd, 0x8c, 0x9a, 0xd6, 0x1d, 0x58, 0x3f, 0xae, 0x66, 0x4b, 0xa7, 0x81, 0xbd, 0x6c, 0x14,
	0x47, 0x10, 0x99, 0xcd, 0xac, 0x37, 0x14, 0x91, 0x1a, 0xc7, 0x7d, 0x31, 0x91, 0xca, 0xac, 0x89,
	0x10, 0x86, 0xb8, 0xb2, 0x7e, 0xce, 0xa4, 0x24, 0xbc, 0x94, 0x65, 0x5d, 0xfc, 0xc1, 0xc9, 0xd6,
	0xad, 0xb7, 0x50, 0x2c, 0x0c, 0x2a, 0xce, 0xfd, 0xbd, 0xdf, 0x4e, 0x5f, 0xa6, 0x58, 0xda, 0xfb,
	0x26, 0x5f, 0x77, 0xe3, 0xb0, 0x17, 0x5b, 0xdf, 0x43, 0x94, 0x92, 0xa0, 0x81, 0x4e, 0x68, 0xbb,
	0x5f, 0x1e, 0x47, 0xc9, 0xda, 0x27, 0xc9, 0x9a, 0x76, 0x69, 0xc3, 0xfd, 0x34, 0x83, 0xdb, 0xb9,
	0x65, 0x9a, 0xfd, 0xee, 0xa1, 0x3e, 0xc0, 0x55, 0xa5, 0x26, 0xa3, 0xd3, 0xf9, 0x0b, 0x2a, 0xa6,
	0xe7, 0x09, 0xf0, 0xe9, 0x75, 0xdd, 0x2d, 0x87, 0x13, 0x39, 0x9e, 0xef, 0x44, 0xf4, 0x72, 0x09,
	0xee, 0x10, 0x33, 0xeb, 0x07, 0x36, 0x22, 0x61, 0x28, 0x4a, 0x9a, 0x37, 0x91, 0xc4, 0x8e, 0x7d,
	0xc4, 0xb9, 0xfd, 0x25, 0x94, 0xac, 0x09, 0x7b, 0xbc, 0xa4, 0x0d, 0x5d, 0x88, 0x8a, 0x49, 0x22,
	0xf9, 0x83, 0x23, 0x62, 0x62, 0xa9, 0xac, 0x77, 0x80, 0x63, 0x4f, 0x89, 0x8d, 0x6b, 0xd7, 0x2c,
	0x61, 0xd9, 0x64, 0xd6, 0xef, 0x42, 0xb3, 0xf2, 0xde, 0xe4, 0x92, 0xa8, 0x5b, 0xf8, 0x7b, 0xac,
	0xc4, 0x91, 0x30, 0xe8, 0x3a, 0xd5, 0x85, 0xd7, 0x1f, 0x10, 0x89, 0xa2, 0x1a, 0xf0, 0x1e, 0xa4,
	0x78, 0x19, 0x2f, 0x65, 0xa8, 0xb9, 0x5f, 0xaa, 0xed, 0x21, 0xac, 0xf2, 0x32, 0xd5, 0x2a, 0xda,
	0xb4, 0x1f, 0x69, 0x05, 0x35, 0x3c, 0xec, 0xa7, 0xc6, 0x1a, 0x41, 0xfe, 0x45, 0x22, 0x2d, 0x42,
	0x98, 0xe2, 0x03, 0x94, 0xf4, 0xa3, 0x71, 0x0a, 0xee, 0x15, 0xc3, 0x43, 0x9d, 0xf3, 0x47, 0x5c,
	0x8d, 0xf2, 0x6e, 0x71, 0xe4, 0x26, 0xd6, 0x47, 0x2a, 0x27, 0x0f, 0xc9, 0x2e, 0x59, 0xca, 0xc1,
	0x9a, 0xe1, 0xa2, 0xae, 0x9f, 0xd8, 0x9c, 0x5f, 0x81, 0x98, 0x5a, 0x73, 0x9e, 0x69, 0x8e, 0x40,
	0xa2, 0xdd, 0xfc, 0x4b, 0x34, 0xfb, 0x8f, 0x38, 0xfd, 0xaf, 0xd1, 0x9a, 0xce, 0x76, 0xea, 0x07,
	0xfb, 0x13, 0x9d, 0xc1, 0xda, 0x50, 0x3f, 0xd3, 0x6c, 0x66, 0xfd, 0xed, 0x72, 0xff, 0xfc, 0x4c,
	0x67, 0xaa, 0xbf, 0xdd, 0xdf, 0xf2, 0x00, 0xcc, 0x9d, 0xd2, 0x77, 0x3f, 0xd7, 0x75, 0xec, 0x59,
	0x12, 0xe7, 0xd6, 0x1e, 0x7d, 0x63, 0xd3, 0xdf, 0x2e, 0xfe, 0xd5, 0x86, 0xb9, 0xd0, 0xbb, 0x9f,
	0x4a, 0x66, 0x9a, 0x28, 0xae, 0x64, 0x7e, 0xa5, 0x59, 0x0a, 0x11, 0x49, 0x8b, 0x48, 0x0a, 0x14,
	0x91, 0x19, 0x66, 0xbd, 0xf8, 0x35, 0xeb, 0x45, 0xe4, 0xf5, 0x39, 0x59, 0x33, 0xff, 0xd2, 0x61,
	0x74, 0xad, 0xba, 0xed, 0x4d, 0x77, 0x3f, 0xef, 0x7d, 0xfa, 0xe9, 0xed, 0xde, 0x4f, 0x9f, 0xde,
	0x7d, 0xf8, 0xa1, 0xbc, 0xf2, 0x15, 0x11, 0x60, 0xe4, 0xf9, 0x20, 0x39, 0x7e, 0x91, 0xc7, 0x1c,
	0xe3, 0xf7, 0xbe, 0x03, 0xa1, 0x79, 0x12, 0xf2, 0xfe, 0x30, 0x08, 0xc4, 0xdf, 0xad, 0x29, 0x3a,
	0xe7, 0xfd, 0x94, 0x2f, 0x9e, 0x15, 0xa3, 0x55, 0xbd, 0xa0, 0x30, 0xf6, 0xc8, 0x47, 0x8b, 0xff,
	0xa8, 0x09, 0x3c, 0x44, 0x05, 0x86, 0x42, 0x81, 0xc5, 0x0d, 0xc1, 0x03, 0xd5, 0x09, 0x14, 0x85,
	0x1d, 0x06, 0x61, 0xed, 0x5a, 0x17, 0xc5, 0xb5, 0x5f, 0xab, 0x41, 0x3a, 0x42, 0x05, 0x6e, 0xf3,
	0x02, 0x67, 0xfe, 0x44, 0x04, 0x11, 0xee, 0x7e, 0x78, 0xf7, 0xf1, 0xd3, 0xbb, 0xbd, 0xdf, 0xb0,
	0x1c, 0x7a, 0xc2, 0x94, 0x47, 0x3e, 0x4d, 0xe0, 0x5b, 0xc7, 0xde, 0x5d, 0x92, 0x52, 0xd1, 0xff,
	0x62, 0x83, 0x9c, 0x09, 0xdd, 0x78, 0x5c, 0x5b, 0x05, 0x22, 0x0f, 0xb3, 0x39, 0x6c, 0x3c, 0x33,
	0x4f, 0xac, 0xd9, 0x79, 0x43, 0xce, 0x3b, 0xec, 0xc5, 0xa9, 0xe7, 0x47, 0x0e, 0xad, 0x11, 0x46,
	0x39, 0x7b, 0x7c, 0x5f, 0xff, 0xf6, 0x21, 0x74, 0xab, 0xea, 0xab, 0xfb, 0xf1, 0xc3, 0xde, 0xa7,
	0x37, 0x6f, 0xf7, 0xc2, 0x9f, 0xde, 0xef, 0xbd, 0xfb, 0xd5, 0xfb, 0x77, 0xbb, 0x9f, 0x86, 0x1f,
	0xde, 0x51, 0xb0, 0x8b, 0x2d, 0xd8, 0x43, 0x76, 0xcb, 0x4c, 0x43, 0x8f, 0x49, 0xe0, 0x43, 0xea,
	0xbe, 0xda, 0x38, 0x3c, 0x17, 0xfc, 0x4d, 0x25, 0x13, 0x79, 0xad, 0x3d, 0x55, 0x95, 0xfa, 0x2a,
	0x5a, 0x97, 0xd0, 0xd7, 0x42, 0xf7, 0x4d, 0xf8, 0xd7, 0xe3, 0x61, 0x9a, 0xb1, 0x02, 0x63, 0x0b,
	0xbc, 0x80, 0x97, 0x82, 0xc7, 0xaa, 0x14, 0x90, 0xad, 0x3b, 0x29, 0x79, 0x8b, 0x51, 0xd6, 0x0e,
	0x63, 0x12, 0x66, 0xfe, 0xfe, 0x61, 0x1e, 0x98, 0xd9, 0x7f, 0xff, 0xf1, 0x2f, 0x67, 0x6f, 0x7f,
	0xb9, 0xfb, 0xfd, 0x4f, 0xef, 0x77, 0x15, 0xcb, 0xb2, 0x1f, 0xc4, 0x5b, 0xa3, 0xcc, 0x5d, 0xc7,
	0xde, 0x30, 0x90, 0x26, 0x58, 0x14, 0x51, 0x4a, 0x12, 0xf2, 0x08, 0xa7, 0xee, 0xc8, 0x75, 0x02,
	0x1c, 0x79, 0x4e, 0x4a, 0x20, 0xfe, 0xc5, 0x00, 0x8d, 0xfc, 0x08, 0x72, 0xb8, 0xc8, 0x46, 0xca,
	0x17, 0x8e, 0x32, 0x2a, 0xa1, 0xd8, 0xc9, 0x72, 0x9c, 0x46, 0xa3, 0xb8, 0xdf, 0x1f, 0x25, 0xd8,
	0xd9, 0x60, 0x63, 0xc6, 0xf7, 0xb8, 0x83, 0x85, 0x99, 0x6e, 0x12, 0x45, 0xc4, 0x1c, 0xae, 0x6a,
	0xbb, 0xb5, 0x6c, 0xd1, 0x16, 0xae, 0xb5, 0xe8, 0x88, 0x64, 0x16, 0xcd, 0x5a, 0xc4, 0x44, 0x11,
	0x31, 0x47, 0xa9, 0x98, 0x45, 0x7e, 0x2a, 0xff, 0xbd, 0x63, 0xe8, 0x52, 0x35, 0x95, 0x85, 0x66,
	0xc7, 0xbf, 0x08, 0x49, 0x26, 0x4f, 0x3a, 0x8f, 0x33, 0xc2, 0xce, 0x48, 0x14, 0x23, 0xee, 0x8f,
	0x42, 0xb2, 0x25, 0x8e, 0x97, 0x85, 0xbb, 0xa9, 0xa1, 0xed, 0x39, 0x69, 0x8a, 0x83, 0x8c, 0xbd,
	0xe4, 0xe8, 0xfd, 0xfc, 0x3d, 0xbc, 0xb3, 0x7e, 0xa8, 0x63, 0xa2, 0x89, 0x5b, 0x46, 0xee, 0xb0,
	0xe7, 0xbb, 0xa3, 0x3e, 0xc6, 0x39, 0x7b, 0xd2, 0xd1, 0x7b, 0xfb, 0x0b, 0x56, 0xe2, 0x52, 0xc7,
	0x3f, 0xcc, 0xd6, 0x8b, 0x8f, 0x1e, 0x86, 0xcb, 0xdc, 0x9f, 0xe0, 0x29, 0xba, 0x8e, 0x67, 0xe0,
	0x04, 0x41, 0x71, 0xc0, 0x82, 0x87, 0x1c, 0x83, 0x37, 0xef, 0x19, 0xdc, 0x5e, 0xc3, 0x14, 0xe2,
	0x81, 0xb3, 0xe5, 0xe4, 0x6c, 0xdd, 0xc1, 0xbb, 0x8d, 0x70, 0xeb, 0x97, 0x70, 0x34, 0xbd, 0xa3,
	0xe5, 0xcd, 0x53, 0xdf, 0x1d, 0xe5, 0xc5, 0x47, 0x01, 0x20, 0xb6, 0x27, 0x39, 0x5b, 0x8e, 0xb1,
	0xc1, 0xd8, 0xb0, 0x81, 0x3d, 0x4e, 0x6c, 0xd9, 0xd1, 0x30, 0xfc, 0x39, 0x1d, 0x5a, 0x02, 0x6f,
	0x79, 0xa6, 0x15, 0x11, 0x47, 0x9c, 0x98, 0x7c, 0x68, 0x9d, 0xa0, 0xe7, 0xba, 0x30, 0xec, 0xed,
	0xfd, 0x04, 0xa3, 0x7b, 0x43, 0xc3, 0x9e, 0xc4, 0xc3, 0xc2, 0xbd, 0x06, 0x7c, 0xcc, 0xfb, 0x9f,
	0x7f, 0x06, 0x00, 0xfe, 0x35, 0x0d, 0x0f, 0xe9, 0x25, 0x40, 0xcb, 0xf6, 0x3e, 0xc0, 0xeb, 0x09,
	0xdd, 0xe8, 0xe4, 0x69, 0xbc, 0x33, 0x22, 0x71, 0xb8, 0xcc, 0x3a, 0x49, 0xdb, 0xf7, 0xf1, 0xaf,
	0x8e, 0xf6, 0x3e, 0xb1, 0x77, 0x40, 0x3a, 0xf5, 0xcc, 0xbc, 0x38, 0x08, 0x9c, 0x34, 0x63, 0xb8,
	0x97, 0x61, 0xe6, 0xc1, 0x99, 0xff, 0xb6, 0x86, 0xad, 0x98, 0xff, 0x2d, 0x87, 0x7c, 0x10, 0x0a,
	0x34, 0x3b, 0xef, 0xff, 0x32, 0x2c, 0x9a, 0x9d, 0x62, 0xd1, 0xfc, 0xcb, 0xc7, 0xd1, 0x75, 0x1e,
	0xfe, 0xf8, 0xee, 0xed, 0xee, 0xf8, 0xca, 0x99, 0x17, 0x5c, 0x53, 0x0a, 0x1b, 0xd5, 0xaf, 0x1f,
	0x31, 0x22, 0x29, 0xe7, 0x50, 0xac, 0x22, 0xf1, 0x3e, 0x4d, 0xc1, 0xda, 0xb8, 0x96, 0x56, 0x4d,
	0x1a, 0x20, 0x5d, 0x51, 0x26, 0x4d, 0x57, 0xac, 0x2b, 0xf1, 0x7e, 0x48, 0xce, 0xaa, 0x5f, 0x5d,
	0x4f, 0x0c, 0x46, 0x5a, 0xb9, 0xc6, 0x44, 0x87, 0x50, 0xc1, 0x6c, 0xb2, 0xd2, 0x5c, 0x03, 0x41,
	0x8d, 0xeb, 0x4d, 0xbc, 0x00, 0x96, 0x0b, 0x91, 0xaf, 0x3a, 0x11, 0xa5, 0x24, 0xe7, 0x94, 0xac,
	0xbd, 0x17, 0x06, 0x63, 0xa7, 0x5d, 0x81, 0xe2, 0x35, 0xb0, 0x42, 0xcd, 0x55, 0xeb, 0x50, 0x0c,
	0x77, 0xc8, 0x99, 0x1b, 0x57, 0xe3, 0x3f, 0x39, 0x84, 0xce, 0x56, 0xab, 0x31, 0x7f, 0xf7, 0xe3,
	0x6e, 0xe9, 0xa0, 0x89, 0x9e, 0x29, 0x01, 0x6b, 0x49, 0x3c, 0x32, 0x11, 0x87, 0x5b, 0x51, 0x79,
	0x4e, 0x09, 0x47, 0xf6, 0x58, 0x39, 0x3f, 0x29, 0x61, 0xa1, 0x95, 0x0c, 0x8b, 0xbc, 0xce, 0xaa,
	0x22, 0x4b, 0x29, 0x43, 0x3f, 0x1a, 0x56, 0x99, 0xfc, 0xc2, 0x77, 0x1f, 0x58, 0xb1, 0x28, 0x39,
	0x35, 0x71, 0x6d, 0x00, 0xb1, 0x19, 0x7e, 0x04, 0x5a, 0xb9, 0x64, 0xfa, 0xea, 0x9e, 0xc1, 0x91,
	0x33, 0xf6, 0x36, 0x55, 0x4a, 0xbb, 0x85, 0xf1, 0x06, 0xab, 0x8b, 0xb7, 0xf5, 0x7b, 0x5a, 0x52,
	0x92, 0xd0, 0x0c, 0xde, 0x04, 0xee, 0x90, 0x19, 0x9f, 0xf9, 0xbf, 0xa6, 0x78, 0x97, 0x01, 0xff,
	0x95, 0xdd, 0x4f, 0x6f, 0xdf, 0x7d, 0xde, 0xcd, 0xf6, 0x7e, 0x03, 0x35, 0x0b, 0xef, 0x0b, 0x9a,
	0x58, 0x56, 0xd6, 0xce, 0xf2, 0x9d, 0xb1, 0xe2, 0x85, 0xab, 0xc2, 0x46, 0x5c, 0x23, 0x75, 0x42,
	0x9c, 0xfa, 0x2e, 0x29, 0x23, 0x5b, 0xba, 0x3f, 0xc5, 0xf9, 0x78, 0x91, 0xd6, 0xc1, 0xb8, 0xa1,
	0xe6, 0xec, 0xe1, 0x34, 0x1c, 0x7a, 0x0e, 0xf3, 0xe4, 0xba, 0x3c, 0xa3, 0xf6, 0x93, 0x78, 0x98,
	0xc6, 0x09, 0x76, 0x22, 0xde, 0xeb, 0x65, 0x9c, 0x33, 0x7f, 0x3c, 0x85, 0x2e, 0xf3, 0x47, 0xa0,
	0xbd, 0xbd, 0xf7, 0xbb, 0x3f, 0xee, 0x7e, 0xd8, 0x2b, 0x7d, 0xde, 0x99, 0x5a, 0x14, 0xa1, 0x2c,
	0x13, 0x27, 0xcf, 0x28, 0xae, 0xa1, 0xcd, 0x93, 0x60, 0x98, 0x2d, 0xf0, 0x65, 0x1b, 0x8f, 0x9b,
	0x70, 0xd8, 0xe2, 0x33, 0x77, 0x03, 0x8e, 0x45, 0x86, 0x8a, 0x27, 0xcf, 0xe9, 0x67, 0xfe, 0xf5,
	0x29, 0x7e, 0x29, 0xb9, 0x6f, 0x3e, 0xff, 0x92, 0x4f, 0x94, 0xce, 0x9f, 0x1a, 0x9c, 0x6c, 0x5d,
	0xd6, 0xad, 0x07, 0x82, 0x1a, 0x55, 0x54, 0x9e, 0xdf, 0xef, 0x5b, 0x53, 0x0c, 0x6e, 0xd5, 0xef,
	0xb3, 0x2c, 0xee, 0x52, 0x62, 0x92, 0xe2, 0xdb, 0x3a, 0x44, 0x2d, 0x0d, 0xf9, 0x07, 0x69, 0xdc,
	0xbf, 0x35, 0x85, 0xce, 0x73, 0xa7, 0x8e, 0xed, 0xf4, 0xcd, 0xde, 0xae, 0xfb, 0xe6, 0xfd, 0x5b,
	0xd2, 0xbc, 0xbb, 0xc2, 0x49, 0xb1, 0xbf, 0x4d, 0x23, 0x2c, 0xae, 0x13, 0xb8, 0xb5, 0x16, 0x8a,
	0x18, 0x79, 0x81, 0xd0, 0xf3, 0x37, 0x7d, 0x0f, 0x8b, 0x4b, 0xfe, 0x91, 0xd0, 0x6d, 0x81, 0x1c,
	0x0e, 0x4c, 0xe5, 0x2b, 0x04, 0x92, 0x68, 0x6a, 0xe6, 0x7f, 0x39, 0x85, 0xbe, 0xda, 0x79, 0xb7,
	0xfb, 0xfe, 0xfb, 0x72, 0xe4, 0x2e, 0xa2, 0xb3, 0x90, 0x4a, 0x41, 0xa6, 0x06, 0x17, 0xb9, 0xbf,
	0x39, 0xfd, 0x1c, 0xd3, 0xba, 0xa7, 0x34, 0x67, 0x27, 0x55, 0xfc, 0x13, 0xe4, 0xe7, 0x1c, 0x32,
	0x23, 0x3e, 0x40, 0xe7, 0x78, 0x8e, 0x28, 0x1a, 0x3a, 0x01, 0x90, 0x1f, 0xa2, 0x37, 0x41, 0xf4,
	0x37, 0x78, 0x61, 0x70, 0x86, 0x23, 0xee, 0xc5, 0xf1, 0x06, 0x90, 0x1e, 0xa6, 0x53, 0x51, 0xfc,
	0x02, 0x52, 0xcf, 0x73, 0x84, 0x2c, 0x19, 0x06, 0xcb, 0x1c, 0x4a, 0x26, 0x82, 0xbc, 0x5e, 0x05,
	0xd8, 0xcc, 0x8c, 0x8a, 0x78, 0x14, 0xc6, 0xe4, 0x91, 0x26, 0x49, 0x12, 0x49, 0xcd, 0xd7, 0x51,
	0x7a, 0xe5, 0x11, 0x38, 0x59, 0x4e, 0x7e, 0x20, 0x22, 0x30, 0x9a, 0x35, 0x12, 0xf1, 0x7a, 0xe8,
	0xa4, 0x39, 0x79, 0x9f, 0x4f, 0x2a, 0x19, 0x14, 0x42, 0xe0, 0x27, 0xb8, 0xcc, 0xbe, 0x6f, 0x24,
	0x06, 0xac, 0x18, 0x4d, 0x7d, 0xe6, 0x64, 0x79, 0xf1, 0x6f, 0xc0, 0x18, 0x5e, 0xe0, 0x05, 0xc4,
	0x21, 0xd9, 0x5c, 0x47, 0x2c, 0x1f, 0x3d, 0x4d, 0xe4, 0x06, 0xbf, 0xc2, 0x13, 0x0b, 0x61, 0xa0,
	0x08, 0x3c, 0x8f, 0xa5, 0x58, 0xfd, 0x82, 0xde, 0x0e, 0xc1, 0x8f, 0x70, 0x1b, 0x7a, 0x9d, 0x23,
	0x1f, 0x6c, 0x46, 0xf4, 0xdd, 0xc8, 0x66, 0x71, 0x90, 0x65, 0x6c, 0x88, 0x0e, 0xd0, 0x20, 0xde,
	0xcc, 0xc9, 0xdf, 0x60, 0x8c, 0x6f, 0x73, 0x8c, 0x7e, 0xb4, 0x89, 0xd3, 0x0c, 0xe2, 0x87, 0x38,
	0xa5, 0x80, 0x1b, 0x96, 0x86, 0xfe, 0xec, 0xef, 0xff, 0x76, 0xfa, 0x14, 0x50, 0x00, 0x01, 0x64,
	0xb7, 0xbc, 0xc6, 0x89, 0x20, 0xe9, 0x01, 0x49, 0x32, 0x0f, 0xf2, 0xa6, 0x98, 0x32, 0x7f, 0x09,
	0x80, 0x28, 0x27, 0xdd, 0x00, 0x4c, 0xd7, 0x2d, 0x9e, 0x85, 0x1b, 0x41, 0x51, 0x25, 0xbe, 0xaa,
	0xe6, 0xb4, 0x52, 0x8b, 0x2e, 0xba, 0xc2, 0x31, 0xc7, 0x09, 0x8e, 0xca, 0xe4, 0x49, 0x94, 0xeb,
	0x14, 0x1d, 0x9f, 0xe2, 0x2f, 0xce, 0xe6, 0x00, 0x30, 0x2b, 0x7c, 0x1b, 0x93, 0x14, 0x6f, 0xfa,
	0xf1, 0x30, 0xa3, 0x2f, 0xa5, 0x81, 0xeb, 0x6b, 0x96, 0xb9, 0x0c, 0x6f, 0x56, 0xdf, 0x12, 0xe7,
	0x2d, 0x49, 0x63, 0x17, 0x63, 0x2f, 0x03, 0x0e, 0x0b, 0xf2, 0x1e, 0xc2, 0xaf, 0x80, 0x11, 0xb8,
	0xcc, 0x31, 0x64, 0x38, 0xf4, 0xc5, 0xb5, 0xf3, 0x0d, 0x4d, 0xa6, 0x55, 0xfc, 0x81, 0x5b, 0x3f,
	0xe2, 0x62, 0xcb, 0xfc, 0x30, 0x09, 0x58, 0xb3, 0x3a, 0x80, 0xea, 0x20, 0xbf, 0x01, 0x68, 0x88,
	0xef, 0x0b, 0x81, 0x42, 0xd4, 0xa7, 0xfa, 0x34, 0xd4, 0xca, 0x70, 0xb6, 0xab, 0x99, 0x9e, 0x43,
	0x97, 0x78, 0xb6, 0x74, 0x88, 0x47, 0x83, 0x34, 0xce, 0x58, 0x67, 0xbe, 0xa5, 0xab, 0x8f, 0xfc,
	0x24, 0x59, 0xd3, 0x84, 0x9e, 0x52, 0x9e, 0x61, 0xb0, 0x08, 0xc8, 0x9a, 0x3b, 0x27, 0x8c, 0x11,
	0xfd, 0x4f, 0x27, 0xa7, 0x4f, 0x6d, 0xad, 0xb3, 0x00, 0xad, 0xce, 0xab, 0x2c, 0xbb, 0x2b, 0x68,
	0x7a, 0x8c, 0x9e, 0x3d, 0x9b, 0xf4, 0x23, 0x17, 0xc3, 0xfb, 0xf5, 0x73, 0x90, 0xe9, 0x91, 0xfc,
	0x05, 0xd0, 0x30, 0xb7, 0xc6, 0x18, 0xf3, 0x78, 0x3c, 0x5f, 0xe7, 0x79, 0xba, 0x88, 0x9d, 0xcd,
	0x01, 0x97, 0x13, 0xb0, 0x50, 0xf5, 0x7b, 0x32, 0xf6, 0x20, 0x8e, 0x06, 0x38, 0xcb, 0x85, 0xa4,
	0xa3, 0xd6, 0x05, 0xb0, 0x03, 0x71, 0x34, 0x70, 0x36, 0x07, 0xc5, 0x4f, 0xa0, 0x7a, 0x97, 0x65,
	0x22, 0xca, 0x2f, 0x5f, 0x1c, 0x4b, 0x45, 0x48, 0xe0, 0xc5, 0x32, 0x9e, 0x08, 0x6f, 0xe7, 0x04,
	0x2f, 0x67, 0x5d, 0x02, 0x78, 0xb1, 0x13, 0x04, 0xb0, 0xf4, 0x2f, 0x2b, 0x19, 0x92, 0x61, 0x6e,
	0x5d, 0x06, 0xd4, 0xda, 0x90, 0x2d, 0xfd, 0x6b, 0x4a, 0xf2, 0x14, 0x93, 0x07, 0x11, 0x57, 0xa8,
	0xd2, 0x15, 0x3f, 0xd1, 0x5f, 0x00, 0x45, 0x76, 0x5f, 0xc6, 0x48, 0x00, 0x55, 0x63, 0x03, 0x72,
	0x95, 0x84, 0xce, 0xbf, 0x24, 0x7f, 0xe4, 0x47, 0xc4, 0x96, 0x7f, 0x9d, 0x02, 0x40, 0x69, 0x9a,
	0xe5, 0x6b, 0x90, 0x37, 0x96, 0xfc, 0x04, 0x6f, 0xb1, 0x2e, 0xc8, 0x98, 0xb6, 0xe2, 0x34, 0xcb,
	0xad, 0xeb, 0x90, 0xff, 0xad, 0xf8, 0x87, 0x64, 0x1b, 0xa0, 0xff, 0x49, 0x9e, 0x82, 0x57, 0xc8,
	0x17, 0x27, 0xcb, 0x86, 0x90, 0xad, 0xee, 0x06, 0xe4, 0xab, 0x64, 0x7f, 0x83, 0x25, 0x73, 0x75,
	0x4c, 0xc4, 0xa6, 0x13, 0x0c, 0xf1, 0x28, 0xee, 0xdb, 0xdd, 0xe2, 0x94, 0x73, 0x93, 0xb2, 0x91,
	0x1f, 0x17, 0x46, 0xb4, 0x3c, 0xed, 0xcc, 0xff, 0xf6, 0x05, 0xba, 0x4c, 0xf6, 0xd8, 0x74, 0xf7,
	0xfb, 0xdd, 0x1f, 0x7f, 0xb5, 0xf7, 0xee, 0xe3, 0x07, 0xb1, 0xaa, 0xcb, 0x03, 0x74, 0x17, 0x32,
	0xd1, 0x95, 0xc9, 0xf1, 0xd4, 0xc5, 0x5d, 0x56, 0x98, 0xfe, 0xc9, 0x89, 0xd5, 0x35, 0x5e, 0x96,
	0xd0, 0x1d, 0x1d, 0xa3, 0xaa, 0xd4, 0x8b, 0xcd, 0x96, 0x8b, 0x92, 0x4d, 0x52, 0xf1, 0xa5, 0x81,
	0x49, 0x5e, 0xf8, 0xa5, 0xcb, 0x56, 0xb4, 0xe2, 0x4b, 0xb2, 0xfa, 0x2f, 0x0b, 0xe8, 0xa6, 0x8e,
	0x47, 0x56, 0x06, 0xa6, 0xa1, 0x6d, 0xf2, 0x6a, 0x30, 0xcd, 0x4c, 0x92, 0xa2, 0x30, 0x18, 0x2d,
	0x35, 0x4f, 0x55, 0x73, 0x6d, 0x98, 0x75, 0xb4, 0xaa, 0x13, 0xd3, 0xa2, 0x44, 0xcc, 0x3c, 0xba,
	0xa1, 0x93, 0x24, 0xa9, 0x14, 0xf3, 0x0a, 0xd9, 0xfa, 0x39, 0x69, 0x51, 0x30, 0x66, 0x03, 0x2d,
	0xb6, 0x92, 0xa5, 0xad, 0x1b, 0xe3, 0xa3, 0x6e, 0x2b, 0x61, 0x9a, 0xf2, 0x31, 0x43, 0xf4, 0xbc,
	0x95, 0x28, 0xc3, 0x2a, 0x32, 0x11, 0x5a, 0x69, 0x25, 0xb6, 0xa9, 0x98, 0x4c, 0x82, 0xd6, 0x5a,
	0xcb, 0xd3, 0xd7, 0x94, 0x49, 0xd1, 0x93, 0x56, 0x12, 0x4d, 0x4a, 0xcb, 0xfc, 0xc7, 0xf7, 0xf9,
	0x33, 0x59, 0xb6, 0xf7, 0xee, 0x57, 0x8a, 0x33, 0x59, 0x96, 0xfb, 0xd2, 0xdc, 0x6a, 0x35, 0xc4,
	0x67, 0x49, 0x65, 0x5c, 0xe3, 0xa0, 0xf6, 0xe6, 0xaa, 0x14, 0xd0, 0xa2, 0xce, 0x41, 0x0d, 0x29,
	0xac, 0x15, 0x21, 0xab, 0x75, 0xa0, 0xea, 0x83, 0x71, 0xbd, 0x83, 0x58, 0x7c, 0xde, 0x5f, 0x0a,
	0x98, 0xb8, 0xe6, 0x41, 0x57, 0x31, 0xf6, 0xba, 0xba, 0x07, 0x5d, 0xf1, 0xd5, 0x62, 0xc9, 0xa3,
	0xab, 0x7d, 0xb0, 0x24, 0x1e, 0xe2, 0x4b, 0x9e, 0x86, 0xfa, 0x07, 0xcf, 0x44, 0x60, 0x44, 0xc9,
	0x66, 0x58, 0x03, 0x41, 0xc9, 0x6e, 0x56, 0x07, 0x61, 0x4d, 0x44, 0x62, 0x96, 0xec, 0x06, 0xb5,
	0x10, 0x6a, 0x2f, 0x43, 0x4a, 0xd6, 0x76, 0xf5, 0x10, 0x36, 0x11, 0x6e, 0x92, 0x32, 0x51, 0x4d,
	0x84, 0xda, 0xc3, 0x6d, 0x99, 0xdc, 0x16, 0x75, 0x11, 0x6a, 0xc0, 0xe5, 0x4a, 0x9a, 0xb6, 0x36,
	0x82, 0xad, 0xe5, 0x52, 0xd4, 0x47, 0xa8, 0xbd, 0x2a, 0x90, 0x30, 0x29, 0x6a, 0x24, 0x88, 0x37,
	0x2c, 0x32, 0x46, 0x69, 0x9d, 0x84, 0x65, 0x15, 0x5b, 0x43, 0xad, 0x04, 0x95, 0xa1, 0x30, 0xad,
	0x97, 0xb0, 0x22, 0x22, 0x06, 0x4a, 0xfe, 0xc6, 0x9a, 0x09, 0x2a, 0x8d, 0x37, 0xac, 0x9b, 0xd0,
	0x13, 0x9f, 0x12, 0xa9, 0xd9, 0x35, 0xb5, 0x13, 0x5e, 0x2a, 0x8c, 0x9c, 0x79, 0xfd, 0x84, 0x17,
	0xa6, 0x12, 0x54, 0x35, 0x14, 0x54, 0xa3, 0x60, 0x58, 0x47, 0xe1, 0x99, 0x42, 0xcb, 0x0c, 0x6b,
	0x29, 0xac, 0x29, 0x26, 0xcf, 0xa0, 0x9e, 0x42, 0xed, 0x11, 0x20, 0xc7, 0x6a, 0x50, 0x53, 0xa1,
	0x96, 0x66, 0xa5, 0x62, 0x36, 0xaf, 0xab, 0xb0, 0xa6, 0xd0, 0x77, 0x83, 0xda, 0x0a, 0x2a, 0x0b,
	0xdf, 0x50, 0x5f, 0x61, 0x4d, 0xc5, 0xd6, 0x5c, 0x63, 0x41, 0x35, 0xcb, 0x86, 0x75, 0x16, 0x54,
	0x66, 0x4b, 0x5f, 0x6b, 0x61, 0x41, 0x48, 0xf4, 0xc1, 0x6d, 0x7e, 0xea, 0x7a, 0x0b, 0x4f, 0x15,
	0xea, 0x64, 0x56, 0x73, 0xe1, 0x91, 0x08, 0x38, 0x12, 0x77, 0x5b, 0x59, 0xdd, 0x85, 0xa7, 0x8a,
	0x5d, 0xcb, 0xac, 0xf6, 0xc2, 0xaa, 0x62, 0x54, 0x9a, 0xeb, 0x2f, 0x2c, 0x2b, 0x38, 0x9b, 0x6a,
	0x30, 0xa8, 0x96, 0x8b, 0x41, 0x1d, 0x86, 0x17, 0x22, 0x6a, 0x9d, 0x63, 0x35, 0xac, 0xc5, 0xf0,
	0x5c, 0x04, 0x39, 0x57, 0x02, 0x0c, 0xeb, 0x31, 0x3c, 0x51, 0x4c, 0xad, 0x51, 0x4d, 0x06, 0x95,
	0x7b, 0x61, 0x50, 0x97, 0x41, 0xf5, 0x5d, 0xa3, 0xda, 0x0c, 0xb6, 0xc2, 0xe7, 0xd3, 0xd6, 0x67,
	0x50, 0xd9, 0x44, 0xc3, 0x1a, 0x0d, 0xaa, 0x65, 0xa3, 0xa9, 0xd3, 0xf0, 0x52, 0xb1, 0xbc, 0xcd,
	0x6b, 0x35, 0xac, 0x28, 0x1c, 0xd5, 0xc6, 0x7a, 0x0d, 0x01, 0x5a, 0x91, 0x6f, 0xdf, 0x13, 0xd5,
	0x6c, 0xe8, 0x0a, 0x77, 0x35, 0x9c, 0x34, 0x4d, 0xdd, 0x86, 0x9e, 0xa2, 0xf3, 0x6d, 0x6a, 0x37,
	0x3c, 0x53, 0x6c, 0x26, 0x86, 0xf5, 0x1b, 0x5e, 0x28, 0xd8, 0x8d, 0x6b, 0x38, 0x3c, 0x55, 0x08,
	0x30, 0xab, 0xe3, 0xa0, 0x3a, 0x65, 0xe8, 0x6a, 0x39, 0xa8, 0x34, 0x5b, 0x5b, 0xcf, 0xe1, 0x7b,
	0x34, 0x90, 0xef, 0xf6, 0x07, 0x5a, 0xd3, 0xc1, 0x51, 0xf9, 0x14, 0xe6, 0x75, 0x1d, 0x9a, 0x44,
	0x18, 0xd4, 0x76, 0x70, 0x15, 0x36, 0xba, 0x55, 0x7d, 0x87, 0x5c, 0xe1, 0x24, 0xee, 0xaf, 0xc6,
	0xc3, 0x0b, 0x45, 0xd3, 0x8c, 0xeb, 0x3c, 0xe4, 0x22, 0x7c, 0x9d, 0xdb, 0x99, 0xf7, 0x53, 0xeb,
	0xc1, 0x53, 0xed, 0x10, 0xad, 0xea, 0x3d, 0x60, 0xc5, 0x52, 0x68, 0x59, 0xf3, 0x61, 0x24, 0xbe,
	0xd8, 0x2c, 0xc5, 0x1c, 0x58, 0xdd, 0x87, 0xb7, 0xc8, 0xd5, 0x7c, 0xe0, 0x80, 0x6a, 0x3f, 0xbc,
	0x52, 0x1c, 0x8e, 0x26, 0xa9, 0xff, 0xf0, 0x4c, 0x73, 0xae, 0x33, 0xa8, 0x01, 0xb1, 0x89, 0x1e,
	0xab, 0x76, 0xb5, 0x7d, 0xd5, 0x81, 0xd0, 0xc8, 0xdd, 0x57, 0x2d, 0x88, 0x2d, 0x85, 0xdc, 0x7d,
	0xd7, 0x83, 0x18, 0x0a, 0x48, 0x7b, 0xce, 0xd8, 0xef, 0xaf, 0x26, 0x84, 0xca, 0xde, 0xb4, 0xaa,
	0x0b, 0xe1, 0x35, 0x6d, 0x44, 0x46, 0xb5, 0x21, 0x9e, 0x2b, 0xac, 0xa7, 0x69, 0x7d, 0x88, 0xff,
	0xef, 0x04, 0x3a, 0x1f, 0xed, 0x7e, 0xde, 0xdb, 0xfd, 0xbe, 0x9b, 0xbc, 0xf9, 0x54, 0x4b, 0xe0,
	0x7b, 0x07, 0xdd, 0x8c, 0x70, 0x96, 0x63, 0xaf, 0x9b, 0x38, 0xa9, 0x26, 0x73, 0xef, 0x4b, 0xb4,
	0xa0, 0xa0, 0x73, 0x86, 0x59, 0x9e, 0x3a, 0x81, 0x5f, 0x58, 0x93, 0x61, 0xe6, 0x47, 0x38, 0xcb,
	0x58, 0x9a, 0xdc, 0x29, 0x3e, 0xdb, 0xa1, 0x91, 0x84, 0xdc, 0xd9, 0x1e, 0xf5, 0xfd, 0x80, 0x45,
	0xaa, 0xd8, 0xc5, 0x0d, 0x3d, 0x5d, 0xdf, 0x47, 0x17, 0x15, 0x12, 0x7a, 0xbe, 0xcb, 0xae, 0x6b,
	0x7a, 0x10, 0x00, 0x9b, 0x51, 0x90, 0xba, 0xeb, 0x45, 0x13, 0xe9, 0x95, 0x7e, 0x46, 0x52, 0x12,
	0x79, 0xec, 0xd2, 0x66, 0x09, 0xd2, 0x31, 0xdc, 0x57, 0xb0, 0xb2, 0x7c, 0x38, 0xdc, 0xea, 0x3c,
	0xca, 0xa7, 0x7a, 0x5d, 0x46, 0x77, 0x15, 0x9c, 0xaa, 0x54, 0xbe, 0xb8, 0xe1, 0x8b, 0x1b, 0x71,
	0x8a, 0x9d, 0x48, 0x68, 0xeb, 0x71, 0x3e, 0x3f, 0x67, 0x0f, 0xd9, 0x0a, 0xce, 0xd0, 0x09, 0x9c,
	0x9d, 0xac, 0x18, 0x52, 0x17, 0x47, 0xc5, 0xe8, 0x72, 0x8f, 0x0e, 0xd9, 0x9d, 0xce, 0x22, 0xbb,
	0x70, 0x52, 0xc8, 0x10, 0x4b, 0x24, 0x70, 0x79, 0x66, 0xd5, 0x53, 0xc9, 0x81, 0x9c, 0x30, 0x35,
	0x86, 0x65, 0x22, 0x04, 0x21, 0x7b, 0xaf, 0x8b, 0x16, 0x15, 0x12, 0x72, 0xc7, 0xdf, 0x72, 0xc8,
	0x0c, 0xb1, 0x34, 0x82, 0x7c, 0xef, 0x4f, 0xf2, 0x09, 0x47, 0x9f, 0xa2, 0x87, 0x8d, 0x42, 0xa0,
	0x3e, 0xc3, 0xc8, 0x71, 0xdd, 0x9c, 0x25, 0xf3, 0xa5, 0x19, 0x48, 0x43, 0xf4, 0x5c, 0xa5, 0xf9,
	0x1b, 0xa3, 0xf2, 0xb5, 0x2f, 0x39, 0x0e, 0xd3, 0xec, 0xfc, 0xe9, 0x28, 0xc1, 0x11, 0x29, 0xe5,
	0x01, 0xca, 0xf9, 0x15, 0x7f, 0x09, 0xa7, 0x9e, 0x8a, 0x61, 0x36, 0xc2, 0x61, 0x12, 0xc4, 0x3b,
	0x38, 0x2d, 0x84, 0x14, 0x2a, 0xee, 0x7b, 0x4c, 0xc6, 0x29, 0xfe, 0x7a, 0xed, 0x05, 0x9a, 0x57,
	0xcb, 0x20, 0xb9, 0x97, 0x83, 0xca, 0x93, 0x07, 0x01, 0x5f, 0xf3, 0x97, 0x7a, 0x8b, 0xe8, 0xb6,
	0x4a, 0xed, 0x33, 0xaf, 0xcc, 0xf6, 0x15, 0xe5, 0x2c, 0xfb, 0xef, 0x3a, 0x38, 0xac, 0xd3, 0x4a,
	0xbd, 0xf5, 0x73, 0xd7, 0x71, 0xd3, 0x38, 0xda, 0x09, 0x59, 0xd2, 0x5f, 0x1f, 0xf0, 0x8a, 0xaa,
	0xb5, 0x18, 0xfa, 0x2e, 0xcb, 0xec, 0x4b, 0x0e, 0x33, 0x33, 0x7f, 0xeb, 0x0e, 0xfa, 0x96, 0xb7,
	0x3f, 0xe9, 0x47, 0x00, 0x2a, 0xde, 0x40, 0x57, 0x04, 0x19, 0x69, 0x1c, 0x48, 0xea, 0xf0, 0x8f,
	0x93, 0x80, 0xbb, 0x56, 0xa5, 0x71, 0x9a, 0xe2, 0xb5, 0x62, 0x0e, 0x5d, 0x1b, 0x67, 0x29, 0xf3,
	0x17, 0xf7, 0xfd, 0x34, 0xe4, 0x51, 0x7a, 0x24, 0x13, 0xad, 0x8c, 0xde, 0x2f, 0x74, 0xd8, 0xf7,
	0xc4, 0xac, 0xb5, 0xcb, 0xe8, 0x8e, 0x84, 0x96, 0xbc, 0xe0, 0xa9, 0x7d, 0x02, 0x40, 0xa3, 0x0b,
	0x2c, 0x31, 0xec, 0x15, 0x25, 0x1f, 0x21, 0x87, 0xf4, 0x9e, 0x0b, 0x2b, 0x10, 0x05, 0x7c, 0x28,
	0x23, 0x4f, 0x53, 0x9c, 0x25, 0xc5, 0x96, 0x4e, 0xf0, 0x40, 0xfc, 0xd7, 0x00, 0x4b, 0xba, 0xb0,
	0xa4, 0x1e, 0x01, 0x5c, 0xb8, 0x34, 0x25, 0x83, 0x70, 0x15, 0xfc, 0x08, 0x5d, 0x97, 0xd0, 0xd3,
	0x4a, 0x3c, 0x8c, 0xe1, 0x04, 0x6f, 0x76, 0xba, 0xb2, 0x59, 0xa9, 0x18, 0xb2, 0x9d, 0x2c, 0xc7,
	0x61, 0x79, 0xe7, 0xbb, 0x6c, 0xc2, 0x43, 0xb7, 0xd0, 0xf2, 0x76, 0xb7, 0xcb, 0xf2, 0x59, 0x8f,
	0xf3, 0xf4, 0x87, 0x91, 0x37, 0x0a, 0x9d, 0xc8, 0x19, 0x14, 0xfb, 0x70, 0x39, 0x4f, 0x27, 0xf9,
	0xbd, 0x46, 0x3a, 0x4f, 0x03, 0x7f, 0x13, 0x0f, 0x93, 0xda, 0xc8, 0xb1, 0x64, 0xb8, 0x72, 0x5b,
	0x48, 0xf8, 0xfc, 0x28, 0x27, 0x41, 0xf3, 0x92, 0x47, 0x58, 0xf7, 0xb3, 0xb2, 0xa9, 0xe5, 0x4d,
	0xd6, 0x29, 0x7e, 0x73, 0xb9, 0x8b, 0xce, 0x8f, 0x53, 0x13, 0x13, 0x89, 0xd9, 0x4a, 0x5e, 0x65,
	0x39, 0x97, 0xc6, 0x09, 0xa9, 0x9f, 0x19, 0xa7, 0xfe, 0x00, 0x22, 0x3b, 0xb4, 0x3d, 0x16, 0x97,
	0xa2, 0xf7, 0x58, 0xe7, 0x71, 0x6d, 0xeb, 0x53, 0x70, 0xc2, 0x80, 0x7f, 0x23, 0xa4, 0x0d, 0x5e,
	0xaa, 0xd9, 0x0f, 0xc2, 0xcb, 0xd9, 0xf4, 0xd2, 0x98, 0x77, 0x84, 0xdc, 0xc4, 0x0b, 0xe8, 0x86,
	0x84, 0x2d, 0x89, 0xa3, 0x2c, 0xae, 0x46, 0xfa, 0x34, 0xb0, 0xac, 0xa9, 0xfb, 0x37, 0xf6, 0x2c,
	0x8e, 0x72, 0x7e, 0x4b, 0x39, 0xbb, 0xf3, 0x30, 0x84, 0xe7, 0xc6, 0x39, 0x9d, 0x41, 0xe1, 0x6e,
	0x43, 0x36, 0x4d, 0x7b, 0x1e, 0xe0, 0xad, 0x92, 0x99, 0xe9, 0xe1, 0x08, 0xf7, 0x7d, 0xd7, 0x2f,
	0xf6, 0xb4, 0xb3, 0x40, 0xde, 0x65, 0xe5, 0x8b, 0x24, 0xe4, 0xc3, 0x1d, 0x9c, 0xb2, 0xfa, 0x0f,
	0xdd, 0x15, 0x56, 0xcc, 0x45, 0x63, 0x60, 0xe2, 0x74, 0xe0, 0x44, 0xfe, 0x77, 0x74, 0x98, 0xce,
	0x03, 0xe3, 0x02, 0xc4, 0x6d, 0x6f, 0x29, 0xad, 0x00, 0xaf, 0x31, 0x17, 0xa0, 0x5d, 0x6b, 0xec,
	0x39, 0x8f, 0x92, 0x0b, 0x26, 0x11, 0x52, 0x65, 0xda, 0x2b, 0xac, 0xae, 0x85, 0xce, 0x7a, 0x14,
	0xf3, 0x48, 0x2d, 0xa8, 0x75, 0x09, 0x9a, 0xb7, 0x0c, 0x69, 0x30, 0x96, 0x9a, 0xf8, 0xe4, 0xbd,
	0xbc, 0x0c, 0x62, 0x96, 0x58, 0xf5, 0x26, 0x89, 0x98, 0x61, 0x96, 0xc7, 0x9e, 0x4f, 0x72, 0x65,
	0x52, 0xe2, 0x55, 0xf6, 0x7a, 0x4c, 0x41, 0x1c, 0xe2, 0xb4, 0xd8, 0xb4, 0x49, 0x90, 0x05, 0xd2,
	0x64, 0x76, 0x17, 0x59, 0x25, 0x0b, 0x8d, 0x79, 0x83, 0x21, 0xb9, 0x06, 0x43, 0xb2, 0xcc, 0x00,
	0xfe, 0x32, 0xe3, 0x43, 0x31, 0x74, 0xd6, 0x75, 0x10, 0xdf, 0x55, 0x37, 0x89, 0x1d, 0xc5, 0xb1,
	0x47, 0x92, 0x66, 0xee, 0x58, 0x37, 0x40, 0xbe, 0x0d, 0x25, 0x41, 0xae, 0x2a, 0x78, 0x48, 0x89,
	0x9e, 0x74, 0xc7, 0xba, 0x09, 0xdf, 0x58, 0x53, 0x6b, 0x42, 0xf5, 0x54, 0x9e, 0x24, 0x50, 0x28,
	0x7a, 0x31, 0x0d, 0x5f, 0x59, 0x52, 0xb7, 0x8c, 0x38, 0x75, 0x04, 0xeb, 0x05, 0x83, 0x05, 0x19,
	0x2e, 0xed, 0x55, 0xf5, 0x60, 0xa5, 0x78, 0x30, 0x0c, 0x68, 0x46, 0xc2, 0x5e, 0xec, 0xed, 0x58,
	0xb7, 0x81, 0x65, 0x51, 0xad, 0x70, 0xd9, 0xb0, 0xc7, 0x4d, 0xe2, 0x1d, 0x60, 0x58, 0x50, 0xb7,
	0x8b, 0x94, 0x6b, 0x29, 0x4e, 0x5b, 0x79, 0x4c, 0x57, 0xf1, 0x5d, 0xca, 0xb3, 0x38, 0x0f, 0x71,
	0xe0, 0x5b, 0x7a, 0x4b, 0x0b, 0x2a, 0x7a, 0x8f, 0x42, 0x32, 0x96, 0xe7, 0x01, 0x92, 0x71, 0x04,
	0x9e, 0x16, 0x2b, 0x97, 0x44, 0x39, 0xab, 0xf7, 0x29, 0xe7, 0x62, 0x17, 0x38, 0x8f, 0xd2, 0xb7,
	0xb7, 0xf7, 0x95, 0x9c, 0x63, 0x23, 0x39, 0x03, 0x12, 0x16, 0x78, 0x09, 0x2f, 0x64, 0x86, 0xab,
	0x8c, 0x23, 0xb8, 0x4e, 0x9a, 0xee, 0x94, 0x02, 0x1e, 0x80, 0x00, 0xbb, 0xb1, 0x09, 0xd4, 0x3e,
	0x63, 0x72, 0x40, 0x88, 0x13, 0x9c, 0x3a, 0x60, 0x0a, 0x66, 0x41, 0xc2, 0x22, 0x2f, 0xc1, 0x91,
	0x59, 0xf8, 0xea, 0xb4, 0x0f, 0x5f, 0x67, 0x0e, 0xe2, 0x43, 0x10, 0xb1, 0xc4, 0x8b, 0x58, 0x96,
	0xcd, 0x31, 0xcd, 0xdf, 0x0b, 0x5b, 0xab, 0x35, 0x07, 0x7c, 0x6b, 0x7c, 0x41, 0x84, 0x35, 0xe9,
	0x7a, 0x0d, 0x1c, 0x3f, 0x04, 0x27, 0x9b, 0xf4, 0xfb, 0x11, 0xb0, 0xae, 0xf2, 0xac, 0x4b, 0xb2,
	0x35, 0xc2, 0x7c, 0x7c, 0xa2, 0x21, 0xf3, 0xc0, 0xb6, 0xcc, 0xb3, 0xad, 0xd7, 0xce, 0x1a, 0x74,
	0xa9, 0x38, 0xe9, 0xa0, 0x3c, 0x8b, 0xd3, 0x5a, 0x10, 0x24, 0xde, 0xc9, 0x1a, 0x40, 0x23, 0xf9,
	0x87, 0x96, 0xba, 0xbc, 0x24, 0xa9, 0xd6, 0xd0, 0x34, 0x40, 0x15, 0x67, 0x17, 0x38, 0x17, 0xcc,
	0x38, 0xe3, 0xca, 0x48, 0xd9, 0xc0, 0x39, 0xdf, 0xc8, 0x99, 0x51, 0x10, 0x68, 0xb9, 0x99, 0x2e,
	0x02, 0xe7, 0x22, 0xcf, 0x69, 0xa3, 0xcb, 0x32, 0x4e, 0x5a, 0x4b, 0xd0, 0xf7, 0xac, 0x25, 0x60,
	0x5a, 0xe2, 0x99, 0x3c, 0x99, 0xe3, 0x98, 0xaf, 0xfb, 0x29, 0x98, 0x2d, 0x2e, 0x31, 0x1d, 0x1d,
	0xf2, 0x65, 0x18, 0xf2, 0x95, 0xc6, 0x46, 0xc3, 0x60, 0x87, 0x11, 0x0e, 0xe3, 0xc8, 0x77, 0xad,
	0x15, 0xf8, 0xbe, 0xcd, 0x73, 0x4a, 0x75, 0x1b, 0xd2, 0xf8, 0x13, 0x40, 0x5f, 0x31, 0x52, 0x38,
	0xa5, 0x26, 0x74, 0x15, 0x24, 0xb0, 0xe9, 0x3e, 0xab, 0x54, 0xcc, 0xd2, 0xb8, 0x13, 0x5c, 0xe6,
	0x1a, 0xf0, 0xad, 0xf2, 0x7c, 0x2b, 0x7a, 0x1f, 0x96, 0x30, 0x3e, 0x06, 0xc6, 0x35, 0x9e, 0xb1,
	0x87, 0x1e, 0xc8, 0x1c, 0x11, 0x55, 0xa3, 0x9f, 0x80, 0x8c, 0x15, 0x5e, 0x46, 0x1f, 0x3d, 0x92,
	0x59, 0x95, 0x30, 0xc1, 0x79, 0xb1, 0x6b, 0x96, 0x25, 0x4a, 0x2a, 0x13, 0x6f, 0x3d, 0xa5, 0x72,
	0x56, 0x98, 0xb6, 0x5c, 0x04, 0x80, 0x9d, 0x99, 0x1c, 0xae, 0x16, 0xd6, 0x88, 0x64, 0xe9, 0xb3,
	0x9e, 0x81, 0xbc, 0x05, 0x5e, 0xde, 0x3c, 0xba, 0x30, 0x2e, 0x8f, 0xd4, 0xae, 0xf2, 0x3d, 0xeb,
	0x39, 0x70, 0x2c, 0xf3, 0x1c, 0xd2, 0xa9, 0xaf, 0x8a, 0x72, 0xd2, 0x6f, 0xbd, 0x00, 0x4e, 0x9b,
	0xe7, 0x94, 0x1a, 0x25, 0x02, 0xe8, 0x92, 0x74, 0xc0, 0x7a, 0x09, 0x66, 0x7d, 0xcd, 0x40, 0x44,
	0x96, 0x4b, 0x45, 0x38, 0x20, 0x62, 0xb5, 0xb1, 0xfd, 0x15, 0xec, 0x81, 0x2a, 0x7d, 0x0f, 0x38,
	0x57, 0x78, 0xce, 0x45, 0x99, 0xb7, 0x58, 0x2e, 0x16, 0xdf, 0xb3, 0x5c, 0xe8, 0xf5, 0x12, 0xcf,
	0x85, 0xd1, 0xdc, 0x38, 0x17, 0x84, 0x5b, 0x3d, 0x27, 0x77, 0x98, 0x49, 0x07, 0xc7, 0x3b, 0x4e,
	0x2d, 0x0f, 0xc4, 0x2c, 0xf2, 0x62, 0xa4, 0xbb, 0x21, 0x2f, 0x06, 0xca, 0x87, 0x60, 0x60, 0x16,
	0x5a, 0x2e, 0x35, 0xac, 0xc0, 0x1c, 0x3a, 0xc5, 0x26, 0xda, 0x87, 0x0e, 0x0b, 0x53, 0x2d, 0x55,
	0x5a, 0x9a, 0xb5, 0x97, 0x96, 0xbf, 0x28, 0x63, 0x27, 0x65, 0x1e, 0xcc, 0x01, 0xc8, 0x11, 0xda,
	0x2e, 0xdd, 0x12, 0x5e, 0x0f, 0x49, 0xa2, 0xc3, 0xaa, 0xdb, 0xeb, 0xc0, 0xba, 0xd0, 0xc8, 0x0a,
	0xce, 0x09, 0xf6, 0x58, 0xa7, 0x7d, 0x60, 0x15, 0x06, 0x5e, 0xba, 0x0d, 0x57, 0x55, 0x81, 0x04,
	0xdf, 0xeb, 0x15, 0x8c, 0x5a, 0x97, 0x17, 0xf0, 0xb8, 0x16, 0xf4, 0xe0, 0x04, 0xf0, 0xed, 0xde,
	0x80, 0x8f, 0x0b, 0xbc, 0x52, 0x33, 0x47, 0x4f, 0xbd, 0x4e, 0xee, 0xbb, 0xa5, 0x3b, 0xe0, 0x67,
	0x38, 0xb5, 0x02, 0x90, 0x60, 0x37, 0x7e, 0x9d, 0x33, 0xce, 0x98, 0x05, 0xa8, 0x69, 0xcb, 0x99,
	0x8e, 0x4f, 0x2b, 0x95, 0x85, 0xdd, 0x83, 0x31, 0x07, 0xdd, 0xf7, 0xac, 0x88, 0x32, 0xaf, 0x2e,
	0xf0, 0xc1, 0x64, 0xa9, 0xb2, 0x24, 0xa9, 0x1f, 0x32, 0x11, 0x56, 0x0c, 0xdf, 0x5c, 0xe3, 0xd9,
	0xa4, 0x66, 0x39, 0xcb, 0x71, 0x32, 0x8a, 0x87, 0xb0, 0xaa, 0x12, 0xf8, 0xdc, 0xbc, 0x98, 0xb1,
	0x4a, 0xb2, 0x7b, 0xb3, 0x88, 0x64, 0x8a, 0x07, 0x7e, 0x96, 0xa7, 0x70, 0xa3, 0x5a, 0x85, 0x27,
	0x5f, 0x83, 0x24, 0x96, 0x4c, 0x24, 0x06, 0x78, 0xb4, 0x76, 0x6b, 0x21, 0xa7, 0x54, 0x7a, 0x72,
	0xe4, 0xcc, 0x75, 0x0a, 0xa2, 0x58, 0xce, 0x8d, 0x9f, 0x69, 0x9c, 0x18, 0x18, 0x39, 0xb6, 0x9f,
	0x67, 0xc0, 0x6a, 0xf3, 0xac, 0x1b, 0xb5, 0xb8, 0xe5, 0xf8, 0x6e, 0x21, 0x6f, 0x47, 0x0e, 0xc2,
	0x96, 0x38, 0x61, 0x5c, 0x60, 0xde, 0xd6, 0x04, 0xe6, 0x6d, 0xc3, 0xc0, 0xbc, 0xbd, 0xef, 0xc0,
	0xbc, 0xbd, 0xef, 0xc0, 0xbc, 0x6d, 0x1e, 0x98, 0xb7, 0x27, 0x0f, 0xcc, 0xdb, 0x13, 0x07, 0xe6,
	0xed, 0x09, 0x03, 0xf3, 0xf6, 0xc4, 0x81, 0x79, 0xfb, 0x00, 0x02, 0xf3, 0x76, 0xfb, 0xc0, 0xbc,
	0xbd, 0xef, 0xc0, 0xbc, 0x7d, 0x10, 0x81, 0x79, 0x7b, 0x5f, 0x81, 0x79, 0xfb, 0x60, 0x03, 0xf3,
	0xf6, 0x01, 0x04, 0xe6, 0xed, 0xfd, 0x06, 0xe6, 0xed, 0x89, 0x02, 0xf3, 0xf6, 0x04, 0x81, 0x79,
	0xbb, 0x45, 0x60, 0xde, 0x56, 0x04, 0xe6, 0xed, 0xe6, 0xc0, 0xbc, 0xdd, 0x3e, 0x30, 0x6f, 0xb7,
	0x0c, 0xcc, 0xdb, 0x2d, 0x02, 0xf3, 0xf6, 0x84, 0x81, 0x79, 0xbb, 0x5d, 0x60, 0xde, 0xde, 0x5f,
	0x60, 0xde, 0x6e, 0x19, 0x98, 0xb7, 0xdb, 0x06, 0xe6, 0xed, 0x09, 0x02, 0xf3, 0xf6, 0x04, 0x81,
	0x79, 0x7b, 0xd2, 0xc0, 0xbc, 0x3d, 0x61, 0x60, 0xde, 0x6e, 0x1f, 0x98, 0xb7, 0x5b, 0x05, 0xe6,
	0x6d, 0xd3, 0xc0, 0xbc, 0x3d, 0x71, 0x60, 0xde, 0xde, 0x47, 0x60, 0xde, 0x9e, 0x2c, 0x30, 0x6f,
	0xb7, 0x0f, 0xcc, 0xdb, 0x13, 0x07, 0xe6, 0x6d, 0xd3, 0xc0, 0xbc, 0xdd, 0x2e, 0x30, 0x6f, 0x9b,
	0x06, 0xe6, 0xed, 0x49, 0x03, 0xf3, 0xf6, 0x44, 0x81, 0x79, 0xbb, 0x6d, 0x60, 0xde, 0x9e, 0x30,
	0x30, 0x6f, 0x1f, 0x4c, 0x60, 0xde, 0x6e, 0x13, 0x98, 0xb7, 0x27, 0x08, 0xcc, 0xdb, 0xed, 0x03,
	0xf3, 0x76, 0x8b, 0xc0, 0xbc, 0x3d, 0x41, 0x60, 0xde, 0x6e, 0x19, 0x98, 0xb7, 0x27, 0x0a, 0xcc,
	0xdb, 0x13, 0x04, 0xe6, 0xed, 0xf6, 0x81, 0x79, 0xbb, 0x6d, 0x60, 0xde, 0x9e, 0x20, 0x30, 0x6f,
	0xef, 0x27, 0x30, 0x6f, 0x4f, 0x1c, 0x98, 0xb7, 0xf7, 0x1d, 0x98, 0xb7, 0xf7, 0x1b, 0x98, 0xb7,
	0xf7, 0x1d, 0x98, 0xb7, 0xf7, 0x1f, 0x98, 0xb7, 0x27, 0x0c, 0xcc, 0xdb, 0x93, 0x07, 0xe6, 0xed,
	0xc9, 0x02, 0xf3, 0xf6, 0x81, 0x05, 0xe6, 0xed, 0x89, 0x03, 0xf3, 0xf6, 0xc4, 0x81, 0x79, 0x7b,
	0xe2, 0xc0, 0xbc, 0x3d, 0x49, 0x60, 0xde, 0x3e, 0x90, 0xc0, 0xbc, 0x3d, 0x71, 0x60, 0xde, 0xde,
	0x77, 0x60, 0xde, 0x9e, 0x30, 0x30, 0x6f, 0x4f, 0x1a, 0x98, 0xb7, 0x0f, 0x20, 0x30, 0x6f, 0x1f,
	0x50, 0x60, 0xde, 0x3e, 0xe0, 0xc0, 0xbc, 0xdd, 0x3a, 0x30, 0x6f, 0x4f, 0x1c, 0x98, 0xb7, 0xf7,
	0x1f, 0x98, 0xb7, 0xf7, 0x1f, 0x98, 0xb7, 0x27, 0x0e, 0xcc, 0xdb, 0x13, 0x05, 0xe6, 0xed, 0x83,
	0x09, 0xcc, 0xdb, 0xfb, 0x09, 0xcc, 0xdb, 0x93, 0x05, 0xe6, 0xed, 0x03, 0x0a, 0xcc, 0xdb, 0x93,
	0x07, 0xe6, 0xed, 0xc9, 0x03, 0xf3, 0xf6, 0x7e, 0x03, 0xf3, 0xf6, 0x3e, 0x02, 0xf3, 0xf6, 0xbe,
	0x03, 0xf3, 0xf6, 0x3e, 0x02, 0xf3, 0xf6, 0x7e, 0x02, 0xf3, 0xf6, 0x64, 0x81, 0x79, 0x7b, 0xc2,
	0xc0, 0xbc, 0x7d, 0x60, 0x81, 0x79, 0xfb, 0xe0, 0x02, 0xf3, 0xf6, 0xe4, 0x81, 0x79, 0xfb, 0x00,
	0x02, 0xf3, 0xff, 0xef, 0x31, 0x74, 0xce, 0x7d, 0xbf, 0xfb, 0xe6, 0xd3, 0xbb, 0x0f, 0x3f, 0xf8,
	0x1f, 0x68, 0xd5, 0x83, 0x77, 0x1f, 0x3f, 0xb0, 0x9c, 0x1f, 0xd5, 0x5c, 0x46, 0xf4, 0xe1, 0x5b,
	0x31, 0x4c, 0x63, 0xe5, 0xed, 0xa5, 0x54, 0xce, 0x30, 0x8f, 0xa9, 0x2a, 0x0e, 0xfc, 0x4d, 0x3c,
	0x1a, 0x26, 0xa3, 0x30, 0xf6, 0xca, 0xf2, 0xf6, 0x70, 0x6a, 0x7f, 0xdc, 0xc8, 0x9c, 0xc4, 0x19,
	0x59, 0x4d, 0x84, 0xf9, 0x10, 0x1f, 0x60, 0x51, 0xf1, 0xf6, 0x4a, 0xe3, 0x11, 0xe1, 0x9c, 0xf0,
	0x92, 0x7a, 0xe4, 0x87, 0xf9, 0x00, 0x5d, 0x1f, 0xad, 0x48, 0x79, 0xc9, 0x8f, 0x23, 0x67, 0xe0,
	0x14, 0x3f, 0x96, 0x4a, 0x22, 0x0c, 0xe3, 0x11, 0x3e, 0xf2, 0xf2, 0x14, 0x3d, 0x94, 0xca, 0x81,
	0xa7, 0x86, 0x50, 0x17, 0x33, 0x28, 0x9b, 0xc2, 0x82, 0xf5, 0x0b, 0x90, 0x63, 0x68, 0xb9, 0x99,
	0x5b, 0xda, 0x88, 0x63, 0xb5, 0xd8, 0x99, 0x42, 0x4c, 0xa9, 0x51, 0x2c, 0xd8, 0x66, 0x6b, 0x19,
	0x42, 0x87, 0xa4, 0xa9, 0x23, 0x43, 0x7d, 0x42, 0x8c, 0x04, 0xdd, 0x97, 0x33, 0xf0, 0xa6, 0x9a,
	0x75, 0xf1, 0x0b, 0x3e, 0xd8, 0xb4, 0x88, 0x6e, 0x4b, 0x39, 0x49, 0xc6, 0xbc, 0x2c, 0x1b, 0x45,
	0x71, 0x1a, 0x3a, 0x41, 0xb0, 0xc3, 0x42, 0xf3, 0x2c, 0x98, 0x73, 0x53, 0xca, 0x55, 0x56, 0x4a,
	0x24, 0x0f, 0x49, 0x4e, 0xf2, 0x21, 0x54, 0x1b, 0x4d, 0xcb, 0x67, 0x94, 0x1d, 0xe4, 0x29, 0xcf,
	0x97, 0x5c, 0x70, 0xef, 0x78, 0xc7, 0x47, 0x6b, 0x52, 0xa6, 0x32, 0x01, 0xc0, 0x28, 0xc3, 0xe9,
	0x26, 0x79, 0x71, 0x8b, 0x93, 0x14, 0x67, 0x38, 0xca, 0x69, 0x62, 0x82, 0xd7, 0x59, 0x6a, 0x7d,
	0x25, 0xa4, 0x67, 0xea, 0xaa, 0x9a, 0x8c, 0x83, 0x7e, 0x35, 0x0d, 0xa7, 0xb8, 0x30, 0xd9, 0xf1,
	0x99, 0x7f, 0x3c, 0x85, 0xbe, 0xce, 0xf6, 0xde, 0xec, 0xfd, 0xf4, 0x79, 0xf3, 0xcd, 0xfb, 0x9f,
	0x68, 0x40, 0xfa, 0x32, 0x3a, 0x9f, 0xe5, 0x4e, 0x3e, 0xcc, 0x20, 0x3b, 0x99, 0xb8, 0xd8, 0x6e,
	0xa3, 0xb3, 0xc2, 0x5f, 0xdd, 0x38, 0x8a, 0x48, 0xbd, 0x3f, 0x16, 0x7f, 0xa6, 0x8d, 0xb9, 0x83,
	0xce, 0x09, 0x64, 0x7e, 0x39, 0xe0, 0x62, 0xda, 0xd6, 0x2e, 0x9a, 0x16, 0xe8, 0xa2, 0x38, 0xaf,
	0x44, 0x8e, 0xf0, 0x76, 0x42, 0x65, 0x73, 0xf1, 0xe7, 0xe3, 0xc5, 0x8c, 0x6a, 0x78, 0x86, 0x51,
	0xc9, 0x75, 0x84, 0x4b, 0x29, 0x3b, 0xf3, 0x3f, 0x1e, 0x43, 0x5f, 0xbb, 0x1f, 0x3f, 0xec, 0x39,
	0x3f, 0x56, 0x49, 0x6c, 0xaf, 0xa0, 0x0b, 0xc5, 0xb1, 0x77, 0xe4, 0x84, 0xd2, 0xbc, 0xb5, 0x73,
	0xe8, 0x9a, 0xf8, 0x67, 0x37, 0x0e, 0x43, 0x9f, 0x1e, 0x3e, 0xc4, 0x1c, 0x69, 0x0b, 0xa5, 0x56,
	0xab, 0xe8, 0x21, 0x69, 0x0a, 0xeb, 0x7d, 0xb7, 0xd4, 0x32, 0x81, 0xc1, 0xf3, 0x03, 0xea, 0x63,
	0x06, 0x78, 0x73, 0x87, 0x7d, 0xe3, 0x30, 0xbf, 0xd4, 0xba, 0x68, 0x5a, 0xc7, 0xc2, 0x3e, 0x73,
	0x84, 0x5f, 0x3c, 0xb3, 0xe8, 0x4a, 0x9d, 0x07, 0x5e, 0x4b, 0xc2, 0x17, 0x84, 0xa4, 0x68, 0x0f,
	0xd1, 0x55, 0x05, 0x35, 0x13, 0x2e, 0x24, 0x44, 0x1b, 0xeb, 0x34, 0xde, 0xf6, 0xf3, 0x91, 0xbb,
	0x4e, 0x0e, 0xa7, 0x20, 0xff, 0x38, 0x6f, 0x35, 0x17, 0xd0, 0x0d, 0x35, 0x03, 0xfb, 0xc4, 0x09,
	0xc1, 0x48, 0xbb, 0xc8, 0x16, 0x59, 0x48, 0xf8, 0xbb, 0xe7, 0x64, 0xa4, 0x40, 0x4c, 0x84, 0xb7,
	0x88, 0x75, 0x2a, 0xc7, 0x9a, 0xd4, 0x4c, 0x8b, 0xbc, 0x32, 0xf6, 0xbe, 0x08, 0xc9, 0x76, 0x16,
	0x5b, 0x0a, 0x21, 0xf1, 0x88, 0x32, 0x1a, 0x6f, 0x4f, 0xd2, 0x14, 0xd6, 0x9f, 0x93, 0x42, 0x84,
	0x79, 0x6c, 0x12, 0xfd, 0xc8, 0xcf, 0x0b, 0xb3, 0x22, 0x0e, 0x9b, 0x70, 0x53, 0x67, 0xa3, 0x5b,
	0x5a, 0x1e, 0xf6, 0xa5, 0xaf, 0xea, 0x36, 0x49, 0x60, 0x8a, 0x48, 0x8e, 0x85, 0x32, 0x94, 0x0d,
	0x1f, 0x3a, 0x25, 0xdc, 0x9c, 0x74, 0xeb, 0x5a, 0x99, 0xa4, 0xf1, 0x2b, 0xba, 0xb8, 0x48, 0x67,
	0xc9, 0xaa, 0xb3, 0xbe, 0xe6, 0x2f, 0x29, 0x66, 0xfe, 0xd1, 0x14, 0xfa, 0x3a, 0xd8, 0xfd, 0x21,
	0xfb, 0xcb, 0x6f, 0x7e, 0xc5, 0xaf, 0xae, 0x00, 0x0f, 0x48, 0x09, 0x25, 0xc5, 0xea, 0x12, 0xff,
	0x5c, 0xd6, 0xfc, 0xf1, 0x86, 0xd4, 0x1d, 0x12, 0x73, 0x42, 0xdf, 0xab, 0x8b, 0x4b, 0x9c, 0x74,
	0xd4, 0x8f, 0xd3, 0xe2, 0xff, 0xf9, 0xa4, 0x83, 0xc7, 0x0b, 0x1b, 0x55, 0xa3, 0x84, 0xec, 0xa8,
	0x42, 0x02, 0xe8, 0xce, 0x0d, 0xd4, 0x11, 0xc9, 0x52, 0x3f, 0xdb, 0xe0, 0x93, 0x0a, 0x1e, 0x9f,
	0xf9, 0x1f, 0x0e, 0xa1, 0x33, 0xc1, 0xee, 0x0f, 0xc9, 0xc7, 0xcf, 0xef, 0x88, 0x53, 0xf2, 0x8b,
	0x5f, 0xec, 0xbe, 0xa5, 0xd9, 0xd6, 0xa7, 0x69, 0xeb, 0xcb, 0x70, 0x19, 0xee, 0xf7, 0xb1, 0x5b,
	0x4f, 0xb6, 0x0e, 0x4d, 0xae, 0x13, 0xd1, 0xdc, 0xa2, 0x53, 0xd5, 0xad, 0xf9, 0x91, 0xce, 0x5d,
	0x74, 0x5e, 0x46, 0x19, 0x27, 0x38, 0x62, 0x7d, 0x8b, 0x75, 0x84, 0x7d, 0xbf, 0x1f, 0xb3, 0xde,
	0xf5, 0x19, 0x4e, 0x40, 0x46, 0x98, 0xc6, 0x41, 0x50, 0x99, 0xc6, 0x14, 0x6e, 0x6d, 0x67, 0x95,
	0xcd, 0x1c, 0xf5, 0x86, 0xa4, 0x9a, 0xbd, 0xdf, 0xdf, 0x21, 0x4b, 0xa2, 0x68, 0x10, 0xd4, 0x56,
	0x61, 0x6f, 0x4e, 0x9f, 0x15, 0x3e, 0xe1, 0x02, 0xba, 0x24, 0x93, 0x01, 0xf5, 0xdb, 0xac, 0x63,
	0x94, 0xc5, 0xe3, 0x58, 0x66, 0xfe, 0x70, 0x0a, 0x5d, 0x08, 0x76, 0x7f, 0x70, 0x3f, 0xfe, 0x7a,
	0xf7, 0xd3, 0xee, 0xf7, 0xf1, 0xa7, 0xe1, 0x87, 0xb7, 0xf4, 0x3f, 0xc9, 0x00, 0xdf, 0x43, 0xb7,
	0x0a, 0x81, 0x2e, 0x29, 0xdf, 0x49, 0xb2, 0x27, 0x0c, 0x23, 0xf6, 0x0f, 0x71, 0x94, 0x1f, 0xa1,
	0xeb, 0x4a, 0x4a, 0xf8, 0x7f, 0x36, 0xd8, 0xf3, 0x64, 0x0c, 0x17, 0xd0, 0x4d, 0x8d, 0x68, 0xc6,
	0xc2, 0xa9, 0xd4, 0x91, 0x99, 0x7f, 0xff, 0x08, 0xb2, 0x0a, 0xfd, 0xde, 0xdd, 0xdb, 0x7b, 0x5f,
	0x2a, 0xf8, 0x55, 0x3a, 0xc4, 0x64, 0x3d, 0xc9, 0x34, 0xfc, 0x26, 0x3a, 0x5d, 0xfb, 0x3b, 0x29,
	0xa5, 0xc8, 0xed, 0x19, 0x53, 0x9d, 0x5b, 0xe8, 0x4c, 0x8d, 0x86, 0x96, 0x7b, 0x64, 0x9f, 0x5f,
	0x26, 0x54, 0x77, 0xd0, 0xb9, 0x1a, 0x15, 0x49, 0xad, 0xea, 0x39, 0x82, 0x57, 0x39, 0x55, 0x6a,
	0x7e, 0x45, 0x47, 0x0f, 0x92, 0x29, 0x9b, 0xf0, 0x79, 0x42, 0x36, 0x8b, 0xae, 0xd4, 0xc8, 0x32,
	0x1c, 0x04, 0x38, 0xcd, 0xa0, 0x66, 0x23, 0xdb, 0x10, 0x56, 0x15, 0x4d, 0x24, 0xe9, 0xd4, 0xbb,
	0x6c, 0x1f, 0xb0, 0x75, 0x54, 0x36, 0x33, 0xfe, 0x8b, 0x3a, 0xaa, 0x45, 0xe6, 0xed, 0x2d, 0x11,
	0xaa, 0x79, 0x74, 0xa3, 0x46, 0xb5, 0xb5, 0x8e, 0x23, 0x92, 0xc5, 0xc3, 0xef, 0xd3, 0x14, 0x35,
	0x1e, 0xf3, 0xf2, 0x56, 0x74, 0x72, 0x97, 0x98, 0x57, 0x57, 0x6c, 0x3d, 0x87, 0x3a, 0x4f, 0xd1,
	0x9d, 0xfa, 0x60, 0xd3, 0xfa, 0x70, 0x74, 0x38, 0x2b, 0xc3, 0x68, 0x9d, 0xa4, 0xfa, 0xea, 0xc2,
	0x91, 0xf3, 0x0c, 0x0d, 0x24, 0xd5, 0xa7, 0x9b, 0x1c, 0x16, 0x23, 0x9a, 0xcc, 0xee, 0x4b, 0xca,
	0xd1, 0x03, 0x8e, 0x0b, 0x85, 0x86, 0xff, 0xef, 0x67, 0x89, 0x55, 0xc4, 0x7f, 0x65, 0xf7, 0x6d,
	0x71, 0xb4, 0xe1, 0xad, 0x22, 0xde, 0xc6, 0x2e, 0x71, 0xd3, 0xe4, 0x26, 0xa3, 0xfa, 0x73, 0xe1,
	0xbb, 0x93, 0x72, 0xf3, 0x51, 0x69, 0x32, 0x06, 0xa4, 0xcb, 0x60, 0x09, 0x2a, 0x4a, 0x92, 0x7e,
	0xa9, 0xef, 0xa7, 0x59, 0xe9, 0x65, 0xb8, 0xfc, 0x6c, 0x57, 0x84, 0x5e, 0x4c, 0x7c, 0x26, 0xf2,
	0x74, 0xde, 0xc9, 0x30, 0x53, 0x21, 0x4c, 0xa8, 0x67, 0xe8, 0x42, 0x1e, 0xa3, 0x4e, 0xb1, 0x37,
	0x74, 0x31, 0xd3, 0xa3, 0x3e, 0xaf, 0x6e, 0x15, 0xed, 0x20, 0x1e, 0x39, 0x41, 0x5c, 0x9d, 0x32,
	0xa8, 0x6a, 0x80, 0xa1, 0xad, 0xc8, 0xd6, 0x71, 0x50, 0xa6, 0x55, 0x5d, 0x92, 0x4b, 0x2a, 0x3e,
	0x49, 0xc8, 0x8e, 0xf3, 0xab, 0x45, 0x42, 0x36, 0x72, 0xd3, 0x38, 0xcb, 0x98, 0xfe, 0x38, 0xf2,
	0xa1, 0x89, 0x37, 0x72, 0x46, 0xf8, 0x45, 0x85, 0x90, 0x9a, 0x62, 0x46, 0x92, 0x23, 0xdc, 0x2c,
	0x1c, 0xf5, 0x75, 0x4c, 0x96, 0x16, 0xe2, 0x35, 0x77, 0x15, 0xdd, 0x17, 0x49, 0x4b, 0x24, 0x49,
	0x8e, 0xab, 0x11, 0x2d, 0xb6, 0xe4, 0xbc, 0x3c, 0x18, 0xd0, 0xc5, 0x0b, 0x1b, 0x1d, 0xc7, 0x59,
	0x25, 0xd0, 0xdb, 0x8c, 0x83, 0x61, 0x88, 0xd9, 0x4e, 0xef, 0x11, 0xfa, 0x87, 0xe8, 0xaa, 0x48,
	0x9f, 0xe5, 0x0e, 0x31, 0xbe, 0x3d, 0xdf, 0x1b, 0x65, 0xbe, 0x87, 0xd9, 0x1e, 0xbf, 0x46, 0xc8,
	0xc1, 0xfc, 0x8d, 0x93, 0xd3, 0x07, 0xf8, 0x84, 0xe1, 0x14, 0xbf, 0xfa, 0xc7, 0x3a, 0x4d, 0xb3,
	0xda, 0x8c, 0x32, 0xd7, 0x09, 0x30, 0x0f, 0xa5, 0x91, 0x90, 0xe6, 0x29, 0xc9, 0xeb, 0x40, 0x49,
	0x2d, 0xde, 0x4a, 0x8c, 0x4d, 0xf2, 0x56, 0x9c, 0x6e, 0x30, 0xb8, 0x4c, 0x57, 0x3e, 0x10, 0xc5,
	0xff, 0x94, 0x29, 0x66, 0xc8, 0x19, 0xb9, 0x53, 0xc1, 0x6b, 0x0e, 0x75, 0xee, 0xd7, 0x67, 0x3b,
	0x70, 0xc8, 0xe8, 0x0d, 0xac, 0xd3, 0x24, 0x3d, 0xcb, 0x54, 0x50, 0x90, 0xfd, 0xd1, 0x6f, 0xa7,
	0x4f, 0x74, 0x1e, 0xd4, 0x67, 0x1c, 0x42, 0x7f, 0x05, 0x31, 0xcd, 0x2a, 0x3e, 0x95, 0x94, 0xc4,
	0x73, 0x75, 0x15, 0x0f, 0x7d, 0x0f, 0xf2, 0x62, 0x14, 0xf4, 0x67, 0x28, 0x7d, 0xc8, 0x09, 0xbf,
	0x5c, 0xd7, 0xba, 0x68, 0x14, 0xe1, 0x41, 0x9c, 0x93, 0xd4, 0xb9, 0xd6, 0x59, 0xda, 0xe8, 0x88,
	0x34, 0x7a, 0xb6, 0xbe, 0x80, 0x8b, 0x2d, 0x93, 0xa4, 0x5b, 0xc4, 0x03, 0xeb, 0x1c, 0x15, 0x1d,
	0x97, 0xa2, 0xc7, 0xa8, 0x59, 0x4e, 0x89, 0x82, 0xfa, 0x3c, 0xa5, 0x4e, 0x4b, 0x6a, 0xb0, 0x72,
	0xdc, 0xcc, 0x0d, 0xb3, 0x04, 0x47, 0x9e, 0x75, 0xa1, 0xaa, 0x84, 0x72, 0xa8, 0xb3, 0x86, 0x66,
	0x6a, 0x86, 0x81, 0x9d, 0x40, 0x3d, 0x3f, 0x4b, 0x02, 0x67, 0x87, 0x3f, 0x1e, 0x5a, 0x17, 0x29,
	0xeb, 0x90, 0xec, 0x8c, 0x63, 0x1f, 0x60, 0x47, 0xea, 0x4b, 0x94, 0x6a, 0x93, 0x50, 0x8d, 0x37,
	0x1a, 0x0f, 0x0a, 0xad, 0xd8, 0xdc, 0x72, 0x12, 0xeb, 0x32, 0x6d, 0xf4, 0xd6, 0xdf, 0xfd, 0xed,
	0xf4, 0x51, 0xd2, 0xe8, 0x25, 0x6a, 0x74, 0x79, 0x3b, 0x15, 0xb9, 0x38, 0x28, 0x34, 0x94, 0x46,
	0x0b, 0x47, 0x7d, 0xc7, 0x0f, 0x8a, 0x2d, 0xef, 0x0a, 0xfd, 0xc8, 0x6b, 0xe6, 0xef, 0xaa, 0xd8,
	0x58, 0x48, 0x76, 0xdd, 0x09, 0x72, 0xeb, 0x2a, 0x65, 0xda, 0x60, 0x61, 0x02, 0x91, 0x29, 0xc5,
	0xc5, 0xff, 0x91, 0x32, 0xcc, 0x63, 0x9f, 0xbb, 0x56, 0xc1, 0xbf, 0x08, 0x6c, 0x51, 0xc3, 0x29,
	0x7c, 0xf1, 0x3a, 0xe5, 0x7b, 0x45, 0xf8, 0xc6, 0xec, 0x35, 0x4d, 0xbe, 0x48, 0xad, 0xe0, 0x0d,
	0x4a, 0xb9, 0xad, 0xa2, 0xa4, 0x6b, 0x29, 0x8f, 0x13, 0xeb, 0x26, 0xa5, 0x64, 0xd9, 0xda, 0xaf,
	0x4b, 0xbb, 0xee, 0xf7, 0x89, 0x95, 0xe9, 0xe1, 0x2c, 0xb7, 0xa6, 0x29, 0xc3, 0x77, 0x90, 0x23,
	0xac, 0x36, 0xe3, 0xfe, 0x20, 0x8a, 0x53, 0x96, 0xab, 0x6b, 0xd3, 0x09, 0xe8, 0x8d, 0xba, 0xbb,
	0x8e, 0xdd, 0x8d, 0xcc, 0xba, 0x45, 0x59, 0xdf, 0xb2, 0x64, 0x48, 0xd2, 0xb9, 0x0c, 0xfc, 0xd0,
	0xcf, 0x21, 0x0d, 0xf4, 0x6d, 0x3a, 0xa5, 0xdf, 0x43, 0xf9, 0xa7, 0x13, 0x4a, 0x0b, 0x42, 0x98,
	0xac, 0x3b, 0x54, 0xfe, 0xcf, 0x59, 0x82, 0xa6, 0xb1, 0xf1, 0xf1, 0x03, 0x9a, 0x5c, 0x23, 0x4e,
	0x88, 0x9a, 0xdf, 0xa5, 0xe2, 0xdf, 0x94, 0xe2, 0x17, 0xd1, 0xed, 0x71, 0x53, 0x42, 0x92, 0x28,
	0x15, 0x27, 0x1d, 0xf2, 0x35, 0x27, 0xc7, 0x83, 0x1d, 0xeb, 0x1e, 0xfd, 0xd2, 0x2e, 0xa4, 0x16,
	0x1c, 0xb3, 0x2e, 0x39, 0x4e, 0x59, 0x5e, 0xb9, 0x2d, 0x8c, 0x13, 0xeb, 0x3e, 0xdd, 0xa3, 0x7f,
	0x01, 0x7b, 0xf4, 0x31, 0x7a, 0xdd, 0xb4, 0x5a, 0xeb, 0x0b, 0xcd, 0xbe, 0x59, 0xdd, 0xf7, 0x90,
	0xf4, 0x59, 0x04, 0xf5, 0x50, 0x9c, 0x36, 0x7a, 0x41, 0xec, 0x6e, 0x40, 0x2c, 0x87, 0x66, 0x9b,
	0x9b, 0xfa, 0x5d, 0x5e, 0xde, 0xd3, 0xba, 0xba, 0xe3, 0x6d, 0xb8, 0x16, 0x4f, 0x63, 0x7a, 0x0d,
	0x47, 0x8a, 0x3c, 0x61, 0xcf, 0x7a, 0x40, 0xb9, 0x7f, 0x00, 0xee, 0x53, 0x50, 0xaf, 0xb2, 0x81,
	0xbb, 0xd0, 0x00, 0x26, 0x61, 0x96, 0x4a, 0xf8, 0x25, 0x2f, 0xa1, 0x5b, 0x37, 0x56, 0x7e, 0x08,
	0x89, 0x87, 0xa8, 0x85, 0x7d, 0x48, 0x79, 0xde, 0xf1, 0x57, 0x77, 0x63, 0x3c, 0x85, 0x8a, 0x55,
	0x23, 0x60, 0xcd, 0x51, 0x9e, 0xdf, 0xe3, 0x03, 0xf0, 0x7f, 0x11, 0xb9, 0x22, 0x0f, 0x4d, 0x48,
	0xce, 0xd4, 0x27, 0x76, 0x9d, 0x80, 0x8a, 0x29, 0x76, 0xad, 0x38, 0x85, 0xdd, 0xc8, 0xc9, 0x69,
	0xbd, 0xa5, 0xb8, 0x0f, 0xa7, 0xeb, 0x47, 0x24, 0xa7, 0xff, 0x54, 0xce, 0x89, 0x26, 0x3a, 0xf0,
	0xac, 0xbe, 0x1e, 0xab, 0xe5, 0x0f, 0xb1, 0x1e, 0x12, 0xf3, 0x28, 0x76, 0xf4, 0x79, 0xda, 0xba,
	0x8f, 0x70, 0xb6, 0x78, 0x2c, 0x1d, 0x47, 0x61, 0x39, 0xd7, 0x25, 0x2c, 0x50, 0x09, 0x1f, 0x78,
	0x09, 0x4f, 0xea, 0x4a, 0x98, 0xe2, 0xa0, 0xf0, 0x96, 0x68, 0x4c, 0x94, 0x1a, 0xde, 0xe2, 0x88,
	0x6f, 0x75, 0x29, 0xf3, 0x5f, 0xe2, 0x99, 0x9f, 0xa3, 0x7b, 0x52, 0x43, 0x2d, 0xfb, 0xb8, 0x4d,
	0xf9, 0x7f, 0xc5, 0xf3, 0x8f, 0xf5, 0x9e, 0xe3, 0xaf, 0x59, 0xb1, 0x45, 0xca, 0xfe, 0x5e, 0xdb,
	0x76, 0x8e, 0x5d, 0x30, 0x65, 0x4b, 0x94, 0xf9, 0x47, 0x9e, 0x59, 0xa2, 0xc0, 0x85, 0x1e, 0xe0,
	0x91, 0x93, 0x8d, 0x3c, 0x1c, 0xe4, 0xce, 0x28, 0xc2, 0xc3, 0x3c, 0x75, 0x02, 0x6b, 0x99, 0x72,
	0x7f, 0x02, 0xee, 0x27, 0x50, 0xb1, 0x55, 0xcd, 0x0d, 0xe7, 0xfa, 0x52, 0x00, 0xcd, 0x47, 0x37,
	0xf5, 0x99, 0x17, 0xb0, 0x86, 0xa6, 0x95, 0x02, 0xfa, 0xdb, 0x25, 0x2b, 0xcd, 0x45, 0x47, 0xea,
	0xda, 0x31, 0xd6, 0x99, 0x3f, 0x9e, 0x42, 0x5f, 0x05, 0xbb, 0x3f, 0xf8, 0xb1, 0xff, 0x1a, 0xaa,
	0xf5, 0x5e, 0xa2, 0xe7, 0x26, 0x3f, 0xf6, 0x47, 0xaf, 0xc7, 0x8a, 0xf4, 0xde, 0x45, 0xdf, 0xf0,
	0x7f, 0x24, 0x70, 0x0a, 0x56, 0x7f, 0x2b, 0xe0, 0xdc, 0xf8, 0xce, 0x3d, 0xea, 0xda, 0x30, 0xc2,
	0x10, 0x7b, 0xfe, 0x30, 0x64, 0x05, 0xb7, 0x42, 0x9e, 0xb2, 0x26, 0x32, 0x0b, 0x9d, 0x20, 0x60,
	0xf5, 0xb5, 0x32, 0x9e, 0x70, 0x99, 0x9a, 0xdd, 0xaa, 0x61, 0x9e, 0x9f, 0x91, 0xf3, 0xb6, 0x57,
	0x65, 0x4c, 0x82, 0x4a, 0xa8, 0x43, 0xfe, 0x44, 0xf1, 0x0f, 0xa6, 0xd0, 0x57, 0xaf, 0x7f, 0xfa,
	0xb8, 0xb7, 0xcb, 0x57, 0x5c, 0xa2, 0xf7, 0x8c, 0x92, 0x03, 0xe8, 0x2d, 0x74, 0x86, 0xfb, 0x1b,
	0xa4, 0xa4, 0xf2, 0x37, 0x31, 0x7f, 0x1c, 0x26, 0x48, 0x59, 0x8e, 0xaa, 0x4a, 0x72, 0x48, 0x8d,
	0x1c, 0xf1, 0x70, 0x84, 0xa8, 0xe5, 0x34, 0xfa, 0x96, 0xa3, 0xaf, 0x88, 0x0e, 0xf3, 0xb1, 0xd0,
	0x1b, 0xa8, 0xc3, 0x11, 0xc1, 0xd5, 0x01, 0x3b, 0x3d, 0xd0, 0xe0, 0xf3, 0x9f, 0x1d, 0x46, 0x5f,
	0x89, 0x07, 0xea, 0x8b, 0xe8, 0xac, 0xf2, 0x30, 0x7d, 0x15, 0x7d, 0xad, 0x3d, 0x48, 0x5f, 0x47,
	0xdf, 0x34, 0x1c, 0xa2, 0x6f, 0xa2, 0xd3, 0x8d, 0x07, 0xe8, 0x1b, 0xa8, 0xd3, 0x74, 0x78, 0xbe,
	0x87, 0x2e, 0x18, 0x1e, 0x9c, 0xc5, 0x26, 0xc9, 0x0e, 0xcd, 0x12, 0x8a, 0xda, 0x81, 0x59, 0x42,
	0x51, 0x3b, 0x2c, 0xcf, 0xa2, 0x2b, 0x2d, 0x0e, 0xca, 0x12, 0x79, 0xb5, 0x43, 0xf2, 0x2a, 0xba,
	0x39, 0xe1, 0x01, 0x79, 0x56, 0x98, 0xbe, 0xa6, 0xc3, 0xf1, 0x9f, 0x1d, 0x41, 0x5f, 0x87, 0xef,
	0x3e, 0xbf, 0xed, 0xef, 0xee, 0xf2, 0x21, 0xc3, 0xd0, 0xcf, 0x48, 0xc1, 0x4e, 0x99, 0x0e, 0xcc,
	0xa0, 0x4b, 0xe2, 0x9f, 0x19, 0xce, 0xad, 0xf8, 0x25, 0x63, 0xfa, 0x50, 0x0c, 0xdc, 0xe1, 0x62,
	0x26, 0x45, 0xda, 0x00, 0x6f, 0xee, 0xf0, 0x0a, 0x71, 0xb8, 0x38, 0x68, 0xd5, 0x48, 0xc8, 0xae,
	0x55, 0x85, 0x6f, 0xf9, 0x7b, 0x87, 0xc3, 0x85, 0xfe, 0x88, 0xe4, 0x71, 0xbe, 0x5e, 0xe9, 0xf4,
	0x0a, 0xa1, 0xb9, 0x8b, 0xce, 0x8b, 0x34, 0x15, 0xca, 0x90, 0xbf, 0x79, 0x93, 0x08, 0xcb, 0x72,
	0x27, 0x4c, 0xf8, 0x43, 0xf1, 0xe1, 0x62, 0xae, 0x44, 0x9a, 0xdc, 0xd9, 0x66, 0xda, 0xd1, 0x25,
	0x14, 0xd3, 0xe8, 0x5b, 0x91, 0xa2, 0x70, 0x77, 0x86, 0x09, 0x7f, 0x77, 0x56, 0xb8, 0xeb, 0x57,
	0x44, 0x22, 0x37, 0x8e, 0x58, 0xa9, 0x1a, 0x22, 0xf2, 0x8b, 0x6a, 0xfa, 0x8f, 0x76, 0xa6, 0xeb,
	0x0d, 0xa3, 0xa8, 0x62, 0x24, 0x5c, 0x5b, 0xdd, 0xab, 0x77, 0xd3, 0x8d, 0x49, 0x4d, 0xae, 0x62,
	0xcc, 0x4e, 0x0a, 0xb7, 0x52, 0x0f, 0xeb, 0x1f, 0x87, 0x2c, 0xea, 0x0c, 0xb9, 0x53, 0xde, 0x87,
	0xcd, 0x83, 0x13, 0x57, 0x9b, 0x92, 0xf2, 0xa5, 0x47, 0x80, 0xa3, 0x62, 0xdf, 0x1a, 0xab, 0xe7,
	0x71, 0x81, 0x46, 0x1f, 0x2f, 0xd6, 0x46, 0x8a, 0x01, 0x2f, 0xfb, 0x18, 0x8f, 0xd5, 0xed, 0x20,
	0xea, 0xf7, 0xef, 0x4c, 0x21, 0x0b, 0xd4, 0xaf, 0xf7, 0xe6, 0xf3, 0xbb, 0xcf, 0x2c, 0xa2, 0x57,
	0xca, 0xe9, 0x39, 0x99, 0x9f, 0xd5, 0x14, 0xf0, 0x0e, 0x3a, 0x57, 0xfb, 0x3b, 0x2b, 0x2c, 0xc1,
	0x9b, 0x54, 0x12, 0xab, 0xae, 0xd1, 0x8d, 0x17, 0xc8, 0xe9, 0xb2, 0x8b, 0xb2, 0x71, 0x4a, 0xa1,
	0x26, 0x0e, 0x19, 0xc7, 0x99, 0xff, 0xfc, 0x10, 0x3a, 0xe3, 0xbc, 0x7f, 0xff, 0xf1, 0xad, 0xf3,
	0xf6, 0xed, 0x9e, 0xf0, 0x78, 0xed, 0x16, 0xba, 0x4e, 0x30, 0x13, 0xe4, 0x75, 0x8f, 0xf2, 0xe9,
	0xda, 0x5d, 0x74, 0x5e, 0x4a, 0xd5, 0xf3, 0x5d, 0xf1, 0xe6, 0x6e, 0x16, 0x5d, 0x91, 0x12, 0x7a,
	0xb9, 0xeb, 0xba, 0xdc, 0x15, 0xf8, 0x12, 0x7b, 0x01, 0x23, 0xa5, 0x8e, 0xc3, 0x01, 0x2e, 0x03,
	0xd2, 0x8b, 0x0c, 0x7e, 0x2c, 0x27, 0x85, 0x55, 0x44, 0xd4, 0x60, 0x6d, 0x4d, 0xdb, 0x88, 0xcc,
	0xf7, 0xe8, 0xd3, 0xb1, 0xa3, 0xfc, 0x18, 0xaa, 0xfa, 0x96, 0xf7, 0x43, 0xde, 0xdc, 0x1e, 0x9f,
	0xf9, 0x6f, 0xa6, 0xd0, 0xd7, 0xe9, 0xc7, 0x9f, 0xf6, 0xde, 0x7d, 0xf8, 0xa1, 0x34, 0x39, 0x97,
	0xd1, 0x79, 0xe6, 0x5a, 0x4b, 0x2c, 0xce, 0x1d, 0x74, 0x4e, 0xf8, 0x2b, 0xf5, 0xfe, 0x09, 0xd4,
	0x43, 0x28, 0x8f, 0x24, 0xa7, 0x0b, 0xfc, 0x2a, 0x16, 0xb7, 0x48, 0xe8, 0xee, 0xd6, 0xbe, 0x06,
	0x27, 0x1a, 0x22, 0xf0, 0x30, 0x5f, 0x38, 0x49, 0x41, 0x48, 0x24, 0x72, 0xf7, 0x9a, 0x47, 0x67,
	0xfe, 0xe4, 0x10, 0xfa, 0x36, 0xff, 0xf4, 0xe6, 0x7b, 0x52, 0xa6, 0xf3, 0xf3, 0xe7, 0x77, 0x1f,
	0x3f, 0xf8, 0x1e, 0xe9, 0xd8, 0x4d, 0x74, 0x95, 0xf9, 0x7a, 0x15, 0x62, 0xb2, 0xd6, 0xbd, 0x2e,
	0xba, 0x2c, 0xa1, 0x21, 0x35, 0x18, 0xa3, 0x38, 0x2e, 0xab, 0x91, 0x2e, 0xf2, 0xfe, 0xe1, 0xa2,
	0x54, 0x2e, 0x2d, 0xe7, 0x28, 0x14, 0xe2, 0x5f, 0xe6, 0xb9, 0x66, 0xd1, 0x59, 0x09, 0x17, 0xdd,
	0x7f, 0x85, 0x8a, 0xa7, 0x8f, 0x21, 0xd4, 0x2a, 0xa1, 0xc6, 0x9b, 0x24, 0x92, 0xc2, 0x1c, 0xa3,
	0x25, 0x9e, 0x63, 0x01, 0x5d, 0x92, 0x70, 0xac, 0x3b, 0x41, 0x9f, 0x7c, 0xe4, 0xa8, 0x58, 0x1d,
	0x55, 0xf3, 0x91, 0x30, 0x4e, 0xc9, 0x47, 0x8e, 0x55, 0x25, 0xed, 0x19, 0xc7, 0xcc, 0xff, 0x73,
	0x18, 0x9d, 0x13, 0xc7, 0x3a, 0xfb, 0xe9, 0xe7, 0x30, 0xdc, 0x77, 0xd0, 0xcd, 0xba, 0xb4, 0x6c,
	0xd8, 0x1b, 0x1f, 0xf2, 0x01, 0x5a, 0x50, 0xd0, 0xb1, 0x34, 0x9c, 0x5c, 0x46, 0x4e, 0x07, 0x82,
	0x34, 0xb2, 0x79, 0x58, 0x41, 0x37, 0x54, 0x82, 0xe2, 0x28, 0xf7, 0xa3, 0x61, 0x3c, 0x2c, 0xa7,
	0xc2, 0xae, 0x1d, 0x2e, 0x14, 0x8c, 0x7e, 0x54, 0xfc, 0xc1, 0xd9, 0x29, 0xbf, 0x7b, 0x58, 0x32,
	0x93, 0xea, 0x0e, 0xb0, 0x48, 0x57, 0x71, 0xda, 0x83, 0xff, 0x64, 0x82, 0x8e, 0x48, 0xc6, 0x7f,
	0x0d, 0x4d, 0x2b, 0x04, 0x25, 0x31, 0x04, 0x52, 0x28, 0x60, 0x65, 0x7c, 0xb6, 0x57, 0x95, 0x83,
	0x9d, 0xa4, 0xe5, 0x73, 0x47, 0x36, 0x85, 0x82, 0x66, 0x2d, 0xa3, 0xeb, 0x0a, 0xce, 0xd7, 0x43,
	0x1f, 0x67, 0xe4, 0x0a, 0x95, 0x16, 0xcf, 0x24, 0x3b, 0x7a, 0x39, 0xf5, 0xff, 0xec, 0x38, 0xfa,
	0x0a, 0xff, 0x9a, 0xaf, 0x80, 0x7b, 0x11, 0x9d, 0x2d, 0x14, 0x32, 0x57, 0x38, 0xab, 0xdc, 0xdf,
	0x48, 0x85, 0x3d, 0xe1, 0x2e, 0xf3, 0x3a, 0xb2, 0xb8, 0xbf, 0x53, 0x0b, 0x78, 0x48, 0xb0, 0x80,
	0x57, 0xd0, 0x29, 0x8e, 0x22, 0x19, 0x8a, 0xdb, 0x41, 0xe7, 0x01, 0xba, 0xcc, 0xfd, 0x39, 0xf3,
	0xa3, 0x0d, 0x82, 0x51, 0x1c, 0x46, 0x1e, 0xfd, 0x1a, 0x7f, 0x8b, 0x59, 0xf8, 0x11, 0x1c, 0x31,
	0xad, 0x81, 0xc7, 0x47, 0xe8, 0x0b, 0x71, 0x67, 0x38, 0x8a, 0x62, 0x67, 0xde, 0xa4, 0x37, 0xb0,
	0xc7, 0xaa, 0xc1, 0x2f, 0xf1, 0xcd, 0x73, 0xe8, 0x3c, 0x47, 0xec, 0x47, 0x84, 0xdc, 0xa7, 0xf4,
	0xc7, 0x2b, 0x85, 0xe1, 0xe0, 0xf2, 0xd3, 0x1c, 0x3d, 0x89, 0xe1, 0xe2, 0xc0, 0x1f, 0xf8, 0x3d,
	0x06, 0xa8, 0xa6, 0x3e, 0xe2, 0x09, 0x71, 0xd4, 0x67, 0x00, 0x21, 0xc8, 0xb1, 0xd2, 0xfa, 0x45,
	0x7e, 0x54, 0xfc, 0x12, 0xa7, 0x3b, 0x23, 0x8f, 0x15, 0x12, 0xfa, 0x82, 0xab, 0x78, 0x55, 0x16,
	0x3f, 0x5e, 0x42, 0x57, 0x05, 0xde, 0x34, 0xcb, 0x8b, 0xf3, 0xab, 0xbf, 0x89, 0x0b, 0x56, 0x5a,
	0xc8, 0xa7, 0xf2, 0x0b, 0x4a, 0x36, 0x5b, 0x18, 0x59, 0xca, 0xe6, 0x47, 0x04, 0x76, 0xeb, 0xd1,
	0xd0, 0x7e, 0x55, 0xb7, 0xaa, 0x64, 0x7a, 0x8a, 0x6e, 0x0b, 0x43, 0x42, 0x6f, 0xe6, 0x25, 0x2d,
	0xe5, 0x4b, 0x9b, 0x95, 0xdc, 0x8b, 0xe8, 0x4a, 0x7d, 0x80, 0xc4, 0x86, 0xf2, 0x3e, 0x4f, 0xc9,
	0xd5, 0x45, 0x97, 0xea, 0x5c, 0x7c, 0x3b, 0x4f, 0x71, 0x35, 0xbb, 0xb8, 0x4a, 0xd2, 0xd7, 0x79,
	0xad, 0x62, 0x97, 0xb5, 0x29, 0x0e, 0xe3, 0x4d, 0x27, 0xa0, 0x8c, 0x7c, 0x39, 0xb2, 0x92, 0x51,
	0x9c, 0x73, 0x72, 0x65, 0x8e, 0x23, 0x8f, 0x32, 0xd0, 0x12, 0xa4, 0x53, 0x6b, 0xea, 0xc1, 0x27,
	0xf4, 0xb4, 0x18, 0x64, 0x1c, 0xc0, 0x67, 0x58, 0x4d, 0x31, 0xa1, 0x60, 0xf5, 0x32, 0xba, 0x26,
	0x65, 0x23, 0x05, 0x3e, 0x28, 0x1f, 0xab, 0x1b, 0x26, 0x54, 0xc8, 0x9e, 0x47, 0x17, 0xea, 0x7c,
	0xd5, 0x97, 0x4e, 0x03, 0xc7, 0xbc, 0xc8, 0x71, 0xb1, 0xce, 0xc1, 0x7d, 0xe4, 0x5b, 0xda, 0x25,
	0x7e, 0xec, 0x66, 0xfe, 0x8f, 0x2f, 0xd0, 0xb9, 0x6c, 0xf7, 0xed, 0x4f, 0x9f, 0xde, 0xed, 0xfd,
	0xc6, 0x79, 0xbf, 0x57, 0x4f, 0x20, 0x50, 0x3a, 0xaa, 0x4e, 0xa0, 0xf6, 0xc2, 0x1e, 0xa0, 0xcb,
	0x0a, 0x3a, 0x77, 0x98, 0xf9, 0x89, 0x78, 0xa2, 0x9d, 0x41, 0x97, 0x14, 0xc4, 0xaf, 0x87, 0xfe,
	0x06, 0xf3, 0x2b, 0xe8, 0x41, 0x52, 0x2d, 0x38, 0xc3, 0x5e, 0x1c, 0x88, 0x87, 0xdc, 0x05, 0x65,
	0x6b, 0xfd, 0xcc, 0x2f, 0x1f, 0x76, 0x73, 0x26, 0xe4, 0x50, 0x67, 0x0e, 0x5d, 0x53, 0xb0, 0xa4,
	0xbe, 0x2b, 0xb8, 0x64, 0x4b, 0x84, 0x7e, 0x19, 0xdd, 0x55, 0x7e, 0x42, 0x9e, 0x05, 0x60, 0x85,
	0x9c, 0x55, 0x56, 0xd0, 0x3d, 0x1d, 0x9f, 0x50, 0x07, 0xe5, 0x78, 0x75, 0x96, 0x3b, 0xd2, 0x71,
	0xd1, 0xa2, 0x6a, 0x64, 0xe3, 0x28, 0x8b, 0x03, 0xdf, 0x23, 0x68, 0xea, 0xdc, 0x49, 0xc8, 0x13,
	0x9f, 0xd8, 0x05, 0x83, 0x75, 0x82, 0x3f, 0xfb, 0x2c, 0xa1, 0x3b, 0x0a, 0x21, 0xe5, 0x41, 0x33,
	0xdb, 0x09, 0x7b, 0x71, 0xc0, 0x8e, 0x4c, 0xab, 0x84, 0xed, 0x21, 0xba, 0xaa, 0x60, 0xeb, 0xe1,
	0x60, 0xe0, 0x3b, 0xb5, 0x67, 0xff, 0xea, 0xb1, 0xe9, 0x05, 0x71, 0x5c, 0x8c, 0xfd, 0x80, 0x7d,
	0xe6, 0x24, 0x9f, 0xf9, 0x81, 0x1c, 0xf4, 0x15, 0x5d, 0x0c, 0x43, 0x72, 0x94, 0x2a, 0xaf, 0x87,
	0x8f, 0x69, 0x34, 0xc2, 0x1b, 0xe6, 0xee, 0x3a, 0xbb, 0x43, 0x74, 0x19, 0xe6, 0x4b, 0xa5, 0x3e,
	0xbe, 0x1b, 0x6f, 0x3a, 0x21, 0xbb, 0x41, 0xc4, 0x0d, 0xe4, 0x9b, 0x4e, 0x10, 0xa7, 0x38, 0x62,
	0xb7, 0x88, 0x34, 0x53, 0xc2, 0x3c, 0xba, 0xa1, 0x20, 0xdf, 0xc2, 0x69, 0x9e, 0x38, 0x89, 0x8f,
	0x53, 0x76, 0x99, 0xd8, 0x63, 0xa0, 0x4d, 0x55, 0x57, 0x19, 0xc4, 0x71, 0x3d, 0x1e, 0x66, 0x98,
	0xdd, 0x2f, 0xae, 0x43, 0x29, 0x8b, 0x39, 0xa5, 0xf2, 0x78, 0xce, 0xa8, 0x9f, 0x84, 0xc1, 0x08,
	0x56, 0x63, 0xf9, 0x82, 0x97, 0x7b, 0xcd, 0xdf, 0x47, 0x2b, 0x0a, 0xf6, 0x98, 0xaf, 0x6e, 0x58,
	0xe1, 0xeb, 0xab, 0x67, 0x18, 0xa7, 0xab, 0x2b, 0x21, 0x52, 0x51, 0x43, 0x21, 0x27, 0xc0, 0x79,
	0x2e, 0xbc, 0xd9, 0xff, 0x56, 0x8c, 0x36, 0x9e, 0xa0, 0x7b, 0xde, 0xad, 0xc6, 0x5e, 0x0c, 0xd3,
	0xc0, 0x3a, 0x43, 0x79, 0x37, 0x80, 0xf7, 0xeb, 0x82, 0x37, 0x40, 0xcb, 0x0a, 0x5e, 0x7a, 0x0f,
	0x92, 0x04, 0x8e, 0x4b, 0xf4, 0xdf, 0x1f, 0x44, 0xd8, 0xe3, 0x73, 0x78, 0x9c, 0xad, 0xa2, 0x99,
	0xa5, 0xcf, 0xf3, 0x5f, 0x21, 0x74, 0x91, 0x80, 0x5e, 0xe4, 0x46, 0x6f, 0x86, 0xa1, 0x29, 0x0c,
	0x0c, 0x1f, 0x5c, 0x69, 0x99, 0x1b, 0x3f, 0x86, 0x0e, 0x33, 0x35, 0x80, 0xfa, 0x0f, 0x48, 0x8c,
	0xe0, 0x92, 0xb6, 0xf5, 0x4a, 0x43, 0xd8, 0xa5, 0xe1, 0xe9, 0x56, 0xc6, 0xf0, 0x31, 0x7a, 0xa0,
	0xfd, 0x94, 0xce, 0x20, 0x3e, 0xa1, 0xd8, 0xac, 0xc9, 0x8c, 0xe2, 0x80, 0xde, 0x6d, 0xed, 0xdf,
	0x30, 0xc2, 0x05, 0xe3, 0x24, 0xc6, 0x11, 0xc0, 0x56, 0x6d, 0x0c, 0xa4, 0x7e, 0xbc, 0xf4, 0x46,
	0xb2, 0x84, 0x0e, 0x19, 0x1b, 0x4a, 0xbd, 0xe6, 0x48, 0x8c, 0xa5, 0xbe, 0x47, 0x52, 0x83, 0xa9,
	0x67, 0x91, 0x1a, 0x4d, 0xb8, 0x04, 0x6d, 0x69, 0x38, 0xe1, 0x02, 0x7c, 0x02, 0xe3, 0xe9, 0xa0,
	0xae, 0x56, 0xd1, 0x0c, 0x0c, 0xe8, 0x2b, 0xf4, 0x44, 0x23, 0xa2, 0x9d, 0x11, 0x75, 0xb4, 0x3a,
	0x60, 0x64, 0x48, 0xe1, 0x12, 0x6e, 0x62, 0x63, 0x9a, 0xa0, 0xc7, 0x1a, 0xfe, 0x49, 0x0c, 0xea,
	0x3f, 0x3d, 0x89, 0x6e, 0x70, 0xe5, 0x6d, 0x15, 0x76, 0x75, 0x41, 0xac, 0x7c, 0x62, 0x62, 0x5e,
	0x97, 0xc5, 0xe2, 0x17, 0xc6, 0x56, 0x76, 0x49, 0x2c, 0x77, 0x61, 0x6a, 0x6c, 0x8d, 0x3e, 0x27,
	0xb1, 0xb9, 0x4f, 0x4d, 0x7a, 0xa6, 0x34, 0xbd, 0x6b, 0x62, 0x1d, 0xb7, 0x36, 0x16, 0xd8, 0x41,
	0x5d, 0x93, 0x0f, 0xeb, 0x0c, 0x71, 0x4f, 0xac, 0xd5, 0x3a, 0x91, 0x3d, 0x8e, 0xd0, 0x0b, 0x83,
	0x69, 0x32, 0x37, 0xcb, 0x2f, 0xc5, 0x1a, 0x4b, 0x13, 0x58, 0xe7, 0x55, 0xb1, 0x70, 0x51, 0x0b,
	0x23, 0x6d, 0x34, 0xa4, 0x7a, 0x5b, 0xbd, 0x82, 0xee, 0x99, 0x0c, 0xc7, 0xb8, 0xc9, 0x36, 0xd2,
	0x3f, 0x89, 0xe5, 0x36, 0xea, 0xad, 0xd4, 0x80, 0x1b, 0x71, 0x4a, 0xed, 0xf8, 0x13, 0xb1, 0x46,
	0x5b, 0x3b, 0x73, 0xfe, 0x42, 0xac, 0x46, 0xdd, 0xde, 0xaa, 0xaf, 0x8b, 0xe5, 0xae, 0xf6, 0x61,
	0xdc, 0x5f, 0xa3, 0x5e, 0xb3, 0xa4, 0x76, 0x36, 0x7e, 0xdd, 0x44, 0x85, 0x8c, 0x4c, 0x3d, 0x46,
	0x8f, 0xda, 0x74, 0x53, 0x65, 0xf1, 0xb7, 0x90, 0xd3, 0x2c, 0x66, 0x12, 0xc3, 0xff, 0xef, 0x7e,
	0x85, 0x4e, 0x93, 0xc7, 0x8d, 0xce, 0xde, 0xde, 0xa7, 0x77, 0x3f, 0x2f, 0x63, 0x88, 0x37, 0xd0,
	0x15, 0x82, 0xc5, 0x1b, 0x39, 0x79, 0x9e, 0xfa, 0x3d, 0xf9, 0x9d, 0xe7, 0xc5, 0x71, 0x12, 0xd7,
	0x09, 0x48, 0xd1, 0xb9, 0xf2, 0x31, 0xe3, 0x02, 0x14, 0xe3, 0x7b, 0xa4, 0xa6, 0x2d, 0x96, 0x71,
	0xbc, 0x55, 0x15, 0xcc, 0xa4, 0xcf, 0x38, 0x0e, 0x09, 0xc9, 0x79, 0xd6, 0xd0, 0x7d, 0x8d, 0x80,
	0x2d, 0x3f, 0x5f, 0x8f, 0xe1, 0x39, 0x80, 0x8b, 0xad, 0xc3, 0x42, 0xc6, 0x98, 0x39, 0x74, 0x4d,
	0xc2, 0x4a, 0xcb, 0xba, 0x26, 0x38, 0xf5, 0x63, 0x8f, 0x7f, 0x94, 0x44, 0x12, 0xf4, 0x8c, 0xd3,
	0xe3, 0xcc, 0x4d, 0xe3, 0x2d, 0x2c, 0x56, 0x5a, 0x3a, 0x2a, 0x5c, 0x3d, 0x3e, 0x43, 0x0f, 0xf5,
	0x7c, 0x5c, 0x39, 0x7a, 0x12, 0xcb, 0x39, 0xc6, 0xbf, 0x78, 0xeb, 0xdc, 0x46, 0x67, 0xc7, 0xd9,
	0xfb, 0x81, 0x93, 0xf3, 0x40, 0xe3, 0xe3, 0x9d, 0xfb, 0xe8, 0xc2, 0x38, 0x99, 0x1f, 0x79, 0x78,
	0x1b, 0x7b, 0xe5, 0xe3, 0x24, 0x96, 0x5c, 0xe6, 0xa6, 0x8c, 0x14, 0xca, 0xc9, 0xf5, 0xe0, 0xdd,
	0xdd, 0x17, 0x7c, 0xb8, 0x75, 0x16, 0x5d, 0x96, 0xb1, 0x94, 0xaf, 0x25, 0x10, 0xf7, 0x1e, 0x47,
	0xf1, 0x81, 0x00, 0x67, 0x19, 0xb9, 0x34, 0x24, 0x2f, 0x60, 0x86, 0x39, 0x0f, 0x39, 0x3e, 0x5e,
	0xec, 0xeb, 0xe3, 0x2c, 0x51, 0x0c, 0x13, 0xe1, 0xbb, 0xac, 0x04, 0x68, 0xc6, 0xec, 0xea, 0xa2,
	0x7a, 0xfa, 0xe1, 0x1d, 0x78, 0xc0, 0x2a, 0xb7, 0xb3, 0x6a, 0x8c, 0x5f, 0x09, 0x17, 0xb7, 0x52,
	0xd5, 0x53, 0xb0, 0x02, 0xac, 0xf0, 0x14, 0x97, 0xd1, 0x8a, 0x64, 0x0f, 0x1a, 0x17, 0x90, 0xa4,
	0xa4, 0x6a, 0x59, 0xb1, 0x28, 0xbd, 0xf2, 0xc5, 0x11, 0x4b, 0xd0, 0x73, 0x7d, 0x9c, 0x3e, 0xcb,
	0x71, 0x92, 0x90, 0x67, 0x1f, 0xa4, 0xe6, 0xb4, 0x55, 0x6d, 0xe0, 0xc7, 0x3b, 0x1e, 0x5a, 0x94,
	0x30, 0x0c, 0x7b, 0xaf, 0xb0, 0x9b, 0x17, 0x7a, 0xa3, 0x2a, 0xfb, 0xfc, 0x0d, 0x97, 0xb2, 0x4b,
	0xa1, 0x18, 0xb9, 0xb3, 0x4d, 0x56, 0x63, 0x87, 0x4b, 0x60, 0x77, 0xbc, 0x73, 0x47, 0xa6, 0x6a,
	0xa4, 0x5c, 0xf0, 0x69, 0x21, 0xd4, 0x2f, 0x15, 0x39, 0x8c, 0xd2, 0xc2, 0x01, 0x60, 0x69, 0xbf,
	0x16, 0x96, 0xd5, 0x8b, 0x8c, 0x14, 0xfa, 0x2e, 0xd6, 0x27, 0xa9, 0x7d, 0x78, 0x86, 0xbf, 0x9e,
	0x95, 0x6a, 0xfb, 0xd6, 0x3a, 0x8e, 0x18, 0x66, 0xb9, 0xbc, 0x6e, 0x1d, 0x27, 0xfb, 0x0e, 0xa7,
	0x71, 0x55, 0xbc, 0x9b, 0xbb, 0xbc, 0xe8, 0xcb, 0xa6, 0x1a, 0xca, 0x0a, 0xfa, 0xee, 0xc6, 0x28,
	0x1d, 0x06, 0x38, 0x23, 0x7a, 0xc9, 0x2c, 0xa8, 0x75, 0x9e, 0x86, 0x60, 0xbb, 0x36, 0x1f, 0xdc,
	0xcf, 0xd1, 0x33, 0xc9, 0xf8, 0x90, 0x0b, 0x01, 0xba, 0xa8, 0xc9, 0x25, 0x01, 0x49, 0xba, 0x30,
	0xf2, 0x70, 0xee, 0xf8, 0x41, 0x4d, 0xea, 0x05, 0x90, 0xba, 0xc8, 0x4b, 0x7d, 0x81, 0xee, 0xc9,
	0xd6, 0x56, 0x96, 0xa7, 0x43, 0xf2, 0xe4, 0xad, 0x2c, 0xd6, 0x1b, 0xa7, 0xd6, 0x45, 0x10, 0x20,
	0x44, 0xe3, 0x9f, 0xc9, 0xd6, 0x0e, 0x27, 0x20, 0x1a, 0x86, 0x34, 0x35, 0x11, 0xd4, 0xf5, 0xa6,
	0x99, 0xc3, 0x4a, 0x76, 0x17, 0xcd, 0x6a, 0xd9, 0x01, 0x67, 0x9e, 0x62, 0xd7, 0xcf, 0x68, 0xde,
	0xb0, 0x6f, 0xca, 0xb4, 0x6a, 0xa5, 0x90, 0x97, 0xb2, 0x85, 0xc8, 0x09, 0xc9, 0xf2, 0xd4, 0xdf,
	0x80, 0x41, 0xb7, 0xae, 0x80, 0x84, 0xd5, 0xda, 0x8d, 0x84, 0x62, 0x70, 0x89, 0xaa, 0x54, 0xe5,
	0x09, 0xaf, 0x02, 0x37, 0x1f, 0xbe, 0x9f, 0xf9, 0xcf, 0xa6, 0xd0, 0x69, 0x02, 0xcd, 0x2a, 0x36,
	0x2d, 0xee, 0x68, 0x72, 0x83, 0x61, 0x8d, 0x28, 0xaa, 0x50, 0x76, 0x14, 0x21, 0x91, 0xe2, 0x3a,
	0x89, 0x58, 0x39, 0x94, 0x3b, 0x82, 0x1c, 0xa9, 0xe0, 0x4b, 0x3c, 0x3d, 0xf7, 0x30, 0x80, 0x87,
	0x4b, 0x1c, 0xe9, 0xdc, 0x47, 0x17, 0x65, 0xd4, 0x34, 0x6d, 0x9c, 0x90, 0xa6, 0x72, 0xe6, 0x5f,
	0x98, 0x42, 0x96, 0xf7, 0xfe, 0xd7, 0xbf, 0x29, 0xba, 0xc0, 0x3f, 0xd9, 0xf2, 0x82, 0xcd, 0x1d,
	0x80, 0x22, 0x4b, 0x9f, 0x6c, 0xd5, 0xfe, 0xce, 0x23, 0xcd, 0x5c, 0x06, 0xee, 0xa8, 0xd1, 0x80,
	0x46, 0xfa, 0xb8, 0x7c, 0xdd, 0x4c, 0xc0, 0x7e, 0x33, 0x7f, 0xfc, 0x35, 0x3a, 0x47, 0x86, 0x91,
	0xa4, 0xfc, 0x24, 0x77, 0xc5, 0x65, 0x4b, 0xee, 0xa2, 0x69, 0xda, 0x13, 0x9a, 0x43, 0x01, 0x2e,
	0x21, 0x25, 0x4d, 0xea, 0xaa, 0x09, 0x9d, 0x24, 0x09, 0x98, 0xb3, 0x36, 0xc5, 0x1b, 0xf2, 0x07,
	0xe8, 0x92, 0x8a, 0xa7, 0xe7, 0xbb, 0x6c, 0xd3, 0x07, 0xa3, 0xb2, 0x86, 0xee, 0xab, 0x88, 0x8b,
	0xce, 0x57, 0xa9, 0xb4, 0x9c, 0xb0, 0xda, 0xf4, 0x6d, 0x48, 0x60, 0xf6, 0xc0, 0x8c, 0x95, 0x1d,
	0xe7, 0xf8, 0x7d, 0xcd, 0x46, 0xb7, 0x94, 0xcc, 0x71, 0x94, 0x3b, 0x2e, 0x7c, 0xf2, 0x28, 0x6f,
	0xaa, 0x7a, 0xa8, 0xab, 0x64, 0x12, 0xb2, 0xbb, 0x8e, 0x42, 0x5c, 0x7c, 0x93, 0x9d, 0xe4, 0x78,
	0xc3, 0xdc, 0x65, 0x08, 0xb7, 0x71, 0x19, 0x1e, 0x2e, 0x7e, 0x0b, 0xe9, 0x2d, 0x30, 0x9f, 0x6f,
	0x8f, 0x44, 0xa4, 0xe5, 0x3c, 0x38, 0x74, 0xfc, 0x60, 0xe4, 0x78, 0x5e, 0x8a, 0xab, 0x87, 0x48,
	0xab, 0x4d, 0x5f, 0xea, 0x3b, 0xdb, 0x6c, 0x58, 0xbe, 0x10, 0x7c, 0x30, 0x12, 0xb8, 0x57, 0xf0,
	0xf8, 0x69, 0xc8, 0x4e, 0x61, 0x0b, 0x50, 0x9a, 0xfc, 0x91, 0x92, 0x78, 0x18, 0x04, 0xa3, 0x00,
	0x0f, 0x9c, 0x80, 0x0c, 0x63, 0xe1, 0x41, 0x13, 0xfe, 0x93, 0xfc, 0x06, 0xa1, 0x99, 0x7b, 0x72,
	0x99, 0x2c, 0xcc, 0xfd, 0x97, 0xc2, 0x4e, 0xb8, 0xa4, 0x1e, 0x91, 0x32, 0x83, 0x8b, 0x87, 0xb3,
	0x0d, 0xe6, 0x28, 0x40, 0x66, 0x44, 0x72, 0x77, 0x20, 0x67, 0x4b, 0x70, 0x9a, 0xc5, 0x11, 0x3b,
	0x78, 0x75, 0x9b, 0x94, 0x24, 0x59, 0x8f, 0x23, 0x2c, 0xc9, 0x00, 0x4c, 0x7c, 0x44, 0x25, 0x53,
	0x2d, 0xbf, 0x1d, 0xf9, 0x95, 0x25, 0x0f, 0xed, 0x96, 0xde, 0x93, 0x86, 0x3d, 0x77, 0xaa, 0xc9,
	0xfe, 0x86, 0x77, 0xba, 0x1e, 0xa3, 0x19, 0x15, 0x1b, 0x4d, 0xf2, 0x42, 0x1e, 0x98, 0x32, 0xd6,
	0x8e, 0xe0, 0x44, 0x6e, 0xa0, 0x27, 0xe6, 0xbc, 0x64, 0x17, 0x74, 0xe3, 0xa8, 0x98, 0x4e, 0xba,
	0xf8, 0x4f, 0x0b, 0x2e, 0xb2, 0x66, 0x52, 0x85, 0x6c, 0x33, 0x64, 0x52, 0xbf, 0x15, 0xbc, 0x2a,
	0xcd, 0x82, 0x16, 0x59, 0xe9, 0xa8, 0x9f, 0x11, 0x8e, 0x1f, 0xfa, 0xef, 0xb2, 0x64, 0x8b, 0x34,
	0x77, 0x03, 0xcb, 0x3b, 0x0a, 0x6e, 0xf9, 0x0b, 0xb5, 0x1e, 0x57, 0xc6, 0x55, 0xd4, 0xc6, 0x73,
	0xc2, 0xf1, 0xc3, 0x41, 0x0b, 0x6d, 0x04, 0xd0, 0xe6, 0x9f, 0x17, 0x5c, 0x58, 0x8d, 0x66, 0x42,
	0x32, 0xdf, 0x0b, 0x62, 0x1a, 0x0a, 0xa5, 0x66, 0xe6, 0x38, 0xc0, 0xe5, 0xea, 0xbe, 0x28, 0xb8,
	0xb9, 0x8e, 0x5a, 0x49, 0x2a, 0xa8, 0x23, 0x49, 0x85, 0x3b, 0xf2, 0xbd, 0xd2, 0xc3, 0x60, 0xa9,
	0xae, 0xa6, 0x20, 0xbf, 0x9d, 0xd2, 0x14, 0x31, 0x5c, 0x85, 0x90, 0xab, 0xe5, 0x32, 0xb7, 0xc5,
	0x97, 0xc9, 0x97, 0x9e, 0xa3, 0xbb, 0x4a, 0x29, 0xb5, 0x54, 0x67, 0xe0, 0x60, 0xd8, 0x42, 0xfa,
	0xa7, 0x15, 0x74, 0xbd, 0x69, 0xf9, 0x33, 0xdf, 0xc2, 0x5e, 0xa8, 0xa5, 0xf9, 0x52, 0x31, 0x0a,
	0xf9, 0xba, 0xae, 0x71, 0x6e, 0x4d, 0xc9, 0xdc, 0x53, 0xeb, 0x67, 0x92, 0xc6, 0x7d, 0x8a, 0xe8,
	0x71, 0x02, 0x48, 0x89, 0x6c, 0x5d, 0x87, 0x06, 0x08, 0x09, 0xe6, 0x36, 0xd0, 0xa2, 0x72, 0x0b,
	0x61, 0xb1, 0xbb, 0x12, 0x7f, 0xc1, 0x1d, 0xec, 0x6f, 0x80, 0x30, 0xe6, 0xc4, 0xce, 0x16, 0x9e,
	0xd2, 0xdf, 0x38, 0x85, 0x3a, 0x92, 0xdd, 0xfd, 0x06, 0xba, 0xd2, 0xb4, 0xaf, 0xcf, 0xca, 0x48,
	0x94, 0x3b, 0xfa, 0x6d, 0x74, 0xc6, 0x64, 0x2f, 0xb7, 0xd1, 0x74, 0xfb, 0x5d, 0x7c, 0x09, 0xdd,
	0x9e, 0x64, 0xff, 0x7e, 0x88, 0xae, 0xb6, 0xd9, 0xb9, 0x9f, 0xa2, 0xd9, 0x7d, 0xec, 0xd9, 0xb3,
	0xe8, 0x72, 0x8b, 0xdd, 0x7a, 0x0e, 0x5d, 0x6b, 0xb5, 0x4f, 0x4b, 0xa5, 0x2b, 0x77, 0xe8, 0xdb,
	0xe8, 0xac, 0xc9, 0xde, 0xbc, 0x8a, 0xee, 0x4f, 0xb8, 0x2b, 0x4b, 0x67, 0xb1, 0x69, 0x3f, 0x7e,
	0x24, 0xeb, 0xb3, 0x6e, 0x27, 0xbe, 0x8b, 0xce, 0x9b, 0xed, 0xc1, 0xd2, 0x89, 0x56, 0xef, 0xbe,
	0x2b, 0xe8, 0xee, 0x64, 0xfb, 0xee, 0x23, 0x74, 0xbd, 0xdd, 0x8e, 0xbb, 0x88, 0x6e, 0x4d, 0xb0,
	0xd7, 0x62, 0xb4, 0x74, 0x10, 0xbb, 0xac, 0x74, 0x92, 0x9a, 0xf6, 0x57, 0xe9, 0x52, 0x6b, 0xde,
	0x59, 0x55, 0xdf, 0xd2, 0xee, 0xa9, 0x6b, 0x32, 0xfd, 0x33, 0xdb, 0x4d, 0x9f, 0xa0, 0x07, 0x93,
	0xef, 0xa3, 0x52, 0xbd, 0x92, 0xed, 0xa0, 0x73, 0x32, 0xbd, 0xd2, 0xec, 0x9d, 0x4f, 0x64, 0xd3,
	0x6d, 0xba, 0x6b, 0x3e, 0x97, 0x69, 0x65, 0x8b, 0xfd, 0x72, 0x15, 0xdd, 0x98, 0x70, 0xa7, 0x5c,
	0x40, 0x17, 0xdb, 0xee, 0x91, 0x4b, 0xb2, 0x91, 0x69, 0xde, 0x1d, 0x9f, 0xca, 0xb4, 0xcb, 0x78,
	0x5f, 0xc4, 0x68, 0xee, 0x20, 0x76, 0xc4, 0x7f, 0xd1, 0x62, 0x95, 0x76, 0x24, 0xfb, 0xe2, 0x3d,
	0x96, 0xb6, 0xb1, 0xf1, 0xd8, 0x6b, 0x6b, 0x28, 0x95, 0xbb, 0xe4, 0x2c, 0xcb, 0x17, 0x6c, 0x74,
	0xf0, 0x2d, 0x8b, 0x04, 0x4c, 0x70, 0xf2, 0x7d, 0x8a, 0x66, 0x0d, 0x79, 0x65, 0x5b, 0x67, 0x59,
	0xa2, 0xa4, 0xd5, 0xd9, 0xd7, 0x65, 0xd5, 0x55, 0xf6, 0x73, 0xf8, 0xb5, 0x59, 0xd2, 0xcd, 0x36,
	0xa7, 0xdf, 0x25, 0x96, 0x4d, 0xbf, 0xdd, 0xf1, 0x57, 0xf7, 0x2d, 0xe5, 0xee, 0x5a, 0xd6, 0x92,
	0x30, 0x3a, 0x00, 0x97, 0xd5, 0x62, 0x26, 0x3d, 0x01, 0xeb, 0x94, 0xa0, 0x69, 0xcb, 0x5d, 0xd6,
	0x0c, 0x8b, 0x6e, 0xe7, 0x2d, 0x6b, 0x93, 0x18, 0x1e, 0x82, 0x75, 0xea, 0xa2, 0xde, 0x87, 0x9f,
	0xb3, 0xb4, 0xbc, 0x13, 0x1e, 0x83, 0xcb, 0x4a, 0x4e, 0x2d, 0xcf, 0xc1, 0x4f, 0x58, 0x32, 0xe9,
	0x49, 0x0e, 0xc2, 0x01, 0x7a, 0xda, 0x82, 0xb9, 0x69, 0x8f, 0xd6, 0x4d, 0x6e, 0xd3, 0x56, 0xad,
	0x5b, 0xe1, 0xcd, 0x3b, 0x76, 0xc3, 0x97, 0xb5, 0x1b, 0xf7, 0x4b, 0x8d, 0x4e, 0x9b, 0xed, 0xdf,
	0x3d, 0x96, 0x27, 0x76, 0x1f, 0xc7, 0x61, 0x9d, 0x92, 0xca, 0x76, 0xf3, 0x25, 0x8d, 0x92, 0x6a,
	0x36, 0xf5, 0x9e, 0x46, 0x5b, 0x4c, 0xf7, 0x76, 0xac, 0xd1, 0xf4, 0x16, 0x5b, 0x7c, 0x99, 0x4e,
	0x79, 0xd2, 0x33, 0x71, 0x99, 0x78, 0xbb, 0xf5, 0xa1, 0xf8, 0xa9, 0x66, 0xf0, 0x9a, 0xf7, 0x7d,
	0x57, 0xa3, 0xaa, 0xc6, 0xdb, 0x7f, 0xc0, 0x2a, 0x9f, 0x1c, 0xc8, 0xb9, 0xf8, 0xaf, 0x5b, 0xe8,
	0x02, 0xf5, 0x02, 0xba, 0x3a, 0x37, 0xa0, 0x6b, 0xec, 0x06, 0x74, 0x27, 0x71, 0x03, 0xba, 0xad,
	0xdc, 0x80, 0xee, 0x3e, 0xdc, 0x80, 0xee, 0xbe, 0xdc, 0x80, 0xee, 0x44, 0x6e, 0x40, 0xf7, 0x20,
	0xdc, 0x80, 0xee, 0x24, 0x6e, 0x40, 0x77, 0x32, 0x37, 0xa0, 0x3b, 0x89, 0x1b, 0xd0, 0x6d, 0xe5,
	0x06, 0x74, 0xf7, 0xeb, 0x06, 0x74, 0xf7, 0xe1, 0x06, 0x74, 0x27, 0x74, 0x03, 0xba, 0x2d, 0xdd,
	0x80, 0xee, 0x44, 0x6e, 0x40, 0x77, 0x9f, 0x6e, 0x40, 0x77, 0x42, 0x37, 0xa0, 0xbb, 0x1f, 0x37,
	0xa0, 0x7b, 0xa0, 0x6e, 0x40, 0x77, 0x1f, 0x6e, 0x40, 0x77, 0x5f, 0x6e, 0x40, 0x77, 0x1f, 0x6e,
	0x40, 0x77, 0xdf, 0x6e, 0x40, 0xf7, 0x00, 0xdc, 0x80, 0x6e, 0x4b, 0x37, 0xa0, 0x3b, 0x99, 0x1b,
	0xd0, 0x3d, 0x00, 0x37, 0xa0, 0x7b, 0x30, 0x6e, 0x40, 0x77, 0xbf, 0x6e, 0x40, 0x77, 0x62, 0x37,
	0xa0, 0xbb, 0x2f, 0x37, 0xa0, 0x7b, 0x10, 0x6e, 0x40, 0xf7, 0x60, 0xdd, 0x00, 0x5b, 0xe7, 0x06,
	0xd8, 0xc6, 0x6e, 0x80, 0x3d, 0x89, 0x1b, 0x60, 0xb7, 0x72, 0x03, 0xec, 0x7d, 0xb8, 0x01, 0xf6,
	0xbe, 0xdc, 0x00, 0x7b, 0x22, 0x37, 0xc0, 0x3e, 0x08, 0x37, 0xc0, 0x9e, 0xc4, 0x0d, 0xb0, 0x27,
	0x73, 0x03, 0xec, 0x49, 0xdc, 0x00, 0xbb, 0x95, 0x1b, 0x60, 0xef, 0xd7, 0x0d, 0xb0, 0xf7, 0xe1,
	0x06, 0xd8, 0x13, 0xba, 0x01, 0x76, 0x4b, 0x37, 0xc0, 0x9e, 0xc8, 0x0d, 0xb0, 0xf7, 0xe9, 0x06,
	0xd8, 0x13, 0xba, 0x01, 0xf6, 0x7e, 0xdc, 0x00, 0xfb, 0x40, 0xdd, 0x00, 0x7b, 0x1f, 0x6e, 0x80,
	0xbd, 0x2f, 0x37, 0xc0, 0xde, 0x87, 0x1b, 0x60, 0xef, 0xdb, 0x0d, 0xb0, 0x0f, 0xc0, 0x0d, 0xb0,
	0x5b, 0xba, 0x01, 0xf6, 0x64, 0x6e, 0x80, 0x7d, 0x00, 0x6e, 0x80, 0x7d, 0x30, 0x6e, 0x80, 0xbd,
	0x5f, 0x37, 0xc0, 0x9e, 0xd8, 0x0d, 0xb0, 0xf7, 0xe5, 0x06, 0xd8, 0x07, 0xe1, 0x06, 0xd8, 0x07,
	0xe1, 0x06, 0xfc, 0xdd, 0x2f, 0xd1, 0x85, 0x6c, 0xef, 0xd3, 0x9b, 0xbd, 0xdd, 0x1f, 0x7e, 0x93,
	0xbc, 0xf9, 0xf4, 0xe6, 0xc7, 0xdd, 0xbd, 0xdd, 0x4f, 0x02, 0x14, 0x0e, 0x52, 0x7a, 0x8e, 0x12,
	0x27, 0x75, 0x42, 0x9c, 0xe3, 0x54, 0xe6, 0x05, 0x3c, 0x40, 0x97, 0x54, 0x84, 0x4e, 0x98, 0x0b,
	0x95, 0x7d, 0xc8, 0x7d, 0xa8, 0x8a, 0xb8, 0x17, 0xc7, 0x01, 0x76, 0xa2, 0xd2, 0x01, 0x28, 0x51,
	0xd9, 0x2a, 0x06, 0x77, 0xdd, 0x49, 0xd9, 0x96, 0x0f, 0xc6, 0x64, 0x1e, 0x5d, 0x57, 0x52, 0xc3,
	0xf8, 0x94, 0xdb, 0xfc, 0x72, 0x93, 0x7c, 0xcf, 0xc9, 0x1d, 0x86, 0x73, 0x07, 0x97, 0x42, 0x23,
	0xbf, 0xac, 0xee, 0x59, 0xbf, 0x22, 0xbf, 0xa2, 0xe2, 0xe8, 0x07, 0x71, 0x85, 0x70, 0x67, 0xd5,
	0x60, 0x95, 0x63, 0xe9, 0x93, 0x02, 0x1c, 0xdc, 0xb6, 0xfa, 0x10, 0x5d, 0x55, 0xd1, 0x06, 0x38,
	0x1a, 0xe4, 0xeb, 0x0c, 0xde, 0xde, 0x65, 0x1b, 0xa1, 0x92, 0x9c, 0x64, 0x58, 0x0b, 0x37, 0x72,
	0x96, 0x81, 0x83, 0xdf, 0xeb, 0xbb, 0xe8, 0xa6, 0x8a, 0x2f, 0x8c, 0xa3, 0x7c, 0x7d, 0xb4, 0x83,
	0x9d, 0xb4, 0xcc, 0x2f, 0xb6, 0x5a, 0x02, 0x96, 0x54, 0x3c, 0xc3, 0x20, 0xf7, 0x93, 0x80, 0xce,
	0x1e, 0x3c, 0x77, 0xf8, 0x72, 0x0c, 0x81, 0xa8, 0x60, 0x8e, 0x86, 0xe1, 0xc8, 0x8f, 0x46, 0x83,
	0x34, 0x1e, 0x26, 0xec, 0x11, 0x91, 0xdd, 0xd4, 0x4a, 0x2e, 0xc9, 0xd7, 0x29, 0xc1, 0xfe, 0x6b,
	0xa6, 0x86, 0x62, 0x78, 0xbf, 0x16, 0x1d, 0xa5, 0x5b, 0x5a, 0xea, 0x51, 0xdc, 0xef, 0x67, 0xb8,
	0xac, 0x5f, 0xbf, 0xd6, 0x34, 0x9f, 0xaf, 0xf3, 0x1d, 0xb6, 0x27, 0xaf, 0x30, 0x63, 0xae, 0xa2,
	0xcd, 0xf0, 0xeb, 0xa2, 0xef, 0xec, 0xed, 0x0f, 0x83, 0x53, 0x28, 0xe7, 0x3f, 0xcb, 0xc9, 0xf3,
	0x86, 0xd3, 0xc2, 0x66, 0xa9, 0x91, 0x9f, 0x3b, 0x03, 0x22, 0xff, 0x5b, 0xde, 0xeb, 0x5a, 0x42,
	0xb7, 0x95, 0x06, 0x20, 0x77, 0x89, 0xaa, 0xd0, 0xe4, 0xb5, 0x67, 0x84, 0x7d, 0xad, 0x81, 0x2d,
	0xf7, 0x43, 0x4c, 0xb3, 0xea, 0x9d, 0x1d, 0x03, 0x2e, 0x36, 0xb0, 0xd1, 0xaf, 0x9d, 0x13, 0xb6,
	0x26, 0x0f, 0x3d, 0x6c, 0xd4, 0x34, 0x3a, 0x1a, 0xa0, 0x6b, 0xe7, 0x39, 0x78, 0x7a, 0x61, 0x57,
	0x6f, 0x42, 0x86, 0x13, 0xa5, 0xd9, 0xa0, 0x6f, 0x0f, 0x4b, 0x58, 0x3b, 0x2b, 0x93, 0x36, 0x62,
	0x70, 0x2b, 0xd5, 0x9a, 0x72, 0xa2, 0xc1, 0xb0, 0xd0, 0xb9, 0x8b, 0x1c, 0x1e, 0xbd, 0x64, 0x5c,
	0x54, 0xab, 0x5e, 0x8e, 0x23, 0x0e, 0xc5, 0xbe, 0xc6, 0x73, 0x3d, 0x51, 0xab, 0x60, 0xfe, 0x1d,
	0x37, 0xb2, 0x97, 0xb9, 0x0d, 0xa8, 0x05, 0x33, 0x1d, 0xdf, 0x2b, 0xdc, 0xee, 0xcd, 0x98, 0x67,
	0xfe, 0xe1, 0x17, 0xe8, 0x12, 0xad, 0x03, 0xf7, 0xe3, 0xee, 0x87, 0x3d, 0x72, 0x68, 0xac, 0x67,
	0x1d, 0xe0, 0xd1, 0xf4, 0x64, 0x73, 0x52, 0x3d, 0x8b, 0xf5, 0xd0, 0x92, 0x86, 0xd6, 0x19, 0x16,
	0xad, 0x0c, 0x7c, 0x27, 0x1a, 0xf5, 0x86, 0x99, 0x1f, 0x91, 0x6a, 0x60, 0xd4, 0x29, 0x99, 0xe2,
	0x0b, 0x16, 0x19, 0x4b, 0xc9, 0x9d, 0xed, 0x51, 0xdf, 0x0f, 0x4a, 0xff, 0xfb, 0x10, 0xff, 0xd8,
	0xf1, 0x21, 0xbc, 0x6f, 0x91, 0x4b, 0x29, 0x8e, 0xa3, 0x87, 0xf9, 0x97, 0x7f, 0xcf, 0xd0, 0x9c,
	0x86, 0xdc, 0x5d, 0x2f, 0x9a, 0x2b, 0x96, 0xd8, 0x3f, 0xc2, 0x17, 0x71, 0x7a, 0x0a, 0xaf, 0xa4,
	0xe4, 0xec, 0x03, 0x1c, 0x91, 0x82, 0x69, 0xdc, 0xb6, 0x7d, 0x94, 0x7f, 0x27, 0xf9, 0x18, 0x3d,
	0xd0, 0x70, 0xab, 0xde, 0xc9, 0x62, 0x83, 0x2f, 0x6f, 0xc4, 0x29, 0x76, 0x22, 0xa1, 0xdd, 0xc7,
	0xf9, 0xb4, 0xb1, 0x7d, 0xb4, 0xa2, 0xe1, 0x0e, 0x9d, 0xc0, 0xd9, 0xc9, 0x8a, 0xa1, 0x66, 0x35,
	0xe9, 0xb8, 0x82, 0x89, 0x27, 0xf8, 0xc2, 0x47, 0x4b, 0x5a, 0x2d, 0x49, 0xd2, 0x38, 0x49, 0x7d,
	0x9c, 0x3b, 0xe9, 0x0e, 0xdb, 0xb9, 0x3c, 0x83, 0xa9, 0xe6, 0x0a, 0x27, 0xd1, 0xd2, 0x94, 0x95,
	0x1b, 0x27, 0x3c, 0x8d, 0x1d, 0xa0, 0x55, 0x8d, 0x94, 0xdc, 0xf1, 0xb7, 0x1c, 0x32, 0x7b, 0xac,
	0xee, 0x33, 0x3f, 0x1a, 0x27, 0xf9, 0x4c, 0xbb, 0x2f, 0xd1, 0x82, 0x91, 0x20, 0x96, 0xd1, 0xcc,
	0x71, 0xdd, 0x5a, 0xd5, 0xa8, 0xd7, 0xa8, 0xa7, 0x5b, 0x2d, 0x1b, 0xa3, 0x88, 0xb4, 0x9f, 0x24,
	0xab, 0xca, 0x86, 0x29, 0x4d, 0x13, 0x9e, 0x8e, 0x20, 0xb7, 0x35, 0x53, 0xe4, 0xaf, 0xf8, 0x82,
	0x5f, 0xfa, 0x29, 0x1a, 0x66, 0x23, 0x1c, 0x26, 0x41, 0xbc, 0x83, 0xd3, 0x42, 0x50, 0xb1, 0x24,
	0x7c, 0x8f, 0xc9, 0x39, 0xc5, 0x57, 0x25, 0x73, 0xe1, 0x3d, 0x96, 0x52, 0x0e, 0x79, 0xf4, 0x1c,
	0x54, 0x6e, 0xff, 0xf8, 0xa9, 0x96, 0xbc, 0xcb, 0xd5, 0x2d, 0x13, 0x21, 0x0c, 0xc2, 0xf6, 0xcb,
	0x75, 0x76, 0x9e, 0xd5, 0xea, 0xb8, 0x9f, 0xbb, 0x8e, 0x9b, 0xc6, 0xd1, 0x4e, 0xc8, 0xf6, 0x4e,
	0x9f, 0xf9, 0x42, 0x3a, 0x0d, 0xf5, 0x5d, 0xb6, 0x75, 0x0e, 0xc8, 0x13, 0x90, 0x7f, 0x72, 0x0f,
	0x9d, 0xab, 0x99, 0xb3, 0xf4, 0xe3, 0x7b, 0x6a, 0xca, 0x6e, 0xa3, 0x1b, 0x63, 0xa2, 0xa0, 0x96,
	0x26, 0x6f, 0xc5, 0x64, 0xba, 0xcc, 0x97, 0x3b, 0xad, 0x9e, 0xc6, 0x4e, 0xf1, 0xca, 0xd3, 0x45,
	0xd3, 0x72, 0xb6, 0xf2, 0xbd, 0x30, 0x09, 0x7f, 0x1c, 0xe2, 0x97, 0x0d, 0x7b, 0x5f, 0x26, 0xe1,
	0x29, 0x8e, 0x0a, 0x85, 0x82, 0xf2, 0x6f, 0x6c, 0x8a, 0x73, 0xad, 0x82, 0x9e, 0x56, 0x93, 0x17,
	0x3f, 0x75, 0x84, 0xf3, 0xdc, 0x48, 0x1d, 0x38, 0x2d, 0x2f, 0x61, 0x39, 0xca, 0x79, 0xb8, 0xc7,
	0x3a, 0x8e, 0x64, 0x3d, 0x00, 0x4b, 0x9a, 0xe2, 0x2c, 0x89, 0x23, 0xcf, 0x89, 0xf2, 0xda, 0x57,
	0x8f, 0xd5, 0x8a, 0x9b, 0x29, 0x46, 0xa5, 0x2c, 0xaf, 0x4d, 0x98, 0x8e, 0xf3, 0x4a, 0x66, 0xa3,
	0x5b, 0x0a, 0x9e, 0xb2, 0xb4, 0x36, 0x61, 0x3a, 0xc1, 0x5b, 0xb2, 0x65, 0xd5, 0xac, 0x55, 0x4c,
	0x70, 0x6e, 0xfe, 0x82, 0x3b, 0x25, 0x18, 0xf1, 0xd1, 0x2a, 0xe4, 0x42, 0x4a, 0x5e, 0xf2, 0xce,
	0x5c, 0xce, 0x47, 0xc2, 0x56, 0x50, 0xcf, 0x9e, 0x9b, 0xc7, 0x93, 0x62, 0x25, 0x53, 0xc5, 0x3c,
	0x0e, 0xfc, 0x4d, 0x3c, 0x4c, 0x6a, 0x23, 0xfa, 0xa5, 0x50, 0x57, 0x4f, 0xa9, 0x9e, 0x7e, 0x94,
	0xa7, 0xb1, 0x37, 0x74, 0x4b, 0x3e, 0xc1, 0x8c, 0xcc, 0xab, 0xa6, 0x9f, 0xb7, 0x86, 0xa7, 0xf8,
	0x3d, 0xed, 0x01, 0xbc, 0x9a, 0x1d, 0xe3, 0xa0, 0xf1, 0x00, 0xde, 0x87, 0x2e, 0xb6, 0x21, 0xc5,
	0x70, 0x90, 0xb2, 0x03, 0x65, 0x71, 0xe3, 0xb2, 0x06, 0xbc, 0x25, 0x54, 0xf9, 0x7b, 0x2e, 0xd9,
	0x7d, 0x15, 0xdc, 0x30, 0x19, 0xdf, 0x08, 0x05, 0xfe, 0xd6, 0x24, 0x66, 0x09, 0x6a, 0xd7, 0x97,
	0x5b, 0x48, 0xb9, 0x77, 0x74, 0x84, 0x5a, 0x87, 0x4b, 0xf0, 0x70, 0x6f, 0x9c, 0x35, 0x89, 0xa3,
	0x2c, 0xae, 0x66, 0xe1, 0x34, 0xe7, 0xd4, 0x6a, 0xfa, 0xcb, 0x3d, 0x68, 0xe7, 0x17, 0xd6, 0xb7,
	0x9c, 0x6f, 0x5b, 0x0c, 0xed, 0x25, 0x39, 0x37, 0x4d, 0xfe, 0x0c, 0x6e, 0x37, 0x8d, 0x10, 0xa8,
	0x17, 0x6e, 0x0f, 0x47, 0xb8, 0xef, 0xbb, 0xa4, 0xdc, 0x34, 0xb8, 0xdc, 0x34, 0x22, 0xa2, 0x96,
	0xdf, 0x1b, 0xee, 0xe0, 0xb4, 0x74, 0xb4, 0x57, 0xd8, 0x91, 0xae, 0xc1, 0x70, 0xc5, 0xe9, 0xc0,
	0x89, 0xfc, 0xef, 0xe8, 0xf0, 0x9d, 0x17, 0xce, 0x90, 0xab, 0xf0, 0xfc, 0x53, 0x65, 0x55, 0x78,
	0xed, 0xba, 0x00, 0x6d, 0x5c, 0x63, 0xe1, 0x69, 0x2d, 0x27, 0x4c, 0x34, 0xc4, 0xab, 0xec, 0x15,
	0x16, 0xd8, 0x6b, 0xb2, 0x48, 0xc5, 0x1f, 0xa0, 0xaa, 0xf4, 0x25, 0x21, 0xa2, 0xea, 0xa3, 0x35,
	0x13, 0x5e, 0x79, 0xaf, 0x2f, 0x0b, 0x21, 0xe4, 0x47, 0x4a, 0xbb, 0x3d, 0xcc, 0xf2, 0xd8, 0xf3,
	0x9d, 0xc8, 0xba, 0x02, 0x0c, 0xe2, 0xeb, 0x7b, 0x39, 0x43, 0x88, 0xd3, 0xb2, 0x02, 0xf4, 0xd5,
	0x5a, 0xe8, 0xff, 0x76, 0x83, 0xf9, 0x84, 0x61, 0xba, 0x06, 0xc3, 0xb4, 0x2c, 0x3c, 0xee, 0x96,
	0x18, 0x35, 0x08, 0x65, 0x5c, 0x17, 0x4e, 0x76, 0xcb, 0x1a, 0x9b, 0x42, 0xde, 0xd5, 0x33, 0x94,
	0x8a, 0x75, 0x03, 0xbe, 0x53, 0x9e, 0xcd, 0x35, 0x7c, 0xac, 0x14, 0xfa, 0x4d, 0xf8, 0xd6, 0x9a,
	0x5e, 0x63, 0x02, 0xff, 0xf5, 0x90, 0x16, 0xce, 0x49, 0xd2, 0x78, 0xd3, 0x2f, 0x7a, 0x35, 0x0d,
	0x5f, 0x5b, 0xd2, 0xb7, 0xb2, 0x1e, 0x4f, 0xb7, 0x6e, 0x01, 0xdf, 0xaa, 0x7e, 0x10, 0xb9, 0x50,
	0x70, 0x2f, 0xf6, 0x76, 0xac, 0xdb, 0xc0, 0xb6, 0xa8, 0x57, 0xd0, 0x6c, 0xd8, 0xe3, 0x26, 0xfa,
	0x0e, 0x30, 0x2d, 0xe8, 0xdb, 0x58, 0x66, 0x48, 0xcf, 0x63, 0x6a, 0x11, 0xee, 0x52, 0xbe, 0x45,
	0xf6, 0x9e, 0xff, 0x5e, 0xb3, 0x55, 0x07, 0xb5, 0xbe, 0x07, 0xc5, 0xdd, 0x59, 0x00, 0xf1, 0x08,
	0xff, 0x00, 0x59, 0xb5, 0x9c, 0xca, 0x99, 0xbf, 0x4f, 0xb9, 0x17, 0x59, 0xec, 0xf4, 0x28, 0xbc,
	0x71, 0xd2, 0x72, 0x8f, 0x8d, 0xf0, 0x0c, 0x48, 0x59, 0xe0, 0xa5, 0xb8, 0x2a, 0xa3, 0xc8, 0x6a,
	0xd3, 0x8f, 0x5c, 0x27, 0x4d, 0x77, 0x4a, 0x21, 0x0f, 0x40, 0x88, 0x6d, 0xd4, 0x14, 0xba, 0x17,
	0x60, 0x72, 0x0e, 0x8a, 0x13, 0xfa, 0x26, 0xbc, 0x30, 0x2b, 0xb3, 0x20, 0x65, 0x91, 0x97, 0x82,
	0x55, 0x3b, 0x4a, 0x86, 0xdd, 0xc2, 0x6d, 0xa9, 0x5a, 0xc1, 0xfc, 0xdc, 0x87, 0x20, 0x66, 0x89,
	0x17, 0xf3, 0x58, 0xa5, 0x03, 0x4e, 0x96, 0x91, 0xa8, 0x30, 0xd9, 0xe6, 0xad, 0x39, 0xe0, 0x5d,
	0xe3, 0x93, 0xa4, 0x3c, 0x53, 0xae, 0xf9, 0xc0, 0xf1, 0x43, 0xbe, 0xea, 0xfb, 0x23, 0x60, 0x5f,
	0x15, 0xd3, 0xf8, 0x2a, 0xd6, 0x16, 0x3b, 0xc6, 0x10, 0x2d, 0x9a, 0x07, 0x56, 0x21, 0x03, 0x70,
	0x20, 0x39, 0x56, 0xd1, 0x25, 0x46, 0x4a, 0xd7, 0x52, 0x93, 0x01, 0xf9, 0x62, 0xc8, 0xf3, 0x74,
	0xd6, 0x90, 0x05, 0x2a, 0x6d, 0xa9, 0xcb, 0x4b, 0x53, 0x6a, 0x56, 0x12, 0x60, 0x6f, 0x80, 0x2b,
	0xee, 0x2e, 0x70, 0x2f, 0x98, 0x73, 0xc7, 0x95, 0xe1, 0xb3, 0x81, 0x7b, 0xde, 0x88, 0x3b, 0x23,
	0x59, 0x95, 0xab, 0x4d, 0x7d, 0x11, 0xb8, 0x17, 0x79, 0xee, 0x15, 0xc8, 0x59, 0x21, 0xe1, 0x66,
	0xf9, 0xc7, 0xad, 0x25, 0x60, 0x14, 0x52, 0x2e, 0xaf, 0xab, 0x1c, 0xdf, 0x7c, 0xdd, 0x4f, 0x19,
	0x60, 0x8f, 0xe4, 0xc0, 0xe7, 0x5c, 0x9a, 0x65, 0x98, 0x8a, 0x15, 0xa3, 0x0e, 0xc0, 0x24, 0x84,
	0x11, 0x0e, 0xe3, 0xc8, 0x77, 0xad, 0x15, 0x68, 0x87, 0xcd, 0x73, 0x2b, 0xd7, 0x02, 0x57, 0xfb,
	0x5f, 0xb8, 0x59, 0x59, 0x05, 0x29, 0xcb, 0x7c, 0xb9, 0xa9, 0xc7, 0x8d, 0x3e, 0x38, 0xa9, 0x7f,
	0xb0, 0x06, 0xbc, 0xab, 0x3c, 0xef, 0x93, 0x66, 0x5f, 0x9c, 0x30, 0x3f, 0x06, 0xe6, 0x35, 0x9e,
	0x99, 0x65, 0xae, 0x90, 0x38, 0x49, 0xaa, 0x0e, 0x3c, 0x01, 0x39, 0x2b, 0xbc, 0x9c, 0x57, 0xc8,
	0x56, 0x59, 0xa7, 0x30, 0xc1, 0x24, 0x07, 0x73, 0x99, 0xf2, 0xa8, 0xda, 0x46, 0xac, 0xa7, 0x54,
	0xd6, 0x8a, 0x70, 0xd1, 0x92, 0xa2, 0x27, 0xe6, 0xb2, 0xb8, 0xc2, 0x19, 0x70, 0xf3, 0xf4, 0x0c,
	0x64, 0x0a, 0xf7, 0x47, 0x8b, 0x90, 0xcf, 0x63, 0x4c, 0xa6, 0x87, 0xb3, 0x8d, 0x42, 0xc9, 0x9e,
	0x03, 0xd7, 0x72, 0xed, 0xd6, 0x49, 0x3b, 0xb4, 0xe5, 0x37, 0x5f, 0x00, 0xb7, 0x5d, 0x7b, 0x3d,
	0x22, 0xe7, 0x5e, 0x8f, 0x43, 0x69, 0x67, 0xac, 0x97, 0xb0, 0x6d, 0xac, 0x19, 0x8a, 0xc9, 0x72,
	0xa9, 0x18, 0x07, 0xc4, 0xac, 0x1a, 0xf5, 0x85, 0xfa, 0x7f, 0xe4, 0x57, 0xb2, 0x48, 0x7a, 0xc0,
	0xbd, 0x52, 0xbb, 0xb9, 0xd3, 0x9c, 0x34, 0x60, 0xa1, 0xba, 0x30, 0x0a, 0x4b, 0x3c, 0xa7, 0x8f,
	0xba, 0x72, 0x4e, 0xb8, 0xb6, 0xf3, 0x9c, 0xdc, 0x61, 0x5b, 0x06, 0x1c, 0x22, 0xe2, 0xd4, 0xf2,
	0x40, 0xd4, 0x62, 0xed, 0xfe, 0xb1, 0x59, 0x14, 0xfd, 0x6f, 0x0b, 0x83, 0x00, 0xa1, 0x17, 0x4a,
	0x83, 0x2d, 0x5c, 0x21, 0xf6, 0x61, 0x00, 0x04, 0x55, 0x50, 0x2a, 0x38, 0x89, 0x74, 0x07, 0x4e,
	0x4e, 0xc2, 0x87, 0x2c, 0xec, 0xd4, 0x77, 0x5c, 0x92, 0xa5, 0xc5, 0x1a, 0x80, 0x2c, 0xa1, 0x1f,
	0xca, 0x6d, 0x87, 0xd6, 0x87, 0xe2, 0x86, 0x61, 0x1d, 0xd8, 0x17, 0x8c, 0xd8, 0xc1, 0x59, 0xc2,
	0x1e, 0x1b, 0x04, 0x1f, 0xd8, 0x97, 0x6a, 0x97, 0xa1, 0x2a, 0x76, 0x96, 0x9d, 0x4c, 0xf0, 0x0d,
	0x5f, 0xc1, 0x48, 0x76, 0x6b, 0x6f, 0xa5, 0x75, 0x42, 0xf8, 0x3e, 0x6c, 0x40, 0x23, 0x04, 0x7e,
	0xa5, 0xd9, 0xa4, 0x11, 0x00, 0x27, 0xf7, 0xdd, 0xd2, 0x25, 0xf1, 0x33, 0x9c, 0x5a, 0x01, 0x48,
	0xb1, 0x8d, 0x5a, 0xc1, 0x19, 0x7e, 0x1a, 0x97, 0xb4, 0x42, 0xe8, 0xc5, 0x2a, 0x5f, 0xb1, 0x4f,
	0xa9, 0x50, 0x2c, 0x3b, 0x0b, 0x3b, 0x68, 0xf8, 0x9e, 0x15, 0x51, 0x01, 0xab, 0x2c, 0xcb, 0xba,
	0xa7, 0x55, 0xa8, 0x24, 0xf5, 0x43, 0x26, 0xc6, 0x8a, 0xe1, 0xdb, 0x6b, 0x3c, 0xab, 0xd2, 0xe4,
	0x67, 0x39, 0x4e, 0x46, 0xf1, 0x10, 0x56, 0x63, 0x02, 0x9f, 0x9d, 0xe7, 0x79, 0x95, 0xde, 0x03,
	0x0b, 0x02, 0x0b, 0xf8, 0x0b, 0x2e, 0x22, 0xfc, 0x1a, 0xa4, 0x75, 0xe1, 0x7e, 0x21, 0x2e, 0xa4,
	0x85, 0x68, 0xb9, 0x71, 0x0b, 0x23, 0xa7, 0x74, 0x7a, 0x62, 0xe6, 0xb6, 0x82, 0x14, 0xc4, 0x2d,
	0x82, 0xb8, 0x9f, 0x35, 0x38, 0x55, 0x30, 0x9a, 0xcc, 0x9f, 0xc8, 0x80, 0xdd, 0xe6, 0xd9, 0x63,
	0x49, 0xa8, 0x78, 0x7c, 0x47, 0x92, 0xb7, 0x27, 0x07, 0x81, 0x4b, 0x9c, 0xc0, 0x99, 0xbf, 0xf1,
	0x0d, 0xba, 0x5c, 0x8b, 0x37, 0x8a, 0x98, 0xbb, 0x59, 0x89, 0x16, 0xa8, 0x71, 0x77, 0x2b, 0x0d,
	0xd4, 0x4a, 0xec, 0xdd, 0xbc, 0xc4, 0xd5, 0xd1, 0xe3, 0xef, 0x64, 0x31, 0x97, 0x36, 0x18, 0xbc,
	0x97, 0x68, 0xbe, 0x05, 0xbf, 0x0c, 0x87, 0x27, 0x0b, 0x26, 0x9b, 0x61, 0xf1, 0x06, 0x92, 0x98,
	0xf8, 0x44, 0x78, 0xbc, 0x15, 0xc9, 0x1a, 0x37, 0xc2, 0xe4, 0xad, 0x49, 0x02, 0x11, 0x86, 0xb8,
	0xbc, 0xa6, 0x6f, 0x2a, 0xb1, 0x79, 0xb2, 0x10, 0x9e, 0x1e, 0x9f, 0x27, 0x8b, 0xf9, 0xb7, 0xc6,
	0xe8, 0x35, 0x29, 0x4a, 0x13, 0x4e, 0xef, 0x71, 0xc3, 0x50, 0xe9, 0xb0, 0x7a, 0xb2, 0xf0, 0x71,
	0x13, 0x5e, 0xaf, 0x49, 0xad, 0xd4, 0x98, 0xbd, 0x9e, 0xc4, 0x9b, 0x68, 0x8b, 0xdb, 0x93, 0xdd,
	0xe5, 0x99, 0x62, 0xf7, 0x5e, 0x48, 0xfc, 0xe5, 0x56, 0xf8, 0xbd, 0x04, 0xbd, 0x6c, 0x29, 0xa0,
	0x09, 0xc3, 0xd7, 0x34, 0xf9, 0x4d, 0x38, 0xbe, 0x26, 0x2b, 0xd1, 0x8c, 0xe5, 0x33, 0x68, 0x81,
	0x16, 0xcf, 0xe7, 0x35, 0xac, 0x01, 0x33, 0x4c, 0x5f, 0x5f, 0xb2, 0x8d, 0x4d, 0x82, 0xeb, 0x6b,
	0x52, 0x68, 0x19, 0xb6, 0x6f, 0xad, 0x41, 0xa1, 0x35, 0xf8, 0xbe, 0x7e, 0x83, 0x46, 0x99, 0x62,
	0xfc, 0xfc, 0x86, 0x95, 0xd1, 0x02, 0xe7, 0x27, 0xf3, 0x10, 0x5b, 0x63, 0xfd, 0x64, 0xe7, 0x0d,
	0x73, 0xbc, 0xdf, 0xcb, 0x86, 0x01, 0x6d, 0xc6, 0xfc, 0x0d, 0x1a, 0xd4, 0xda, 0x18, 0xf7, 0x97,
	0x48, 0x82, 0xd2, 0xfb, 0xc3, 0xfe, 0xfd, 0xc1, 0x49, 0x74, 0xbb, 0x4a, 0x7a, 0xae, 0x83, 0x76,
	0x2c, 0x09, 0xe9, 0xac, 0x8d, 0x51, 0x1e, 0x31, 0x7a, 0x69, 0xc6, 0x66, 0x0a, 0xf8, 0x98, 0x44,
	0xa0, 0x16, 0xfb, 0x21, 0x66, 0x8f, 0x6e, 0x03, 0x03, 0x11, 0xf3, 0x37, 0xef, 0x07, 0x11, 0x32,
	0x40, 0xab, 0x66, 0x92, 0x9a, 0xc0, 0x21, 0x18, 0x2d, 0x9b, 0x09, 0xd2, 0xe3, 0x44, 0x8c, 0xdb,
	0xd3, 0x04, 0x19, 0x11, 0x13, 0x53, 0x1f, 0x08, 0x7a, 0xe4, 0xa5, 0xa9, 0x22, 0x2a, 0x81, 0x24,
	0xc6, 0x2a, 0x64, 0x8a, 0x29, 0x49, 0x91, 0x6b, 0x26, 0xb0, 0x05, 0xbc, 0x64, 0x03, 0x3d, 0x6d,
	0x2b, 0x53, 0x8d, 0x34, 0xf9, 0x0b, 0x28, 0x34, 0x5c, 0xbc, 0x93, 0x80, 0x4e, 0x8c, 0x27, 0xd9,
	0x1c, 0x7f, 0x22, 0x26, 0xe3, 0xdf, 0x3f, 0x14, 0xc5, 0x45, 0x8b, 0x86, 0x4b, 0x55, 0x83, 0x4a,
	0x11, 0xb3, 0xea, 0x4f, 0x04, 0x50, 0x31, 0x36, 0x36, 0x63, 0x58, 0x95, 0xbf, 0x3d, 0xcf, 0x97,
	0xa7, 0x50, 0xa1, 0x56, 0xe6, 0x85, 0x84, 0xf6, 0x26, 0x00, 0x96, 0x86, 0xe5, 0x64, 0x80, 0x65,
	0x79, 0x86, 0xe6, 0x1a, 0x25, 0x68, 0x60, 0x2d, 0x62, 0xe5, 0x88, 0x56, 0x08, 0x17, 0x8c, 0x96,
	0x9a, 0x59, 0x9b, 0xc1, 0x2e, 0x4f, 0x0d, 0x06, 0x4d, 0x8d, 0x7b, 0x09, 0xf4, 0x0b, 0xb5, 0x25,
	0x04, 0xc6, 0x64, 0x30, 0x35, 0x68, 0x98, 0xe7, 0x42, 0xae, 0xfd, 0xf6, 0xc0, 0x18, 0xc7, 0x40,
	0x1b, 0x1a, 0x30, 0x32, 0xed, 0x44, 0x48, 0xe1, 0x32, 0x7d, 0xb4, 0xd2, 0x28, 0xc2, 0x04, 0x39,
	0x63, 0xa2, 0x1f, 0x06, 0x20, 0x1a, 0x93, 0x25, 0xa2, 0xc7, 0xd3, 0x3c, 0x31, 0xd0, 0x30, 0x25,
	0xb4, 0x46, 0x2c, 0xa8, 0x61, 0x8e, 0xb2, 0x19, 0x18, 0x8c, 0xa2, 0x11, 0xe0, 0xc6, 0xd7, 0xfb,
	0x39, 0x6d, 0xb0, 0x37, 0x9e, 0xde, 0x0e, 0x1b, 0xc2, 0x70, 0x5e, 0x0a, 0x95, 0x37, 0x26, 0x41,
	0xe4, 0x98, 0x8c, 0x8d, 0x11, 0x38, 0x67, 0x59, 0x28, 0xd2, 0x63, 0x8e, 0xd3, 0x31, 0xb1, 0x39,
	0x6a, 0xc8, 0x8e, 0xc9, 0x57, 0x65, 0xe8, 0x9d, 0xbe, 0xde, 0x3d, 0x34, 0x06, 0xf2, 0xb8, 0x42,
	0xbd, 0x9d, 0x09, 0x31, 0x3d, 0xcf, 0x4d, 0xf6, 0x0d, 0x0d, 0xbc, 0xc7, 0xcc, 0xfa, 0x37, 0x22,
	0x7d, 0x72, 0xe4, 0xb5, 0x14, 0x63, 0x02, 0xfa, 0x79, 0x6c, 0xb2, 0xab, 0x29, 0xf0, 0x3f, 0x26,
	0x16, 0xb4, 0x01, 0x0a, 0x64, 0xb2, 0x42, 0xf4, 0xa8, 0xa0, 0x35, 0xbd, 0xa7, 0xa2, 0x03, 0x08,
	0x39, 0x66, 0xf6, 0x52, 0x87, 0x15, 0x7a, 0x26, 0x14, 0xa3, 0x6a, 0x0d, 0x1b, 0x32, 0xd1, 0xcf,
	0x46, 0x04, 0x91, 0x49, 0x37, 0x1a, 0xc0, 0x44, 0x26, 0xd3, 0xa0, 0xc7, 0x15, 0x99, 0x2c, 0x12,
	0x1d, 0xc4, 0xc8, 0xa4, 0x13, 0x0d, 0x68, 0xa3, 0x57, 0x06, 0x83, 0x69, 0x0a, 0x3c, 0x1a, 0x18,
	0x0c, 0x88, 0x11, 0x06, 0x29, 0xd6, 0x9f, 0x50, 0xdb, 0xc3, 0x91, 0x22, 0x83, 0x1d, 0xa1, 0x0d,
	0x32, 0xc9, 0xa4, 0x81, 0xad, 0x40, 0x4a, 0x89, 0xc1, 0x2e, 0xdc, 0x0e, 0xaf, 0x84, 0x0d, 0x74,
	0xcb, 0x00, 0xba, 0xb4, 0x6e, 0x62, 0xae, 0x8c, 0x50, 0x4c, 0x9e, 0xc1, 0xaa, 0x6f, 0x06, 0x34,
	0x6d, 0xe9, 0x8f, 0xf7, 0x93, 0x63, 0x9b, 0x4c, 0x94, 0xd7, 0x08, 0xe6, 0x64, 0x2c, 0xa8, 0x09,
	0xf1, 0x64, 0x22, 0xc8, 0x08, 0xfc, 0xd4, 0x43, 0x0f, 0x0c, 0x04, 0xe9, 0x71, 0x50, 0x99, 0xc1,
	0x41, 0xa8, 0x35, 0x24, 0xca, 0xa4, 0x87, 0x46, 0xe8, 0x28, 0x93, 0xf5, 0xd8, 0x0a, 0x28, 0x85,
	0xdb, 0x9c, 0xd4, 0xd4, 0x98, 0xa9, 0x7e, 0xab, 0x13, 0x9b, 0x1a, 0x3e, 0xf5, 0x1a, 0x3d, 0x36,
	0xf0, 0x68, 0x5b, 0x21, 0xa9, 0x86, 0xe8, 0xb9, 0x81, 0x8d, 0x6d, 0x0d, 0xaa, 0xfa, 0x8b, 0xa8,
	0x3f, 0x91, 0x58, 0x43, 0x7c, 0xd5, 0x0b, 0xa1, 0x70, 0xe1, 0x04, 0x50, 0x2b, 0x13, 0x95, 0x33,
	0x42, 0x5d, 0x99, 0x58, 0xec, 0x76, 0x00, 0x2c, 0x33, 0x89, 0x6d, 0xb0, 0x58, 0x26, 0x9d, 0x35,
	0x82, 0x65, 0xb9, 0x06, 0x07, 0x9a, 0x46, 0x84, 0x56, 0x8e, 0x9e, 0x35, 0x0a, 0x69, 0x0f, 0xd6,
	0x32, 0x71, 0x60, 0x4c, 0x71, 0x5b, 0x26, 0x5b, 0x54, 0x33, 0x84, 0xcb, 0x64, 0x65, 0x4d, 0x80,
	0xe6, 0x32, 0xd9, 0x89, 0xcd, 0x80, 0x5d, 0x26, 0x92, 0xcc, 0x30, 0x5e, 0x26, 0x7e, 0x55, 0x1b,
	0xb8, 0x97, 0xaf, 0x0f, 0xc2, 0xb6, 0x41, 0x7e, 0x99, 0x6c, 0x09, 0xad, 0x40, 0x60, 0x26, 0x6d,
	0x33, 0xc4, 0x83, 0x99, 0xe8, 0xac, 0x29, 0x34, 0xcc, 0x44, 0x67, 0x9b, 0x51, 0x62, 0x26, 0xfb,
	0x9d, 0x01, 0x60, 0xcc, 0xc4, 0x3b, 0x9b, 0x08, 0x3b, 0xb6, 0x2d, 0xd4, 0x07, 0x3d, 0x48, 0x18,
	0x99, 0x99, 0x83, 0x6b, 0x82, 0x28, 0xfb, 0x4e, 0x7f, 0x51, 0xb4, 0x3f, 0x70, 0xd9, 0xb7, 0xe8,
	0x8e, 0xf2, 0x82, 0x40, 0x84, 0x99, 0xad, 0xe8, 0x95, 0x4b, 0x8d, 0x38, 0xeb, 0x99, 0x33, 0x2a,
	0xc1, 0x67, 0x4f, 0xf4, 0xae, 0xa6, 0x1e, 0x87, 0xd6, 0x10, 0x8a, 0x6c, 0x03, 0x49, 0xdb, 0x40,
	0x4f, 0x26, 0x13, 0x25, 0x43, 0xa7, 0x35, 0xdc, 0x2f, 0x99, 0x01, 0xd5, 0x52, 0xfd, 0x3d, 0xda,
	0x44, 0x98, 0xb5, 0x9e, 0xde, 0x24, 0x19, 0xc1, 0xd7, 0x3c, 0x7d, 0xa0, 0xcd, 0x10, 0xc9, 0xd6,
	0xa2, 0x25, 0x4a, 0x50, 0x5b, 0x43, 0x1c, 0x5d, 0x8f, 0x6f, 0x6b, 0xb8, 0x53, 0x6c, 0x0d, 0x75,
	0x6b, 0xa1, 0x8b, 0x4d, 0xa8, 0x37, 0x6c, 0x3e, 0xc2, 0x3a, 0x00, 0x5c, 0xc3, 0xe5, 0x51, 0x13,
	0x16, 0xae, 0x85, 0x12, 0xab, 0x61, 0x71, 0xa1, 0xde, 0x85, 0x6b, 0x8b, 0x90, 0x6b, 0x00, 0x34,
	0x98, 0x82, 0xe5, 0x5e, 0xe9, 0x4f, 0x47, 0xad, 0x70, 0x73, 0xbf, 0x83, 0x36, 0x26, 0x97, 0xd5,
	0x04, 0xa1, 0x6b, 0xa1, 0x54, 0x4d, 0x68, 0xba, 0x16, 0x06, 0xae, 0x19, 0x58, 0xd7, 0xae, 0x5d,
	0x5a, 0x8c, 0x5d, 0x6c, 0xbe, 0x0e, 0xcd, 0xe0, 0x76, 0xaf, 0xf5, 0x3b, 0xff, 0x24, 0xc8, 0xbb,
	0x16, 0x2b, 0x49, 0x06, 0xc2, 0xf3, 0xcc, 0x57, 0x92, 0x06, 0x8f, 0xf7, 0xda, 0x5c, 0x69, 0x4d,
	0xa1, 0x79, 0xb9, 0xf9, 0xea, 0x6c, 0x81, 0xd2, 0x6b, 0xf0, 0xf1, 0x5b, 0x03, 0xf6, 0x1a, 0x0e,
	0xa5, 0xe6, 0xd8, 0xbd, 0x0d, 0xf3, 0x79, 0x68, 0x86, 0xf1, 0xa5, 0xe6, 0xeb, 0xc9, 0x18, 0xd1,
	0xf7, 0x3b, 0xfa, 0xcb, 0xa7, 0xfd, 0x81, 0xfb, 0xfe, 0x1a, 0xfa, 0xda, 0x7b, 0xf7, 0xf9, 0x57,
	0xef, 0xdf, 0xfc, 0x66, 0xeb, 0x97, 0xbb, 0x1f, 0x88, 0xe7, 0x77, 0x19, 0x9d, 0xf7, 0xfc, 0x2c,
	0x09, 0x9c, 0x1d, 0x52, 0x69, 0xba, 0xe6, 0xde, 0x4d, 0xa3, 0x6f, 0x85, 0xbf, 0xe2, 0xed, 0x75,
	0x67, 0x98, 0x09, 0x70, 0x0f, 0x52, 0x60, 0x4d, 0x20, 0xf2, 0x43, 0x72, 0x5e, 0xcb, 0x31, 0x83,
	0x75, 0x90, 0x19, 0x98, 0xf9, 0xef, 0xa6, 0xd0, 0x37, 0xf0, 0xf5, 0x70, 0x77, 0xef, 0x97, 0x1f,
	0xbf, 0x2f, 0x4b, 0xfc, 0x02, 0x73, 0x88, 0xf3, 0xf5, 0xd8, 0xab, 0xb5, 0x80, 0x13, 0x0e, 0x7f,
	0xf7, 0x23, 0x3f, 0xf7, 0x9d, 0x80, 0xaf, 0x4b, 0x7c, 0xbc, 0x73, 0x03, 0x75, 0x6a, 0x64, 0x11,
	0xde, 0xe2, 0x8b, 0x11, 0x1f, 0xef, 0xdc, 0x42, 0x67, 0x6a, 0x24, 0xa9, 0x13, 0x79, 0x71, 0xc8,
	0x23, 0x48, 0x8e, 0x77, 0xe6, 0x25, 0xed, 0xf1, 0xfc, 0xcc, 0x0d, 0xe2, 0x0c, 0x7b, 0xd6, 0x91,
	0x8b, 0x16, 0xf3, 0x5b, 0x0b, 0x37, 0x3b, 0x2a, 0x06, 0xf5, 0x4f, 0xa7, 0xd0, 0xd7, 0xf9, 0xa7,
	0x77, 0x3f, 0xfc, 0xc0, 0xe5, 0x48, 0xbc, 0x8c, 0xce, 0xe7, 0xa9, 0x3f, 0x18, 0xc8, 0x13, 0x23,
	0xde, 0x43, 0x17, 0x84, 0xbf, 0x46, 0x78, 0x3b, 0x1f, 0x39, 0x43, 0x97, 0x77, 0x8d, 0x6d, 0x96,
	0xbe, 0x46, 0xa0, 0x24, 0x2e, 0x9e, 0x13, 0x54, 0x8b, 0x46, 0x18, 0xe2, 0xce, 0x0c, 0xba, 0x24,
	0x92, 0x93, 0xfc, 0x73, 0x61, 0xbc, 0x49, 0x2e, 0xcf, 0x59, 0x47, 0xcb, 0xb4, 0xc0, 0x02, 0x6d,
	0xd9, 0xc0, 0x32, 0xb4, 0x00, 0xe1, 0x5d, 0x06, 0x4c, 0x24, 0xa3, 0x38, 0xf3, 0x07, 0x53, 0xe8,
	0x1b, 0xe8, 0xad, 0xf3, 0x76, 0xef, 0xdd, 0xc7, 0x0f, 0x6c, 0x16, 0x99, 0x30, 0x88, 0xc7, 0x89,
	0x3d, 0xbe, 0x83, 0xce, 0xd5, 0xfe, 0x5e, 0xfc, 0xdf, 0x66, 0xa1, 0x23, 0xc2, 0x34, 0xde, 0x42,
	0x67, 0x6a, 0x74, 0xae, 0x13, 0xb9, 0x38, 0x60, 0xdd, 0xb4, 0x15, 0x54, 0x61, 0xec, 0xf9, 0xfd,
	0x1d, 0xd6, 0x41, 0xda, 0xd2, 0xff, 0x1a, 0xa1, 0x4b, 0xd0, 0xd2, 0x6c, 0xf7, 0xed, 0x4f, 0x9f,
	0xde, 0x8d, 0xa7, 0x26, 0x63, 0x52, 0x4a, 0x63, 0xa9, 0x02, 0xad, 0x3e, 0x42, 0xd7, 0x35, 0xb4,
	0xee, 0x30, 0xf3, 0x13, 0xbe, 0x23, 0x53, 0x9d, 0x39, 0x74, 0x4d, 0xc3, 0xf0, 0x7a, 0xe8, 0x6f,
	0xf0, 0x5d, 0x9a, 0x6a, 0xf8, 0x40, 0x86, 0xbd, 0x38, 0xe0, 0x7b, 0x37, 0xc5, 0x4f, 0x9f, 0x84,
	0xc1, 0xcf, 0xfc, 0xa8, 0x3a, 0x97, 0x94, 0xb3, 0x7e, 0xa8, 0xd3, 0x45, 0xd3, 0x1a, 0xb6, 0xd4,
	0x77, 0xe9, 0x91, 0xe1, 0x68, 0xe5, 0xd6, 0x1e, 0xea, 0x3c, 0x46, 0x0f, 0xb4, 0x9f, 0x92, 0xe3,
	0x46, 0x57, 0x48, 0x05, 0xf0, 0x27, 0x68, 0xb6, 0x89, 0x97, 0x59, 0x31, 0xc2, 0xcc, 0x25, 0xbd,
	0x3c, 0xd2, 0x19, 0xa0, 0x55, 0xdd, 0xa8, 0xc7, 0x51, 0x16, 0x07, 0xbe, 0x47, 0x02, 0x4e, 0xb9,
	0x93, 0x90, 0xab, 0xa9, 0xd8, 0xf5, 0xa9, 0xf5, 0x3f, 0x51, 0x9d, 0xa3, 0x8e, 0x76, 0xd6, 0xd0,
	0x8c, 0x46, 0x10, 0xbb, 0x57, 0x1c, 0x65, 0x3b, 0x61, 0x2f, 0x0e, 0x18, 0x34, 0x74, 0x95, 0xb0,
	0x2e, 0xa0, 0x9b, 0x1a, 0xd6, 0x1e, 0x0e, 0x06, 0xbe, 0x53, 0x03, 0x7f, 0xea, 0xc7, 0xab, 0x17,
	0xc4, 0x71, 0x31, 0x2f, 0x03, 0xf6, 0xb9, 0x93, 0x3c, 0xf6, 0x78, 0x1e, 0xdd, 0xd0, 0x76, 0x39,
	0x0c, 0xe3, 0x88, 0x21, 0x39, 0x07, 0x84, 0x43, 0xaf, 0x39, 0xde, 0x30, 0x77, 0xd7, 0x19, 0xf4,
	0xc8, 0x85, 0x4c, 0x4e, 0xba, 0x1e, 0x65, 0xbe, 0x1b, 0x6f, 0x3a, 0x21, 0x3b, 0x07, 0x60, 0x03,
	0x96, 0x4d, 0x27, 0x88, 0x53, 0x1c, 0x31, 0xaf, 0x9f, 0x42, 0x6a, 0x17, 0xd1, 0x6d, 0x0d, 0xcb,
	0x16, 0x4e, 0xf3, 0xc4, 0x49, 0x8a, 0x8d, 0xca, 0xe2, 0x01, 0xd4, 0xab, 0xe8, 0xbe, 0xae, 0xfb,
	0x2c, 0xa4, 0xb2, 0x1e, 0x0f, 0x33, 0xcc, 0xfc, 0xf9, 0x12, 0x8a, 0xa9, 0x55, 0x34, 0xcf, 0x19,
	0xf5, 0x93, 0x30, 0x60, 0x66, 0xae, 0x44, 0x11, 0x71, 0x50, 0xcc, 0x57, 0xe8, 0x89, 0x46, 0x44,
	0x9c, 0x10, 0x4b, 0x43, 0x4d, 0x6a, 0x15, 0x9f, 0xac, 0xa2, 0xe9, 0xa7, 0xa9, 0xac, 0x57, 0xd0,
	0x1c, 0x9d, 0x0e, 0x04, 0x38, 0xcf, 0x05, 0xf8, 0xe4, 0xb7, 0x74, 0x5f, 0x09, 0xf8, 0xfb, 0xa9,
	0xe7, 0xe8, 0x9e, 0x51, 0x8f, 0x86, 0x69, 0x60, 0x9d, 0xa1, 0xfc, 0x1b, 0xc0, 0xff, 0x35, 0xbd,
	0x1a, 0x78, 0xac, 0xe1, 0xa7, 0xde, 0x4d, 0x12, 0x38, 0x2e, 0x59, 0x37, 0xfe, 0x20, 0xc2, 0x1e,
	0xef, 0x3f, 0x9c, 0xa5, 0x12, 0x43, 0x70, 0x1f, 0x1e, 0x17, 0x3b, 0xdd, 0xff, 0x7a, 0x08, 0x7d,
	0x0b, 0x16, 0x35, 0xf9, 0xf4, 0xee, 0xed, 0x6e, 0xb9, 0xdd, 0xdd, 0xac, 0xb6, 0x29, 0x3a, 0x3e,
	0x92, 0x4d, 0x8f, 0xdb, 0x9b, 0x38, 0x9a, 0x1e, 0xce, 0xf2, 0x51, 0xcf, 0xf7, 0xc4, 0x6d, 0x8f,
	0x53, 0x03, 0x09, 0xed, 0x28, 0x4e, 0x47, 0x81, 0x93, 0xe5, 0xf4, 0x9a, 0x8f, 0xc7, 0x8e, 0x1e,
	0xd7, 0x7d, 0x25, 0xac, 0xc0, 0xa2, 0x2c, 0xc3, 0xef, 0x15, 0x15, 0x6d, 0xdc, 0xef, 0x57, 0x96,
	0x93, 0x25, 0x05, 0x7f, 0xa0, 0xa5, 0xae, 0xb5, 0xea, 0x28, 0x1f, 0x18, 0x90, 0x7f, 0x89, 0xa3,
	0x3e, 0xc6, 0x6f, 0x5c, 0x7f, 0xfd, 0x10, 0xba, 0x50, 0x1f, 0xe6, 0xec, 0xed, 0xc7, 0xaa, 0x0a,
	0x83, 0x44, 0x56, 0xe6, 0xc6, 0x63, 0x23, 0xce, 0xed, 0x41, 0x63, 0x94, 0x83, 0x20, 0xee, 0x55,
	0x3e, 0xd4, 0x98, 0xb3, 0x31, 0x46, 0x4f, 0x32, 0x01, 0x8b, 0xce, 0x06, 0x67, 0xaa, 0xc6, 0xc8,
	0x19, 0x64, 0x5c, 0xd8, 0x91, 0x15, 0xc3, 0x00, 0x1c, 0x71, 0x84, 0xd9, 0x80, 0x13, 0x87, 0x78,
	0xe6, 0xdf, 0x9c, 0x12, 0x87, 0xc1, 0x7b, 0xf7, 0x69, 0xb7, 0xf2, 0x38, 0xee, 0x56, 0x1b, 0x19,
	0x95, 0xe5, 0xf9, 0x29, 0x96, 0xb9, 0x1e, 0x0f, 0xd0, 0x65, 0x15, 0xa1, 0x17, 0x6f, 0x95, 0xfe,
	0x96, 0x47, 0x5a, 0x78, 0xbf, 0xf2, 0x63, 0xc6, 0xa4, 0x26, 0xac, 0xfb, 0x43, 0xd2, 0xbc, 0x7f,
	0x63, 0xaa, 0x5c, 0x0c, 0xf1, 0xa7, 0xef, 0x39, 0xdf, 0x8f, 0x5b, 0x0c, 0x14, 0xce, 0x21, 0x59,
	0x0c, 0x73, 0x95, 0x7f, 0xc8, 0xd1, 0x04, 0x7e, 0x48, 0xa0, 0xd4, 0x56, 0x39, 0x64, 0x2c, 0xf8,
	0xff, 0xa8, 0xf2, 0x18, 0x39, 0x7a, 0xb8, 0x65, 0x39, 0x44, 0x19, 0x16, 0x38, 0x86, 0x99, 0x7f,
	0x74, 0x02, 0x9d, 0x49, 0x3f, 0x7e, 0x94, 0x3c, 0xdb, 0xb9, 0x85, 0xae, 0xa7, 0x71, 0xdc, 0xf4,
	0x4a, 0xe7, 0x39, 0x7a, 0x24, 0xa5, 0x32, 0x7d, 0x94, 0x63, 0xc0, 0xaf, 0x7d, 0x83, 0x73, 0x17,
	0x9d, 0x97, 0xf2, 0x8f, 0x3d, 0xb9, 0x59, 0x41, 0xf7, 0xa4, 0x84, 0x8d, 0x2f, 0x6c, 0x96, 0xd1,
	0x5d, 0x29, 0x63, 0xd3, 0x83, 0x9a, 0x45, 0x74, 0x5b, 0xca, 0xa7, 0x7f, 0x3f, 0xa3, 0xfa, 0x5a,
	0xd3, 0x73, 0x99, 0x97, 0x68, 0x41, 0xca, 0x67, 0xfe, 0x3a, 0xe6, 0x91, 0x62, 0xbe, 0x95, 0x8f,
	0x61, 0x54, 0x53, 0x67, 0xfa, 0xf6, 0xc5, 0x41, 0x5d, 0x29, 0x7f, 0x8b, 0xa7, 0x2e, 0x8f, 0xd1,
	0x83, 0x06, 0x11, 0xea, 0x97, 0x2d, 0x1b, 0xe8, 0xa9, 0x5c, 0xbf, 0x27, 0x79, 0xc8, 0xa2, 0x1a,
	0x7e, 0xf3, 0x77, 0x2b, 0xcf, 0xd0, 0x9c, 0x4a, 0x82, 0xc9, 0x33, 0x95, 0x2e, 0x9a, 0x96, 0xab,
	0xb7, 0xe6, 0x55, 0xca, 0x3c, 0xba, 0xa1, 0xd0, 0x50, 0xd5, 0x23, 0x14, 0xd5, 0x6a, 0x1b, 0x7b,
	0x73, 0xf2, 0x27, 0xb7, 0xd0, 0x37, 0xa5, 0x59, 0x29, 0xdf, 0x98, 0x5c, 0x43, 0x97, 0x38, 0x76,
	0xc9, 0x93, 0x12, 0x51, 0x07, 0x0d, 0x5e, 0x90, 0xcc, 0xa2, 0x2b, 0x75, 0x06, 0xcd, 0x83, 0x91,
	0x7b, 0xe8, 0xc2, 0x38, 0xb5, 0xf4, 0x7d, 0xc8, 0x22, 0xba, 0x35, 0x46, 0xd9, 0xfc, 0x1c, 0xe4,
	0xc1, 0x78, 0xff, 0xd4, 0xaf, 0x3f, 0x9e, 0x08, 0xba, 0xdb, 0xf2, 0xb1, 0x87, 0xa4, 0xdf, 0x9a,
	0xb7, 0x1d, 0x0f, 0xd1, 0xd5, 0x31, 0x6a, 0xcd, 0x53, 0x8e, 0xf9, 0xf1, 0x59, 0x68, 0x78, 0xb9,
	0xa1, 0xe5, 0x90, 0x3e, 0xd4, 0x58, 0x42, 0x77, 0xea, 0x1c, 0x26, 0xef, 0x32, 0x24, 0xf3, 0x62,
	0xf0, 0x0c, 0x43, 0xa2, 0x56, 0xfa, 0x57, 0x17, 0x33, 0xe3, 0x13, 0xa9, 0x7c, 0x64, 0x71, 0x1b,
	0x9d, 0xad, 0xd3, 0xca, 0xde, 0x54, 0x2c, 0x8f, 0x77, 0xd8, 0xe8, 0x09, 0xc5, 0xaa, 0xb0, 0x6f,
	0xb5, 0x79, 0x31, 0x61, 0x0b, 0x26, 0xc1, 0xf0, 0x81, 0xc4, 0x23, 0x74, 0x6d, 0x8c, 0x49, 0xfb,
	0x1e, 0x42, 0xd2, 0x2f, 0xa3, 0xe7, 0x0f, 0xb7, 0xd1, 0x99, 0x3a, 0x9f, 0xec, 0xb5, 0x83, 0x64,
	0x49, 0xa9, 0x1f, 0x37, 0x48, 0x64, 0xca, 0xde, 0x32, 0x2c, 0x09, 0x3b, 0xb3, 0xf1, 0xd3, 0x85,
	0x2e, 0xba, 0xa9, 0x58, 0xdd, 0xea, 0x97, 0x0a, 0x0f, 0x25, 0xf6, 0x49, 0xf3, 0x30, 0x41, 0x6a,
	0x76, 0x1a, 0xdf, 0x21, 0xb8, 0xc8, 0xd6, 0x73, 0x99, 0x3c, 0x3b, 0xb8, 0x2f, 0xb1, 0x8d, 0x8a,
	0x57, 0x06, 0x92, 0xd5, 0xde, 0xf0, 0xa8, 0x40, 0xa2, 0x55, 0xfa, 0x37, 0x04, 0xf7, 0x84, 0x8d,
	0x46, 0xf7, 0x64, 0x60, 0x5e, 0xba, 0xb6, 0x75, 0x2f, 0x04, 0x66, 0xd1, 0x65, 0x29, 0x87, 0xfc,
	0x41, 0x80, 0x64, 0xd6, 0x1b, 0xf1, 0xff, 0x92, 0x36, 0x35, 0xc0, 0xfd, 0x25, 0x03, 0xa4, 0x47,
	0xf7, 0x4b, 0x14, 0x4b, 0x07, 0xe6, 0x97, 0xb4, 0xa8, 0x01, 0xbb, 0xbf, 0x36, 0xde, 0x6f, 0x53,
	0xa8, 0xfe, 0xf2, 0x78, 0x67, 0x8c, 0x90, 0xf9, 0xcf, 0x05, 0xdf, 0xb7, 0x3d, 0x10, 0xff, 0xd9,
	0xb8, 0x29, 0x6a, 0x83, 0xbb, 0x97, 0x7c, 0xbe, 0x15, 0xcc, 0xfe, 0xc5, 0xb8, 0xa5, 0x6e, 0x87,
	0xaa, 0x5f, 0x1c, 0x9f, 0x53, 0x03, 0x10, 0xfd, 0x8a, 0x64, 0x35, 0x1a, 0x61, 0xe6, 0xed, 0xf1,
	0x75, 0xd0, 0x0c, 0x91, 0xef, 0x0b, 0x4e, 0xff, 0xe4, 0x88, 0x78, 0x89, 0x8e, 0x18, 0x01, 0xe0,
	0x55, 0x7c, 0x4d, 0x78, 0x77, 0x09, 0x9f, 0x11, 0xbc, 0x7d, 0x01, 0x5d, 0x1c, 0xe7, 0xd3, 0xa3,
	0xd9, 0x7b, 0xe3, 0x8e, 0x5d, 0x6b, 0xf0, 0xba, 0xa4, 0xb9, 0x46, 0x58, 0x75, 0x89, 0x0e, 0xb7,
	0x82, 0xa6, 0x2f, 0x6a, 0xfc, 0x4a, 0x35, 0x12, 0x7d, 0x49, 0xe7, 0x5f, 0xaa, 0x81, 0xe7, 0x2f,
	0xd1, 0xfd, 0x71, 0xd7, 0xa1, 0x15, 0xce, 0xdc, 0x43, 0x0f, 0xc7, 0x2d, 0x46, 0x6b, 0x58, 0x79,
	0x80, 0x96, 0x4c, 0xa4, 0x18, 0xa2, 0xc8, 0xe7, 0xd0, 0xb9, 0xba, 0x34, 0x2d, 0x68, 0x5c, 0x32,
	0xd5, 0x46, 0x18, 0x71, 0x89, 0xb9, 0x69, 0x07, 0x09, 0x97, 0x0a, 0x68, 0x83, 0x00, 0x97, 0xb4,
	0xdc, 0x08, 0xf0, 0xdd, 0x1d, 0xf7, 0xe9, 0x1a, 0xf1, 0xdd, 0x2e, 0x9a, 0xad, 0xf3, 0xb4, 0x87,
	0x73, 0x4b, 0xf6, 0x34, 0x53, 0xf4, 0xb6, 0xc4, 0x58, 0x36, 0x83, 0xb5, 0x25, 0xea, 0x39, 0x01,
	0x36, 0x5b, 0x62, 0xe0, 0xcd, 0xa0, 0xd8, 0x12, 0x46, 0x33, 0xe4, 0xb5, 0x64, 0x23, 0x6d, 0x03,
	0xb4, 0x5e, 0x15, 0xe2, 0x0a, 0x6d, 0x70, 0xd5, 0x12, 0xf3, 0xd5, 0x0a, 0x46, 0x2d, 0xf9, 0xb2,
	0x21, 0x6a, 0x5a, 0xa2, 0x1a, 0xa6, 0x20, 0x69, 0x89, 0x6a, 0x34, 0x63, 0xa2, 0x25, 0x86, 0xd6,
	0x00, 0x02, 0x2d, 0xd9, 0x7d, 0x27, 0x42, 0x3c, 0x0f, 0xd0, 0xbc, 0x66, 0x9b, 0x68, 0x01, 0x70,
	0x96, 0x3a, 0x1f, 0x26, 0x78, 0x66, 0x5f, 0x08, 0xfe, 0xed, 0x0b, 0xbe, 0xfc, 0x1f, 0x7d, 0x8d,
	0xce, 0x96, 0xb1, 0x26, 0x11, 0xae, 0x7c, 0x47, 0x98, 0x55, 0x35, 0x3a, 0x79, 0x41, 0x49, 0xa7,
	0x04, 0x23, 0xcf, 0x08, 0x8e, 0x81, 0x1e, 0x7b, 0x2c, 0x9e, 0xe1, 0xdb, 0x40, 0x8d, 0x1f, 0xa3,
	0x19, 0x23, 0x4e, 0x19, 0xb2, 0x58, 0x0c, 0x09, 0x9a, 0x01, 0x89, 0x1d, 0x21, 0x8e, 0x39, 0x11,
	0x6e, 0x78, 0x41, 0x58, 0x83, 0x46, 0x30, 0x61, 0x5b, 0x38, 0xf6, 0x1a, 0xa2, 0x82, 0xd5, 0xdf,
	0x51, 0x82, 0x80, 0xc5, 0xb0, 0x8e, 0x1e, 0xf3, 0x2b, 0xc6, 0x63, 0x5b, 0x43, 0x7c, 0xd5, 0x53,
	0xde, 0x84, 0xe8, 0x5d, 0x54, 0x0e, 0x86, 0x0e, 0xc0, 0x2b, 0x06, 0x04, 0x9b, 0xf0, 0xba, 0x6a,
	0xd5, 0x50, 0xc3, 0x73, 0x9f, 0x0a, 0x3b, 0x70, 0x5b, 0x34, 0xae, 0x78, 0x1b, 0x62, 0x0a, 0xbe,
	0x5d, 0x13, 0x3c, 0xc4, 0x56, 0x58, 0xdb, 0x57, 0xe8, 0xb1, 0x31, 0x6b, 0x13, 0xb4, 0x56, 0x3d,
	0x99, 0x4d, 0x48, 0x5a, 0xf5, 0xfa, 0x6d, 0x06, 0xce, 0x6a, 0xbf, 0xaa, 0xc5, 0xc9, 0x3e, 0x57,
	0xea, 0xae, 0x19, 0x2c, 0xf6, 0xa5, 0xb0, 0x3d, 0x4c, 0x82, 0x82, 0x55, 0xab, 0xa3, 0x0c, 0xf4,
	0x6a, 0x2b, 0xd5, 0x51, 0x83, 0x71, 0x7d, 0xa9, 0xd4, 0x0d, 0x53, 0x48, 0xab, 0xab, 0xd4, 0xe8,
	0x16, 0x08, 0x56, 0xd1, 0x57, 0x6a, 0x0d, 0x58, 0x15, 0x7d, 0x68, 0x73, 0x7c, 0xea, 0x63, 0xe5,
	0x90, 0x35, 0xc3, 0x51, 0x1d, 0xa5, 0x52, 0x1a, 0xa3, 0x4f, 0x5f, 0x09, 0x21, 0xc7, 0xfd, 0x81,
	0x4d, 0xff, 0xa7, 0x29, 0x74, 0x2e, 0xff, 0xf4, 0xe6, 0xfb, 0x6c, 0xf7, 0xf3, 0xf0, 0x57, 0xdf,
	0xbf, 0xd9, 0xdb, 0xe5, 0xf0, 0x82, 0x77, 0xd0, 0xcd, 0xc2, 0x49, 0x2e, 0xce, 0xdc, 0xa3, 0x61,
	0x42, 0x2a, 0xc6, 0x4a, 0x71, 0x83, 0xf3, 0xe8, 0xa2, 0x82, 0xce, 0xf1, 0x3c, 0x76, 0x53, 0xee,
	0x88, 0xd1, 0x8f, 0x2b, 0x0a, 0x0e, 0x0f, 0x07, 0x98, 0x60, 0x52, 0xad, 0xf2, 0xbe, 0xbf, 0x99,
	0xa9, 0x04, 0x16, 0x96, 0x68, 0x18, 0xc6, 0x34, 0xf3, 0xf7, 0x08, 0x12, 0x92, 0xf4, 0x8f, 0xc3,
	0xb3, 0x5e, 0x43, 0x97, 0x4a, 0x51, 0x52, 0x40, 0xeb, 0x7d, 0xae, 0x4b, 0x40, 0x80, 0x03, 0xec,
	0xe6, 0x29, 0x39, 0xfd, 0x73, 0x20, 0xc2, 0xa3, 0x14, 0xcc, 0x22, 0x92, 0xc6, 0x09, 0x8e, 0x0a,
	0x67, 0xd2, 0x4d, 0x77, 0x78, 0x74, 0xeb, 0x51, 0x8a, 0x29, 0x15, 0x69, 0xf3, 0xad, 0x18, 0x02,
	0xa5, 0xdc, 0x1d, 0xd8, 0xd1, 0x99, 0x3f, 0x20, 0x78, 0x55, 0xda, 0xee, 0x8f, 0xdf, 0x53, 0x87,
	0xea, 0x0a, 0xcf, 0x1d, 0x7b, 0x75, 0x3f, 0xea, 0x2e, 0x3a, 0x2f, 0xfe, 0x39, 0x21, 0x01, 0xc3,
	0x3a, 0x5e, 0xf5, 0x28, 0xc5, 0x79, 0xf2, 0x84, 0x99, 0x1f, 0xd2, 0x83, 0x89, 0xd8, 0x5a, 0x82,
	0xe0, 0xe4, 0xe9, 0x72, 0x9c, 0x15, 0xa7, 0x10, 0xd6, 0x52, 0xd2, 0xff, 0x99, 0xff, 0xf6, 0x50,
	0x39, 0xc2, 0xd9, 0xde, 0x9b, 0xbd, 0x9f, 0x3e, 0x8f, 0x8d, 0x30, 0x35, 0x93, 0xe3, 0x90, 0xe1,
	0x3a, 0x01, 0xc0, 0x77, 0x85, 0xb6, 0x4a, 0xc8, 0xd6, 0x9d, 0x80, 0x6b, 0x2a, 0x9d, 0x84, 0x69,
	0xf4, 0x6d, 0x9d, 0xac, 0x98, 0x04, 0x1e, 0xd9, 0x22, 0x8e, 0x3e, 0x10, 0x25, 0x29, 0xa6, 0x9f,
	0xe5, 0x61, 0x07, 0x47, 0x85, 0xa1, 0xe4, 0x28, 0x89, 0xc8, 0xa3, 0x95, 0x23, 0x7a, 0x94, 0xe2,
	0xfa, 0x44, 0xc2, 0x14, 0xbf, 0x1e, 0xe2, 0x2c, 0x1f, 0xa5, 0xf8, 0x15, 0x76, 0x8b, 0x86, 0x1e,
	0xe3, 0x2f, 0xb7, 0xf8, 0xb1, 0x2f, 0xc7, 0x65, 0x23, 0x8a, 0xb7, 0x22, 0x76, 0x6b, 0x48, 0x6e,
	0x68, 0x66, 0xfe, 0xcb, 0x29, 0x74, 0x51, 0x18, 0xd5, 0x74, 0xf7, 0x77, 0xd3, 0xdd, 0x37, 0x9f,
	0x61, 0x69, 0x12, 0x58, 0x6c, 0xfd, 0xbb, 0xaf, 0x46, 0x29, 0x76, 0xb2, 0xb1, 0xe5, 0x19, 0xa3,
	0x97, 0x5a, 0x5a, 0xf2, 0xf5, 0x51, 0x9c, 0x8e, 0xfc, 0x68, 0xd3, 0x09, 0xfc, 0x31, 0x68, 0xf1,
	0xa8, 0x02, 0x7e, 0x95, 0x57, 0x94, 0x1a, 0x81, 0x71, 0xbe, 0x4e, 0x70, 0x22, 0x64, 0xbb, 0x58,
	0x23, 0xe6, 0x7a, 0xe6, 0x6f, 0x3d, 0x40, 0xa7, 0xd2, 0xdd, 0x5f, 0x84, 0x9f, 0x7f, 0x28, 0x4f,
	0x07, 0x0b, 0xe8, 0x76, 0x8a, 0xfb, 0xa3, 0x30, 0x1b, 0x80, 0xaf, 0xef, 0xbd, 0x1a, 0xd2, 0x5b,
	0x03, 0xe6, 0xd0, 0xd0, 0x63, 0xab, 0xf5, 0xcf, 0x5d, 0x3c, 0x56, 0x48, 0xea, 0x05, 0x9d, 0xdb,
	0xe8, 0x62, 0x8d, 0x65, 0x13, 0xa7, 0xb9, 0x9f, 0x51, 0xdc, 0xf4, 0xd4, 0xc5, 0xa3, 0xc4, 0x5f,
	0xea, 0xcc, 0xa1, 0x69, 0x91, 0xac, 0x3a, 0x84, 0x52, 0xa4, 0xbe, 0x0b, 0x98, 0x6c, 0x42, 0xff,
	0xaa, 0xd3, 0x45, 0x77, 0x0d, 0xe8, 0x47, 0x8e, 0xbb, 0x61, 0x1d, 0xa6, 0x3c, 0x49, 0x67, 0x09,
	0xdd, 0x37, 0xe2, 0x09, 0x70, 0x9a, 0x5b, 0x47, 0xa0, 0x07, 0x61, 0x67, 0x06, 0x5d, 0x55, 0xb1,
	0x41, 0x6f, 0x8f, 0x52, 0x5a, 0x27, 0xeb, 0xcc, 0xa1, 0x9b, 0x7a, 0x5a, 0xd2, 0xa2, 0x63, 0x40,
	0x9f, 0x77, 0xec, 0x7a, 0x37, 0xaa, 0xc3, 0xd3, 0x28, 0xc4, 0x59, 0xe6, 0x0c, 0x58, 0x24, 0xc0,
	0x3a, 0x0e, 0x0d, 0xda, 0xe9, 0x2c, 0xa2, 0x7b, 0x06, 0x4c, 0x44, 0xa1, 0xad, 0x13, 0xc0, 0xb5,
	0xd5, 0x59, 0x45, 0xb3, 0xa6, 0x5c, 0xa4, 0x91, 0x5f, 0x00, 0xe7, 0xf6, 0xf8, 0x00, 0x10, 0x50,
	0x23, 0x09, 0x59, 0x41, 0xdb, 0x10, 0x74, 0x68, 0xab, 0x33, 0x8d, 0xce, 0x0b, 0xb4, 0x3d, 0xdf,
	0x2b, 0xdb, 0x72, 0x92, 0x4e, 0xc4, 0xef, 0x75, 0x6e, 0xa1, 0x0b, 0x12, 0x22, 0x72, 0x6b, 0x5a,
	0xf8, 0xf6, 0x84, 0xea, 0x7d, 0xe7, 0x11, 0xba, 0x25, 0x52, 0x31, 0x54, 0x54, 0xd5, 0xda, 0x62,
	0xb1, 0x5a, 0x5f, 0x51, 0x86, 0xdf, 0x1d, 0x1b, 0x7c, 0x37, 0x0e, 0x58, 0xdc, 0xa8, 0x6a, 0xb2,
	0x75, 0x0a, 0xda, 0xba, 0xd3, 0x79, 0x80, 0xae, 0xa9, 0xe8, 0xfd, 0xe8, 0xf5, 0xd0, 0x4f, 0x77,
	0xac, 0xaf, 0x61, 0x10, 0x7a, 0x9d, 0x47, 0x35, 0x05, 0x1d, 0x27, 0x26, 0xa3, 0x66, 0x01, 0xc3,
	0x60, 0x6c, 0xd4, 0x38, 0x06, 0x18, 0xb5, 0x6f, 0x80, 0xd6, 0xd1, 0xb5, 0x84, 0x0d, 0x5e, 0x07,
	0x9a, 0xbd, 0xdd, 0x99, 0x45, 0xd7, 0xd5, 0xc4, 0x30, 0x88, 0xa7, 0x81, 0xfa, 0xbb, 0xce, 0xed,
	0xda, 0x58, 0x0b, 0x4e, 0xfb, 0xb7, 0x40, 0xb6, 0xd1, 0xb9, 0x8f, 0xae, 0x28, 0xc9, 0x48, 0xc7,
	0xce, 0x00, 0xe9, 0xb0, 0xf3, 0x10, 0xdd, 0x50, 0x93, 0xb2, 0xe6, 0x9e, 0x85, 0xbe, 0xad, 0x77,
	0xba, 0xe8, 0x4e, 0x9d, 0x3c, 0x4f, 0x9d, 0xc2, 0xcb, 0x89, 0xf2, 0xc2, 0xcd, 0xa9, 0x96, 0xd1,
	0x39, 0xe0, 0x89, 0x3b, 0x8f, 0xd1, 0x23, 0x91, 0x27, 0x8d, 0xb3, 0x0c, 0xee, 0x96, 0xe8, 0xb3,
	0x85, 0x82, 0x87, 0x20, 0x6c, 0xd9, 0x07, 0xcf, 0x53, 0x2d, 0xd8, 0x1b, 0xb3, 0x0c, 0x52, 0x5e,
	0xca, 0x73, 0x81, 0xf2, 0xfc, 0x34, 0x66, 0xd7, 0x3c, 0x9c, 0xfa, 0x9b, 0x4e, 0xee, 0x6f, 0xf2,
	0xae, 0xb1, 0x9f, 0xe5, 0xd6, 0x45, 0x18, 0x05, 0xa7, 0xb3, 0x8a, 0x1e, 0x1a, 0xb1, 0x94, 0x1f,
	0xbb, 0x44, 0x3f, 0xf6, 0x57, 0x3b, 0x2f, 0x90, 0x6d, 0xc6, 0x09, 0xfe, 0x12, 0x8c, 0xce, 0x65,
	0x18, 0x9d, 0xb4, 0x73, 0x17, 0x5d, 0x16, 0x05, 0xc4, 0x51, 0x3e, 0x2a, 0x36, 0x04, 0x80, 0xbc,
	0x5e, 0xa1, 0x5f, 0x7a, 0xdd, 0xb9, 0x82, 0x3a, 0x02, 0x21, 0x89, 0x0d, 0x58, 0x57, 0xe9, 0x9f,
	0xdd, 0xb1, 0x99, 0xa9, 0xdc, 0x6f, 0xc7, 0x2d, 0xc4, 0x91, 0xdb, 0x25, 0xb2, 0x66, 0xae, 0xc1,
	0xb7, 0xa3, 0xce, 0xbd, 0x9a, 0x9e, 0x54, 0x3c, 0xd0, 0xcc, 0xeb, 0x54, 0xfa, 0x6a, 0xe7, 0x06,
	0x3a, 0x2b, 0x50, 0xae, 0x63, 0x27, 0xcd, 0x7b, 0xd8, 0xc9, 0xad, 0x1b, 0x94, 0x64, 0xbe, 0x73,
	0x09, 0x59, 0x02, 0x89, 0x1f, 0xfb, 0xd6, 0x4d, 0xfa, 0xc7, 0xe5, 0xce, 0x83, 0x9a, 0x9a, 0x93,
	0x21, 0xa9, 0x4d, 0xe0, 0x34, 0x25, 0xde, 0x18, 0xb3, 0x28, 0x84, 0x98, 0xb6, 0x0d, 0x5b, 0xb7,
	0x28, 0x55, 0x30, 0x66, 0x9c, 0x08, 0x15, 0x9c, 0x07, 0x6f, 0x53, 0xa2, 0x48, 0xfe, 0x5d, 0xd1,
	0x4d, 0xb0, 0xee, 0x50, 0xe2, 0xb0, 0x73, 0xbf, 0xb6, 0xc8, 0x81, 0x38, 0xf5, 0x37, 0xe0, 0x89,
	0x90, 0x75, 0x97, 0x92, 0xfe, 0x38, 0x36, 0x19, 0x41, 0x3c, 0x88, 0x23, 0xeb, 0x1e, 0xfd, 0xb3,
	0xd3, 0xb9, 0x8a, 0x4e, 0x8f, 0xfd, 0x79, 0x98, 0x5b, 0xf7, 0xe9, 0xdf, 0x97, 0x3a, 0x2b, 0x35,
	0xf3, 0xcd, 0x87, 0xe1, 0xfd, 0xc8, 0x4d, 0xc9, 0x44, 0x11, 0x13, 0xd0, 0x4f, 0x71, 0xb6, 0x6e,
	0xcd, 0x50, 0xc6, 0xed, 0xb1, 0xfe, 0xf0, 0x8c, 0xac, 0x3f, 0x0f, 0x28, 0xf1, 0xe6, 0xd8, 0xe2,
	0x91, 0x10, 0x33, 0xb3, 0x3b, 0x4b, 0x79, 0x76, 0x3a, 0x6b, 0x68, 0x4e, 0xc9, 0x93, 0x45, 0x4e,
	0x92, 0xad, 0xc7, 0x39, 0x0d, 0x01, 0xb1, 0xb6, 0x3d, 0xa4, 0xac, 0x5b, 0x63, 0x36, 0x92, 0xb1,
	0xe2, 0x3e, 0x79, 0x8a, 0x16, 0x47, 0xd6, 0x1c, 0x68, 0xde, 0x70, 0x4c, 0x5b, 0xc7, 0x68, 0xcb,
	0xde, 0x3c, 0x02, 0x9e, 0x7c, 0x6c, 0xcf, 0x1b, 0xe7, 0x11, 0xd7, 0xd8, 0x3c, 0x70, 0x6e, 0x76,
	0xfe, 0x7f, 0xd2, 0xbe, 0xe4, 0xb7, 0x8e, 0x24, 0xcd, 0xaf, 0x29, 0x51, 0x4b, 0x85, 0x5a, 0x55,
	0x59, 0x4f, 0xaa, 0x92, 0x44, 0x2d, 0xa5, 0x7d, 0x79, 0xa2, 0x24, 0xee, 0x94, 0x4a, 0x6b, 0xbc,
	0xcc, 0x78, 0xef, 0xa5, 0x98, 0x1b, 0x73, 0xe1, 0xa2, 0xae, 0x9e, 0x1c, 0x8a, 0x62, 0x55, 0xb1,
	0x8b, 0x22, 0xd5, 0xd4, 0x53, 0x77, 0xd5, 0x9c, 0x7c, 0xf0, 0xcd, 0x03, 0x03, 0x06, 0xda, 0x9e,
	0x3e, 0x0d, 0xe0, 0xbe, 0xd8, 0x73, 0x33, 0x06, 0x03, 0xa3, 0x0e, 0xf6, 0xc9, 0x30, 0x60, 0xfb,
	0x2f, 0x30, 0x60, 0xc0, 0x18, 0x9f, 0x0d, 0x1b, 0xbe, 0x74, 0x9f, 0x6c, 0x63, 0x90, 0xb1, 0xe4,
	0x8b, 0xc8, 0x8c, 0x88, 0x8c, 0xc7, 0xba, 0x74, 0x17, 0xf5, 0xbe, 0xef, 0x8b, 0x25, 0x23, 0xbe,
	0xf8, 0x22, 0xbe, 0xe5, 0x77, 0x15, 0x9c, 0xa9, 0x70, 0x26, 0x09, 0x71, 0x22, 0x58, 0xd3, 0xa4,
	0xf7, 0xdb, 0x92, 0xc9, 0x62, 0x34, 0xb5, 0x0d, 0x34, 0x43, 0x78, 0x5e, 0xb7, 0x16, 0x40, 0x5b,
	0xe4, 0xc1, 0xde, 0x0d, 0xd4, 0x93, 0x2a, 0x37, 0x6b, 0x96, 0xaa, 0x1b, 0xbb, 0x65, 0x83, 0x45,
	0x81, 0x2f, 0x40, 0xe9, 0x6a, 0x18, 0x2f, 0x09, 0xd7, 0x6d, 0xfa, 0x52, 0x50, 0x5d, 0xac, 0x73,
	0x74, 0x50, 0x76, 0xcb, 0x01, 0x0f, 0x47, 0x17, 0x42, 0x4f, 0x94, 0x79, 0x2a, 0xc5, 0x69, 0x5d,
	0x00, 0x9f, 0x56, 0xa4, 0xac, 0x26, 0xd6, 0x02, 0x19, 0x60, 0xa7, 0xa6, 0x9c, 0x02, 0xb4, 0xca,
	0xc6, 0x56, 0x28, 0x62, 0x6b, 0x91, 0x10, 0xbe, 0x6f, 0xdd, 0x04, 0xe7, 0x15, 0x84, 0x58, 0xd3,
	0x3e, 0x24, 0x74, 0xa8, 0x76, 0x36, 0x0e, 0xe9, 0xd8, 0xdc, 0x59, 0x8f, 0xe8, 0x34, 0x75, 0x6a,
	0xea, 0x69, 0x48, 0x9c, 0xb8, 0x41, 0xcf, 0x43, 0xd6, 0x97, 0x44, 0xac, 0x53, 0xdb, 0x16, 0x95,
	0xf9, 0xc7, 0x4b, 0xfc, 0x31, 0x21, 0x7e, 0xd4, 0x9a, 0xab, 0x58, 0x8e, 0xda, 0x93, 0xe8, 0x09,
	0xe1, 0xea, 0xb5, 0x26, 0x2b, 0x07, 0xa5, 0xf4, 0x0c, 0x7a, 0x4a, 0xa8, 0xbb, 0xb5, 0x33, 0x88,
	0x8e, 0xb1, 0x58, 0x53, 0xf4, 0xc6, 0x4c, 0x17, 0xe9, 0x33, 0xfa, 0x25, 0x5e, 0xd5, 0xb6, 0x84,
	0x8c, 0x85, 0xb4, 0xf2, 0x9c, 0xf0, 0xd8, 0xb0, 0x35, 0xa5, 0x6e, 0x66, 0x38, 0x9e, 0xa2, 0x99,
	0x17, 0xa4, 0x63, 0xfb, 0xad, 0x69, 0x75, 0x2b, 0x95, 0xb1, 0x40, 0xc2, 0xf2, 0x6b, 0x5d, 0xc7,
	0x2a, 0x8b, 0xb3, 0x43, 0x3f, 0x5d, 0x57, 0x31, 0x5b, 0x15, 0x72, 0x9b, 0xb4, 0xd0, 0xaf, 0xd9,
	0xc0, 0xe5, 0x05, 0xc4, 0x87, 0xd8, 0xae, 0xc0, 0x21, 0xc8, 0x74, 0x24, 0x0e, 0x6d, 0xc3, 0xaf,
	0xdd, 0x00, 0x14, 0x5c, 0xa4, 0x2d, 0x44, 0xd9, 0xbc, 0xd6, 0xed, 0xca, 0x9a, 0xae, 0xde, 0x76,
	0xba, 0x94, 0x32, 0xaa, 0x29, 0x79, 0xa2, 0x31, 0x7a, 0xa4, 0xd7, 0x49, 0xed, 0x98, 0x22, 0xca,
	0x82, 0x26, 0x62, 0xf6, 0x09, 0xd5, 0xab, 0xda, 0x95, 0x89, 0x50, 0xb1, 0x6e, 0xb9, 0x84, 0x2c,
	0xae, 0xd9, 0x61, 0x02, 0x19, 0x5b, 0xc2, 0x2f, 0x69, 0xd7, 0x7a, 0xad, 0x5b, 0x95, 0xfd, 0xc6,
	0xc8, 0xe9, 0xfe, 0x5e, 0xa2, 0x84, 0x2f, 0x6b, 0xf6, 0x25, 0x21, 0x2c, 0x3f, 0x04, 0x1e, 0xb1,
	0x47, 0xa9, 0xdd, 0xda, 0x67, 0xab, 0x50, 0x93, 0x3e, 0xfb, 0xa4, 0xcf, 0x1b, 0xb5, 0xb5, 0x24,
	0xbc, 0xe9, 0x72, 0x97, 0xb0, 0xc4, 0x0a, 0x08, 0xcb, 0x5e, 0xcd, 0x16, 0x54, 0xb2, 0x0c, 0xc7,
	0x12, 0x12, 0xde, 0x77, 0xb5, 0x43, 0x95, 0x4e, 0x4a, 0x44, 0x7e, 0x9f, 0xad, 0xdd, 0x18, 0xd8,
	0xe4, 0x75, 0xc3, 0xb8, 0xfc, 0xc8, 0x89, 0xb5, 0x4c, 0x07, 0x1b, 0xd4, 0xd6, 0xb5, 0x94, 0x1e,
	0x9b, 0xcb, 0x31, 0xe5, 0x09, 0x6b, 0x7a, 0x2e, 0x46, 0x09, 0x0a, 0x86, 0x97, 0xa2, 0x84, 0xf4,
	0x65, 0xa6, 0x75, 0xbd, 0x62, 0x9c, 0xc4, 0xdd, 0xe5, 0x92, 0x28, 0xa5, 0xd2, 0xfa, 0x35, 0xb5,
	0x55, 0x5a, 0x8c, 0xdc, 0x99, 0x99, 0x11, 0x91, 0x6f, 0x5a, 0xb3, 0x95, 0x4d, 0x22, 0x21, 0x2e,
	0x9b, 0x58, 0x21, 0x4c, 0x9b, 0xad, 0x2f, 0x2b, 0xc7, 0xb9, 0x8c, 0x49, 0x3c, 0x35, 0x57, 0xa9,
	0x42, 0x8a, 0x6a, 0x2b, 0x57, 0x34, 0x9e, 0xd7, 0x48, 0x13, 0x3f, 0xb4, 0xee, 0x55, 0xa6, 0x5d,
	0x6e, 0x30, 0xaf, 0x13, 0xf2, 0xef, 0x6b, 0x7b, 0x5d, 0x67, 0x25, 0xbf, 0xa2, 0x7d, 0x59, 0xaa,
	0x1d, 0x44, 0x25, 0x17, 0x35, 0xf8, 0x7e, 0x41, 0xc4, 0x7f, 0x5d, 0xbb, 0x67, 0x56, 0x08, 0xcb,
	0xfe, 0x7c, 0x45, 0x18, 0xb6, 0x6a, 0x5f, 0xb4, 0x64, 0x28, 0xfe, 0x4a, 0xac, 0x5f, 0x12, 0xba,
	0xdf, 0xaa, 0x87, 0xc9, 0xaf, 0x1d, 0xeb, 0xcf, 0x08, 0xf9, 0x6f, 0x24, 0x62, 0x97, 0x33, 0x44,
	0x14, 0x52, 0x82, 0x52, 0x2b, 0x27, 0x74, 0x73, 0x92, 0xfe, 0x96, 0x21, 0xca, 0xc2, 0x0e, 0xfa,
	0x73, 0xc2, 0x90, 0xb6, 0x16, 0xc1, 0x5d, 0x03, 0x86, 0xb2, 0x43, 0x1b, 0x74, 0xb1, 0xad, 0xd4,
	0xd4, 0x25, 0xc7, 0x18, 0x76, 0x3c, 0xb7, 0x27, 0x3c, 0x82, 0xbc, 0xa6, 0x33, 0xbf, 0x5c, 0x3b,
	0xc9, 0x92, 0x34, 0x46, 0xd0, 0x97, 0x3c, 0x1b, 0x6c, 0xd2, 0x53, 0xc9, 0xa9, 0xb7, 0xa4, 0x60,
	0xc1, 0x7b, 0xeb, 0x0d, 0x65, 0x43, 0xb5, 0xfd, 0x28, 0x63, 0x23, 0x83, 0xda, 0xa2, 0x3c, 0x76,
	0x4d, 0x07, 0xa7, 0x88, 0x5b, 0x73, 0x5f, 0x93, 0x39, 0x9b, 0xae, 0x29, 0x57, 0x7c, 0xb3, 0xca,
	0x6d, 0x18, 0xa5, 0x59, 0x5c, 0x2e, 0xb6, 0x6f, 0xe8, 0x4c, 0xa1, 0xda, 0x90, 0x65, 0xe4, 0xb8,
	0xef, 0xdf, 0x52, 0x96, 0xb8, 0x36, 0x64, 0x29, 0x0b, 0xeb, 0xd7, 0x36, 0x65, 0x73, 0x5a, 0x8f,
	0x2a, 0xf7, 0x4e, 0x1d, 0x1b, 0x6e, 0xf1, 0x57, 0x94, 0x75, 0x59, 0x3a, 0x26, 0xfe, 0xc9, 0x10,
	0x6f, 0xd2, 0xef, 0xe8, 0x67, 0x7c, 0x29, 0xed, 0x60, 0x95, 0xbc, 0xec, 0xe0, 0x0e, 0x65, 0x73,
	0x5b, 0x8f, 0x2b, 0xfa, 0x5a, 0xca, 0x26, 0x6e, 0xda, 0xb7, 0x94, 0x39, 0xa9, 0x3d, 0x03, 0x56,
	0x99, 0xe9, 0xde, 0xdd, 0x25, 0x9f, 0xe9, 0xdb, 0xd6, 0x42, 0x65, 0x69, 0xcb, 0xe9, 0xcb, 0x5e,
	0xee, 0x11, 0xbe, 0x6f, 0x5a, 0x17, 0x2a, 0xca, 0x96, 0x7f, 0x7c, 0x7d, 0x57, 0xbb, 0x96, 0x64,
	0x09, 0x8a, 0xf3, 0x20, 0x4c, 0x87, 0xd9, 0xcd, 0xbf, 0xa6, 0xcb, 0xa9, 0x53, 0x7b, 0x5f, 0xc1,
	0xb4, 0xac, 0xbd, 0x7d, 0x3a, 0x30, 0xd4, 0xba, 0x59, 0xd1, 0x8c, 0x94, 0x8c, 0x1e, 0x58, 0xef,
	0x29, 0x5d, 0xb7, 0x76, 0xef, 0x58, 0xf3, 0xbd, 0x00, 0xc7, 0x3d, 0xae, 0x59, 0x03, 0xd2, 0xf9,
	0xdd, 0xf6, 0x5f, 0x00, 0xcb, 0x7f, 0xff, 0x8d, 0x98, 0xb4, 0x79, 0x11, 0x9c, 0x2b, 0x78, 0x54,
	0xa9, 0x9a, 0xd7, 0xc1, 0x67, 0xe2, 0xcf, 0x31, 0xb2, 0x91, 0xbb, 0x52, 0xd6, 0x88, 0x88, 0xf1,
	0xc3, 0xf8, 0x15, 0xd0, 0x12, 0xa9, 0x8a, 0x93, 0x8a, 0xbd, 0xd9, 0x27, 0xd8, 0x71, 0xf0, 0xef,
	0x0e, 0x03, 0x2b, 0xde, 0xfa, 0x1a, 0xbe, 0x7b, 0xb7, 0xb3, 0xb2, 0xb5, 0xef, 0x3a, 0x65, 0x96,
	0x12, 0xea, 0xe2, 0x17, 0xc5, 0x7c, 0x05, 0xc5, 0xb9, 0xeb, 0xd4, 0x9b, 0xaf, 0x12, 0x74, 0xdd,
	0xb5, 0x99, 0x45, 0xd6, 0xfc, 0x14, 0x2b, 0x3e, 0x21, 0xa1, 0x9a, 0x9d, 0x12, 0x93, 0x63, 0xe5,
	0x54, 0x73, 0x53, 0x62, 0x42, 0xac, 0x82, 0x6a, 0x9a, 0xb9, 0x0c, 0x66, 0x75, 0x54, 0x33, 0xbc,
	0xbf, 0x40, 0x49, 0x35, 0xcb, 0x9c, 0x04, 0xf3, 0x3a, 0xaa, 0x39, 0xbe, 0xf0, 0x82, 0x8a, 0x6a,
	0x7e, 0x8a, 0x45, 0x6a, 0x2c, 0x96, 0x59, 0x63, 0x32, 0xaa, 0x24, 0x9a, 0xe6, 0x6b, 0x28, 0x1c,
	0x6f, 0xdd, 0x57, 0x12, 0xce, 0x58, 0x80, 0x78, 0xd6, 0x1e, 0xd1, 0xc8, 0x9f, 0x8d, 0x9f, 0xfd,
	0xec, 0x67, 0xed, 0x3f, 0x8e, 0x81, 0xd3, 0xc9, 0xd6, 0x60, 0xb0, 0x13, 0xbe, 0xde, 0xd9, 0xfe,
	0x86, 0xcb, 0x5d, 0xbd, 0x0a, 0x2e, 0x61, 0xed, 0x4e, 0x14, 0xbb, 0x3c, 0x73, 0x15, 0x81, 0x07,
	0x12, 0x1a, 0xc1, 0x04, 0xeb, 0x62, 0x8f, 0x44, 0x92, 0xba, 0x69, 0x46, 0x5d, 0x58, 0x65, 0xc6,
	0x2d, 0xf3, 0x5e, 0xb6, 0x9e, 0x83, 0x3b, 0x4d, 0x62, 0xc2, 0x2e, 0x0b, 0x05, 0xe3, 0x32, 0x70,
	0x4b, 0x01, 0xd3, 0xe0, 0xbc, 0x54, 0x00, 0x49, 0x29, 0x61, 0x1e, 0x45, 0xc1, 0x63, 0xfa, 0x77,
	0x87, 0x80, 0x95, 0x6e, 0x6f, 0x7e, 0x17, 0x7f, 0xd8, 0x19, 0xe6, 0xd6, 0x5f, 0x02, 0x13, 0xa9,
	0x6b, 0x2f, 0xe5, 0x71, 0xe6, 0x29, 0xf2, 0xea, 0x4f, 0x57, 0x7e, 0xef, 0xba, 0x6b, 0xc8, 0xa9,
	0x0e, 0x6a, 0xae, 0xe8, 0xd3, 0x24, 0xf8, 0xbc, 0x42, 0x4b, 0x42, 0x0e, 0xca, 0x11, 0x4c, 0xf1,
	0xd4, 0x8f, 0xc1, 0x8d, 0x0a, 0x35, 0x39, 0x5a, 0x9d, 0x1c, 0x26, 0x39, 0x4c, 0xa2, 0x18, 0x41,
	0x27, 0x2f, 0x6e, 0xb6, 0x87, 0x87, 0x55, 0x71, 0x4a, 0xe6, 0x2f, 0xc1, 0xf5, 0x0a, 0x33, 0x3e,
	0x03, 0x6a, 0xbc, 0xe3, 0xe2, 0x3c, 0x60, 0xde, 0x7b, 0xe0, 0x4c, 0x85, 0x77, 0x05, 0xc6, 0x2e,
	0xec, 0x78, 0xc8, 0x3a, 0x22, 0xce, 0x74, 0x41, 0xde, 0xfe, 0x1f, 0x63, 0xe0, 0x4c, 0x32, 0xd8,
	0xdf, 0xfe, 0x6e, 0x0b, 0x7d, 0xbf, 0xb5, 0xbf, 0xb9, 0xfd, 0x7e, 0x2b, 0x19, 0xfc, 0x40, 0x53,
	0x13, 0x6f, 0x80, 0x2b, 0xf4, 0xa1, 0x0b, 0xad, 0xa1, 0xd8, 0x76, 0x93, 0xe2, 0xf8, 0x5d, 0xaf,
	0x25, 0x28, 0xce, 0x81, 0x4b, 0x72, 0x32, 0xe8, 0xa3, 0xd8, 0xb5, 0x61, 0xb9, 0x46, 0xf8, 0x86,
	0x5b, 0xb3, 0xe0, 0xa2, 0x9c, 0xab, 0x83, 0x62, 0x3f, 0x73, 0x20, 0x9b, 0x55, 0xe1, 0x1b, 0x28,
	0x9b, 0x42, 0x59, 0x1c, 0x46, 0x08, 0x06, 0x6c, 0x3a, 0xf9, 0x6f, 0xd1, 0xfe, 0xa7, 0x87, 0xc0,
	0x79, 0x7f, 0x63, 0x80, 0xab, 0xd8, 0xf8, 0x7b, 0xbb, 0x83, 0x6f, 0xd7, 0xb7, 0x36, 0xf6, 0xbb,
	0x7b, 0xfb, 0x6f, 0x37, 0x06, 0xcc, 0x6b, 0xe7, 0xc3, 0x94, 0x18, 0x6e, 0x7e, 0x18, 0xa4, 0xfd,
	0x7c, 0x1d, 0xc1, 0xb8, 0x58, 0xe9, 0x3e, 0x4c, 0x2b, 0x83, 0x7d, 0x0e, 0xee, 0x68, 0x68, 0xf1,
	0x7f, 0x93, 0x7f, 0x76, 0xe0, 0xba, 0x74, 0xdc, 0x2f, 0x40, 0xdb, 0x4c, 0x40, 0x18, 0x78, 0xeb,
	0xd2, 0xa5, 0x65, 0x2c, 0x61, 0x15, 0xa1, 0x25, 0x36, 0x21, 0xfc, 0x34, 0xb6, 0xff, 0xfb, 0x21,
	0x70, 0xad, 0x36, 0x21, 0xee, 0xee, 0xe6, 0xfe, 0xd6, 0xdb, 0xad, 0xdd, 0x41, 0xb6, 0xbb, 0x3d,
	0x20, 0xde, 0xe2, 0x59, 0xf0, 0x40, 0xd6, 0x52, 0xf9, 0x18, 0x89, 0xe3, 0xd8, 0x93, 0x5a, 0xf6,
	0xfb, 0x6d, 0x13, 0x26, 0x07, 0xae, 0x27, 0xa3, 0x4c, 0x50, 0x95, 0x1f, 0xff, 0x94, 0x48, 0x27,
	0x48, 0xf1, 0x8d, 0xaa, 0x12, 0x8a, 0xe9, 0x49, 0x64, 0xf3, 0x63, 0x2a, 0xa0, 0xf8, 0xc7, 0x44,
	0xb6, 0x09, 0xdb, 0x7f, 0x1a, 0x03, 0xe7, 0x93, 0xad, 0xcd, 0xbd, 0xdd, 0x37, 0x1b, 0xfb, 0x3f,
	0xe0, 0x02, 0x0c, 0xde, 0xf6, 0xdb, 0xed, 0x41, 0xa9, 0x97, 0xda, 0xe0, 0xe6, 0x30, 0x0d, 0x86,
	0x14, 0x4b, 0xc0, 0xf5, 0x0b, 0x64, 0x3a, 0xea, 0x31, 0xb8, 0xa1, 0xa1, 0x8d, 0x50, 0x6c, 0xa3,
	0x20, 0x85, 0x3d, 0x24, 0x55, 0x5a, 0x0b, 0xe0, 0xb2, 0x8e, 0x19, 0xbf, 0x5f, 0xcb, 0xa6, 0x50,
	0xcf, 0x57, 0x28, 0x98, 0x72, 0xe6, 0x04, 0x75, 0xf2, 0x1f, 0xc7, 0x40, 0x4b, 0x32, 0xde, 0xcb,
	0xe0, 0x42, 0xc3, 0x28, 0xa7, 0xc1, 0xf9, 0x51, 0xc7, 0x36, 0x09, 0x3e, 0x1f, 0x61, 0x44, 0x32,
	0x6a, 0xf5, 0x38, 0xfe, 0x66, 0x0c, 0x7c, 0xec, 0x3b, 0x9d, 0xbd, 0xbd, 0xef, 0xf8, 0xb2, 0x64,
	0xbe, 0x93, 0x77, 0xc2, 0x70, 0x49, 0xd6, 0xff, 0x5b, 0x95, 0x5f, 0xc9, 0xdb, 0x96, 0x83, 0xa2,
	0xb4, 0x2f, 0x16, 0x0a, 0xa9, 0x12, 0xd2, 0x52, 0x19, 0x98, 0x50, 0x28, 0xb9, 0x56, 0x25, 0x4c,
	0xc3, 0x08, 0x9f, 0x9a, 0x61, 0xb8, 0xc4, 0x47, 0x7a, 0x1c, 0x6b, 0xff, 0x87, 0x31, 0x70, 0xc2,
	0xdb, 0x1b, 0x4e, 0xf6, 0x59, 0x70, 0xda, 0x0b, 0xa5, 0x93, 0x7c, 0x05, 0xb4, 0xca, 0x5f, 0x3a,
	0x5e, 0x68, 0x2f, 0xe5, 0x5e, 0x98, 0x8a, 0xdd, 0xfb, 0x02, 0x58, 0x25, 0x49, 0xe8, 0x38, 0x98,
	0xe0, 0x50, 0xa5, 0x58, 0x5c, 0x49, 0x10, 0x87, 0x59, 0x40, 0x48, 0x04, 0xcb, 0x6c, 0x16, 0x5c,
	0xac, 0x93, 0xe4, 0x1d, 0x98, 0x20, 0x27, 0xcf, 0x22, 0x5c, 0x14, 0x4d, 0xa8, 0x04, 0x17, 0x15,
	0x33, 0xfe, 0xb7, 0x27, 0xc0, 0x49, 0x7f, 0x63, 0xb0, 0xf9, 0x6d, 0x39, 0x8e, 0x09, 0xf0, 0xb9,
	0x0f, 0x53, 0xbb, 0x2f, 0x1b, 0xc9, 0x13, 0x30, 0xc9, 0xfd, 0x06, 0xa7, 0xd1, 0x1a, 0xb4, 0xd3,
	0x9c, 0xfc, 0x53, 0x92, 0xf9, 0x3e, 0x8c, 0xdd, 0x57, 0xc8, 0xc9, 0x97, 0x33, 0x48, 0xe2, 0xdb,
	0xc7, 0x48, 0xdc, 0x43, 0x32, 0xcd, 0x20, 0x0a, 0x79, 0xee, 0x99, 0x26, 0x6e, 0x1a, 0x35, 0x91,
	0xcc, 0xc8, 0xb8, 0x67, 0x9b, 0xb8, 0x69, 0xf4, 0x72, 0x32, 0x2b, 0xe3, 0x9e, 0x6b, 0xe2, 0xa6,
	0xf1, 0xcb, 0xc9, 0x9c, 0x8c, 0x7b, 0xbe, 0x89, 0x9b, 0xa6, 0xd7, 0x27, 0x2c, 0x43, 0xfe, 0x02,
	0xcf, 0x6d, 0xa7, 0x24, 0xb8, 0x9c, 0x96, 0xad, 0x2b, 0x83, 0x96, 0x7d, 0xd2, 0xd3, 0xfb, 0xe0,
	0x92, 0x48, 0xed, 0xa0, 0x2e, 0xcc, 0xbc, 0x34, 0x87, 0xdd, 0x14, 0xc5, 0xb9, 0x3f, 0xc3, 0x22,
	0x96, 0xfd, 0x79, 0x96, 0xe9, 0x2f, 0xa7, 0x27, 0xc2, 0x8f, 0x53, 0xe2, 0x39, 0x96, 0xea, 0x2c,
	0x12, 0xfb, 0x0b, 0xf8, 0x6f, 0x16, 0x9d, 0xec, 0x2f, 0x50, 0x38, 0xcb, 0x3b, 0x1c, 0x19, 0x3f,
	0x5a, 0xdf, 0x0d, 0xb2, 0x24, 0xef, 0x40, 0xa7, 0x87, 0x92, 0x3c, 0x75, 0x7d, 0x94, 0xb0, 0x6c,
	0x7a, 0x7f, 0x9a, 0x56, 0x7f, 0xb8, 0xaa, 0x60, 0x8d, 0xbc, 0x2c, 0x99, 0x21, 0x9c, 0xd6, 0x09,
	0xc2, 0x03, 0x65, 0xd3, 0xab, 0xe0, 0xc1, 0x5e, 0x47, 0xdc, 0x24, 0x8b, 0x52, 0x86, 0xb3, 0x06,
	0x2d, 0xce, 0xd1, 0x16, 0x69, 0x8c, 0x32, 0x9c, 0x31, 0x68, 0x71, 0xae, 0xd6, 0xe2, 0xc7, 0x94,
	0x7b, 0x9a, 0x56, 0x0c, 0xb8, 0xa1, 0xe1, 0xe6, 0xd8, 0x3e, 0xa1, 0x6c, 0xf3, 0xb4, 0x40, 0xcc,
	0x19, 0x8e, 0x2d, 0xb4, 0x93, 0x42, 0x17, 0x20, 0x27, 0x77, 0x03, 0x16, 0xa1, 0xec, 0xa7, 0x14,
	0xe8, 0x75, 0x96, 0x23, 0x4c, 0x52, 0xe8, 0x47, 0x38, 0x42, 0x78, 0xc5, 0x4d, 0xc2, 0xd8, 0x45,
	0x49, 0x1e, 0xc6, 0xa4, 0x28, 0x18, 0xc4, 0x77, 0x7e, 0xb2, 0x9c, 0x12, 0x96, 0x73, 0x0f, 0x97,
	0x69, 0x4d, 0x94, 0xfb, 0xbc, 0x90, 0xe1, 0x2a, 0x55, 0x7e, 0x48, 0x1a, 0xb5, 0xec, 0xcf, 0xd0,
	0x75, 0x25, 0x2c, 0x95, 0x2c, 0x0d, 0x09, 0xa7, 0x75, 0x6a, 0xa8, 0x46, 0xca, 0xec, 0xb7, 0x7b,
	0xc2, 0xd0, 0x6c, 0xe8, 0x79, 0x65, 0x71, 0x48, 0x5a, 0x27, 0x4c, 0x48, 0x96, 0x5b, 0x04, 0x57,
	0x78, 0x72, 0x12, 0xe7, 0xc0, 0xf6, 0x03, 0x7b, 0xbc, 0xf8, 0x6c, 0x78, 0xc2, 0x97, 0x8c, 0x0f,
	0x85, 0x6f, 0x4d, 0xdd, 0x6b, 0xcc, 0xa3, 0x81, 0x63, 0x12, 0x8b, 0x26, 0x69, 0x21, 0x30, 0x21,
	0x9d, 0xf0, 0x3e, 0x38, 0xcb, 0x73, 0xe2, 0xd8, 0x05, 0xd6, 0xc5, 0x33, 0x84, 0x7e, 0x5e, 0xdd,
	0xc5, 0x30, 0x40, 0x34, 0xc0, 0x54, 0xe8, 0xe2, 0x59, 0xb1, 0x8c, 0x91, 0x84, 0xb1, 0x0c, 0x68,
	0x14, 0x19, 0xcf, 0x89, 0x05, 0x93, 0x30, 0xe3, 0x6d, 0xd0, 0xe2, 0x18, 0xdd, 0x24, 0xc9, 0xdc,
	0xa0, 0x67, 0x4d, 0x10, 0xca, 0x87, 0xf4, 0x98, 0x7c, 0x50, 0x28, 0xed, 0xbf, 0x3f, 0x03, 0x3e,
	0x45, 0xdf, 0x6f, 0x6d, 0xba, 0xbb, 0xef, 0x07, 0x2b, 0x1b, 0x3b, 0x1f, 0xca, 0x92, 0x26, 0x78,
	0xe5, 0x15, 0x17, 0xbe, 0x7c, 0x05, 0x7a, 0x99, 0xa4, 0x9c, 0x59, 0x95, 0xa0, 0xf8, 0x50, 0x61,
	0x4c, 0x2a, 0x59, 0x8d, 0x0d, 0xab, 0xa6, 0x8c, 0xb5, 0xee, 0x80, 0x89, 0x2a, 0x2d, 0xfe, 0xaa,
	0x5d, 0x37, 0x4e, 0xca, 0xa3, 0xc9, 0x66, 0x75, 0x23, 0xab, 0xa4, 0x4e, 0x98, 0x07, 0x61, 0x4a,
	0x2c, 0x37, 0x98, 0x20, 0x76, 0x4e, 0x21, 0x4c, 0x3f, 0x09, 0x2e, 0x2a, 0xe8, 0x63, 0xe4, 0x64,
	0x76, 0x19, 0x7c, 0xd8, 0xc5, 0xd4, 0xb7, 0xc0, 0xd9, 0x2a, 0x75, 0x2f, 0xcc, 0xa1, 0x17, 0x06,
	0x3d, 0xf6, 0x98, 0x40, 0xca, 0x51, 0x5e, 0x03, 0xa7, 0xab, 0x84, 0x7d, 0xe4, 0x39, 0xfc, 0x5b,
	0x82, 0x54, 0x5a, 0xd1, 0x30, 0x26, 0x3c, 0xc6, 0x17, 0xc3, 0x94, 0x12, 0x52, 0x4f, 0xeb, 0xf1,
	0x61, 0xd5, 0x27, 0xe9, 0x44, 0x85, 0x4b, 0x29, 0x23, 0xfd, 0x68, 0x58, 0xf7, 0x69, 0xac, 0x75,
	0x17, 0x5c, 0xa8, 0x91, 0xae, 0xa0, 0x38, 0x4f, 0xfb, 0x08, 0xdf, 0x5b, 0xc0, 0xf0, 0x6d, 0x64,
	0xac, 0xf5, 0x25, 0xb8, 0x5b, 0x25, 0x2e, 0x93, 0x5e, 0x52, 0x6e, 0x86, 0xdd, 0x14, 0x97, 0xad,
	0x3d, 0x31, 0x7c, 0x0b, 0x19, 0x6b, 0x4d, 0x81, 0x2b, 0x35, 0x5e, 0x62, 0xd4, 0x15, 0xa6, 0xcc,
	0x4a, 0xe8, 0x65, 0x58, 0x89, 0x96, 0x05, 0x94, 0x70, 0x2d, 0xcf, 0x2a, 0x47, 0x92, 0xc2, 0xf5,
	0x3c, 0x0c, 0x70, 0x0c, 0x59, 0xe2, 0x3a, 0x88, 0x95, 0x25, 0x79, 0x84, 0x19, 0xa6, 0xc1, 0x55,
	0x15, 0x03, 0x29, 0x2d, 0x87, 0x59, 0x3e, 0x1e, 0xbe, 0x42, 0x49, 0x87, 0x5f, 0xdc, 0x2a, 0xed,
	0x34, 0x4f, 0x6c, 0xe8, 0x21, 0x3e, 0xc5, 0x43, 0x4a, 0x9c, 0xc6, 0xeb, 0x79, 0x1a, 0x52, 0x62,
	0x6b, 0xf8, 0x58, 0x23, 0xfd, 0xf4, 0xab, 0x61, 0xbc, 0xc4, 0x12, 0x38, 0x66, 0x54, 0x93, 0xc2,
	0x3d, 0xa8, 0x24, 0xe4, 0xe2, 0xc7, 0x15, 0x57, 0x3c, 0xd4, 0xba, 0x5b, 0x5f, 0x03, 0xb8, 0xfe,
	0x5d, 0x84, 0x7a, 0xd6, 0xa9, 0x89, 0x93, 0xac, 0xfa, 0xe1, 0xa1, 0x1f, 0x7f, 0x77, 0xed, 0x78,
	0xeb, 0x5e, 0x7d, 0x1d, 0xd0, 0xa0, 0x88, 0x82, 0xfc, 0x34, 0x21, 0x8f, 0x4a, 0xf2, 0xa9, 0xfa,
	0x26, 0xf0, 0x5d, 0x87, 0x9a, 0xa5, 0x05, 0xc7, 0x67, 0x84, 0xc3, 0xe7, 0x1a, 0xb8, 0x54, 0x5f,
	0x91, 0x41, 0x1e, 0xa0, 0x5e, 0x98, 0x92, 0x87, 0x86, 0xcf, 0x49, 0xe7, 0x03, 0xdc, 0xf9, 0xfb,
	0xf5, 0xcd, 0x1e, 0x46, 0x28, 0x70, 0x83, 0x1e, 0x16, 0x7f, 0x86, 0x88, 0x0f, 0x4b, 0xf1, 0x12,
	0xfa, 0x28, 0x76, 0x7d, 0x7c, 0x11, 0x41, 0x3d, 0xeb, 0x2c, 0xa1, 0x8f, 0x4b, 0xfa, 0x9b, 0xe0,
	0x4c, 0xed, 0x6b, 0x66, 0x49, 0x84, 0x02, 0x87, 0x25, 0x54, 0x24, 0xb8, 0x1f, 0x8f, 0xc1, 0x64,
	0x4d, 0x91, 0xb0, 0x0a, 0x1d, 0xac, 0x6a, 0x31, 0x1f, 0x88, 0x3a, 0x31, 0x2c, 0x58, 0x37, 0x2e,
	0x6b, 0x24, 0x40, 0x29, 0x8e, 0xba, 0x3e, 0x4f, 0xe8, 0x56, 0x30, 0x9d, 0xac, 0xf3, 0xa8, 0x57,
	0xac, 0x96, 0x95, 0x55, 0x18, 0x59, 0x17, 0x48, 0xe7, 0x57, 0xff, 0xf5, 0xef, 0xae, 0x1d, 0xc1,
	0x9d, 0x5f, 0x04, 0xb7, 0xeb, 0xda, 0x0d, 0x7b, 0xdc, 0xc3, 0x80, 0xc5, 0x69, 0x74, 0xa1, 0xeb,
	0x65, 0x31, 0xb2, 0x2e, 0x92, 0x86, 0x96, 0x59, 0xad, 0x20, 0x35, 0x23, 0x7b, 0x23, 0xef, 0x43,
	0x2f, 0xb5, 0x2e, 0x11, 0xb6, 0x25, 0x56, 0x1c, 0xac, 0xca, 0x16, 0xa3, 0xe2, 0x8f, 0x62, 0x2b,
	0xd7, 0x9b, 0xfc, 0x62, 0x58, 0x1a, 0x0b, 0xd7, 0x17, 0xd5, 0xf2, 0x0a, 0xad, 0x5e, 0x1e, 0x16,
	0xf4, 0x3c, 0x2a, 0xd3, 0xf7, 0xe4, 0x10, 0x22, 0xda, 0xf3, 0x0a, 0xa1, 0x5d, 0x53, 0xd3, 0x92,
	0xfd, 0x96, 0x86, 0x91, 0x75, 0x95, 0xd0, 0xae, 0xb3, 0xd2, 0xaa, 0x8a, 0x49, 0x70, 0xbb, 0x58,
	0x2b, 0x75, 0x48, 0x08, 0x19, 0x66, 0x79, 0xc5, 0x30, 0x2f, 0x6a, 0x9b, 0xaf, 0x17, 0x84, 0x31,
	0xbb, 0x88, 0xe1, 0x50, 0xeb, 0xe2, 0xde, 0x6f, 0xf7, 0x51, 0x71, 0x39, 0xbc, 0x4e, 0x98, 0x37,
	0x69, 0x91, 0x9c, 0xab, 0x8a, 0xaf, 0x4b, 0x2e, 0x95, 0xe4, 0xf6, 0x79, 0x83, 0x7c, 0xe4, 0x37,
	0x05, 0x0b, 0xfe, 0xc8, 0x6a, 0x7d, 0x43, 0x8a, 0x16, 0xde, 0x24, 0x6d, 0xbc, 0xa6, 0x49, 0x61,
	0x57, 0x24, 0x73, 0xe5, 0xe2, 0xbc, 0xcf, 0x62, 0x06, 0xf0, 0x26, 0xb8, 0x45, 0x9a, 0xd8, 0x28,
	0x9b, 0x58, 0x00, 0xb7, 0x64, 0x8a, 0xa7, 0xe8, 0x5a, 0x0a, 0xe3, 0x1e, 0xc2, 0x21, 0x6b, 0x30,
	0x45, 0xbd, 0x75, 0xeb, 0x36, 0x69, 0x6d, 0x0b, 0xb7, 0xb6, 0x28, 0xd3, 0x45, 0x29, 0x8a, 0xa9,
	0xc6, 0x48, 0x56, 0x11, 0x8a, 0xac, 0x3b, 0xe4, 0xe4, 0xff, 0x9a, 0xda, 0x08, 0x47, 0x69, 0x81,
	0xd4, 0xda, 0x98, 0x70, 0xfc, 0x8d, 0x10, 0x2f, 0x88, 0x7d, 0x24, 0xc8, 0xc1, 0x8f, 0xc6, 0xe4,
	0xc2, 0x49, 0xee, 0x02, 0x6d, 0x22, 0xf1, 0x57, 0xbc, 0xc4, 0x67, 0xf5, 0xad, 0x80, 0xd6, 0x68,
	0xa5, 0x92, 0x38, 0x24, 0x75, 0x13, 0xa0, 0xe7, 0x85, 0xab, 0xc8, 0xb1, 0xee, 0x12, 0xfe, 0x6f,
	0x28, 0xff, 0xc7, 0xa4, 0xc4, 0xc4, 0x64, 0x23, 0x7f, 0xb1, 0x26, 0x98, 0x8c, 0x49, 0x22, 0xe3,
	0x5b, 0x5e, 0xc6, 0x5c, 0x5d, 0xb5, 0xb9, 0x7e, 0x07, 0x7a, 0xa4, 0xdc, 0x5d, 0xa1, 0x97, 0xef,
	0x11, 0xae, 0x6d, 0xb1, 0x40, 0x44, 0x8d, 0x0b, 0x97, 0x36, 0x1d, 0x16, 0x1a, 0xbf, 0x4f, 0xb8,
	0xbe, 0xe3, 0xb3, 0xab, 0x73, 0x80, 0xaa, 0x5c, 0xf8, 0xf1, 0xb9, 0x5c, 0x52, 0xa1, 0x0d, 0x3d,
	0xa1, 0x6e, 0x2b, 0x39, 0xcf, 0x60, 0x8a, 0xad, 0xe4, 0xe2, 0x00, 0xc5, 0xe6, 0xa6, 0xf5, 0x60,
	0xe2, 0x34, 0xf6, 0x02, 0x73, 0xc2, 0xf1, 0x9a, 0x78, 0x5e, 0xdf, 0xaf, 0x43, 0x15, 0x61, 0x87,
	0x41, 0x40, 0x5d, 0x40, 0x5e, 0x61, 0x1f, 0x4c, 0x91, 0x1e, 0xee, 0x71, 0x25, 0x6b, 0x65, 0x33,
	0x2a, 0x6c, 0xf8, 0xaa, 0x8c, 0x69, 0x22, 0x63, 0x97, 0x97, 0xf1, 0xb4, 0xbe, 0x30, 0x63, 0xe4,
	0x15, 0xb6, 0x58, 0xde, 0x8d, 0x43, 0x9f, 0xaa, 0x6a, 0x5c, 0x2a, 0x7d, 0x86, 0xb0, 0xff, 0x9a,
	0x67, 0x7f, 0x01, 0xda, 0x0a, 0xe5, 0x2e, 0xeb, 0xc0, 0x2c, 0x91, 0xf0, 0x8e, 0x97, 0x20, 0x99,
	0x05, 0x4e, 0x42, 0x45, 0xdf, 0xcd, 0x11, 0x01, 0x3b, 0x0d, 0x23, 0xe0, 0x04, 0x08, 0x4a, 0x6f,
	0x9e, 0xb0, 0xbf, 0xe5, 0xd9, 0xa5, 0xcb, 0x1a, 0x47, 0xad, 0xe6, 0x30, 0xc9, 0x1d, 0xe4, 0xa5,
	0x30, 0x0f, 0x50, 0x96, 0xc6, 0xd0, 0xb3, 0x16, 0x08, 0xff, 0x3e, 0xe5, 0x7f, 0x4c, 0x12, 0xd3,
	0xee, 0xea, 0xf8, 0x33, 0x96, 0x2d, 0x49, 0x45, 0x2c, 0x12, 0x11, 0xef, 0x79, 0x11, 0x8f, 0xc1,
	0x0d, 0x8d, 0x88, 0xee, 0x5a, 0xc9, 0xfc, 0x90, 0x30, 0x0f, 0x38, 0xe6, 0xf6, 0x3f, 0x1a, 0x07,
	0x9f, 0xa4, 0xdb, 0x6f, 0xb7, 0xdc, 0xdd, 0xee, 0x1e, 0x73, 0x25, 0x5d, 0x04, 0xe7, 0xf0, 0x12,
	0x74, 0x83, 0x62, 0x67, 0xd7, 0xbc, 0x48, 0x77, 0xc1, 0x05, 0xf1, 0xe7, 0x62, 0xc9, 0xf6, 0xcb,
	0x63, 0x9f, 0xaf, 0x56, 0x38, 0xd6, 0xba, 0x0c, 0x3e, 0x15, 0x89, 0x0b, 0x03, 0xf4, 0x10, 0x6f,
	0xae, 0xdd, 0x01, 0x13, 0x22, 0x45, 0xd7, 0x25, 0x97, 0x85, 0x25, 0xd7, 0xf3, 0xf8, 0xba, 0xfc,
	0x63, 0xb8, 0x0a, 0xaf, 0x40, 0xda, 0x0b, 0x43, 0x27, 0x4f, 0x0b, 0x7a, 0x1a, 0x82, 0x35, 0xce,
	0xdb, 0xd6, 0x0f, 0xc0, 0x65, 0x25, 0x79, 0x61, 0x35, 0xbb, 0x43, 0xd3, 0x7e, 0x9e, 0x99, 0x6e,
	0x22, 0x43, 0x09, 0xd7, 0x50, 0xf4, 0x87, 0x36, 0x71, 0x94, 0xbf, 0x0c, 0xd4, 0xe6, 0x62, 0xd8,
	0x84, 0x53, 0x98, 0xcb, 0x9c, 0xeb, 0xf0, 0x70, 0x7d, 0xa4, 0x74, 0xe2, 0x48, 0x2a, 0xd4, 0x71,
	0xbe, 0x7c, 0xe1, 0x83, 0xea, 0x27, 0x80, 0xe9, 0xb0, 0xcf, 0x1f, 0x0d, 0xfd, 0x82, 0xc5, 0x77,
	0x7c, 0x4a, 0x8a, 0x39, 0x5c, 0x93, 0x75, 0xa4, 0x1f, 0x87, 0x59, 0xaf, 0x3f, 0x64, 0x05, 0xe2,
	0x2d, 0xaf, 0x60, 0x6d, 0xff, 0xfe, 0x38, 0x38, 0x11, 0xee, 0xbf, 0xe1, 0x1f, 0x18, 0xc3, 0x58,
	0x5a, 0x33, 0xe0, 0x22, 0xf8, 0xb8, 0xfc, 0x85, 0x15, 0xe4, 0xe5, 0xbe, 0x75, 0x1b, 0x9c, 0x11,
	0x7f, 0xc6, 0x9b, 0x18, 0x0f, 0xee, 0x10, 0x39, 0xd1, 0xf0, 0xfd, 0xe4, 0x47, 0x72, 0xeb, 0x3f,
	0x5b, 0xa5, 0x8d, 0xf3, 0x0e, 0xae, 0xfd, 0x6d, 0x1d, 0x26, 0xc4, 0x8b, 0x94, 0x18, 0x57, 0x5f,
	0xae, 0x10, 0xaf, 0xba, 0x69, 0xbf, 0xe0, 0x28, 0xfe, 0x3f, 0xcc, 0x52, 0xf6, 0xdd, 0x89, 0x99,
	0x7e, 0x09, 0x7c, 0x52, 0x92, 0xd3, 0x9a, 0x1f, 0x47, 0xf8, 0x75, 0xc1, 0xb7, 0x4d, 0x4f, 0xc2,
	0xb2, 0xa3, 0x47, 0x49, 0xdb, 0xf3, 0x65, 0x47, 0x2f, 0x83, 0x4f, 0x4b, 0xe2, 0xe2, 0x96, 0x02,
	0x13, 0x37, 0x61, 0x9f, 0x95, 0x5c, 0x51, 0xae, 0x8b, 0x14, 0xec, 0x6b, 0x9e, 0x2c, 0xef, 0x6e,
	0x58, 0xce, 0x05, 0x70, 0xb2, 0xa4, 0xc2, 0xa6, 0xce, 0x47, 0xfc, 0x3a, 0xba, 0x0a, 0x4e, 0x09,
	0xbf, 0xd2, 0xe9, 0x15, 0x6e, 0x6a, 0xb7, 0xb8, 0x6e, 0x57, 0xc7, 0x2f, 0x5c, 0xcb, 0xf8, 0xf1,
	0x47, 0xa8, 0xd7, 0x43, 0x0e, 0xbb, 0x84, 0xe1, 0x7b, 0x41, 0xeb, 0x36, 0xf8, 0xac, 0xfc, 0xbd,
	0x1b, 0xc6, 0x68, 0x8d, 0xcd, 0xd2, 0x49, 0xd2, 0xe9, 0xe2, 0xba, 0x7d, 0xf8, 0x47, 0x5a, 0x73,
	0x73, 0x28, 0x29, 0x46, 0x2b, 0x6e, 0x98, 0x25, 0x5e, 0x61, 0x47, 0x3b, 0xae, 0x8d, 0x33, 0x17,
	0xb9, 0x52, 0xf8, 0x78, 0x7d, 0xcb, 0xa8, 0x71, 0x40, 0xa1, 0xc3, 0x97, 0xc0, 0x3f, 0xdc, 0xba,
	0xc5, 0xad, 0x31, 0xd2, 0x05, 0x32, 0x60, 0x8b, 0xf4, 0xa0, 0xb8, 0x92, 0x8f, 0xff, 0x48, 0x2a,
	0x3a, 0x5e, 0xae, 0x10, 0xd6, 0x25, 0x7f, 0x4a, 0x98, 0xfa, 0x25, 0x13, 0x3f, 0x9b, 0x84, 0x29,
	0x29, 0xcc, 0x73, 0xae, 0x5c, 0xeb, 0xb8, 0x30, 0x49, 0xdd, 0x2c, 0x80, 0xb1, 0xcb, 0xaa, 0xd4,
	0xbb, 0x38, 0x94, 0x82, 0x1f, 0x0c, 0x5d, 0x24, 0x6e, 0x37, 0x4f, 0xc3, 0xcc, 0xee, 0x23, 0xc7,
	0x3a, 0xcd, 0xdb, 0xbf, 0x0b, 0xe0, 0x56, 0x95, 0x14, 0x7f, 0x1f, 0x0f, 0x75, 0x53, 0x72, 0xf3,
	0x86, 0x09, 0x1d, 0xdf, 0x67, 0xbc, 0xb5, 0x3e, 0x0d, 0xae, 0x96, 0x7c, 0x18, 0xe7, 0x04, 0xd7,
	0x49, 0x28, 0x34, 0x38, 0x51, 0xfa, 0x51, 0xe8, 0x06, 0x29, 0xbb, 0x6d, 0xf9, 0xec, 0x5e, 0x50,
	0x9b, 0x62, 0x39, 0xdb, 0x19, 0xc2, 0xe6, 0xd1, 0x1e, 0x0e, 0x67, 0x51, 0xf5, 0x98, 0x45, 0xdf,
	0x98, 0x96, 0x39, 0xd3, 0xa7, 0xfd, 0xc7, 0x31, 0x70, 0x0a, 0x7d, 0xff, 0x6e, 0x7b, 0x7f, 0x63,
	0xb0, 0xbd, 0xb7, 0x6b, 0xff, 0xb0, 0xb9, 0x53, 0x3a, 0x7c, 0xd0, 0x5a, 0xe4, 0xd2, 0xc3, 0xc9,
	0x5e, 0xb7, 0x6b, 0x5e, 0xe3, 0xe7, 0x60, 0xaa, 0x46, 0x81, 0xff, 0x41, 0xb8, 0x4b, 0xb0, 0x28,
	0x1f, 0xb2, 0x67, 0x84, 0x58, 0x92, 0x67, 0xe0, 0xc1, 0x08, 0x02, 0x70, 0x8e, 0xa8, 0xe0, 0xc8,
	0xc0, 0xa7, 0x62, 0x85, 0x7f, 0x88, 0xe3, 0x32, 0xfc, 0xa9, 0xea, 0x21, 0x6c, 0x17, 0xe3, 0xfe,
	0xcf, 0x87, 0xc0, 0x84, 0xfb, 0xf6, 0xdd, 0xce, 0xf6, 0xd6, 0x1b, 0x7f, 0x63, 0xff, 0xbb, 0xad,
	0x81, 0xbb, 0xfb, 0x66, 0x7b, 0x73, 0x63, 0xb0, 0xb7, 0xcf, 0xea, 0xcc, 0xbb, 0x7e, 0xe4, 0xb9,
	0x65, 0x4d, 0x21, 0xb6, 0x23, 0xc2, 0xb8, 0x32, 0x0d, 0x01, 0x78, 0xa8, 0xa4, 0xec, 0x84, 0x69,
	0x3f, 0x67, 0xbf, 0xba, 0x41, 0x0e, 0x03, 0xa7, 0xfc, 0xb3, 0xd8, 0xd3, 0x63, 0xa2, 0xe7, 0xb1,
	0x4d, 0xd5, 0xbc, 0x52, 0xde, 0x50, 0x54, 0x35, 0xe8, 0xa2, 0x4d, 0xa3, 0x0e, 0x1a, 0x59, 0x8b,
	0x66, 0x25, 0xf3, 0xa1, 0xe5, 0xc5, 0xcf, 0x43, 0xe4, 0x47, 0xe6, 0xf9, 0x99, 0xe2, 0xe7, 0xf2,
	0x7f, 0x8f, 0x81, 0x4f, 0xfd, 0x0f, 0x3b, 0x83, 0xed, 0x9d, 0xad, 0x6f, 0xfc, 0xbd, 0x37, 0x5b,
	0x3b, 0x2c, 0x74, 0xa3, 0xcc, 0x9c, 0xf0, 0x43, 0x07, 0x79, 0x95, 0x89, 0x83, 0xe0, 0x6e, 0xe5,
	0xf7, 0x28, 0x46, 0x38, 0x80, 0xb5, 0xe8, 0x03, 0xfb, 0x85, 0x05, 0x64, 0xb2, 0xb9, 0x9a, 0xe2,
	0xed, 0xa2, 0x69, 0x70, 0xbe, 0xda, 0x44, 0x82, 0x9d, 0x76, 0x58, 0x48, 0x35, 0x00, 0xe1, 0x31,
	0x29, 0x8f, 0x70, 0x4f, 0xc3, 0x22, 0x69, 0xb7, 0xe2, 0x5c, 0xc4, 0x26, 0xd5, 0x8f, 0x87, 0xc1,
	0x19, 0x36, 0x60, 0xec, 0x2c, 0xe5, 0x52, 0xe0, 0x6f, 0x80, 0x2b, 0xa5, 0x10, 0x8a, 0x40, 0x24,
	0x4b, 0x84, 0x5f, 0x02, 0xf3, 0x72, 0x32, 0x92, 0x7b, 0x67, 0xa7, 0xf9, 0x2a, 0x72, 0x7b, 0xfd,
	0xe2, 0xee, 0x05, 0x57, 0x50, 0x0c, 0x7b, 0xcc, 0x35, 0x3a, 0x26, 0x86, 0x9b, 0x3c, 0xa6, 0xce,
	0x5e, 0xb9, 0xb0, 0xe2, 0x1b, 0xae, 0xb8, 0x4e, 0x86, 0xd1, 0x0b, 0x84, 0xb5, 0x86, 0xf9, 0x9e,
	0x80, 0x9b, 0x72, 0x3e, 0xfc, 0xaf, 0x64, 0x35, 0x90, 0x56, 0x0f, 0x0f, 0xdf, 0xb5, 0x4b, 0xee,
	0x79, 0xf0, 0x85, 0x9c, 0x3b, 0x40, 0xec, 0x26, 0x3d, 0x2e, 0xf9, 0x68, 0xcf, 0xc0, 0x6d, 0x39,
	0x5b, 0x8c, 0x56, 0x50, 0x9c, 0x20, 0x9e, 0xff, 0x48, 0x7d, 0xf2, 0xd5, 0x9d, 0x5e, 0x77, 0x91,
	0xe7, 0xe4, 0x8e, 0x5b, 0x5c, 0xb2, 0x50, 0x60, 0x17, 0x27, 0x7d, 0xed, 0xfb, 0xb7, 0x7f, 0x7f,
	0x0c, 0x9c, 0x14, 0xe1, 0x3b, 0x26, 0x98, 0x5f, 0x59, 0x62, 0x0e, 0xdd, 0x04, 0x67, 0xb8, 0xdf,
	0xc8, 0xed, 0x0e, 0xfa, 0xb8, 0x00, 0x94, 0x90, 0x4d, 0x7f, 0x1d, 0x7c, 0xc6, 0xd1, 0x71, 0x6e,
	0x6f, 0x21, 0x99, 0xfe, 0x2a, 0x38, 0x25, 0x52, 0x91, 0x32, 0x82, 0x42, 0x2e, 0xbd, 0x48, 0xe3,
	0xb8, 0x09, 0x29, 0x37, 0x35, 0xce, 0x57, 0xfc, 0xbe, 0x02, 0x5a, 0xbc, 0x9c, 0x18, 0xf9, 0x6e,
	0xe6, 0xf3, 0x76, 0x2e, 0xb6, 0x69, 0x78, 0x90, 0x09, 0x1c, 0x71, 0x24, 0x26, 0xcc, 0x8b, 0x0d,
	0xa5, 0xc8, 0x21, 0x33, 0x2e, 0x94, 0xd8, 0xae, 0xd1, 0xe0, 0x29, 0xe6, 0x2b, 0x16, 0xe1, 0xe2,
	0xd5, 0xb5, 0x29, 0xb2, 0x61, 0xc7, 0x2d, 0x3e, 0x22, 0x79, 0x23, 0x22, 0x82, 0x3f, 0x12, 0x4a,
	0xa9, 0x2c, 0x82, 0x5b, 0x1c, 0x17, 0x0b, 0x70, 0x92, 0x32, 0x02, 0xa1, 0x7e, 0xcc, 0x17, 0xc0,
	0xe2, 0x18, 0x49, 0x7f, 0x4e, 0xf0, 0xc5, 0x9e, 0x1e, 0x81, 0xab, 0xc2, 0xe4, 0xe0, 0x52, 0x0d,
	0x24, 0x50, 0xa0, 0x50, 0xc1, 0x78, 0x53, 0x25, 0xd6, 0xcf, 0x49, 0xcd, 0x8e, 0x69, 0xe6, 0xa8,
	0x39, 0x45, 0xcb, 0x8f, 0xe8, 0x58, 0xbb, 0x61, 0x16, 0xa7, 0xfd, 0xc4, 0x3a, 0x49, 0x79, 0xe7,
	0x78, 0xde, 0x87, 0xe0, 0x8a, 0x8e, 0xb7, 0x0f, 0xbd, 0x6e, 0x62, 0x7d, 0x4c, 0x39, 0x67, 0x79,
	0x4e, 0x07, 0xdc, 0xd3, 0x71, 0x86, 0x01, 0xca, 0xd3, 0x55, 0x14, 0xa4, 0xeb, 0xac, 0xef, 0x9f,
	0x50, 0x29, 0x8f, 0x78, 0x29, 0x4f, 0xc1, 0x4d, 0x9d, 0x94, 0xc4, 0x5d, 0x4b, 0x11, 0xc2, 0x01,
	0x37, 0x16, 0x65, 0x5f, 0xe0, 0xd9, 0x9f, 0x83, 0xdb, 0x4d, 0xec, 0xeb, 0x85, 0xa1, 0x55, 0x08,
	0xf8, 0x94, 0x0a, 0x78, 0xc8, 0x0b, 0x80, 0xa0, 0xad, 0x13, 0x90, 0xf6, 0x5d, 0x9c, 0xb8, 0x86,
	0x43, 0x52, 0x12, 0xab, 0x45, 0x45, 0x2c, 0x72, 0x22, 0x30, 0x62, 0xb3, 0xb3, 0xb5, 0xbf, 0xfd,
	0x9b, 0x8d, 0xc1, 0xf6, 0x6f, 0xb6, 0x9a, 0x10, 0x9b, 0xb9, 0x94, 0xdc, 0xd1, 0x10, 0x9b, 0x4d,
	0x19, 0x75, 0x88, 0xcd, 0xa6, 0x32, 0xa4, 0x88, 0xcd, 0xa6, 0xcc, 0x06, 0x88, 0xcd, 0x07, 0x13,
	0xa5, 0x40, 0x6c, 0x36, 0x16, 0xa6, 0x43, 0x6c, 0x36, 0x16, 0x32, 0x02, 0x62, 0xb3, 0xa9, 0x4c,
	0x1d, 0x62, 0xb3, 0xa9, 0x0c, 0x3d, 0x62, 0xb3, 0xa9, 0x14, 0x1d, 0x62, 0xb3, 0xb1, 0x0c, 0x19,
	0x62, 0xb3, 0x31, 0xb3, 0x21, 0x62, 0xb3, 0xb9, 0xbc, 0x46, 0xc4, 0x66, 0x53, 0x51, 0x0d, 0x88,
	0xcd, 0xa6, 0x62, 0x14, 0x88, 0xcd, 0xc6, 0xec, 0x3a, 0xc4, 0x66, 0x63, 0x21, 0x66, 0x88, 0xcd,
	0x23, 0x88, 0xd3, 0x21, 0x36, 0x9b, 0x8a, 0x31, 0x41, 0x6c, 0x3e, 0xb8, 0x2c, 0x03, 0xc4, 0xe6,
	0xd1, 0x84, 0x6b, 0x11, 0x9b, 0x0f, 0x26, 0x4a, 0x81, 0xd8, 0x3c, 0x82, 0xb0, 0x26, 0xc4, 0x66,
	0x53, 0x51, 0xc6, 0x88, 0xcd, 0x3f, 0x45, 0xa0, 0x02, 0xb1, 0xd9, 0x58, 0xa4, 0x1c, 0xb1, 0xd9,
	0x94, 0x5d, 0x8f, 0xd8, 0x3c, 0xe2, 0xb8, 0x4c, 0x10, 0x9b, 0x8d, 0x55, 0xf9, 0x48, 0x88, 0xcd,
	0xc6, 0x52, 0x0d, 0x11, 0x9b, 0x47, 0x55, 0x87, 0x4a, 0xc4, 0x66, 0x53, 0x41, 0x46, 0x88, 0xcd,
	0xc6, 0xaa, 0x68, 0x04, 0xc4, 0x66, 0xe3, 0x23, 0x7f, 0xe4, 0x22, 0x7a, 0xff, 0xea, 0x04, 0xb8,
	0xa1, 0xb4, 0x08, 0x05, 0x5c, 0xb7, 0x79, 0x30, 0xad, 0xeb, 0x86, 0x0a, 0xe8, 0x2d, 0x04, 0x2f,
	0xcc, 0xd8, 0x4c, 0x91, 0xdf, 0x0e, 0x22, 0x50, 0x0b, 0x05, 0xf7, 0x10, 0xdc, 0x31, 0x13, 0x58,
	0xc3, 0x86, 0xeb, 0xeb, 0x15, 0xde, 0x08, 0x60, 0x71, 0x3d, 0xf0, 0xd0, 0x4c, 0x52, 0x13, 0x7a,
	0x5c, 0xc3, 0x59, 0x68, 0x0a, 0x27, 0x67, 0xdc, 0x9f, 0x26, 0x7c, 0xb9, 0x65, 0xbd, 0xbd, 0x7a,
	0x10, 0xc0, 0xb9, 0x17, 0xa6, 0x0b, 0x51, 0x89, 0x40, 0x67, 0xbc, 0x84, 0x4c, 0x21, 0xe9, 0x62,
	0x60, 0x9b, 0x09, 0x1c, 0x01, 0xa3, 0x6e, 0x09, 0x3c, 0x19, 0x55, 0xa6, 0x1a, 0xb4, 0xee, 0x2b,
	0xe0, 0x1b, 0x6e, 0xde, 0x83, 0xa0, 0xd8, 0x19, 0x7f, 0x64, 0x73, 0x58, 0xbb, 0x06, 0x43, 0x7c,
	0x64, 0x9c, 0xbb, 0x06, 0xbb, 0xd5, 0x0c, 0xf8, 0x0e, 0xea, 0xaf, 0x27, 0x26, 0x48, 0x78, 0xc6,
	0xca, 0xa6, 0x06, 0x8d, 0xf7, 0xd7, 0x53, 0xe0, 0x8a, 0x52, 0x53, 0x97, 0x50, 0x79, 0x53, 0xfa,
	0xdb, 0x8f, 0x04, 0x3b, 0xaf, 0x61, 0x3b, 0x19, 0x80, 0xe9, 0x35, 0x18, 0x42, 0x4d, 0xe8, 0x7a,
	0x8f, 0x40, 0xdb, 0x80, 0x5d, 0x0a, 0xb7, 0xd7, 0x70, 0x27, 0x32, 0xc5, 0xdf, 0x7b, 0x62, 0x30,
	0x69, 0x6a, 0x40, 0x3e, 0x4f, 0xbf, 0x51, 0x47, 0x44, 0xe8, 0x33, 0x99, 0x4c, 0x0d, 0x64, 0xdf,
	0x33, 0xf0, 0xa0, 0x99, 0x5d, 0x83, 0xe1, 0x07, 0x0d, 0x56, 0x43, 0x03, 0xa8, 0xdf, 0x68, 0x22,
	0xa4, 0x28, 0x7f, 0x5d, 0xbd, 0xb1, 0x68, 0x0c, 0xfb, 0x67, 0xb2, 0x3e, 0x0c, 0x70, 0x00, 0x4d,
	0xb6, 0x88, 0x1e, 0x18, 0xf0, 0xb1, 0xc1, 0x0a, 0x53, 0x22, 0x05, 0x2e, 0x80, 0x5b, 0x8d, 0xcc,
	0x32, 0xe8, 0xc0, 0x9e, 0xc1, 0x2c, 0x1a, 0x61, 0x09, 0x36, 0x5c, 0xec, 0x46, 0x01, 0x17, 0x6c,
	0xb8, 0xf5, 0x18, 0xa2, 0x0d, 0xbe, 0xd0, 0x1b, 0xff, 0x06, 0xf0, 0x83, 0x26, 0x73, 0x63, 0x84,
	0x47, 0xb8, 0x00, 0x6e, 0x36, 0x0a, 0x92, 0x01, 0x14, 0x9a, 0xe8, 0x1c, 0x35, 0x62, 0xa1, 0x49,
	0xab, 0x32, 0x08, 0xc3, 0xae, 0xde, 0x3c, 0x34, 0xc6, 0x34, 0xb4, 0xf5, 0x8f, 0xbc, 0x66, 0x20,
	0x87, 0xcf, 0x4c, 0xce, 0x0d, 0x0d, 0xea, 0xa1, 0x99, 0xf6, 0x6f, 0x84, 0x41, 0x4c, 0xf5, 0xf7,
	0xab, 0x03, 0xe2, 0x22, 0x7e, 0x69, 0x72, 0xaa, 0x29, 0x80, 0x12, 0x4d, 0x34, 0x68, 0x03, 0x72,
	0xa2, 0xc9, 0x0e, 0xd1, 0x43, 0x29, 0x3e, 0xd2, 0x5b, 0x2a, 0x3a, 0x6c, 0x45, 0x68, 0xa6, 0x2f,
	0x75, 0x60, 0x8b, 0x4f, 0xc1, 0x3d, 0x33, 0x11, 0x72, 0xf4, 0x45, 0x93, 0xf5, 0xd9, 0x08, 0xc7,
	0x68, 0x32, 0x8c, 0x06, 0x7c, 0x46, 0x93, 0xcf, 0xa0, 0x07, 0x6c, 0x34, 0xd9, 0x24, 0x3a, 0x04,
	0x47, 0x93, 0x41, 0x34, 0x40, 0x3a, 0xbe, 0x34, 0x98, 0x4c, 0x53, 0x8c, 0xc7, 0x9e, 0xc1, 0x84,
	0x18, 0x81, 0x3e, 0x86, 0xfa, 0x1b, 0xea, 0xe8, 0x28, 0x90, 0x81, 0xc1, 0x89, 0x30, 0x0a, 0x2c,
	0xa4, 0x49, 0x07, 0x47, 0xc2, 0x89, 0x8c, 0x0c, 0x4e, 0xe1, 0xd1, 0x80, 0x23, 0x91, 0xc1, 0xda,
	0x32, 0x40, 0x92, 0xec, 0x9b, 0xa8, 0x2b, 0x23, 0x68, 0x49, 0xc7, 0x60, 0xd7, 0x37, 0x63, 0x4d,
	0xae, 0xea, 0xaf, 0xf7, 0x07, 0x07, 0x9f, 0x34, 0x59, 0xbc, 0x46, 0x68, 0x94, 0xc6, 0x82, 0x9a,
	0xe0, 0x29, 0x4d, 0x04, 0x19, 0xe1, 0x55, 0x76, 0xf4, 0x1e, 0x57, 0x23, 0x00, 0xcb, 0xc4, 0xe0,
	0x22, 0x34, 0x32, 0xa2, 0xa5, 0xc9, 0x08, 0x8d, 0x20, 0x2e, 0x4d, 0xf6, 0xe3, 0x48, 0x98, 0x97,
	0x68, 0x94, 0x9b, 0x9a, 0x1a, 0x04, 0xb3, 0x3b, 0xd2, 0x8d, 0x4d, 0x8d, 0x8a, 0xd9, 0xe0, 0x09,
	0x38, 0x08, 0x4c, 0x66, 0x06, 0x9e, 0x19, 0xe8, 0xd8, 0x91, 0x71, 0x33, 0x7f, 0x09, 0xba, 0x07,
	0x12, 0x6b, 0x08, 0xa4, 0xf9, 0x1c, 0xdc, 0x6e, 0x14, 0xaf, 0x45, 0xd6, 0x34, 0x59, 0x72, 0x46,
	0x50, 0x9b, 0x26, 0x1a, 0x7b, 0x34, 0xec, 0x4d, 0x33, 0x89, 0xa3, 0x80, 0x71, 0x9a, 0x0c, 0xd6,
	0x08, 0x9d, 0xd3, 0x36, 0xb8, 0xd0, 0x34, 0xc2, 0x75, 0x36, 0xf8, 0x9e, 0x0e, 0x88, 0xdf, 0x69,
	0x62, 0xc0, 0x98, 0x02, 0x7a, 0x9a, 0x1c, 0x51, 0xcd, 0x08, 0x9f, 0x26, 0x3b, 0xeb, 0x00, 0x90,
	0x9f, 0x26, 0x27, 0xb1, 0x19, 0x06, 0xa8, 0x89, 0x24, 0x33, 0x50, 0x50, 0x13, 0xbb, 0x6a, 0x14,
	0x94, 0x50, 0x57, 0xff, 0x08, 0x3b, 0x0a, 0x6c, 0xa8, 0xc9, 0x91, 0x30, 0x12, 0x8e, 0xa8, 0x49,
	0xdf, 0x0c, 0x81, 0x45, 0x4d, 0xd6, 0xac, 0x29, 0xd2, 0xa8, 0xc9, 0x9a, 0x6d, 0x86, 0x1e, 0x35,
	0x39, 0xef, 0x0c, 0xb0, 0x48, 0x4d, 0xac, 0xb3, 0x03, 0x81, 0x93, 0xae, 0xe9, 0x5d, 0xfc, 0x3f,
	0x01, 0xad, 0xd4, 0xcc, 0xc0, 0x35, 0x81, 0x2f, 0x7d, 0xa5, 0x77, 0x14, 0xfd, 0x24, 0x3c, 0xd3,
	0xbf, 0xb4, 0xc0, 0xc5, 0x8a, 0x83, 0x00, 0x0e, 0x06, 0xfb, 0xdb, 0xaf, 0xcb, 0x98, 0xbe, 0xc9,
	0xfa, 0xc9, 0x98, 0xc3, 0x34, 0x8d, 0xdd, 0x8e, 0x2c, 0x90, 0x6f, 0x1e, 0xdc, 0xd0, 0x52, 0xdb,
	0xd0, 0xf3, 0x70, 0x2a, 0xfb, 0x98, 0x10, 0x05, 0x22, 0x09, 0xa3, 0x91, 0xb2, 0xe5, 0x1d, 0xe4,
	0x85, 0xab, 0x79, 0x59, 0x44, 0x0c, 0x27, 0xdd, 0xb1, 0x50, 0x3e, 0xfa, 0xcc, 0x24, 0x79, 0x2d,
	0x94, 0xcb, 0xa2, 0x29, 0x3c, 0xb8, 0x3c, 0xa9, 0x3d, 0x8c, 0xe2, 0x9b, 0xa1, 0x2f, 0x19, 0x6d,
	0xbd, 0x94, 0x30, 0x8b, 0xc2, 0x20, 0x8f, 0x50, 0xec, 0x86, 0x0e, 0x9f, 0x05, 0x25, 0xbd, 0x3d,
	0x0b, 0xac, 0x28, 0xb1, 0xe3, 0x70, 0x15, 0x39, 0x39, 0x29, 0xb8, 0x42, 0xe2, 0xd9, 0x8f, 0x08,
	0xd1, 0x3a, 0xfd, 0xba, 0x92, 0x51, 0x8a, 0x88, 0x91, 0x83, 0xfc, 0x88, 0xac, 0x76, 0x98, 0x0e,
	0xe3, 0xf4, 0xc8, 0x9b, 0xc8, 0x14, 0xb8, 0xa2, 0x95, 0xd4, 0xf5, 0x60, 0xca, 0x7b, 0x5f, 0x31,
	0x26, 0xa8, 0x96, 0xc3, 0x0d, 0x1c, 0xb4, 0x86, 0x1c, 0x56, 0x77, 0x88, 0x06, 0x2f, 0x3d, 0xa9,
	0xab, 0x8b, 0x0a, 0x17, 0x79, 0xba, 0xc9, 0x3b, 0x64, 0xc9, 0xf3, 0x59, 0x58, 0x38, 0xee, 0xb8,
	0x81, 0x3b, 0xa7, 0x45, 0x8f, 0xca, 0x47, 0xff, 0x79, 0xa3, 0x66, 0x3d, 0x1c, 0x1a, 0x85, 0x10,
	0xa9, 0x33, 0x2e, 0xe6, 0x6b, 0x1d, 0x93, 0xbd, 0xd1, 0x0b, 0xdc, 0x41, 0x48, 0x3f, 0xb0, 0x6b,
	0xe7, 0x11, 0x5c, 0x2f, 0x36, 0x5d, 0xc2, 0x7c, 0xa4, 0x73, 0x46, 0x8b, 0x8d, 0x9e, 0x26, 0x1e,
	0xae, 0xf6, 0xc2, 0x05, 0x8e, 0x9f, 0x14, 0xa2, 0x82, 0x9a, 0x96, 0xbf, 0x42, 0x0a, 0x8d, 0xc4,
	0xfe, 0x58, 0x08, 0xee, 0x91, 0x3c, 0xc1, 0x09, 0xb2, 0x22, 0x5c, 0xeb, 0xb8, 0x9b, 0x05, 0x0e,
	0x4e, 0x0d, 0x13, 0x01, 0x44, 0xef, 0x6a, 0x59, 0x0b, 0x45, 0x1d, 0x21, 0x87, 0xae, 0x7d, 0xe6,
	0xe6, 0x5c, 0x54, 0x05, 0x5f, 0x89, 0xbc, 0x59, 0xe7, 0x25, 0xb2, 0xd3, 0x62, 0xc1, 0x42, 0x0f,
	0x1f, 0x89, 0x98, 0xd0, 0x77, 0x03, 0xd7, 0xcf, 0xfc, 0x3c, 0x85, 0x6b, 0xe5, 0xa3, 0xff, 0x23,
	0xa3, 0x65, 0x98, 0xc2, 0x35, 0xac, 0x48, 0x5a, 0x55, 0x40, 0x60, 0x3d, 0x17, 0x5a, 0x4b, 0xd9,
	0xab, 0xfe, 0x23, 0xb3, 0x86, 0xb2, 0x20, 0xc6, 0x19, 0x77, 0xa7, 0x85, 0x80, 0xe1, 0x26, 0xfd,
	0x50, 0xc6, 0xce, 0x17, 0xcc, 0x2c, 0xfb, 0x6c, 0xde, 0x68, 0x4b, 0xae, 0xf6, 0x51, 0xc0, 0x92,
	0xcf, 0x1e, 0xd1, 0xed, 0xa1, 0xd7, 0xc1, 0xaf, 0x50, 0x1c, 0xb2, 0xaf, 0x72, 0x86, 0x8f, 0xbc,
	0x5c, 0x6e, 0x58, 0x58, 0x34, 0x36, 0x9c, 0xd5, 0x35, 0x25, 0x51, 0x84, 0x65, 0x8e, 0xcd, 0x59,
	0x1a, 0xad, 0x24, 0x24, 0x42, 0xe5, 0xa0, 0xaf, 0x9f, 0x61, 0x9c, 0x23, 0xc0, 0x45, 0x7a, 0x61,
	0xd3, 0x33, 0x77, 0x50, 0x0a, 0x5d, 0xaf, 0xd2, 0xc0, 0x39, 0xda, 0xc0, 0x1c, 0xdf, 0x80, 0xc4,
	0x88, 0xa9, 0xe8, 0x82, 0xf2, 0x00, 0x74, 0x50, 0x10, 0xfa, 0xd4, 0x58, 0x9b, 0xa0, 0xb2, 0xe6,
	0xf9, 0xe2, 0x84, 0xfd, 0x86, 0x0d, 0xce, 0xc9, 0x0a, 0x32, 0x9f, 0xbc, 0xa5, 0x95, 0x01, 0x6e,
	0x0b, 0xbc, 0x24, 0x89, 0x45, 0xaa, 0x92, 0x44, 0x4b, 0xbc, 0xc4, 0xc8, 0x76, 0x13, 0xf2, 0xc6,
	0x3f, 0x0c, 0x98, 0x2b, 0xe5, 0x2d, 0x35, 0x28, 0x0e, 0x4e, 0x9e, 0x00, 0x8a, 0x74, 0x91, 0x8b,
	0x20, 0x2b, 0x85, 0x49, 0xee, 0x63, 0xf5, 0x6f, 0x82, 0x57, 0x63, 0x99, 0x3d, 0xc6, 0xe2, 0xda,
	0x66, 0x1e, 0xf1, 0xe5, 0x19, 0xff, 0xf2, 0x13, 0x70, 0x2e, 0xd8, 0x7a, 0x3f, 0xd8, 0x7a, 0x23,
	0x33, 0x05, 0x6e, 0x83, 0xeb, 0x01, 0x79, 0x7d, 0x6f, 0x32, 0x03, 0xa6, 0xc1, 0x15, 0x25, 0xa5,
	0xc2, 0x04, 0xe8, 0x82, 0x85, 0x46, 0x16, 0x93, 0xe3, 0xff, 0x05, 0x98, 0x6a, 0x96, 0xa3, 0x3d,
	0xfa, 0xe7, 0xc1, 0x4d, 0xb5, 0x04, 0xf5, 0xb1, 0xff, 0x14, 0xdc, 0x53, 0xb2, 0x19, 0x1c, 0xf9,
	0x0e, 0x98, 0x33, 0x62, 0xd7, 0x1f, 0xf7, 0x93, 0xe0, 0xa2, 0x52, 0x4a, 0xfd, 0xa8, 0x9f, 0x02,
	0x97, 0x95, 0xd4, 0xf2, 0x63, 0xfe, 0x21, 0xb8, 0xa3, 0xe1, 0xd0, 0x1d, 0xf1, 0xb3, 0xe0, 0x9a,
	0x86, 0x53, 0x71, 0xbc, 0xeb, 0x9a, 0xd3, 0x1f, 0xed, 0x4f, 0x34, 0x5f, 0xa3, 0xf9, 0x58, 0xd7,
	0x2d, 0x22, 0xb3, 0x23, 0x5d, 0xb7, 0x9c, 0x47, 0x39, 0xce, 0xe7, 0xc1, 0x0d, 0xa5, 0x1c, 0xcd,
	0x51, 0xbe, 0x00, 0x6e, 0x29, 0xd9, 0x74, 0xc7, 0xf8, 0x12, 0x78, 0xac, 0xe6, 0x1b, 0xf5, 0x08,
	0xd7, 0x2d, 0x2f, 0xf9, 0xf1, 0x7d, 0x4f, 0xb3, 0x7c, 0x25, 0x47, 0xb7, 0xae, 0x01, 0xf9, 0xb1,
	0xad, 0xdb, 0xdb, 0x9a, 0x23, 0x5b, 0xb7, 0xad, 0xea, 0xc7, 0xf5, 0xac, 0x46, 0x4f, 0x2a, 0x8f,
	0x6a, 0x5f, 0xb3, 0x60, 0x0e, 0x70, 0x4c, 0xff, 0x02, 0x38, 0xea, 0x99, 0xfc, 0xa9, 0x47, 0x74,
	0x17, 0x3c, 0xd0, 0xec, 0x65, 0xf3, 0xe3, 0xd9, 0xd1, 0x6c, 0x52, 0xf3, 0xa3, 0xf9, 0x25, 0x98,
	0x35, 0x91, 0x62, 0x74, 0x2c, 0xf7, 0x34, 0x1b, 0x7f, 0xa4, 0x23, 0xd9, 0x06, 0x93, 0xfa, 0xf9,
	0x37, 0x39, 0x8e, 0xff, 0xed, 0x18, 0x38, 0x33, 0xbc, 0x9d, 0x27, 0x3f, 0xbc, 0x7d, 0xbd, 0xb7,
	0x93, 0x7c, 0xfd, 0x3d, 0x4b, 0x68, 0xe6, 0xe1, 0x2f, 0xd7, 0xfd, 0x4e, 0xe8, 0xe5, 0x49, 0x77,
	0xad, 0x96, 0xce, 0x3d, 0x2d, 0x27, 0x43, 0x99, 0x1d, 0xd1, 0x6a, 0x09, 0x99, 0x1f, 0xe5, 0x49,
	0xe6, 0x97, 0x0a, 0x9c, 0x9d, 0xcc, 0xb6, 0x23, 0xb1, 0xa9, 0x39, 0x11, 0xc5, 0xca, 0x27, 0x3a,
	0xcc, 0x61, 0x87, 0xf0, 0x2a, 0x8e, 0x58, 0x6c, 0xff, 0xd5, 0x09, 0x70, 0x89, 0xeb, 0xf8, 0xd6,
	0x26, 0x2e, 0x89, 0x2e, 0x84, 0x86, 0xdf, 0x13, 0xee, 0x29, 0x65, 0x1c, 0xa6, 0x2a, 0x24, 0x7c,
	0x06, 0x5c, 0xd3, 0x93, 0xdb, 0x59, 0xe2, 0x46, 0x3c, 0x70, 0x33, 0x2e, 0x61, 0xa8, 0xe7, 0x59,
	0xce, 0xdc, 0x25, 0x16, 0x57, 0x48, 0xca, 0x81, 0x34, 0x36, 0x93, 0x20, 0x27, 0xf4, 0xf8, 0xdc,
	0xe0, 0xb1, 0x4a, 0x78, 0xa6, 0x84, 0xc7, 0x4d, 0xdc, 0x60, 0x98, 0xde, 0x57, 0x1e, 0x33, 0x87,
	0x0a, 0x6d, 0xa4, 0xe7, 0x8c, 0x5d, 0x9b, 0x04, 0x5a, 0x73, 0x59, 0xc4, 0x87, 0x2a, 0xe1, 0x7e,
	0xd2, 0x06, 0xe5, 0x71, 0xda, 0x8b, 0xb8, 0x00, 0x87, 0x18, 0xee, 0xa7, 0x62, 0x67, 0x59, 0x01,
	0x98, 0x9f, 0xab, 0xa6, 0x33, 0xde, 0x7a, 0x29, 0xe4, 0x2b, 0xc8, 0x3e, 0x45, 0x18, 0x24, 0xa1,
	0xe7, 0x3a, 0xf8, 0x99, 0x37, 0x85, 0x04, 0xf7, 0x38, 0xb4, 0x5d, 0xe2, 0x4a, 0x3c, 0x3e, 0x54,
	0x95, 0x47, 0x2a, 0xf7, 0x77, 0x89, 0x2c, 0xe6, 0xd0, 0xa7, 0xeb, 0x8e, 0xc7, 0xf0, 0x38, 0xd2,
	0x9a, 0x13, 0x5e, 0x9b, 0x24, 0xdc, 0x1d, 0xe4, 0xf5, 0x5c, 0x58, 0x09, 0xbc, 0x6e, 0x9c, 0xbe,
	0x8e, 0x17, 0x86, 0xc5, 0xc7, 0xea, 0xb1, 0x46, 0x4f, 0xf0, 0xa1, 0xff, 0xb3, 0xc2, 0x7d, 0x51,
	0x3a, 0x7c, 0xdf, 0x0f, 0x03, 0x66, 0x50, 0xf4, 0x68, 0x09, 0xe3, 0x86, 0x75, 0xe5, 0x64, 0xa9,
	0xdd, 0x67, 0xf1, 0x7f, 0x36, 0x4d, 0xe1, 0x6e, 0x18, 0x5d, 0xe2, 0xda, 0xe1, 0x0a, 0xf4, 0xf9,
	0x5a, 0x30, 0x06, 0x5c, 0x2b, 0xd0, 0x0b, 0x63, 0x14, 0xf0, 0x65, 0x61, 0x8e, 0x56, 0x6e, 0x98,
	0x12, 0xae, 0x55, 0x14, 0xa7, 0x11, 0x8c, 0x5c, 0x14, 0x33, 0x83, 0xa1, 0x23, 0x09, 0x52, 0x94,
	0xcd, 0x06, 0x7b, 0xe3, 0xec, 0x87, 0x59, 0x82, 0x58, 0x60, 0x73, 0x5f, 0x92, 0x00, 0x2a, 0x5d,
	0x89, 0x0e, 0xcc, 0xbb, 0x91, 0xef, 0xb1, 0x0a, 0x22, 0x65, 0x64, 0x1f, 0x17, 0x1e, 0xed, 0x0b,
	0x7e, 0x11, 0x89, 0x94, 0x90, 0x98, 0xcb, 0xe4, 0x00, 0x18, 0xba, 0x0d, 0x86, 0x4e, 0xae, 0x53,
	0xc3, 0xa2, 0x32, 0x45, 0xa7, 0x1a, 0x96, 0x87, 0x87, 0x8b, 0x25, 0x71, 0x81, 0xcd, 0xb4, 0x00,
	0xb2, 0xc7, 0x7b, 0x8e, 0xa1, 0xf0, 0x96, 0xa2, 0x1d, 0x5a, 0x16, 0x7b, 0xac, 0x14, 0xf2, 0x12,
	0x15, 0xf1, 0x09, 0x71, 0x8d, 0x3f, 0xd5, 0x8b, 0x20, 0x1e, 0x14, 0x02, 0xa1, 0x49, 0x80, 0xbb,
	0x8a, 0xe3, 0x66, 0x98, 0xe4, 0x41, 0xab, 0x24, 0xfb, 0x5c, 0xd9, 0xb4, 0xf6, 0x9f, 0xc6, 0xc1,
	0x67, 0x43, 0xcd, 0x1c, 0xed, 0xef, 0xbd, 0xf9, 0xb0, 0x39, 0x60, 0x38, 0x36, 0x5c, 0x73, 0x2c,
	0x55, 0x5c, 0xd4, 0xc2, 0xb7, 0xc1, 0x39, 0x09, 0x0d, 0xec, 0x15, 0x9a, 0x42, 0x04, 0xcd, 0xbf,
	0x0b, 0x2e, 0x48, 0x28, 0xf1, 0xd6, 0x70, 0x48, 0xe9, 0x77, 0x2e, 0x18, 0x5c, 0x45, 0x1c, 0x47,
	0x21, 0xb6, 0xc5, 0x84, 0xf8, 0xed, 0x36, 0x38, 0x2f, 0x23, 0xa6, 0xfa, 0x4a, 0x2c, 0xc9, 0x20,
	0xef, 0x2f, 0x5a, 0xce, 0xc8, 0xfd, 0x8b, 0x8b, 0x97, 0x9d, 0x04, 0x17, 0x25, 0x94, 0xbd, 0x70,
	0x05, 0xc5, 0x04, 0xfc, 0x5c, 0xa8, 0xd2, 0x70, 0x0b, 0x9c, 0x95, 0x50, 0xe3, 0x2b, 0x93, 0x18,
	0x5a, 0x7d, 0x13, 0x9c, 0x91, 0x10, 0x7a, 0x21, 0x0c, 0xc4, 0x72, 0x0d, 0xf7, 0xa4, 0x93, 0xef,
	0x87, 0x01, 0x5a, 0xa7, 0x7e, 0xb2, 0x8f, 0xf8, 0x18, 0xe5, 0xbb, 0xd2, 0x39, 0xf0, 0xc3, 0x38,
	0xed, 0xc1, 0xde, 0xb0, 0x36, 0xc3, 0x14, 0xab, 0x4e, 0x2f, 0x23, 0xce, 0x02, 0x9c, 0xaf, 0xe0,
	0xb1, 0x52, 0xed, 0x34, 0xd8, 0xf6, 0xb6, 0x74, 0x68, 0x61, 0xda, 0x47, 0x71, 0x19, 0xe1, 0x3c,
	0xa3, 0x91, 0xdb, 0x75, 0x03, 0x18, 0xd8, 0xc5, 0xf5, 0xef, 0x24, 0x7f, 0x33, 0x6d, 0xff, 0xcf,
	0xc7, 0x60, 0xa2, 0x6e, 0x12, 0xf0, 0x6f, 0x0b, 0xb2, 0xc5, 0x2e, 0xc5, 0xed, 0xb8, 0xab, 0xa4,
	0xec, 0xc0, 0x60, 0x09, 0xc5, 0x09, 0x73, 0xd9, 0x04, 0x76, 0xf9, 0xca, 0xd0, 0x81, 0xf8, 0xec,
	0x7a, 0x2e, 0x3f, 0xfb, 0xc8, 0xdd, 0x1e, 0xc5, 0x14, 0xa7, 0x0c, 0x27, 0x66, 0x53, 0xd7, 0x11,
	0xb3, 0x6c, 0xb0, 0x31, 0x34, 0xde, 0xf2, 0xe4, 0x87, 0x5f, 0x05, 0x4e, 0x9e, 0x94, 0x61, 0xa7,
	0x9f, 0x83, 0x43, 0xfc, 0xb3, 0x0e, 0x4f, 0x9c, 0xf8, 0xc3, 0xef, 0xae, 0x1d, 0xb6, 0xfd, 0x10,
	0x4b, 0x7b, 0x24, 0x37, 0x1d, 0xa8, 0x34, 0xdf, 0x47, 0x31, 0xce, 0x52, 0x89, 0x60, 0x34, 0xac,
	0x0c, 0x60, 0x47, 0x98, 0x75, 0x5e, 0xae, 0xe7, 0x4b, 0x56, 0x0c, 0xe1, 0x16, 0xda, 0x4b, 0xec,
	0x99, 0xc1, 0x4e, 0x68, 0x8b, 0xb7, 0x34, 0x6c, 0x74, 0xc3, 0xe5, 0x9d, 0x30, 0x70, 0xac, 0xa3,
	0x13, 0x3f, 0xff, 0xc3, 0xef, 0xae, 0x8d, 0x17, 0xff, 0x8a, 0x59, 0x91, 0xf0, 0x64, 0xa5, 0x62,
	0x8d, 0x30, 0x05, 0xca, 0xb1, 0x5a, 0xa2, 0x49, 0xff, 0x64, 0xcc, 0x11, 0x11, 0xd3, 0x13, 0xfc,
	0x9d, 0xa2, 0x18, 0x16, 0xa7, 0x55, 0x9e, 0xfa, 0xac, 0xec, 0x8e, 0x75, 0x7c, 0xe2, 0x93, 0x42,
	0x48, 0x37, 0x8c, 0x69, 0xb1, 0x31, 0xd0, 0x9a, 0x02, 0x5f, 0xa8, 0x05, 0x65, 0x69, 0x16, 0x23,
	0xeb, 0x23, 0xd2, 0x74, 0x37, 0x4b, 0x71, 0xd3, 0x8e, 0xf0, 0xb4, 0x28, 0x72, 0xf8, 0x6e, 0x62,
	0x23, 0xcf, 0x83, 0x01, 0x0a, 0xb3, 0x24, 0x8f, 0x60, 0x92, 0xb0, 0x22, 0x7e, 0x16, 0x20, 0x52,
	0xfc, 0x88, 0x48, 0x79, 0xa1, 0x59, 0x43, 0xe5, 0x37, 0x2f, 0x1f, 0x43, 0x70, 0x75, 0xd3, 0x13,
	0x54, 0x82, 0x4b, 0x3e, 0x3b, 0x14, 0xde, 0xeb, 0x14, 0x12, 0xa2, 0xd8, 0x0d, 0xf0, 0x06, 0x25,
	0x22, 0x7e, 0xce, 0x3a, 0x11, 0x36, 0x0f, 0x85, 0x13, 0x51, 0xf9, 0x16, 0x27, 0x99, 0x14, 0xf2,
	0x2d, 0xe6, 0x34, 0xbb, 0xce, 0xcf, 0xd2, 0x0c, 0x7a, 0x38, 0x65, 0x82, 0xbd, 0x49, 0xf8, 0xb8,
	0x3c, 0x5c, 0xeb, 0xb1, 0x66, 0xd5, 0x06, 0xa1, 0xf8, 0x0f, 0xd6, 0x27, 0x64, 0x15, 0x05, 0x61,
	0x80, 0x30, 0xb3, 0xee, 0xab, 0x91, 0x83, 0xda, 0xb2, 0x48, 0x27, 0x43, 0x3a, 0xdf, 0x0f, 0xe5,
	0xb6, 0x09, 0x7b, 0x02, 0xe9, 0xa2, 0x38, 0x46, 0x0e, 0x5d, 0xec, 0xf4, 0x01, 0x22, 0x4a, 0x1a,
	0xf7, 0x08, 0x2e, 0xda, 0xc8, 0xf6, 0x38, 0x7d, 0x85, 0x48, 0xc9, 0x1e, 0xb7, 0xe5, 0x46, 0x29,
	0x45, 0x1f, 0xcc, 0xd3, 0x18, 0xc1, 0x24, 0x8b, 0xd7, 0xf3, 0x0e, 0xae, 0x97, 0xe9, 0x39, 0x14,
	0x30, 0x61, 0x3c, 0x4b, 0xd2, 0x0e, 0x5d, 0x9d, 0xc5, 0xad, 0xe9, 0xb2, 0x52, 0xc8, 0x2a, 0x8c,
	0x63, 0x18, 0x14, 0x86, 0x03, 0x1e, 0xe8, 0x2a, 0x8c, 0x0d, 0xb4, 0x41, 0xb0, 0x52, 0xe8, 0x27,
	0xfc, 0x0a, 0x5a, 0xec, 0x4e, 0x9a, 0x19, 0x60, 0x77, 0xb0, 0x25, 0xfc, 0x50, 0xb3, 0xad, 0xdd,
	0xb0, 0x30, 0x58, 0xca, 0xc3, 0xe1, 0x73, 0xd2, 0xa8, 0x8b, 0x52, 0xcc, 0x29, 0x7a, 0x23, 0x2a,
	0xfd, 0x74, 0x3d, 0xc7, 0x86, 0xb1, 0xc3, 0x5e, 0x2a, 0x9e, 0x63, 0x8e, 0x79, 0xcd, 0xc8, 0xa0,
	0x8f, 0xf0, 0x6b, 0xd4, 0x59, 0xbc, 0x5d, 0x8f, 0xd1, 0x3f, 0x69, 0x8a, 0x8f, 0x7a, 0xd1, 0x93,
	0x80, 0xd1, 0x0e, 0xc4, 0x68, 0x19, 0xc3, 0x5c, 0x7a, 0xeb, 0x1c, 0xe9, 0x2b, 0xec, 0x24, 0xd4,
	0xf4, 0xbe, 0xa6, 0x55, 0xfd, 0x79, 0x10, 0xa6, 0x28, 0x61, 0x11, 0xff, 0x9d, 0x80, 0x5a, 0xa8,
	0x6d, 0x35, 0x13, 0xfe, 0x82, 0xdd, 0x52, 0xdf, 0x24, 0xd6, 0x79, 0xd2, 0x62, 0x27, 0x5c, 0xa3,
	0x99, 0x1a, 0x9a, 0x16, 0x63, 0xe8, 0xac, 0x93, 0x8f, 0x41, 0xea, 0x8f, 0x1f, 0xc1, 0xff, 0x42,
	0xf3, 0x83, 0xaf, 0x6b, 0xf8, 0x5c, 0xa7, 0x87, 0x88, 0x11, 0x70, 0x71, 0xe2, 0xe3, 0x3f, 0xfc,
	0xee, 0xda, 0x51, 0xf2, 0x4f, 0x8d, 0x63, 0xc4, 0x00, 0x0d, 0x05, 0x5f, 0xc2, 0x22, 0xf7, 0x6d,
	0x8f, 0x66, 0xc8, 0xcc, 0x98, 0x1e, 0x6b, 0xdc, 0x61, 0xf4, 0x05, 0x53, 0xf0, 0xdd, 0x90, 0xe6,
	0xb7, 0xcc, 0x9b, 0x4a, 0x19, 0x22, 0x15, 0x14, 0x82, 0x2e, 0x97, 0x82, 0x22, 0x5a, 0x44, 0xf5,
	0xa2, 0xf6, 0xa4, 0xb0, 0xae, 0x50, 0x06, 0x9f, 0x7e, 0xd8, 0xe7, 0x9a, 0x1d, 0xe7, 0xa0, 0x0e,
	0x8e, 0x70, 0x0e, 0xf2, 0x28, 0x4c, 0x68, 0x38, 0xa9, 0x75, 0x95, 0x08, 0x70, 0xdc, 0x20, 0xa2,
	0xf7, 0x97, 0xab, 0x1a, 0x01, 0xf8, 0x69, 0x19, 0x39, 0xd6, 0x35, 0xb2, 0x2a, 0x1d, 0xd4, 0x2d,
	0xfe, 0x94, 0xa4, 0xe2, 0x54, 0x19, 0xb1, 0x76, 0xa0, 0xab, 0x8a, 0x06, 0xe9, 0x3b, 0x01, 0xfd,
	0xc0, 0x1a, 0xbe, 0x42, 0x6f, 0x96, 0x06, 0xe9, 0x0d, 0xda, 0xd5, 0x0c, 0x7a, 0x34, 0x71, 0x50,
	0x6d, 0xbf, 0xa0, 0xb5, 0x14, 0x6f, 0x18, 0x7c, 0x82, 0xe3, 0x76, 0xad, 0x9b, 0x64, 0x41, 0xae,
	0xd9, 0x01, 0x9d, 0xa9, 0xfb, 0xea, 0x43, 0x0f, 0x39, 0x38, 0xee, 0x8b, 0xd8, 0xe3, 0xec, 0x95,
	0xf1, 0x16, 0x3d, 0x03, 0xa1, 0xdd, 0xf8, 0x91, 0x2b, 0x02, 0xca, 0x87, 0x69, 0xdc, 0x91, 0xdb,
	0x64, 0x1c, 0x5d, 0x48, 0x67, 0xa0, 0xf2, 0xb2, 0x24, 0x08, 0x62, 0x19, 0xe7, 0x1c, 0xd6, 0x71,
	0x07, 0x57, 0x98, 0xba, 0x43, 0x26, 0xb1, 0x17, 0xd2, 0xad, 0xa9, 0xd1, 0x5a, 0xc4, 0xff, 0x90,
	0x7b, 0x6e, 0xb0, 0x84, 0x1c, 0xab, 0x4d, 0x36, 0xca, 0x5a, 0xf1, 0x27, 0x4b, 0xc8, 0x7e, 0xaa,
	0x61, 0xa6, 0xa7, 0x6f, 0x92, 0xc6, 0x6e, 0x44, 0x2a, 0x62, 0xc3, 0x80, 0x6c, 0x56, 0x02, 0x87,
	0x92, 0x22, 0xeb, 0x2e, 0x19, 0x50, 0xea, 0x06, 0x29, 0xed, 0x8d, 0x5a, 0xfd, 0xd6, 0xee, 0x7c,
	0x93, 0x84, 0xd9, 0x0b, 0xbb, 0x36, 0x5d, 0x0f, 0xea, 0xa1, 0x0c, 0x93, 0x46, 0x70, 0xbb, 0xf7,
	0xc8, 0x07, 0xf1, 0x96, 0x03, 0x06, 0xc5, 0xa4, 0x3e, 0x83, 0x61, 0xe0, 0x90, 0x2c, 0x0f, 0xbc,
	0x2e, 0x62, 0xeb, 0xbe, 0x00, 0x23, 0xa4, 0xd3, 0xc4, 0xd8, 0xcd, 0x84, 0x1c, 0xeb, 0x01, 0x59,
	0xf3, 0xf4, 0xcf, 0x46, 0x8d, 0xe8, 0x23, 0xc7, 0xcd, 0xfc, 0x3c, 0x45, 0xb1, 0x4f, 0xd7, 0xfd,
	0x14, 0x35, 0x19, 0xd2, 0x80, 0xaa, 0x1a, 0x03, 0xc3, 0xa3, 0xae, 0xc9, 0xa7, 0xa9, 0x14, 0xba,
	0xe1, 0x9f, 0xc9, 0x9f, 0x0d, 0xa8, 0xe1, 0x41, 0xcb, 0x08, 0x0e, 0x1f, 0x5c, 0xad, 0x19, 0x32,
	0xdd, 0xbe, 0x87, 0x7a, 0x8d, 0x8b, 0x0f, 0xdf, 0x55, 0x72, 0x18, 0x0c, 0x15, 0x14, 0x1d, 0xc9,
	0x2c, 0x85, 0x4f, 0x0a, 0xe8, 0xe4, 0xa9, 0x55, 0x06, 0xbe, 0xf6, 0xb9, 0xbd, 0x7e, 0x6a, 0xcd,
	0x11, 0xcd, 0x1e, 0x06, 0x6e, 0x8a, 0xa8, 0xa6, 0x51, 0xdb, 0x14, 0x91, 0x07, 0x5f, 0x85, 0x49,
	0xde, 0x75, 0x5f, 0x86, 0x89, 0x35, 0x4f, 0xba, 0x1c, 0xbd, 0xea, 0x92, 0x62, 0xb5, 0xaf, 0x04,
	0xc7, 0x79, 0xd5, 0x8c, 0x61, 0xb6, 0x9e, 0xb0, 0x60, 0xc3, 0x80, 0x73, 0x7d, 0xf2, 0x4b, 0x77,
	0x81, 0x2e, 0xdd, 0x28, 0x26, 0x63, 0x49, 0x85, 0x64, 0x7a, 0xbd, 0xec, 0xb0, 0x9b, 0x43, 0xb9,
	0xd4, 0x45, 0x2a, 0xd5, 0xa6, 0x9a, 0x4a, 0x67, 0xe8, 0x32, 0xd3, 0x12, 0xad, 0xe1, 0xa8, 0xc9,
	0xc2, 0x4a, 0x2c, 0xee, 0x7c, 0x0f, 0xc9, 0x67, 0x8e, 0x50, 0x97, 0xee, 0x0a, 0x9d, 0xe9, 0x16,
	0xfa, 0x6e, 0x92, 0x14, 0x8b, 0x1b, 0xb7, 0xfe, 0x88, 0x9a, 0x6e, 0x01, 0xd5, 0xcb, 0x6a, 0xb3,
	0x24, 0x46, 0xd8, 0xa0, 0x75, 0xac, 0x2f, 0xc9, 0xda, 0x26, 0x7f, 0x3b, 0x8d, 0x5b, 0x22, 0x46,
	0xa9, 0x5b, 0x6c, 0x89, 0xc7, 0x8c, 0x0d, 0xff, 0x49, 0x53, 0xfd, 0x67, 0x34, 0x6c, 0x38, 0x5c,
	0xbb, 0xbe, 0xa2, 0xac, 0x27, 0x64, 0xb4, 0x31, 0x5d, 0x51, 0x8b, 0x9a, 0x33, 0x81, 0x09, 0x21,
	0x6a, 0xf0, 0x29, 0x65, 0x44, 0x2b, 0x06, 0x83, 0x5d, 0x09, 0xbd, 0x15, 0x14, 0x5b, 0xcf, 0x68,
	0xaf, 0x57, 0xbc, 0x95, 0x34, 0xf6, 0x1b, 0x0f, 0x21, 0xc6, 0x47, 0xec, 0x8c, 0xe7, 0xe4, 0xd3,
	0x16, 0xcc, 0x74, 0xff, 0xa9, 0x0f, 0xdc, 0xa4, 0x5f, 0x7c, 0x51, 0xac, 0x01, 0x0a, 0x5e, 0x32,
	0xd4, 0x17, 0xa4, 0xc7, 0x09, 0xd5, 0x02, 0xcf, 0x34, 0x87, 0x18, 0x05, 0x2e, 0xc3, 0x46, 0x5d,
	0x92, 0xe0, 0xed, 0x0b, 0xc9, 0x2e, 0x4a, 0x22, 0xdb, 0x83, 0xc6, 0xfc, 0x9c, 0xa5, 0xd2, 0x19,
	0xf2, 0x87, 0x74, 0xaa, 0xaf, 0x37, 0xf2, 0xa7, 0x70, 0xcd, 0xb2, 0x87, 0x8c, 0x29, 0x7d, 0xfc,
	0x55, 0x6b, 0x5b, 0x82, 0x51, 0x53, 0xa8, 0x49, 0xaa, 0x30, 0x1c, 0x72, 0xe8, 0x90, 0x7f, 0xa7,
	0xc7, 0xaf, 0x5a, 0x6f, 0x25, 0xab, 0x6e, 0xd0, 0x2b, 0xce, 0x2b, 0x34, 0x8c, 0xb8, 0x46, 0xb4,
	0xfd, 0xe2, 0x27, 0xaa, 0xed, 0xd5, 0xe7, 0x44, 0x0a, 0xd7, 0xb8, 0x48, 0x5f, 0xab, 0x4b, 0xb7,
	0x23, 0x5c, 0x83, 0x8d, 0x47, 0x3f, 0x66, 0xad, 0xad, 0xcf, 0x1e, 0xf9, 0x68, 0x29, 0x5d, 0x9f,
	0x5d, 0xcd, 0x05, 0xbe, 0x10, 0x80, 0xd6, 0x90, 0x1f, 0xa5, 0xf5, 0x87, 0x87, 0x3e, 0xed, 0x08,
	0xb2, 0x23, 0x5a, 0xc2, 0x66, 0x41, 0x2b, 0x47, 0xbd, 0x61, 0x5c, 0x2a, 0x89, 0xed, 0x98, 0x39,
	0x8d, 0x0e, 0x2e, 0x17, 0xa0, 0xf5, 0x92, 0xb5, 0x4f, 0x97, 0xfd, 0x23, 0x8d, 0x56, 0x49, 0xc3,
	0xbc, 0x53, 0xb4, 0x1c, 0x84, 0x59, 0x50, 0xa8, 0x88, 0x25, 0x3a, 0x05, 0x1d, 0x48, 0x8b, 0xae,
	0xbc, 0x50, 0xb3, 0xb2, 0x7b, 0x9d, 0x1b, 0x74, 0x3d, 0x5a, 0xd1, 0x3b, 0x0e, 0x53, 0x64, 0xa7,
	0xe2, 0x51, 0xe6, 0x31, 0xbb, 0x21, 0x4a, 0xa8, 0x41, 0x77, 0xc7, 0xec, 0xba, 0x58, 0xdc, 0x14,
	0x7c, 0xb2, 0x20, 0xd2, 0xe2, 0x0f, 0xcc, 0xdd, 0x31, 0xbc, 0x6c, 0x06, 0x38, 0x02, 0xdf, 0x73,
	0xac, 0x80, 0xbc, 0x84, 0x64, 0x09, 0x5e, 0x91, 0x3f, 0x92, 0x27, 0x6b, 0xb5, 0xf6, 0x12, 0xbc,
	0xda, 0xb9, 0x83, 0x0a, 0x93, 0x82, 0x7c, 0x8c, 0x90, 0x8c, 0x63, 0x25, 0x76, 0x82, 0x46, 0x1b,
	0x7a, 0xd5, 0x4d, 0xfb, 0x4e, 0x0c, 0x57, 0x03, 0x2b, 0x22, 0x6a, 0x88, 0xfc, 0x43, 0x40, 0xcf,
	0x09, 0xf5, 0xc2, 0x5c, 0x87, 0xc1, 0x12, 0xaa, 0x3d, 0x2d, 0x2d, 0x93, 0xa6, 0x8b, 0x1f, 0x29,
	0x7c, 0x92, 0xfa, 0x50, 0xed, 0x64, 0xeb, 0x79, 0x82, 0x3c, 0xaf, 0xb0, 0x29, 0xac, 0x98, 0xb4,
	0xde, 0xc9, 0xd6, 0x8b, 0x7f, 0xa2, 0x91, 0x16, 0xea, 0x55, 0x8d, 0xb2, 0x38, 0x54, 0xbd, 0xeb,
	0x25, 0xa4, 0x0f, 0x28, 0xa3, 0x6e, 0x4e, 0xdd, 0x28, 0x88, 0x9c, 0xea, 0xbe, 0x48, 0x4b, 0x09,
	0x11, 0x95, 0x30, 0xd9, 0x24, 0x41, 0x98, 0x85, 0x8c, 0xa8, 0x17, 0x94, 0xd1, 0x27, 0xb6, 0x63,
	0xad, 0xc7, 0x9a, 0x95, 0x8d, 0x25, 0x24, 0x85, 0x65, 0x82, 0xdc, 0x5e, 0x90, 0x58, 0x2b, 0x64,
	0x25, 0xa1, 0x2c, 0x09, 0x57, 0x68, 0xd0, 0xf0, 0x6c, 0x03, 0x73, 0x16, 0xc5, 0xb0, 0xac, 0xd4,
	0x43, 0xae, 0x07, 0x89, 0xb5, 0x4a, 0xa6, 0x14, 0x65, 0xf8, 0x67, 0x1a, 0x25, 0x71, 0x59, 0xf7,
	0x44, 0xb7, 0x0a, 0x63, 0xc7, 0x5a, 0x23, 0x6c, 0xf4, 0x4f, 0x1a, 0xa6, 0xa8, 0x56, 0xca, 0x51,
	0x17, 0x06, 0x4e, 0x27, 0x76, 0x51, 0x17, 0x59, 0xeb, 0xa4, 0xe7, 0xf8, 0x9f, 0x68, 0x7b, 0xd7,
	0x74, 0x87, 0x7d, 0x16, 0xdb, 0x7d, 0x98, 0x20, 0xeb, 0x15, 0x3d, 0xc4, 0x10, 0x7e, 0x03, 0x3b,
	0xd6, 0x7a, 0xaa, 0x99, 0x2d, 0xae, 0x20, 0x1f, 0xd6, 0x21, 0xbf, 0x20, 0xdd, 0x4d, 0x90, 0x5d,
	0xfc, 0x49, 0xe3, 0xb4, 0xdb, 0x26, 0xec, 0x24, 0x39, 0xd3, 0xfa, 0x0a, 0x3b, 0xe8, 0x3f, 0x4a,
	0x90, 0x4d, 0xfe, 0x81, 0x56, 0x13, 0x98, 0xd1, 0x6c, 0x5e, 0x47, 0x31, 0xe3, 0xbf, 0xa4, 0x87,
	0x42, 0x39, 0xdf, 0xc6, 0x1a, 0xc4, 0xf5, 0x3c, 0xeb, 0xcf, 0x98, 0x06, 0x71, 0xe9, 0x06, 0x30,
	0xe5, 0xc6, 0x9b, 0x3e, 0xa7, 0xdc, 0xc5, 0x1f, 0x98, 0xbb, 0xa7, 0x51, 0xe6, 0x6c, 0xf3, 0xca,
	0x37, 0xd0, 0x9f, 0x13, 0xd5, 0xba, 0x4e, 0xf7, 0x8f, 0xad, 0x39, 0xd2, 0xc9, 0xc3, 0x5e, 0x92,
	0x87, 0x01, 0x7d, 0x99, 0x4d, 0xac, 0x8d, 0x89, 0x16, 0x7e, 0xe4, 0x0b, 0xbb, 0x62, 0xd5, 0xe5,
	0x49, 0x13, 0x21, 0x51, 0x7f, 0x3d, 0x71, 0x6d, 0xe8, 0x59, 0xaf, 0x99, 0x94, 0x88, 0x97, 0xb2,
	0xa0, 0x7b, 0x7f, 0x80, 0x49, 0xdf, 0xda, 0x9c, 0x38, 0x85, 0xdf, 0x1f, 0x60, 0xd2, 0xa7, 0x7c,
	0x17, 0x48, 0xa5, 0xe9, 0x3b, 0x26, 0xad, 0xdb, 0xa1, 0xdf, 0x09, 0xad, 0x37, 0xf4, 0x95, 0x32,
	0x2c, 0x2e, 0x80, 0xc7, 0xb5, 0xc3, 0x2f, 0xaf, 0xa3, 0x78, 0xef, 0x63, 0x48, 0x8c, 0x2d, 0xd2,
	0x71, 0x37, 0x4e, 0xa8, 0x77, 0x6e, 0x81, 0xa4, 0xcb, 0xdc, 0xd3, 0x3f, 0x70, 0x0d, 0xf3, 0x59,
	0xc8, 0xe7, 0xfc, 0x9a, 0x88, 0xe9, 0x60, 0x15, 0x5e, 0xa6, 0xcb, 0xf4, 0x75, 0x5e, 0x0e, 0x18,
	0x40, 0xc7, 0x85, 0x01, 0x71, 0x2e, 0x51, 0x1f, 0x62, 0x62, 0x7d, 0xc3, 0x66, 0xc4, 0xf7, 0x45,
	0x49, 0x53, 0x26, 0x92, 0xd8, 0xb5, 0x0f, 0x1b, 0xb7, 0xdf, 0x92, 0x3e, 0xd9, 0x7e, 0x87, 0x97,
	0xb4, 0xa4, 0x7b, 0xa2, 0x62, 0x92, 0x70, 0x51, 0x85, 0x00, 0xab, 0x58, 0x22, 0x6b, 0x9b, 0x74,
	0xab, 0xf8, 0xf7, 0x91, 0xbb, 0x25, 0x6c, 0x9b, 0xc4, 0xfa, 0x15, 0xed, 0x56, 0xda, 0x39, 0xb8,
	0x24, 0x62, 0x16, 0x7e, 0x47, 0x25, 0xc1, 0x40, 0x4c, 0x98, 0x52, 0x2f, 0x5d, 0xf2, 0x68, 0xc0,
	0x5e, 0xa2, 0xc8, 0x0a, 0xd8, 0xa1, 0x52, 0x9c, 0x84, 0x97, 0x92, 0x69, 0xfc, 0x4b, 0x95, 0x33,
	0xa4, 0xeb, 0x85, 0x10, 0x3b, 0xb2, 0xf1, 0x5f, 0xa4, 0x6b, 0x6f, 0x31, 0x66, 0xd9, 0x11, 0x94,
	0x75, 0x63, 0xe3, 0x15, 0x81, 0xff, 0xc2, 0x2f, 0x2d, 0xc2, 0x33, 0xc5, 0x2e, 0x99, 0xfa, 0x84,
	0xbc, 0x53, 0x94, 0x92, 0xba, 0x9a, 0x25, 0x4a, 0x83, 0xfa, 0x86, 0xbe, 0xc5, 0xdc, 0x8e, 0xac,
	0x3d, 0x22, 0x27, 0xf5, 0xf1, 0x29, 0xc9, 0x65, 0x86, 0x4d, 0x36, 0x98, 0x7e, 0x62, 0x77, 0xde,
	0x51, 0x31, 0x95, 0xee, 0x3c, 0xd5, 0x5c, 0x81, 0x44, 0xbd, 0xf9, 0x6b, 0x12, 0x61, 0x25, 0x7e,
	0xfe, 0x65, 0x21, 0x37, 0xb6, 0xa6, 0x3b, 0xf5, 0x93, 0xbd, 0x4f, 0xbe, 0x60, 0x65, 0xaa, 0x9f,
	0x6a, 0x0e, 0xb3, 0xee, 0x5a, 0x79, 0x7e, 0xbe, 0x27, 0x5f, 0xaa, 0xbb, 0xd6, 0x5d, 0x75, 0x68,
	0x46, 0x56, 0x4c, 0x40, 0xc5, 0x2e, 0xeb, 0xd8, 0x93, 0x28, 0x4c, 0xad, 0xc1, 0xc4, 0x67, 0x85,
	0xe1, 0xd0, 0x5d, 0x2b, 0xfe, 0x1a, 0x85, 0xb9, 0x58, 0x77, 0x1f, 0x4a, 0xe6, 0x55, 0x18, 0xf1,
	0xcc, 0x2f, 0x35, 0x5b, 0x21, 0xc0, 0xb9, 0x74, 0xb8, 0x3e, 0x28, 0xfe, 0xc2, 0x6c, 0x14, 0xbf,
	0x61, 0xa3, 0x08, 0x9c, 0x2e, 0x27, 0xab, 0xfd, 0xcb, 0x5a, 0x85, 0xd0, 0xb7, 0x03, 0xf8, 0xfe,
	0xfd, 0xf6, 0x37, 0xbb, 0x6f, 0xb7, 0x76, 0x07, 0x1c, 0x2e, 0xc7, 0x5c, 0x3d, 0x74, 0xdd, 0x4f,
	0x69, 0x34, 0x03, 0x0e, 0xb5, 0x93, 0xc1, 0x74, 0xb4, 0xff, 0xcd, 0x18, 0xb8, 0x50, 0x77, 0x26,
	0x27, 0x83, 0x8d, 0xc1, 0x87, 0xf7, 0x58, 0x6c, 0x5b, 0xbe, 0x2c, 0x48, 0xdd, 0xe0, 0x8a, 0x43,
	0x59, 0xe1, 0x01, 0xa1, 0xb4, 0xd0, 0x2e, 0xfe, 0x99, 0x0f, 0x6e, 0x38, 0xa6, 0x8a, 0xe6, 0xa1,
	0x1c, 0x6e, 0x40, 0x79, 0xb8, 0x18, 0x87, 0x63, 0xed, 0xbf, 0x3e, 0x04, 0xae, 0x0f, 0xbb, 0x6c,
	0xef, 0xed, 0x0e, 0xf6, 0x37, 0x36, 0x07, 0x18, 0xae, 0xe4, 0xdd, 0xce, 0xf6, 0xd6, 0x7e, 0xb6,
	0xbb, 0x4d, 0xe2, 0x30, 0x66, 0x85, 0xad, 0x5a, 0xe2, 0x8e, 0x94, 0xd8, 0x1f, 0x04, 0x9e, 0xa2,
	0x32, 0x86, 0x67, 0x82, 0x29, 0xa4, 0x64, 0x72, 0xe0, 0x7a, 0xc2, 0xa0, 0x4a, 0x58, 0x1e, 0x64,
	0x44, 0xd1, 0xfc, 0x4c, 0xf8, 0xfb, 0x61, 0x16, 0x27, 0x3c, 0xc8, 0x4d, 0x29, 0xe0, 0x85, 0x60,
	0x4c, 0x29, 0x05, 0x24, 0x7d, 0x58, 0x1c, 0xfe, 0x87, 0x87, 0x00, 0x24, 0x4c, 0x42, 0xfb, 0x3f,
	0x1d, 0xe6, 0x63, 0x06, 0xbb, 0x3b, 0x7b, 0xbf, 0x4d, 0x36, 0xbf, 0xdd, 0x7a, 0xf3, 0x61, 0x67,
	0x88, 0x09, 0x22, 0xc6, 0x0c, 0x76, 0xbd, 0x70, 0x35, 0x4f, 0xec, 0x3e, 0x72, 0x32, 0x4f, 0x0a,
	0x13, 0x22, 0x06, 0xd0, 0x48, 0xc8, 0x03, 0x14, 0xdb, 0xb9, 0x0d, 0x3d, 0x14, 0x38, 0x30, 0xc6,
	0x50, 0xd9, 0xc5, 0x04, 0xe5, 0x2e, 0x3e, 0x1c, 0xd3, 0xbe, 0x74, 0xa6, 0x5c, 0xc1, 0xca, 0x56,
	0x09, 0x45, 0x30, 0x49, 0x51, 0x8c, 0xa1, 0x92, 0xf3, 0x08, 0xc1, 0x25, 0x36, 0x67, 0xfc, 0x88,
	0x5b, 0x48, 0xf8, 0xd2, 0x4d, 0xa2, 0xb0, 0x98, 0xc3, 0x43, 0xb8, 0x98, 0x11, 0x7b, 0xb4, 0x8a,
	0x2a, 0x3d, 0x1a, 0x97, 0x7c, 0x45, 0xb3, 0x1e, 0x31, 0x51, 0x58, 0xcc, 0x91, 0x21, 0xf0, 0x4d,
	0xf9, 0x29, 0xff, 0xf6, 0x28, 0x38, 0x3f, 0xfc, 0x94, 0xc5, 0xca, 0x0e, 0xbf, 0xf6, 0xb7, 0x36,
	0xde, 0x7f, 0xd8, 0xdf, 0x92, 0xec, 0x4e, 0xbc, 0x30, 0xc2, 0x6e, 0xee, 0x63, 0x6d, 0x5d, 0xfd,
	0x88, 0xb3, 0xc2, 0xad, 0xb4, 0x4a, 0xdb, 0x81, 0x71, 0x8c, 0xbc, 0x62, 0x4d, 0x13, 0xb7, 0xdd,
	0xeb, 0x1d, 0x5a, 0x00, 0xe9, 0x9e, 0x8e, 0xc9, 0xf5, 0x3c, 0x8c, 0x4d, 0x95, 0x75, 0x5c, 0x3b,
	0xef, 0x22, 0x94, 0x5a, 0x87, 0x28, 0xff, 0xe6, 0xd7, 0x74, 0x83, 0x6b, 0x1b, 0xcd, 0x92, 0x7e,
	0xd1, 0x28, 0x4d, 0x1b, 0xe9, 0x7c, 0xa0, 0x51, 0xdf, 0x3a, 0x9e, 0x1e, 0xf4, 0xbc, 0xc2, 0xf6,
	0x1f, 0x27, 0x0d, 0xf5, 0x36, 0x76, 0x68, 0xca, 0xdd, 0x1d, 0x0d, 0x93, 0x8f, 0x7a, 0x70, 0x15,
	0xa6, 0x6c, 0xdf, 0x1d, 0xa1, 0x6f, 0xe8, 0xab, 0xdf, 0xb2, 0x58, 0x76, 0x2d, 0x6f, 0x1a, 0xbb,
	0x76, 0x9e, 0x16, 0x8d, 0xd2, 0xd8, 0xa5, 0x81, 0xe4, 0xda, 0x53, 0x63, 0xa3, 0x73, 0xc3, 0x26,
	0xf6, 0x18, 0x3e, 0x35, 0x8f, 0xf8, 0xfe, 0x6b, 0x32, 0xb5, 0x38, 0xf2, 0xe2, 0xa9, 0x56, 0x44,
	0x18, 0x70, 0x62, 0xd2, 0x8c, 0x22, 0xf2, 0x1d, 0xf1, 0xfd, 0xce, 0xe0, 0x03, 0x9d, 0xdd, 0x2b,
	0x1a, 0xf6, 0x28, 0xcc, 0x0a, 0xcb, 0x8f, 0x86, 0x6e, 0xec, 0xbc, 0x7e, 0x8f, 0x79, 0x1e, 0x08,
	0x61, 0x03, 0x55, 0x1e, 0x3c, 0x4a, 0x1a, 0xf5, 0x34, 0xd8, 0xa5, 0x09, 0x7a, 0xba, 0xd9, 0x49,
	0xe3, 0x70, 0x3d, 0xc7, 0x4f, 0x44, 0x89, 0x75, 0x82, 0xf4, 0x6f, 0xef, 0x2f, 0xf2, 0xc1, 0x3e,
	0x9d, 0xd8, 0xeb, 0xba, 0xe5, 0x99, 0x38, 0xa1, 0xe7, 0xc1, 0x38, 0x61, 0x21, 0x19, 0x59, 0xe2,
	0xd0, 0xeb, 0xe8, 0x0d, 0x0d, 0x1b, 0x86, 0xc7, 0x85, 0xb8, 0xc1, 0x93, 0xc4, 0x6e, 0x80, 0x3b,
	0xbf, 0xa5, 0x9b, 0x66, 0xbd, 0xd8, 0x34, 0xff, 0xe4, 0x18, 0xb8, 0xcc, 0x47, 0xe6, 0x6d, 0x6f,
	0x4a, 0x76, 0x8e, 0x58, 0xaa, 0x95, 0x44, 0x34, 0xea, 0xf7, 0x8f, 0xf8, 0x58, 0x26, 0xe7, 0x50,
	0xec, 0x22, 0xd1, 0xd5, 0xa3, 0x60, 0x6d, 0xdc, 0x4b, 0x0f, 0x4d, 0x3a, 0x20, 0xdd, 0x51, 0x26,
	0x5d, 0x57, 0xec, 0x2b, 0xd1, 0x75, 0x21, 0x67, 0xd5, 0xef, 0xae, 0xc7, 0x06, 0x33, 0xad, 0xdc,
	0x63, 0x62, 0x42, 0x9e, 0x82, 0xd9, 0x64, 0xa7, 0xd9, 0x06, 0x82, 0x1a, 0xf7, 0x9b, 0xe8, 0x9b,
	0x94, 0x0b, 0x91, 0xef, 0x3a, 0x31, 0x80, 0x46, 0xce, 0x29, 0xd9, 0x7b, 0xcf, 0x0d, 0xe6, 0x4e,
	0xbb, 0x03, 0x45, 0x0f, 0xa5, 0x62, 0x99, 0xab, 0xf6, 0xa1, 0x78, 0x13, 0x97, 0x33, 0x37, 0xee,
	0xc6, 0xff, 0x3a, 0x06, 0xce, 0xf1, 0x16, 0xe6, 0x60, 0xb0, 0xc3, 0x59, 0xad, 0xb7, 0x2a, 0x06,
	0x60, 0x9a, 0x7a, 0x72, 0x3c, 0xb9, 0x6e, 0xc5, 0xa6, 0xe6, 0x08, 0x31, 0xf8, 0x0f, 0x57, 0xb6,
	0x34, 0x46, 0xcb, 0x19, 0x76, 0x4f, 0x51, 0xab, 0xc3, 0x16, 0x73, 0x5c, 0xe6, 0x54, 0x72, 0xd8,
	0x5b, 0x88, 0x54, 0x16, 0x35, 0x3b, 0x22, 0x3e, 0xab, 0xe4, 0xef, 0x0f, 0xf1, 0x86, 0x16, 0x56,
	0x34, 0xcb, 0x1f, 0xf6, 0x06, 0x3c, 0x5a, 0x9e, 0x68, 0x68, 0x91, 0x29, 0x24, 0x35, 0x60, 0xa4,
	0xa3, 0x7c, 0x2c, 0x4c, 0x87, 0x84, 0x9c, 0x44, 0xc6, 0x8e, 0xd1, 0x37, 0x8f, 0x60, 0x8d, 0x1f,
	0x9a, 0x2b, 0xb8, 0x72, 0xa5, 0xcc, 0xfc, 0xeb, 0x09, 0x11, 0x75, 0x88, 0x89, 0x4a, 0x79, 0x51,
	0xcf, 0x04, 0x9d, 0x2f, 0x11, 0x95, 0xa4, 0xb0, 0x30, 0xf5, 0x1c, 0xeb, 0x30, 0xe1, 0x4f, 0x70,
	0xc4, 0x17, 0x97, 0xfd, 0x33, 0xa9, 0xe7, 0xa7, 0x10, 0x72, 0x34, 0x02, 0xc6, 0x1a, 0x27, 0x57,
	0xa9, 0xc8, 0x4e, 0x23, 0x1c, 0xc2, 0x55, 0xac, 0x9e, 0xa4, 0x98, 0xe2, 0xff, 0x7f, 0x98, 0x2f,
	0xab, 0xb1, 0xb2, 0xb1, 0xf3, 0x01, 0xe3, 0x78, 0x72, 0x33, 0x7c, 0x57, 0xd8, 0x93, 0x43, 0x0c,
	0x51, 0xe9, 0xfc, 0x46, 0x42, 0x39, 0x88, 0x1a, 0x31, 0x7d, 0x52, 0xcb, 0x93, 0x74, 0x9d, 0x16,
	0x12, 0x22, 0x79, 0xa6, 0x38, 0x6e, 0x98, 0x4e, 0x3a, 0x09, 0x81, 0x2c, 0x47, 0xfa, 0x06, 0xbc,
	0x34, 0x97, 0x88, 0xb3, 0x84, 0x60, 0x90, 0xc3, 0x34, 0x85, 0x85, 0x35, 0x48, 0x71, 0xab, 0x9c,
	0x97, 0x19, 0x29, 0xf0, 0x64, 0x1d, 0xa2, 0xb7, 0xc0, 0x2c, 0x75, 0x20, 0xdf, 0x4a, 0x47, 0x58,
	0x46, 0xb5, 0x56, 0x28, 0x44, 0x1e, 0x69, 0xc5, 0x3a, 0x4c, 0x2e, 0xf8, 0x68, 0x39, 0x5d, 0xe7,
	0x65, 0x6c, 0xea, 0x7b, 0x6a, 0x3b, 0x09, 0x49, 0x1f, 0xa5, 0xd8, 0x15, 0x59, 0x82, 0xf2, 0x18,
	0xd9, 0x21, 0xfe, 0x03, 0x2f, 0x98, 0x34, 0x2c, 0x4c, 0x7c, 0x1b, 0x57, 0x1d, 0xb2, 0xc6, 0xe9,
	0x33, 0x97, 0x93, 0x38, 0xdc, 0xf7, 0x6a, 0x85, 0x42, 0x76, 0xb7, 0xb4, 0x11, 0x32, 0x15, 0x7c,
	0x88, 0x2f, 0xf1, 0xd2, 0x1d, 0xe1, 0x9f, 0x71, 0xca, 0x05, 0xf0, 0xef, 0xc7, 0xc0, 0xd9, 0xe1,
	0x02, 0xf0, 0xb6, 0xdf, 0xf3, 0x77, 0xde, 0x9b, 0x82, 0xa5, 0xe8, 0xb9, 0x89, 0xfc, 0x96, 0xdb,
	0x7a, 0x22, 0x2c, 0x67, 0x9e, 0x2e, 0x8a, 0xc9, 0xdf, 0xc8, 0x21, 0xc1, 0xa1, 0x15, 0x14, 0xce,
	0x39, 0x8a, 0x4e, 0xae, 0x6a, 0x25, 0xc1, 0xf5, 0x0b, 0x97, 0x33, 0x9c, 0xa0, 0x56, 0xc5, 0x2c,
	0xc5, 0x3a, 0xe2, 0xf7, 0x42, 0xe6, 0x59, 0xf4, 0x61, 0x10, 0xee, 0xdb, 0x1b, 0x3b, 0x3b, 0x92,
	0xee, 0x47, 0x59, 0x4a, 0x30, 0xba, 0xbd, 0x2a, 0x92, 0x68, 0x25, 0x50, 0x9f, 0xa3, 0x2b, 0xfe,
	0x87, 0xbf, 0x51, 0x8f, 0xb7, 0xee, 0x80, 0x09, 0x05, 0x6d, 0x94, 0xa5, 0x3c, 0x6c, 0xf9, 0x78,
	0xfb, 0x8f, 0x63, 0xfc, 0xe5, 0x02, 0x7d, 0xbf, 0xb5, 0xbf, 0xb9, 0xfd, 0x7e, 0x2b, 0x19, 0xfc,
	0x40, 0xab, 0xd9, 0xdf, 0x11, 0xc6, 0x8d, 0xd6, 0x50, 0x6c, 0xbb, 0x09, 0xa2, 0xdf, 0x4f, 0xec,
	0xe1, 0x43, 0x61, 0x24, 0x15, 0x52, 0xe8, 0xa3, 0xd8, 0xb5, 0x61, 0xc0, 0x26, 0x97, 0x9f, 0x9f,
	0xd6, 0xa2, 0x60, 0xc2, 0x56, 0x38, 0x3b, 0x28, 0xf6, 0x33, 0x07, 0x56, 0x81, 0x4e, 0xe7, 0x08,
	0x20, 0xa1, 0xa6, 0x49, 0x94, 0xc5, 0x61, 0x84, 0x60, 0xc0, 0xdf, 0x8f, 0xcb, 0x4f, 0xf2, 0xbf,
	0x0e, 0x81, 0xcf, 0x87, 0xe3, 0x4e, 0xb7, 0xdf, 0x6e, 0x95, 0x4f, 0x06, 0xd7, 0x85, 0x67, 0x1f,
	0x1c, 0xd9, 0x2a, 0x79, 0x23, 0x10, 0x93, 0x16, 0x86, 0x54, 0x0e, 0x2c, 0x73, 0x37, 0xc8, 0x01,
	0x2a, 0x66, 0x4d, 0x0c, 0x09, 0x0b, 0x3b, 0x89, 0x7d, 0x8b, 0x3e, 0xcd, 0x8b, 0x3d, 0x2f, 0xa5,
	0xf4, 0xdd, 0x20, 0xc3, 0x79, 0x1b, 0xc4, 0xa4, 0xda, 0x26, 0x66, 0x41, 0x5b, 0xf8, 0xc8, 0x1c,
	0x35, 0xbe, 0x6c, 0xd3, 0xf0, 0x76, 0x7f, 0x8f, 0xd2, 0xca, 0x25, 0x93, 0x62, 0xa5, 0x2c, 0x77,
	0x23, 0xc1, 0xb4, 0x77, 0x14, 0xfd, 0x5d, 0x45, 0x68, 0x89, 0xe5, 0xc7, 0xaf, 0x7e, 0xa7, 0x25,
	0x5d, 0x47, 0x30, 0x66, 0xe8, 0x74, 0xeb, 0xd8, 0x06, 0x69, 0xff, 0xe9, 0x04, 0x8f, 0x9d, 0xc0,
	0xde, 0x98, 0xe0, 0xce, 0x40, 0x48, 0x63, 0x9c, 0x96, 0x3f, 0x87, 0x42, 0x2f, 0x55, 0xa6, 0x32,
	0x2e, 0xc8, 0x43, 0x00, 0x44, 0x16, 0x49, 0x3a, 0xa3, 0x22, 0x5b, 0x50, 0xe4, 0xab, 0xa7, 0x34,
	0x1a, 0x35, 0x27, 0x49, 0x6b, 0x7c, 0x62, 0x32, 0x32, 0x65, 0x6a, 0xe3, 0x23, 0xb9, 0x73, 0x4d,
	0xe4, 0x96, 0xa7, 0x37, 0x42, 0xb9, 0xa7, 0xa0, 0xda, 0xb0, 0x2e, 0xc5, 0xb1, 0x23, 0x77, 0x85,
	0x4a, 0x44, 0xa8, 0xd3, 0x1c, 0x45, 0x34, 0x11, 0xd5, 0x67, 0x32, 0x4f, 0x75, 0x7c, 0x21, 0x0f,
	0x59, 0x13, 0xe5, 0x69, 0xd3, 0x1d, 0x15, 0x89, 0xa6, 0xa2, 0x04, 0x69, 0xca, 0xa3, 0xd1, 0x94,
	0xea, 0xd3, 0x1e, 0x15, 0x19, 0x82, 0xd5, 0xe9, 0xa8, 0xa7, 0x3e, 0x1a, 0xad, 0x3f, 0x49, 0xfa,
	0xa3, 0xd1, 0x68, 0xa5, 0x29, 0x90, 0x46, 0x9c, 0xd2, 0x34, 0x48, 0x45, 0x36, 0xa3, 0xc8, 0xa9,
	0x4a, 0x85, 0x7c, 0x2e, 0x7f, 0x3f, 0xaf, 0xcc, 0x90, 0x26, 0x1d, 0xb2, 0x2f, 0x77, 0x46, 0x54,
	0x57, 0xad, 0x41, 0x4a, 0xe4, 0xb2, 0x3c, 0x1e, 0x50, 0x94, 0x34, 0x5a, 0x5a, 0x64, 0xdf, 0x64,
	0x09, 0x19, 0xa5, 0x46, 0x22, 0xb9, 0x2f, 0x4a, 0x35, 0x4c, 0x55, 0x7a, 0xe4, 0xaa, 0x50, 0xba,
	0x4f, 0x21, 0xe6, 0x20, 0x29, 0x92, 0xff, 0xe7, 0x23, 0xde, 0xf6, 0x41, 0xbf, 0xd9, 0xda, 0x1d,
	0x94, 0x2f, 0xd0, 0x62, 0xd6, 0x3d, 0x5a, 0x41, 0x14, 0x5d, 0xb2, 0xa2, 0xe2, 0x45, 0x73, 0x86,
	0x23, 0xe3, 0x2d, 0x1f, 0x52, 0xf7, 0x41, 0x4c, 0xe5, 0xe3, 0x48, 0x49, 0xca, 0xdd, 0x21, 0xa1,
	0xe0, 0x85, 0x78, 0x32, 0x73, 0xc4, 0x51, 0x56, 0x02, 0x56, 0x4f, 0xb3, 0x02, 0x20, 0x72, 0xca,
	0xc4, 0x0d, 0x96, 0x70, 0x51, 0xd0, 0x2c, 0x70, 0x48, 0x77, 0xc6, 0xf9, 0xca, 0x27, 0x62, 0x2a,
	0x26, 0xc7, 0x47, 0x03, 0x90, 0x8f, 0xf0, 0x35, 0x5d, 0x16, 0x04, 0xbb, 0x83, 0x23, 0xc6, 0x0e,
	0x10, 0xb2, 0x2e, 0x8f, 0x0e, 0x21, 0xca, 0xcb, 0x15, 0xf0, 0x48, 0xb8, 0x2f, 0x72, 0x7c, 0xd4,
	0x75, 0x42, 0xd5, 0xe7, 0x31, 0xc2, 0xba, 0x20, 0x56, 0xfb, 0xbe, 0x2f, 0x67, 0xf5, 0x60, 0x92,
	0x0e, 0xb1, 0x05, 0x49, 0x89, 0x0b, 0x5c, 0x20, 0xe7, 0x38, 0x91, 0xb2, 0xc8, 0x17, 0xb0, 0x40,
	0x2a, 0x29, 0x5d, 0x52, 0x97, 0x25, 0x28, 0xfe, 0x25, 0x8c, 0xd7, 0x73, 0x27, 0xa3, 0x52, 0x3e,
	0xe2, 0xe0, 0x99, 0x4b, 0x63, 0xee, 0x85, 0xa0, 0x68, 0x04, 0x31, 0x71, 0x92, 0x0e, 0x2f, 0x25,
	0x58, 0x02, 0xe0, 0x50, 0xa6, 0xb9, 0x1b, 0xeb, 0x2d, 0x9d, 0x84, 0xe2, 0xea, 0x1b, 0xa4, 0x84,
	0xff, 0x04, 0x07, 0xce, 0xac, 0xa8, 0xfc, 0x24, 0xcc, 0xa4, 0x9b, 0xba, 0xf2, 0xa1, 0xf0, 0x20,
	0xdb, 0xa5, 0x20, 0xb1, 0x00, 0x72, 0x75, 0x5e, 0xc5, 0x91, 0xf0, 0x48, 0xdb, 0xa5, 0x00, 0xd1,
	0x11, 0x5b, 0x15, 0xc0, 0x0f, 0xe4, 0x63, 0x0e, 0xa8, 0x9a, 0xbb, 0x2a, 0xde, 0x55, 0xac, 0x6c,
	0x56, 0x88, 0x3f, 0x46, 0x7e, 0xb8, 0x02, 0x3d, 0x22, 0x83, 0x07, 0xdb, 0x2e, 0x65, 0x28, 0x97,
	0x55, 0xb2, 0x0a, 0xa3, 0x1c, 0x05, 0x0e, 0xe1, 0xb5, 0xc8, 0x82, 0x78, 0x64, 0xf4, 0x25, 0x31,
	0x6b, 0x80, 0xd6, 0xd2, 0x3c, 0x0e, 0x3d, 0xda, 0x38, 0x43, 0xda, 0x16, 0x0c, 0x7b, 0xf1, 0x59,
	0x5d, 0x2a, 0x21, 0x49, 0x61, 0x4c, 0xe7, 0x80, 0x21, 0x6d, 0x4f, 0x8b, 0x37, 0xb6, 0xeb, 0x1a,
	0x11, 0xc3, 0xf6, 0x4f, 0x51, 0x66, 0xcd, 0x75, 0xaf, 0xca, 0xcc, 0x35, 0x4d, 0x55, 0x32, 0x3f,
	0xfb, 0xed, 0xff, 0x32, 0x06, 0x4e, 0x17, 0x97, 0xd4, 0xec, 0xdd, 0x9b, 0x8d, 0xc1, 0x16, 0xdc,
	0x1c, 0x6c, 0xef, 0xed, 0xb2, 0xa4, 0x70, 0x7c, 0x73, 0xcc, 0xa2, 0x82, 0x37, 0xa7, 0x85, 0xb4,
	0x45, 0x65, 0x37, 0x09, 0x3e, 0x97, 0xd0, 0x40, 0xa7, 0x7c, 0xc9, 0x82, 0xfc, 0x06, 0x7e, 0x00,
	0xce, 0x49, 0xa8, 0x1d, 0xe4, 0xa1, 0x14, 0xb1, 0x1b, 0x93, 0xd3, 0xcc, 0xe0, 0x87, 0x8e, 0xdb,
	0x5d, 0x67, 0x17, 0x25, 0x9f, 0x63, 0x68, 0xff, 0x15, 0x00, 0xa7, 0xec, 0xbd, 0xfd, 0x77, 0x7b,
	0xfb, 0xe2, 0x58, 0x2e, 0x83, 0x0b, 0x43, 0x7f, 0xbe, 0x74, 0x24, 0x0f, 0xc0, 0xe5, 0x1a, 0x05,
	0x5a, 0xcb, 0x1d, 0x37, 0x49, 0x63, 0xb7, 0x93, 0xf1, 0x98, 0xe3, 0x24, 0xed, 0xee, 0xae, 0x44,
	0x24, 0x66, 0x58, 0x29, 0xce, 0x18, 0x87, 0xc7, 0x8c, 0x54, 0x12, 0x97, 0x55, 0x57, 0x0e, 0x0f,
	0x6d, 0x98, 0x23, 0xc5, 0x09, 0x22, 0x23, 0x8e, 0x09, 0xd6, 0xfc, 0xf8, 0xd0, 0x50, 0x3a, 0xd2,
	0xba, 0x06, 0x4e, 0xd7, 0x48, 0x03, 0xb4, 0xca, 0x54, 0xb5, 0x43, 0x4b, 0x65, 0x5c, 0xaa, 0x11,
	0xe1, 0x67, 0x9c, 0xb2, 0xaf, 0x54, 0x51, 0x77, 0x79, 0xe4, 0x8d, 0x49, 0xf0, 0x79, 0x9d, 0x0b,
	0xdf, 0x4c, 0xa8, 0x6e, 0xce, 0x78, 0x6a, 0x08, 0xee, 0xd6, 0xa8, 0x49, 0x14, 0x07, 0xa4, 0x3b,
	0x58, 0xc0, 0xbe, 0x39, 0x2e, 0xda, 0x06, 0x58, 0xc4, 0x13, 0x70, 0xb3, 0x26, 0xc2, 0x47, 0x71,
	0x0f, 0x3f, 0x58, 0x08, 0xdc, 0x1f, 0x89, 0x5f, 0x7e, 0x9c, 0x68, 0xd3, 0xdb, 0xf5, 0x99, 0x08,
	0x03, 0x3c, 0xc5, 0x85, 0x08, 0x9c, 0x23, 0x9a, 0x27, 0x91, 0xe7, 0xa6, 0x16, 0x20, 0xfc, 0x7d,
	0x9e, 0xff, 0x29, 0xb8, 0x55, 0xe3, 0x2f, 0xf5, 0xcf, 0xd0, 0xd4, 0x2f, 0x9a, 0x3f, 0x21, 0x5a,
	0x24, 0xe3, 0x24, 0x7c, 0xec, 0x7a, 0x8d, 0x3d, 0x46, 0x2b, 0x28, 0xc6, 0x17, 0xfc, 0x61, 0xd3,
	0x3f, 0x27, 0xbc, 0x2e, 0xcf, 0xbb, 0x20, 0x59, 0x7a, 0xe4, 0x63, 0xe7, 0x61, 0xb7, 0x8b, 0xf1,
	0x00, 0xac, 0x93, 0x84, 0x2f, 0x68, 0x6a, 0x13, 0x3b, 0xd9, 0xfb, 0xa1, 0x87, 0xf1, 0x0d, 0x10,
	0x2a, 0xac, 0x3a, 0xeb, 0x63, 0xc2, 0x1b, 0xf2, 0xbc, 0xf3, 0xe0, 0x8b, 0x3a, 0x2f, 0x0b, 0xde,
	0xc7, 0x7f, 0x5a, 0x9f, 0x10, 0xb6, 0x84, 0x67, 0xbb, 0x0f, 0xce, 0x4a, 0xd8, 0xdc, 0x20, 0xec,
	0x76, 0x99, 0x6e, 0x8d, 0x78, 0x7a, 0x1b, 0xdc, 0xab, 0xd3, 0xd3, 0x87, 0x58, 0xe9, 0xa7, 0xf9,
	0x94, 0x08, 0x79, 0xd9, 0xd8, 0x57, 0xcc, 0x53, 0x2e, 0xe0, 0x16, 0x61, 0xeb, 0xf1, 0x6c, 0x0f,
	0xc1, 0xd5, 0x3a, 0x1b, 0xa9, 0x60, 0x44, 0x32, 0x6a, 0x13, 0x02, 0x95, 0x8d, 0x39, 0x53, 0x9e,
	0x73, 0x16, 0x5c, 0xac, 0x71, 0x12, 0x1b, 0x88, 0x7c, 0x10, 0xa6, 0x47, 0x97, 0x9b, 0xa6, 0x86,
	0x25, 0xfb, 0x52, 0x1b, 0x36, 0xe6, 0xe9, 0x65, 0xbb, 0xd2, 0x43, 0x54, 0xd9, 0x87, 0x2b, 0x43,
	0x03, 0x75, 0x85, 0xd7, 0x88, 0x8b, 0xe0, 0x4a, 0x7d, 0x50, 0x99, 0x6d, 0x53, 0xa8, 0x0d, 0xac,
	0xfb, 0xad, 0x33, 0x84, 0x71, 0x95, 0x33, 0x7b, 0xda, 0xff, 0xd8, 0x62, 0xe5, 0x1d, 0xe7, 0x30,
	0x02, 0x64, 0xf2, 0xe1, 0xb5, 0xeb, 0xd4, 0xcb, 0x3b, 0xce, 0xd5, 0x41, 0x82, 0xab, 0x3e, 0x79,
	0x35, 0x25, 0x8c, 0x22, 0x8f, 0xdd, 0x49, 0xc6, 0x78, 0xcb, 0x72, 0x12, 0x5c, 0x50, 0x32, 0x75,
	0x5c, 0x9b, 0x59, 0xba, 0xb4, 0x50, 0xdb, 0x97, 0xa0, 0xad, 0xa4, 0x26, 0xcf, 0xcf, 0x3c, 0x6e,
	0x37, 0x2b, 0xe0, 0x38, 0xcb, 0x60, 0xd2, 0x0c, 0x79, 0xd9, 0xc3, 0x05, 0x5f, 0x73, 0x70, 0x8e,
	0x55, 0xdc, 0x93, 0x71, 0x87, 0x41, 0x0a, 0x6d, 0xda, 0xe8, 0x11, 0xbe, 0xe6, 0x9b, 0xcd, 0x8a,
	0x90, 0xc9, 0xb8, 0x04, 0x78, 0xd0, 0xdc, 0x47, 0x45, 0xab, 0xec, 0xd5, 0x82, 0x2f, 0x7f, 0x57,
	0xd6, 0x48, 0x94, 0x08, 0x71, 0x50, 0xf1, 0x6f, 0xb4, 0xa0, 0x02, 0x8f, 0xda, 0x55, 0x96, 0xb4,
	0x93, 0x30, 0x21, 0x1f, 0xba, 0x43, 0xe4, 0xfa, 0xe3, 0x7c, 0xb9, 0x4a, 0x5d, 0x5b, 0x5d, 0x58,
	0x22, 0x87, 0x7f, 0x24, 0x14, 0xd7, 0x2c, 0xeb, 0xe0, 0xc9, 0x98, 0xdc, 0xd8, 0x67, 0xaf, 0x0e,
	0xd3, 0xd4, 0x0d, 0x38, 0xa5, 0xa6, 0xce, 0x3c, 0x2f, 0xf7, 0x50, 0x0f, 0x7a, 0x78, 0x32, 0x8b,
	0x2b, 0x23, 0x16, 0x70, 0x82, 0x2f, 0xbb, 0xa7, 0x5b, 0x04, 0xf8, 0xfe, 0x22, 0x2c, 0x82, 0x9f,
	0x0b, 0xc5, 0x07, 0x17, 0x34, 0xd3, 0x52, 0x16, 0xd3, 0x77, 0x50, 0xb2, 0xc4, 0xea, 0x94, 0x50,
	0x0c, 0xb6, 0xfb, 0xe0, 0x0b, 0x25, 0x5f, 0x84, 0xe2, 0x24, 0x0c, 0xd8, 0x63, 0xc3, 0x4c, 0xe3,
	0x72, 0x89, 0xfa, 0x61, 0x80, 0x24, 0xd0, 0xb2, 0x18, 0xa1, 0x4b, 0xcd, 0x55, 0x81, 0x9e, 0x22,
	0x75, 0x14, 0x2c, 0x01, 0x7f, 0xae, 0xac, 0xef, 0x28, 0xe7, 0x4f, 0xe1, 0xf0, 0xab, 0x7f, 0xca,
	0x97, 0xc5, 0x7c, 0x0c, 0xee, 0x2a, 0xf9, 0x48, 0xe1, 0x7c, 0x14, 0x23, 0xa7, 0xe4, 0x6d, 0x09,
	0xc5, 0x3f, 0x3d, 0xf0, 0x64, 0x04, 0x66, 0x5c, 0x47, 0xd0, 0x0e, 0x83, 0xe2, 0xb3, 0x12, 0x75,
	0x70, 0x4a, 0x28, 0x78, 0xaa, 0xfb, 0xb8, 0x42, 0x0d, 0x7f, 0xfc, 0x71, 0x4f, 0x0b, 0xe5, 0x2d,
	0x75, 0x3b, 0x5c, 0xe4, 0x25, 0x73, 0xff, 0x99, 0x50, 0x6a, 0xb6, 0xa1, 0x65, 0x06, 0xac, 0x46,
	0xc2, 0xf9, 0x18, 0x88, 0x22, 0x2d, 0xb0, 0xfa, 0x42, 0xb3, 0xa6, 0xb9, 0xa4, 0x01, 0x61, 0x61,
	0x9e, 0x11, 0xca, 0xcb, 0x76, 0xc0, 0xcc, 0x48, 0x12, 0xc8, 0x08, 0xce, 0x0a, 0xd5, 0x45, 0x75,
	0x8b, 0x94, 0xe2, 0xab, 0x9e, 0xe3, 0x2f, 0xea, 0xf3, 0x9a, 0x45, 0x9a, 0x22, 0x0f, 0x95, 0xdb,
	0x7d, 0x42, 0x28, 0x3e, 0xda, 0xd1, 0xac, 0x96, 0xf2, 0xc1, 0x85, 0xa0, 0x88, 0xe6, 0xae, 0x53,
	0x56, 0x67, 0x64, 0xd8, 0x27, 0x63, 0xf4, 0xaa, 0xad, 0x56, 0x4f, 0xec, 0xba, 0x2e, 0x00, 0x15,
	0x5c, 0xe0, 0x4a, 0x21, 0xf2, 0x00, 0x3d, 0x6a, 0x31, 0x26, 0xd8, 0xff, 0x0f, 0x59, 0x49, 0xe2,
	0xb9, 0x51, 0xc1, 0xfe, 0x9f, 0x68, 0x26, 0xaf, 0x19, 0xdd, 0xdf, 0xd6, 0x2c, 0x55, 0x63, 0x38,
	0x7f, 0x0f, 0xcc, 0xab, 0x4f, 0x97, 0x91, 0xf1, 0xfb, 0xff, 0xdf, 0x71, 0x70, 0x96, 0x37, 0x03,
	0x04, 0x87, 0xc6, 0x4d, 0x70, 0x55, 0x68, 0x4a, 0xe5, 0xc5, 0x78, 0x01, 0xa6, 0x15, 0x74, 0xa6,
	0xa0, 0xfc, 0x46, 0x12, 0xb4, 0x28, 0xfc, 0x77, 0xc0, 0x84, 0x42, 0x42, 0x0d, 0x76, 0xff, 0x51,
	0x65, 0xcf, 0x8f, 0x80, 0xb3, 0x5f, 0x16, 0x21, 0x9e, 0x1b, 0x15, 0x58, 0xbf, 0xaa, 0xa5, 0x4d,
	0x91, 0xf4, 0xd5, 0x2d, 0x36, 0x41, 0xe7, 0x77, 0x2a, 0x66, 0xc8, 0x41, 0xb0, 0xf2, 0xa7, 0x95,
	0x2b, 0x40, 0x09, 0x8e, 0xaf, 0xfe, 0x94, 0xa6, 0x68, 0xf8, 0x36, 0x2b, 0x7f, 0x3d, 0xf7, 0x13,
	0xe0, 0xef, 0xcb, 0xa2, 0xcf, 0x73, 0x07, 0xc1, 0xbb, 0xf7, 0xc1, 0x33, 0xd5, 0xca, 0x3f, 0x08,
	0xc0, 0xbd, 0xfa, 0x53, 0x98, 0x23, 0xda, 0x57, 0x2d, 0xa8, 0x91, 0x21, 0xec, 0xab, 0xd6, 0x89,
	0x19, 0x66, 0xfd, 0x4c, 0xc5, 0x36, 0x34, 0x01, 0xa9, 0x57, 0xef, 0xc5, 0x1a, 0x2a, 0xfd, 0xbf,
	0xb8, 0x09, 0x4e, 0xf3, 0xfa, 0xa7, 0x04, 0xa2, 0xbf, 0x52, 0x31, 0x2f, 0x25, 0xc8, 0xf3, 0xd5,
	0xc5, 0x69, 0x00, 0x35, 0x5f, 0x3d, 0x2c, 0x9b, 0xb0, 0xe5, 0xdb, 0xe0, 0xbc, 0x8c, 0x5e, 0x0a,
	0x26, 0x5f, 0xb5, 0x32, 0x4d, 0xd1, 0xe3, 0xef, 0xc9, 0x46, 0xaa, 0x86, 0x8b, 0x7f, 0x5a, 0x59,
	0xd8, 0x23, 0xe2, 0xc3, 0x4b, 0x67, 0x40, 0x03, 0x08, 0xff, 0x80, 0xd5, 0xd5, 0x9e, 0x33, 0x44,
	0x80, 0x9f, 0x91, 0x7d, 0x95, 0x06, 0xc8, 0xf7, 0x06, 0x1e, 0x29, 0xc6, 0xfb, 0x62, 0xc5, 0x0a,
	0x30, 0x06, 0x75, 0x97, 0x7e, 0x27, 0x03, 0x14, 0x77, 0xe9, 0x72, 0xd3, 0xc3, 0xb6, 0x4f, 0xca,
	0x3e, 0xad, 0x12, 0xa7, 0xfd, 0x16, 0x38, 0x5b, 0xa7, 0x96, 0x01, 0xb3, 0x3f, 0x94, 0x0d, 0xdd,
	0x08, 0x89, 0xbd, 0x6a, 0xee, 0x8e, 0x02, 0xbd, 0x5e, 0x35, 0x1c, 0x0d, 0xb1, 0xd6, 0xa7, 0x2b,
	0xc6, 0x96, 0x01, 0xb8, 0xba, 0x74, 0x7c, 0x46, 0x68, 0xea, 0xb7, 0xc0, 0x99, 0x3a, 0xa7, 0x0c,
	0x3e, 0x5d, 0xba, 0xe9, 0xd4, 0x78, 0xe9, 0x52, 0xb9, 0x32, 0x80, 0xf4, 0xc5, 0xca, 0x31, 0x6f,
	0x8c, 0x88, 0x3e, 0x57, 0x79, 0x47, 0x31, 0x83, 0x40, 0x7f, 0x20, 0xd5, 0x67, 0x1a, 0xcc, 0x73,
	0x85, 0x92, 0x6a, 0x04, 0x39, 0x47, 0x15, 0xab, 0xf3, 0x80, 0xa8, 0xe6, 0x77, 0xa5, 0xfa, 0x54,
	0x01, 0x63, 0x2e, 0xd5, 0x0a, 0x0d, 0xb8, 0xe5, 0xd2, 0xd5, 0xa6, 0x07, 0x2a, 0x6f, 0x57, 0x4e,
	0x2b, 0x1d, 0x32, 0xf9, 0x8c, 0x42, 0x07, 0xe8, 0xa0, 0xc8, 0xef, 0x83, 0x4b, 0x0a, 0x1e, 0x39,
	0xf6, 0xb8, 0x74, 0x25, 0x34, 0x82, 0x8d, 0x4b, 0x7b, 0xd6, 0x80, 0x2e, 0x2e, 0x9d, 0x2c, 0x3d,
	0x9c, 0xb8, 0x74, 0xc1, 0xe9, 0xf0, 0xc3, 0xa5, 0xfd, 0x6a, 0x00, 0x0c, 0x7f, 0x2c, 0x9b, 0x01,
	0x53, 0x84, 0xf0, 0x87, 0xb2, 0x41, 0x19, 0x41, 0x82, 0xbf, 0xa8, 0x98, 0xda, 0xa3, 0x63, 0x80,
	0x3f, 0x97, 0x29, 0xae, 0x51, 0x40, 0xbf, 0xa5, 0x5d, 0x18, 0x09, 0xe5, 0x1b, 0xca, 0x34, 0xfc,
	0x68, 0xb0, 0xde, 0x0b, 0xb2, 0x6f, 0x6c, 0x80, 0xe3, 0xfd, 0x48, 0xba, 0x5f, 0x8d, 0x80, 0xbb,
	0xe7, 0x65, 0x7b, 0xa4, 0x19, 0xa9, 0xbb, 0x5f, 0xb9, 0x6b, 0x1c, 0x1c, 0x9a, 0x5b, 0xba, 0x6a,
	0x8c, 0xb0, 0xb8, 0xd5, 0x9c, 0x4d, 0xe0, 0xdb, 0x52, 0x4e, 0x23, 0xb4, 0xed, 0xd9, 0xca, 0xfb,
	0xb9, 0x11, 0xbc, 0xb6, 0x23, 0x33, 0x1c, 0x47, 0xc6, 0xd3, 0x96, 0x76, 0xda, 0x08, 0x40, 0x5b,
	0xba, 0xb6, 0x47, 0x42, 0xcc, 0x5e, 0xd0, 0xda, 0xae, 0x6a, 0x88, 0xec, 0x45, 0xbd, 0x0d, 0xab,
	0xc6, 0xc4, 0xae, 0x3e, 0x7a, 0x1d, 0x04, 0x04, 0xbb, 0x04, 0x48, 0x99, 0xfb, 0x69, 0xa8, 0xd7,
	0x01, 0x58, 0x34, 0x93, 0x63, 0x08, 0x73, 0x3d, 0x05, 0xce, 0xd5, 0xe5, 0x69, 0x71, 0xad, 0xa5,
	0x9f, 0xde, 0x08, 0xc8, 0x5a, 0xaa, 0x94, 0x46, 0x43, 0xae, 0x56, 0x88, 0x18, 0x05, 0xaa, 0x5a,
	0xda, 0x7f, 0x23, 0x6c, 0xea, 0x39, 0x99, 0xb5, 0xd8, 0x08, 0x46, 0x5d, 0x7d, 0xee, 0x3c, 0x20,
	0xfa, 0xb4, 0xf4, 0x34, 0x34, 0x85, 0x9b, 0x96, 0x2a, 0xd6, 0x66, 0x7c, 0x69, 0xe9, 0xa2, 0x3d,
	0x00, 0xa0, 0xb4, 0xf4, 0x48, 0x30, 0x43, 0x90, 0x96, 0xb2, 0x9a, 0x41, 0x46, 0x4b, 0x8f, 0xe1,
	0x51, 0x30, 0xa2, 0xbf, 0xac, 0x3c, 0x7a, 0x8c, 0x02, 0x0a, 0x2d, 0x55, 0x73, 0x23, 0xa1, 0x40,
	0x4b, 0x5b, 0x37, 0x84, 0x7d, 0x96, 0x2e, 0x16, 0x53, 0x9c, 0x67, 0xe9, 0x62, 0x69, 0x06, 0x76,
	0x96, 0xaa, 0x65, 0x03, 0x24, 0x67, 0xe9, 0xe9, 0x7d, 0x20, 0xe8, 0x66, 0xb7, 0xe2, 0x47, 0xf9,
	0x09, 0x58, 0xcd, 0x0a, 0x23, 0xc6, 0x04, 0x9c, 0x79, 0xa9, 0xf2, 0x6e, 0xf9, 0x93, 0xd0, 0x98,
	0xff, 0xdb, 0x18, 0xf8, 0x38, 0xde, 0x18, 0x6c, 0x71, 0xcf, 0xf1, 0xe7, 0xc1, 0x19, 0x52, 0x34,
	0x48, 0xf6, 0x06, 0x7f, 0x17, 0x7c, 0xc6, 0xff, 0x58, 0x06, 0x70, 0xf3, 0xf9, 0x40, 0x65, 0x79,
	0x8f, 0xdb, 0xe0, 0x53, 0x9e, 0x98, 0x85, 0x97, 0x7e, 0x5a, 0x86, 0x97, 0x96, 0x94, 0x77, 0xc0,
	0x29, 0x9e, 0x32, 0x46, 0x59, 0x8a, 0xe2, 0xb2, 0x68, 0xc3, 0x34, 0x4f, 0xda, 0x06, 0xa7, 0x79,
	0xd2, 0x14, 0x79, 0x28, 0x26, 0x79, 0x56, 0x42, 0xe5, 0x84, 0x98, 0xe6, 0x14, 0xb5, 0x86, 0xa3,
	0x2b, 0xc3, 0x0e, 0x2e, 0x83, 0x0b, 0x82, 0x88, 0x7a, 0xb8, 0xc1, 0x7d, 0x70, 0xb6, 0x46, 0x51,
	0xac, 0xd0, 0x62, 0x2b, 0xcb, 0x46, 0x3a, 0x05, 0x26, 0x6a, 0xf4, 0xa5, 0x35, 0x5c, 0xad, 0x5e,
	0x81, 0xbb, 0xf6, 0x7f, 0x8f, 0x83, 0x33, 0xe9, 0xc6, 0xfe, 0x37, 0x5b, 0x03, 0xa9, 0x43, 0x24,
	0x2d, 0xac, 0x4b, 0x86, 0xb7, 0xad, 0x71, 0x88, 0x28, 0xe8, 0x46, 0x70, 0x88, 0x34, 0x4b, 0x68,
	0x72, 0x88, 0x28, 0x24, 0xc8, 0x1c, 0x22, 0x0a, 0x52, 0x13, 0x87, 0x88, 0x82, 0xd5, 0xc0, 0x21,
	0xa2, 0xe0, 0x6c, 0x74, 0x88, 0x28, 0xf8, 0x0c, 0x1c, 0x22, 0x0a, 0xce, 0x91, 0x1c, 0x22, 0x0a,
	0x19, 0x3a, 0x87, 0x88, 0x82, 0x65, 0x04, 0x87, 0x88, 0x42, 0xc2, 0x68, 0x0e, 0x91, 0x46, 0x21,
	0x5a, 0x87, 0x88, 0x6a, 0xe5, 0x1f, 0xd0, 0x21, 0xa2, 0x12, 0x37, 0x8a, 0x43, 0x44, 0x2d, 0xc3,
	0xd0, 0x21, 0xa2, 0x5a, 0xf6, 0x7a, 0x87, 0x88, 0x72, 0xdd, 0x6a, 0x1c, 0x22, 0xaa, 0x95, 0x57,
	0x75, 0x88, 0xfc, 0xf3, 0x9b, 0xe0, 0x14, 0xa7, 0x7e, 0x78, 0x7f, 0x88, 0x20, 0x42, 0xee, 0x0f,
	0xa9, 0x93, 0x34, 0xfa, 0x43, 0xea, 0x2c, 0x7a, 0x7f, 0x88, 0x8c, 0x5e, 0xe5, 0x0f, 0x91, 0xd0,
	0x1a, 0xf9, 0x43, 0x94, 0x7c, 0x72, 0x7f, 0x88, 0x8c, 0x7c, 0x04, 0x7f, 0x48, 0x9d, 0x5d, 0xef,
	0x0f, 0x91, 0xd0, 0xeb, 0xfd, 0x21, 0x3a, 0x06, 0x95, 0x3f, 0x44, 0xc7, 0xa3, 0xf2, 0x87, 0xd4,
	0x79, 0x0c, 0xfd, 0x21, 0x75, 0x46, 0x33, 0x7f, 0x48, 0x9d, 0xaf, 0xd1, 0x1f, 0x22, 0x63, 0x51,
	0xfb, 0x43, 0xea, 0xd4, 0x0a, 0x7f, 0x48, 0x9d, 0xd0, 0xd4, 0x1f, 0x62, 0xc2, 0xa9, 0xf2, 0x87,
	0xd4, 0x79, 0x8d, 0xfc, 0x21, 0x12, 0xb6, 0x26, 0x7f, 0x88, 0x6c, 0xef, 0x9b, 0xf9, 0x43, 0xea,
	0x9c, 0x0a, 0x7f, 0x88, 0x44, 0x77, 0xe8, 0xfc, 0x21, 0x12, 0x72, 0xb9, 0x3f, 0x44, 0xa3, 0x60,
	0xf4, 0xfe, 0x10, 0xa5, 0x16, 0xd0, 0xfa, 0x43, 0x94, 0x5c, 0x2a, 0x7f, 0x88, 0x4e, 0x7b, 0xe8,
	0xfc, 0x21, 0x4d, 0x7c, 0x86, 0xfe, 0x10, 0x89, 0x18, 0xb5, 0x3f, 0x44, 0x41, 0xac, 0xf5, 0x87,
	0x68, 0xd4, 0x9b, 0xca, 0x1f, 0x22, 0x53, 0x3e, 0x2a, 0x7f, 0x88, 0x54, 0x07, 0x34, 0xf8, 0x43,
	0x14, 0x3c, 0x4a, 0x7f, 0x88, 0x44, 0x0d, 0x18, 0xf8, 0x43, 0xea, 0x5c, 0xcd, 0xfe, 0x90, 0x3a,
	0x4f, 0xa3, 0x3f, 0x44, 0xb2, 0x9b, 0xf5, 0xfe, 0x90, 0x3a, 0x43, 0xb3, 0x3f, 0x44, 0xaf, 0x69,
	0x1b, 0xfc, 0x21, 0xca, 0x2d, 0xd1, 0xe8, 0x0f, 0x51, 0x72, 0x1a, 0xfb, 0x43, 0x14, 0x9f, 0xda,
	0xdc, 0x1f, 0xa2, 0xd2, 0xcf, 0xe6, 0xfe, 0x10, 0x99, 0x96, 0x1e, 0xd1, 0x1f, 0x22, 0x51, 0xa2,
	0x46, 0xfe, 0x10, 0x99, 0xee, 0x33, 0xf4, 0x87, 0x48, 0x0e, 0x73, 0x13, 0x7f, 0x88, 0x64, 0xab,
	0x1c, 0xd0, 0x1f, 0x22, 0xd9, 0x3e, 0x86, 0xfe, 0x10, 0x05, 0xa7, 0x81, 0x3f, 0x44, 0xf6, 0xa9,
	0xcc, 0xfc, 0x21, 0x32, 0xce, 0x46, 0x7f, 0x88, 0x64, 0x27, 0x1e, 0xc0, 0x1f, 0x22, 0xdd, 0xcf,
	0x46, 0xfe, 0x10, 0xc9, 0xb2, 0x1a, 0xd1, 0x1f, 0xa2, 0x51, 0xee, 0x5a, 0x7f, 0x88, 0xce, 0xbc,
	0xd4, 0xfa, 0x43, 0x64, 0x86, 0xc8, 0xa8, 0xfe, 0x10, 0x99, 0x56, 0x39, 0x88, 0x3f, 0xc4, 0x4c,
	0x8e, 0xb9, 0x3f, 0xa4, 0x2e, 0xaf, 0xc9, 0x1f, 0xa2, 0x9c, 0xc6, 0x46, 0x7f, 0x48, 0x9d, 0x73,
	0x64, 0x7f, 0x88, 0x4c, 0xc4, 0x88, 0xfe, 0x10, 0x95, 0x35, 0xde, 0xec, 0x0f, 0x51, 0x58, 0xe6,
	0x0d, 0xfe, 0x90, 0x3a, 0xd7, 0x81, 0xfc, 0x21, 0x7a, 0x31, 0x0d, 0xfe, 0x10, 0x25, 0xb3, 0xde,
	0x1f, 0x22, 0x61, 0x3b, 0x90, 0x3f, 0xa4, 0x2e, 0xc7, 0xd8, 0x1f, 0xa2, 0x34, 0x4e, 0x9a, 0xfd,
	0x21, 0x32, 0xd6, 0x91, 0xfc, 0x21, 0x2a, 0x01, 0x26, 0xfe, 0x10, 0x89, 0x6e, 0x1e, 0xd1, 0x1f,
	0x22, 0x51, 0x94, 0xc6, 0xfe, 0x10, 0xe5, 0x9b, 0x88, 0x89, 0x3f, 0x44, 0x72, 0x94, 0x99, 0xf8,
	0x43, 0x24, 0x23, 0x36, 0xf2, 0x87, 0x48, 0x34, 0xda, 0x01, 0xfd, 0x21, 0xda, 0xa3, 0x65, 0x34,
	0x7f, 0x88, 0xe6, 0x02, 0xd7, 0xe4, 0x0f, 0x69, 0x38, 0x2d, 0x46, 0xf0, 0x87, 0xfc, 0xcb, 0x71,
	0x70, 0xda, 0xde, 0x7b, 0xfb, 0x6e, 0x67, 0xeb, 0x7b, 0xb1, 0x0c, 0xc7, 0x55, 0x70, 0xa9, 0xd0,
	0x78, 0x1e, 0x5a, 0x53, 0xd7, 0xe0, 0x78, 0x00, 0xce, 0x49, 0x68, 0x6c, 0x18, 0x45, 0xc3, 0x1a,
	0x8b, 0xcc, 0x09, 0xf0, 0x55, 0x99, 0x8c, 0x59, 0x63, 0x58, 0x0a, 0x42, 0x7b, 0x29, 0x77, 0x83,
	0x3c, 0x8b, 0x98, 0xeb, 0x60, 0x96, 0xe7, 0xc2, 0xc9, 0x98, 0x0a, 0xae, 0xe2, 0xd3, 0x3b, 0xe1,
	0x6a, 0x59, 0xcf, 0x6b, 0x81, 0x67, 0xc4, 0x19, 0xad, 0x1a, 0xc6, 0x2c, 0x62, 0x5e, 0x94, 0x79,
	0x03, 0x36, 0xda, 0x49, 0xdc, 0x5a, 0xa5, 0x24, 0xf3, 0x57, 0x65, 0x7e, 0x71, 0x8d, 0x2d, 0x46,
	0x04, 0x77, 0x35, 0x8e, 0x5d, 0x14, 0xb3, 0x0c, 0xf0, 0x87, 0x3c, 0x1f, 0x4e, 0xa0, 0xad, 0xf3,
	0x85, 0x1e, 0xfe, 0x84, 0x8c, 0xf3, 0xd8, 0xb0, 0xa4, 0x42, 0xc9, 0x39, 0x05, 0x26, 0x24, 0x9c,
	0x69, 0xec, 0xf6, 0x0a, 0xe3, 0xf9, 0xb8, 0xe8, 0x20, 0xfa, 0xaa, 0x4c, 0xb9, 0x95, 0x7c, 0x55,
	0xf6, 0xe6, 0xc1, 0x72, 0xbe, 0x17, 0x39, 0xa6, 0xf6, 0xdf, 0x8d, 0x83, 0x6b, 0xfc, 0x1a, 0xc1,
	0xf5, 0x2c, 0x3b, 0x7b, 0x1f, 0x76, 0xdf, 0x6c, 0xec, 0xff, 0xc0, 0x15, 0xdd, 0x9b, 0x05, 0x0f,
	0x44, 0xe1, 0xa4, 0xee, 0x4d, 0x27, 0xcc, 0xc8, 0xa5, 0x40, 0x5a, 0x81, 0x6f, 0x05, 0xbc, 0x30,
	0x61, 0x42, 0xcb, 0x59, 0x71, 0x1a, 0x60, 0x88, 0xa0, 0x2a, 0x31, 0x5b, 0x6a, 0xc2, 0xa2, 0x79,
	0x05, 0x1c, 0x13, 0xb9, 0xbd, 0x18, 0x15, 0x27, 0x4d, 0x9e, 0xf6, 0x61, 0x20, 0x95, 0x7d, 0x48,
	0xb2, 0x40, 0xbe, 0x06, 0xd1, 0xc8, 0xb2, 0xc3, 0x58, 0x3f, 0x86, 0xc3, 0x92, 0x15, 0xb5, 0x0a,
	0xa0, 0x49, 0x3b, 0x1e, 0xc2, 0x48, 0xda, 0x8a, 0x01, 0x8c, 0x4b, 0xf6, 0xe1, 0x26, 0xf0, 0x47,
	0x13, 0xdc, 0xd4, 0xfb, 0x23, 0xf5, 0xb5, 0xd6, 0xfe, 0x67, 0x87, 0xc0, 0xc5, 0xda, 0xb2, 0x49,
	0xb7, 0xdf, 0x0a, 0xc5, 0xe6, 0x65, 0xdd, 0xc0, 0x35, 0xe3, 0x24, 0xea, 0x06, 0xd7, 0x1e, 0xd0,
	0x91, 0xa3, 0xb5, 0xc8, 0x8d, 0x59, 0x5e, 0x74, 0x7d, 0xd4, 0xb8, 0xf6, 0x80, 0x8e, 0xdf, 0xf5,
	0xf1, 0x71, 0x3d, 0xac, 0x92, 0x21, 0xec, 0x9d, 0x0e, 0x98, 0xd4, 0xb3, 0x97, 0x7d, 0x25, 0x55,
	0x40, 0x0e, 0xd7, 0x57, 0x65, 0xfb, 0x6f, 0xc6, 0xc0, 0x39, 0x7e, 0x4e, 0xec, 0xbd, 0xdd, 0x37,
	0xdb, 0x65, 0xf9, 0x8c, 0x5b, 0xe0, 0x9a, 0xd8, 0x42, 0x71, 0x9d, 0x76, 0x25, 0x55, 0x34, 0xa6,
	0xc1, 0x79, 0x15, 0x21, 0x0c, 0xe4, 0xaa, 0xb7, 0xa6, 0x2b, 0x86, 0x2c, 0x61, 0x2c, 0x1b, 0x6f,
	0xe7, 0x3e, 0x98, 0xd8, 0xdb, 0xff, 0xe6, 0xfe, 0xd7, 0xdb, 0xdf, 0xbf, 0xdb, 0xdf, 0x1b, 0xec,
	0x6d, 0xee, 0xed, 0xdc, 0xdf, 0xdc, 0x7b, 0xfb, 0x6e, 0x6f, 0x77, 0x6b, 0x77, 0xf0, 0xbe, 0x73,
	0xd4, 0xde, 0x7b, 0xfb, 0x76, 0x6f, 0x37, 0x1a, 0x7b, 0x75, 0x74, 0x13, 0xff, 0xd7, 0xeb, 0xa3,
	0x98, 0x6c, 0xf6, 0x1f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x65, 0xec, 0x07, 0xe4, 0x60, 0x69, 0x04,
	0x00,
}
