// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fixsimmarketdataservice.proto

package fixsim

import (
	marketdata "github.com/ettec/open-trading-platform/go/market-data-gateway-fixsim/internal/fix/marketdata"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("fixsimmarketdataservice.proto", fileDescriptor_bce990059aaa8241) }

var fileDescriptor_bce990059aaa8241 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xb1, 0xcb, 0xc2, 0x30,
	0x10, 0x47, 0xbf, 0x2e, 0xfd, 0x20, 0x93, 0x76, 0x11, 0x0a, 0x5d, 0x9c, 0x3a, 0x05, 0xa9, 0xab,
	0x93, 0x8a, 0xe0, 0xe0, 0xd2, 0x2e, 0xe2, 0x76, 0xc6, 0x2b, 0x3d, 0x6c, 0x92, 0x9a, 0x5c, 0xa5,
	0x7f, 0xbe, 0xd0, 0x0c, 0x55, 0x74, 0x3b, 0xee, 0xbd, 0xe1, 0xfd, 0x44, 0x56, 0xd3, 0xe0, 0x49,
	0x6b, 0x70, 0x77, 0xe4, 0x1b, 0x30, 0x78, 0x74, 0x4f, 0x52, 0x28, 0x3b, 0x67, 0xd9, 0x26, 0xf3,
	0x2f, 0x90, 0xce, 0xa6, 0x57, 0x90, 0x0a, 0x2f, 0x16, 0x07, 0x1a, 0x2a, 0xd2, 0xa7, 0x91, 0xec,
	0x81, 0xa1, 0x0a, 0x72, 0x72, 0x16, 0xff, 0x3b, 0x6b, 0x0c, 0x2a, 0x4e, 0x32, 0x39, 0xe1, 0xb7,
	0xb3, 0xc4, 0x47, 0x8f, 0x9e, 0xd3, 0xfc, 0x37, 0x3e, 0x1a, 0xe5, 0x50, 0xa3, 0x61, 0x68, 0x4b,
	0xac, 0x1d, 0xfa, 0x66, 0xf9, 0x97, 0x47, 0xab, 0x68, 0xbb, 0x11, 0x85, 0xb2, 0x5a, 0x22, 0x33,
	0xaa, 0x46, 0xd6, 0x34, 0x84, 0x2c, 0x4f, 0xba, 0x6f, 0x81, 0xad, 0x93, 0x9f, 0xe5, 0xe8, 0x24,
	0x74, 0x74, 0x89, 0xc3, 0xdc, 0x6b, 0x3c, 0x96, 0xaf, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9,
	0x3e, 0xd2, 0xc3, 0xff, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixSimMarketDataServiceClient is the client API for FixSimMarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixSimMarketDataServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (FixSimMarketDataService_ConnectClient, error)
}

type fixSimMarketDataServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixSimMarketDataServiceClient(cc *grpc.ClientConn) FixSimMarketDataServiceClient {
	return &fixSimMarketDataServiceClient{cc}
}

func (c *fixSimMarketDataServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (FixSimMarketDataService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FixSimMarketDataService_serviceDesc.Streams[0], "/marketdataservice.FixSimMarketDataService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixSimMarketDataServiceConnectClient{stream}
	return x, nil
}

type FixSimMarketDataService_ConnectClient interface {
	Send(*marketdata.MarketDataRequest) error
	Recv() (*marketdata.MarketDataIncrementalRefresh, error)
	grpc.ClientStream
}

type fixSimMarketDataServiceConnectClient struct {
	grpc.ClientStream
}

func (x *fixSimMarketDataServiceConnectClient) Send(m *marketdata.MarketDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fixSimMarketDataServiceConnectClient) Recv() (*marketdata.MarketDataIncrementalRefresh, error) {
	m := new(marketdata.MarketDataIncrementalRefresh)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FixSimMarketDataServiceServer is the server API for FixSimMarketDataService service.
type FixSimMarketDataServiceServer interface {
	Connect(FixSimMarketDataService_ConnectServer) error
}

// UnimplementedFixSimMarketDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixSimMarketDataServiceServer struct {
}

func (*UnimplementedFixSimMarketDataServiceServer) Connect(srv FixSimMarketDataService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterFixSimMarketDataServiceServer(s *grpc.Server, srv FixSimMarketDataServiceServer) {
	s.RegisterService(&_FixSimMarketDataService_serviceDesc, srv)
}

func _FixSimMarketDataService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FixSimMarketDataServiceServer).Connect(&fixSimMarketDataServiceConnectServer{stream})
}

type FixSimMarketDataService_ConnectServer interface {
	Send(*marketdata.MarketDataIncrementalRefresh) error
	Recv() (*marketdata.MarketDataRequest, error)
	grpc.ServerStream
}

type fixSimMarketDataServiceConnectServer struct {
	grpc.ServerStream
}

func (x *fixSimMarketDataServiceConnectServer) Send(m *marketdata.MarketDataIncrementalRefresh) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fixSimMarketDataServiceConnectServer) Recv() (*marketdata.MarketDataRequest, error) {
	m := new(marketdata.MarketDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FixSimMarketDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketdataservice.FixSimMarketDataService",
	HandlerType: (*FixSimMarketDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _FixSimMarketDataService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fixsimmarketdataservice.proto",
}
